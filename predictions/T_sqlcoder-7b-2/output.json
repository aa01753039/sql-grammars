[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": {
      "id": 0,
      "db_id": "soccer_3",
      "question": "How many clubs are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many clubs are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many clubs are there?[/QUESTION]\n[SQL]\n SELECT COUNT(c.Club_ID) FROM club c;"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": {
      "id": 1,
      "db_id": "soccer_3",
      "question": "Count the number of clubs."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of clubs.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of clubs.[/QUESTION]\n[SQL]\n SELECT COUNT(c.Club_ID) FROM club c;"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": {
      "id": 2,
      "db_id": "soccer_3",
      "question": "List the name of clubs in ascending alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the name of clubs in ascending alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the name of clubs in ascending alphabetical order.[/QUESTION]\n[SQL]\n SELECT c.name FROM club c ORDER BY c.name ASC;"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": {
      "id": 3,
      "db_id": "soccer_3",
      "question": "What are the names of clubs, ordered alphabetically?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of clubs, ordered alphabetically?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of clubs, ordered alphabetically?[/QUESTION]\n[SQL]\n SELECT c.name FROM club c ORDER BY c.name ASC;"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": {
      "id": 4,
      "db_id": "soccer_3",
      "question": "What are the managers and captains of clubs?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the managers and captains of clubs?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the managers and captains of clubs?[/QUESTION]\n[SQL]\n SELECT c.manager, c.captain FROM club c;"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": {
      "id": 5,
      "db_id": "soccer_3",
      "question": "Return the managers and captains of all clubs."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the managers and captains of all clubs.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the managers and captains of all clubs.[/QUESTION]\n[SQL]\n SELECT c.manager, c.captain FROM club c;"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": {
      "id": 6,
      "db_id": "soccer_3",
      "question": "List the name of clubs whose manufacturer is not \"Nike\""
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the name of clubs whose manufacturer is not \"Nike\"[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the name of clubs whose manufacturer is not \"Nike\"[/QUESTION]\n[SQL]\n SELECT c.name FROM club c WHERE c.manufacturer not ilike '%Nike%';"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": {
      "id": 7,
      "db_id": "soccer_3",
      "question": "What are the names of clubs who do not have the manufacturer Nike?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of clubs who do not have the manufacturer Nike?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of clubs who do not have the manufacturer Nike?[/QUESTION]\n[SQL]\n SELECT c.name FROM club c WHERE c.manufacturer not ilike '%Nike%';"
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": {
      "id": 8,
      "db_id": "soccer_3",
      "question": "What are the names of players in ascending order of wins count?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of players in ascending order of wins count?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of players in ascending order of wins count?[/QUESTION]\n[SQL]\n SELECT p.name FROM player p ORDER BY p.wins_count ASC;"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": {
      "id": 9,
      "db_id": "soccer_3",
      "question": "Return the names of players in order of count of wins, ascending."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names of players in order of count of wins, ascending.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names of players in order of count of wins, ascending.[/QUESTION]\n[SQL]\n SELECT p.name FROM player p ORDER BY p.wins_count ASC;"
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": {
      "id": 10,
      "db_id": "soccer_3",
      "question": "What is the name of the player with the highest earnings?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the player with the highest earnings?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the player with the highest earnings?[/QUESTION]\n[SQL]\n SELECT p.name FROM player p ORDER BY p.earnings DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": {
      "id": 11,
      "db_id": "soccer_3",
      "question": "Return the name of the player who earns the most money."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the name of the player who earns the most money.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the name of the player who earns the most money.[/QUESTION]\n[SQL]\n SELECT p.name FROM player p ORDER BY p.earnings DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": {
      "id": 12,
      "db_id": "soccer_3",
      "question": "What are the distinct countries of players with earnings higher than 1200000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct countries of players with earnings higher than 1200000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct countries of players with earnings higher than 1200000?[/QUESTION]\n[SQL]\n SELECT p.country FROM player p WHERE p.earnings > 1200000 ORDER BY p.country NULLS LAST;"
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": {
      "id": 13,
      "db_id": "soccer_3",
      "question": "From which countries are players who make more than 1200000 from?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]From which countries are players who make more than 1200000 from?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]From which countries are players who make more than 1200000 from?[/QUESTION]\n[SQL]\n SELECT p.country FROM player p WHERE p.earnings > 1200000 ORDER BY p.country NULLS LAST;"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": {
      "id": 14,
      "db_id": "soccer_3",
      "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the country of the player with the highest earnings among players that have more than 2 win counts?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the country of the player with the highest earnings among players that have more than 2 win counts?[/QUESTION]\n[SQL]\n SELECT p.country FROM player p WHERE p.wins_count > 2 ORDER BY p.earnings DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": {
      "id": 15,
      "db_id": "soccer_3",
      "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Of players who have more than 2 wins, what is the country of the player who makes the most?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Of players who have more than 2 wins, what is the country of the player who makes the most?[/QUESTION]\n[SQL]\n SELECT p.country FROM player p WHERE p.wins_count > 2 ORDER BY p.earnings DESC LIMIT 1;"
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": {
      "id": 16,
      "db_id": "soccer_3",
      "question": "Show names of players and names of clubs they are in."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show names of players and names of clubs they are in.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show names of players and names of clubs they are in.[/QUESTION]\n[SQL]\n SELECT p.name AS player_name, c.name AS club_name FROM player p JOIN club c ON p.club_id = c.club_id;"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": {
      "id": 17,
      "db_id": "soccer_3",
      "question": "What are the names of players and the corresponding clubs that they are in?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of players and the corresponding clubs that they are in?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of players and the corresponding clubs that they are in?[/QUESTION]\n[SQL]\n SELECT p.name AS player_name, c.name AS club_name FROM player p JOIN club c ON p.club_id = c.club_id;"
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": {
      "id": 18,
      "db_id": "soccer_3",
      "question": "Show names of clubs that have players with more than 2 win counts."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show names of clubs that have players with more than 2 win counts.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show names of clubs that have players with more than 2 win counts.[/QUESTION]\n[SQL]\n SELECT c.name FROM club c JOIN player p ON c.club_id = p.club_id WHERE p.wins_count > 2;"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": {
      "id": 19,
      "db_id": "soccer_3",
      "question": "What are the names of clubs that have players who have won more than twice?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of clubs that have players who have won more than twice?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of clubs that have players who have won more than twice?[/QUESTION]\n[SQL]\n SELECT c.name FROM club c JOIN player p ON c.club_id = p.club_id WHERE p.wins_count > 2;"
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": {
      "id": 20,
      "db_id": "soccer_3",
      "question": "Show names of players from the club with manager \"Sam Allardyce\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show names of players from the club with manager \"Sam Allardyce\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show names of players from the club with manager \"Sam Allardyce\".[/QUESTION]\n[SQL]\n SELECT p.name FROM player p JOIN club c ON p.club_id = c.club_id WHERE c.manager ilike '%Sam%Allardyce%' ORDER BY p.name NULLS LAST;"
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": {
      "id": 21,
      "db_id": "soccer_3",
      "question": "What are the names of players from the club managed by Sam Allardyce?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of players from the club managed by Sam Allardyce?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of players from the club managed by Sam Allardyce?[/QUESTION]\n[SQL]\n SELECT p.name FROM player p JOIN club c ON p.club_id = c.club_id WHERE c.manager ilike '%Sam%Allardyce%' ORDER BY p.name NULLS LAST;"
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": {
      "id": 22,
      "db_id": "soccer_3",
      "question": "Show names of clubs in descending order of average earnings of players belonging."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show names of clubs in descending order of average earnings of players belonging.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show names of clubs in descending order of average earnings of players belonging.[/QUESTION]\n[SQL]\n SELECT c.name FROM club c JOIN player p ON c.club_id = p.club_id GROUP BY c.name ORDER BY AVG(p.earnings) DESC;"
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": {
      "id": 23,
      "db_id": "soccer_3",
      "question": "What are the names of clubs, ordered descending by the average earnings of players within each?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of clubs, ordered descending by the average earnings of players within each?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of clubs, ordered descending by the average earnings of players within each?[/QUESTION]\n[SQL]\n SELECT c.name, AVG(p.earnings) AS average_earnings FROM player p JOIN club c ON p.club_id = c.club_id GROUP BY c.name ORDER BY average_earnings DESC;"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": {
      "id": 24,
      "db_id": "soccer_3",
      "question": "Show different manufacturers and the number of clubs they are associated with."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show different manufacturers and the number of clubs they are associated with.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show different manufacturers and the number of clubs they are associated with.[/QUESTION]\n[SQL]\n SELECT c.manufacturer, COUNT(c.club_id) AS club_count FROM club c GROUP BY c.manufacturer ORDER BY club_count DESC NULLS LAST;"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": {
      "id": 25,
      "db_id": "soccer_3",
      "question": "How many clubs use each manufacturer?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many clubs use each manufacturer?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many clubs use each manufacturer?[/QUESTION]\n[SQL]\n SELECT c.manufacturer, COUNT(c.club_id) AS number_of_clubs FROM club c GROUP BY c.manufacturer ORDER BY number_of_clubs DESC NULLS LAST;"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": {
      "id": 26,
      "db_id": "soccer_3",
      "question": "Please show the most common manufacturer of clubs."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the most common manufacturer of clubs.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the most common manufacturer of clubs.[/QUESTION]\n[SQL]\n SELECT c.manufacturer, COUNT(c.manufacturer) AS frequency FROM club c GROUP BY c.manufacturer ORDER BY frequency DESC LIMIT 1;"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": {
      "id": 27,
      "db_id": "soccer_3",
      "question": "Which manufacturer is most common among clubs?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which manufacturer is most common among clubs?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which manufacturer is most common among clubs?[/QUESTION]\n[SQL]\n SELECT c.manufacturer, COUNT(c.manufacturer) AS COUNT FROM club c GROUP BY c.manufacturer ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": {
      "id": 28,
      "db_id": "soccer_3",
      "question": "List the manufacturers that are associated with more than one club."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the manufacturers that are associated with more than one club.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the manufacturers that are associated with more than one club.[/QUESTION]\n[SQL]\n SELECT c.manufacturer FROM club c GROUP BY c.manufacturer HAVING COUNT(c.club_id) > 1;"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": {
      "id": 29,
      "db_id": "soccer_3",
      "question": "Which manufacturers work for more than 1 club?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which manufacturers work for more than 1 club?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which manufacturers work for more than 1 club?[/QUESTION]\n[SQL]\n SELECT c.manufacturer FROM club c GROUP BY c.manufacturer HAVING COUNT(c.club_id) > 1;"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": {
      "id": 30,
      "db_id": "soccer_3",
      "question": "List the country that have more than one player."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the country that have more than one player.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the country that have more than one player.[/QUESTION]\n[SQL]\n SELECT p.country FROM player p GROUP BY p.country HAVING COUNT(p.player_id) > 1 ORDER BY p.country NULLS LAST;"
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": {
      "id": 31,
      "db_id": "soccer_3",
      "question": "Which countries have produced more than one player?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which countries have produced more than one player?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which countries have produced more than one player?[/QUESTION]\n[SQL]\n SELECT p.country, COUNT(p.player_id) AS player_count FROM player p GROUP BY p.country HAVING COUNT(p.player_id) > 1 ORDER BY player_count DESC NULLS LAST;"
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": {
      "id": 32,
      "db_id": "soccer_3",
      "question": "List the name of clubs that do not have players."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the name of clubs that do not have players.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the name of clubs that do not have players.[/QUESTION]\n[SQL]\n SELECT c.name FROM club c WHERE c.club_id NOT IN (SELECT p.club_id FROM player p);"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": {
      "id": 33,
      "db_id": "soccer_3",
      "question": "What are the names of clubs that do not have any players?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of clubs that do not have any players?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of clubs that do not have any players?[/QUESTION]\n[SQL]\n SELECT c.name FROM club c WHERE c.club_id NOT IN (SELECT p.club_id FROM player p);"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": {
      "id": 34,
      "db_id": "soccer_3",
      "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.[/QUESTION]\n[SQL]\n SELECT p.country FROM player p WHERE p.earnings > 1400000 ORDER BY p.country NULLS LAST;"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": {
      "id": 35,
      "db_id": "soccer_3",
      "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?[/QUESTION]\n[SQL]\n SELECT p.country FROM player p WHERE p.earnings > 1400000 AND p.earnings < 1100000 GROUP BY p.country;"
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": {
      "id": 36,
      "db_id": "soccer_3",
      "question": "What is the number of distinct countries of all players?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the number of distinct countries of all players?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the number of distinct countries of all players?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT p.country) FROM player p;"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": {
      "id": 37,
      "db_id": "soccer_3",
      "question": "How many different countries are players from?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different countries are players from?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different countries are players from?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT p.country) FROM player p;"
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": {
      "id": 38,
      "db_id": "soccer_3",
      "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the earnings of players from country \"Australia\" or \"Zimbabwe\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the earnings of players from country \"Australia\" or \"Zimbabwe\".[/QUESTION]\n[SQL]\n SELECT p.name, p.earnings FROM player p WHERE p.country IN ('Australia', 'Zimbabwe') ORDER BY p.earnings DESC NULLS LAST;"
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": {
      "id": 39,
      "db_id": "soccer_3",
      "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the earnings of players from either of the countries of Australia or Zimbabwe?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the earnings of players from either of the countries of Australia or Zimbabwe?[/QUESTION]\n[SQL]\n SELECT p.name, p.earnings FROM player p WHERE p.country ilike '%Australia%' OR p.country ilike '%Zimbabwe%';"
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": {
      "id": 40,
      "db_id": "e_commerce",
      "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.[/QUESTION]\n[SQL]\n SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(DISTINCT o.order_id) >= 3;"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": {
      "id": 41,
      "db_id": "e_commerce",
      "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?[/QUESTION]\n[SQL]\n SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(o.order_id) > 2 AND COUNT(DISTINCT oi.product_id) >= 3;"
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": {
      "id": 42,
      "db_id": "e_commerce",
      "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.[/QUESTION]\n[SQL]\n SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS product_count FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code HAVING COUNT(oi.product_id) > 0 ORDER BY o.order_id NULLS LAST;"
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": {
      "id": 43,
      "db_id": "e_commerce",
      "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For every order, how many products does it contain, and what are the orders' statuses and ids?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For every order, how many products does it contain, and what are the orders' statuses and ids?[/QUESTION]\n[SQL]\n SELECT o.order_id, COUNT(oi.product_id) AS number_of_products, o.order_status_code FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code;"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": {
      "id": 44,
      "db_id": "e_commerce",
      "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the dates of the orders which were placed at the earliest time or have more than 1 items.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the dates of the orders which were placed at the earliest time or have more than 1 items.[/QUESTION]\n[SQL]\n SELECT o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.date_order_placed HAVING COUNT(oi.order_item_id) > 1 ORDER BY o.date_order_placed ASC LIMIT 1;"
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": {
      "id": 45,
      "db_id": "e_commerce",
      "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the dates of the earliest order and the dates of all orders with more than 1 item?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the dates of the earliest order and the dates of all orders with more than 1 item?[/QUESTION]\n[SQL]\n SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.order_item_id) > 1 ORDER BY o.date_order_placed ASC LIMIT 1;"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": {
      "id": 46,
      "db_id": "e_commerce",
      "question": "Which customers did not make any orders? List the first name, middle initial and last name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which customers did not make any orders? List the first name, middle initial and last name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which customers did not make any orders? List the first name, middle initial and last name.[/QUESTION]\n[SQL]\n SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL;"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": {
      "id": 47,
      "db_id": "e_commerce",
      "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]WHat are the first and last names, and middle initials of all customers who did not make any orders?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]WHat are the first and last names, and middle initials of all customers who did not make any orders?[/QUESTION]\n[SQL]\n SELECT c.customer_first_name, c.customer_last_name, c.customer_middle_initial FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;"
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": {
      "id": 48,
      "db_id": "e_commerce",
      "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the id, name, price and color of the products which have not been ordered for at least twice?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the id, name, price and color of the products which have not been ordered for at least twice?[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(oi.order_item_id) >= 2);"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": {
      "id": 49,
      "db_id": "e_commerce",
      "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(oi.order_id) < 2);"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": {
      "id": 50,
      "db_id": "e_commerce",
      "question": "Which orders have at least 2 products on it? List the order id and date."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which orders have at least 2 products on it? List the order id and date.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which orders have at least 2 products on it? List the order id and date.[/QUESTION]\n[SQL]\n SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.order_item_id) >= 2;"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": {
      "id": 51,
      "db_id": "e_commerce",
      "question": "What are the ids and dates of the orders with at least two products?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids and dates of the orders with at least two products?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids and dates of the orders with at least two products?[/QUESTION]\n[SQL]\n SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.product_id) >= 2;"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": {
      "id": 52,
      "db_id": "e_commerce",
      "question": "Which product are listed in orders most frequently? List the id, product name and price."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which product are listed in orders most frequently? List the id, product name and price.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which product are listed in orders most frequently? List the id, product name and price.[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC LIMIT 1;"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": {
      "id": 53,
      "db_id": "e_commerce",
      "question": "What are the ids, names, and prices of all products that are ordered most frequently?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids, names, and prices of all products that are ordered most frequently?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids, names, and prices of all products that are ordered most frequently?[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC;"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": {
      "id": 54,
      "db_id": "e_commerce",
      "question": "Which order have the least sum of the product prices. List the order id and sum."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which order have the least sum of the product prices. List the order id and sum.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which order have the least sum of the product prices. List the order id and sum.[/QUESTION]\n[SQL]\n SELECT o.order_id, SUM(p.product_price) AS total_product_price FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_product_price ASC LIMIT 1;"
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": {
      "id": 55,
      "db_id": "e_commerce",
      "question": "What is the order that total cost the least , and how much is the total cost ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the order that total cost the least , and how much is the total cost ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the order that total cost the least , and how much is the total cost ?[/QUESTION]\n[SQL]\n SELECT o.order_id, SUM(oi.order_item_unit_price * oi.order_item_quantity) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id ORDER BY total_cost ASC LIMIT 1;"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": {
      "id": 56,
      "db_id": "e_commerce",
      "question": "What is the most popular payment method?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the most popular payment method?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the most popular payment method?[/QUESTION]\n[SQL]\n SELECT cp.payment_method_code, COUNT(*) AS COUNT FROM Customer_Payment_Methods cp GROUP BY cp.payment_method_code ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": {
      "id": 57,
      "db_id": "e_commerce",
      "question": "What is the payment method that most customers use?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the payment method that most customers use?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the payment method that most customers use?[/QUESTION]\n[SQL]\n SELECT cp.payment_method_code, COUNT(*) AS COUNT FROM Customer_Payment_Methods cp GROUP BY cp.payment_method_code ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": {
      "id": 58,
      "db_id": "e_commerce",
      "question": "How many number of products does each gender of customers buy? List the gender and the number"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many number of products does each gender of customers buy? List the gender and the number[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many number of products does each gender of customers buy? List the gender and the number[/QUESTION]\n[SQL]\n SELECT c.gender_code, COUNT(oi.product_id) AS product_count FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.gender_code ORDER BY product_count DESC NULLS LAST;"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": {
      "id": 59,
      "db_id": "e_commerce",
      "question": "How many products does each gender buy?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many products does each gender buy?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many products does each gender buy?[/QUESTION]\n[SQL]\n SELECT c.gender_code, COUNT(oi.product_id) AS total_products FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.gender_code ORDER BY total_products DESC NULLS LAST;"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": {
      "id": 60,
      "db_id": "e_commerce",
      "question": "How many orders has each gender of customers placed?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many orders has each gender of customers placed?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many orders has each gender of customers placed?[/QUESTION]\n[SQL]\n SELECT c.gender_code, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY number_of_orders DESC NULLS LAST;"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": {
      "id": 61,
      "db_id": "e_commerce",
      "question": "How many orders has each gender placed?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many orders has each gender placed?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many orders has each gender placed?[/QUESTION]\n[SQL]\n SELECT c.gender_code, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY number_of_orders DESC NULLS LAST;"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": {
      "id": 62,
      "db_id": "e_commerce",
      "question": "List the customers' first name, middle initial, last name and payment methods."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the customers' first name, middle initial, last name and payment methods.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the customers' first name, middle initial, last name and payment methods.[/QUESTION]\n[SQL]\n SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, cp.payment_method_code FROM Customers c JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id;"
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": {
      "id": 63,
      "db_id": "e_commerce",
      "question": "What are the first names, middle initials, last names, and payment methods of all customers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first names, middle initials, last names, and payment methods of all customers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first names, middle initials, last names, and payment methods of all customers?[/QUESTION]\n[SQL]\n SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, cp.payment_method_code FROM Customers c JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id;"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": {
      "id": 64,
      "db_id": "e_commerce",
      "question": "List the invoices' status, date and the date of shipment."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the invoices' status, date and the date of shipment.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the invoices' status, date and the date of shipment.[/QUESTION]\n[SQL]\n SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number;"
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": {
      "id": 65,
      "db_id": "e_commerce",
      "question": "What are the statuses, dates, and shipment dates for all invoices?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the statuses, dates, and shipment dates for all invoices?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the statuses, dates, and shipment dates for all invoices?[/QUESTION]\n[SQL]\n SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number;"
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": {
      "id": 66,
      "db_id": "e_commerce",
      "question": "List the names of the products being shipped and the corresponding shipment date."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of the products being shipped and the corresponding shipment date.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of the products being shipped and the corresponding shipment date.[/QUESTION]\n[SQL]\n SELECT p.product_name, s.shipment_date FROM Shipments s JOIN Order_Items oi ON s.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;"
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": {
      "id": 67,
      "db_id": "e_commerce",
      "question": "What are the names of the products tht have been shipped, and on what days were they shipped?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the products tht have been shipped, and on what days were they shipped?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the products tht have been shipped, and on what days were they shipped?[/QUESTION]\n[SQL]\n SELECT p.product_name, to_char(s.shipment_date, 'DD-MM-YYYY') AS shipment_date FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS varchar) = CAST(oi.product_id AS varchar) JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;"
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": {
      "id": 68,
      "db_id": "e_commerce",
      "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?[/QUESTION]\n[SQL]\n SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;"
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": {
      "id": 69,
      "db_id": "e_commerce",
      "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?[/QUESTION]\n[SQL]\n SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id WHERE oi.order_item_status_code ilike '%shipped%' ORDER BY oi.order_item_status_code NULLS LAST;"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": {
      "id": 70,
      "db_id": "e_commerce",
      "question": "What is the product name and the color of the ordered items which have been shipped?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the product name and the color of the ordered items which have been shipped?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the product name and the color of the ordered items which have been shipped?[/QUESTION]\n[SQL]\n SELECT p.product_name, p.product_color FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_item_status_code = 'shipped' ORDER BY p.product_name NULLS LAST;"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": {
      "id": 71,
      "db_id": "e_commerce",
      "question": "What are the names and colors of all products that have been shipped?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and colors of all products that have been shipped?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and colors of all products that have been shipped?[/QUESTION]\n[SQL]\n SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id WHERE EXISTS (SELECT 1 FROM Shipments s WHERE s.invoice_number = si.shipment_id);"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": {
      "id": 72,
      "db_id": "e_commerce",
      "question": "List all the distinct product names, price and descriptions which are bought by female customers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all the distinct product names, price and descriptions which are bought by female customers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all the distinct product names, price and descriptions which are bought by female customers.[/QUESTION]\n[SQL]\n SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'F' ORDER BY p.product_name NULLS LAST;"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": {
      "id": 73,
      "db_id": "e_commerce",
      "question": "What are the different names, prices, and descriptions for all products bought by female customers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different names, prices, and descriptions for all products bought by female customers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different names, prices, and descriptions for all products bought by female customers?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'F';"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": {
      "id": 74,
      "db_id": "e_commerce",
      "question": "What are invoices status of all the orders which have not been shipped?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are invoices status of all the orders which have not been shipped?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are invoices status of all the orders which have not been shipped?[/QUESTION]\n[SQL]\n SELECT i.invoice_status_code FROM Invoices i JOIN Orders o ON i.invoice_number = o.order_id WHERE o.order_status_code != 'shipped' ORDER BY i.invoice_status_code NULLS LAST;"
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": {
      "id": 75,
      "db_id": "e_commerce",
      "question": "What are the invoice statuses for all orderes that have not been shipped out yet?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the invoice statuses for all orderes that have not been shipped out yet?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the invoice statuses for all orderes that have not been shipped out yet?[/QUESTION]\n[SQL]\n SELECT i.invoice_status_code FROM Invoices i JOIN Orders o ON i.invoice_number = o.order_id WHERE o.order_status_code != 'shipped' ORDER BY i.invoice_status_code NULLS LAST;"
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": {
      "id": 76,
      "db_id": "e_commerce",
      "question": "What are the total cost of all the orders ? List the order id , date , and total cost ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the total cost of all the orders ? List the order id , date , and total cost .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the total cost of all the orders ? List the order id , date , and total cost .[/QUESTION]\n[SQL]\n SELECT o.order_id, o.date_order_placed, SUM(oi.product_price) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed ORDER BY o.order_id NULLS LAST;"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": {
      "id": 77,
      "db_id": "e_commerce",
      "question": "For each order, what is its id, date, and total amount paid?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each order, what is its id, date, and total amount paid?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each order, what is its id, date, and total amount paid?[/QUESTION]\n[SQL]\n SELECT o.order_id, o.date_order_placed, SUM(oi.product_price) AS total_amount FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed;"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": {
      "id": 78,
      "db_id": "e_commerce",
      "question": "How many customers have placed any order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customers have placed any order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customers have placed any order?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT o.customer_id) AS number_of_customers FROM Orders o;"
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": {
      "id": 79,
      "db_id": "e_commerce",
      "question": "How many different customers have ordered things?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different customers have ordered things?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different customers have ordered things?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT o.customer_id) AS number_of_customers FROM orders o;"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": {
      "id": 80,
      "db_id": "e_commerce",
      "question": "How many item states are there in the orders?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many item states are there in the orders?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many item states are there in the orders?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT oi.order_item_status_code) AS number_of_order_item_states FROM Order_Items oi;"
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": {
      "id": 81,
      "db_id": "e_commerce",
      "question": "How many different item status codes are there listed in ordered items?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different item status codes are there listed in ordered items?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different item status codes are there listed in ordered items?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT oi.order_item_status_code) AS number_of_status_codes FROM Order_Items oi;"
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": {
      "id": 82,
      "db_id": "e_commerce",
      "question": "How many different payment methods are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different payment methods are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different payment methods are there?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.payment_method_code) AS number_of_payment_methods FROM Customer_Payment_Methods c;"
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": {
      "id": 83,
      "db_id": "e_commerce",
      "question": "How many different payment methods can customers choose from?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different payment methods can customers choose from?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different payment methods can customers choose from?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT cp.payment_method_code) AS number_of_payment_methods FROM Customer_Payment_Methods cp;"
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": {
      "id": 84,
      "db_id": "e_commerce",
      "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the login names and passwords of the customers whose phone number have the prefix '+12'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the login names and passwords of the customers whose phone number have the prefix '+12'?[/QUESTION]\n[SQL]\n SELECT c.login_name, c.login_password FROM Customers c WHERE c.phone_number like '+12%';"
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": {
      "id": 85,
      "db_id": "e_commerce",
      "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the usernames and passwords of all customers whose phone number starts with '+12'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the usernames and passwords of all customers whose phone number starts with '+12'?[/QUESTION]\n[SQL]\n SELECT c.login_name, c.login_password FROM Customers c WHERE c.phone_number like '+12%';"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": {
      "id": 86,
      "db_id": "e_commerce",
      "question": "What are the product sizes of the products whose name has the substring 'Dell'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the product sizes of the products whose name has the substring 'Dell'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the product sizes of the products whose name has the substring 'Dell'?[/QUESTION]\n[SQL]\n SELECT p.product_size FROM Products p WHERE p.product_name ILIKE '%Dell%';"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": {
      "id": 87,
      "db_id": "e_commerce",
      "question": "What are the sizes of all products whose name includes the word 'Dell'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the sizes of all products whose name includes the word 'Dell'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the sizes of all products whose name includes the word 'Dell'?[/QUESTION]\n[SQL]\n SELECT p.product_size FROM Products p WHERE p.product_name ILIKE '%Dell%';"
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": {
      "id": 88,
      "db_id": "e_commerce",
      "question": "What are the product price and the product size of the products whose price is above average?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the product price and the product size of the products whose price is above average?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the product price and the product size of the products whose price is above average?[/QUESTION]\n[SQL]\n SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);"
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": {
      "id": 89,
      "db_id": "e_commerce",
      "question": "What are the prices and sizes of all products whose price is above the mean?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the prices and sizes of all products whose price is above the mean?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the prices and sizes of all products whose price is above the mean?[/QUESTION]\n[SQL]\n SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);"
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": {
      "id": 90,
      "db_id": "e_commerce",
      "question": "How many kinds of products have not been sold?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many kinds of products have not been sold?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many kinds of products have not been sold?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT p.product_id) AS number_of_products FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": {
      "id": 91,
      "db_id": "e_commerce",
      "question": "What is the number of products that have not been ordered yet?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the number of products that have not been ordered yet?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the number of products that have not been ordered yet?[/QUESTION]\n[SQL]\n SELECT COUNT(*) AS unordered_products FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi);"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": {
      "id": 92,
      "db_id": "e_commerce",
      "question": "How many customers do not have any payment method?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customers do not have any payment method?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customers do not have any payment method?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT cp.customer_id FROM Customer_Payment_Methods cp);"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": {
      "id": 93,
      "db_id": "e_commerce",
      "question": "How many customers do not have a listed payment method?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customers do not have a listed payment method?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customers do not have a listed payment method?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT cp.customer_id FROM Customer_Payment_Methods cp);"
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": {
      "id": 94,
      "db_id": "e_commerce",
      "question": "What are all the order status and all the dates of orders?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the order status and all the dates of orders?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the order status and all the dates of orders?[/QUESTION]\n[SQL]\n SELECT o.order_status_code, o.date_order_placed FROM Orders o;"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": {
      "id": 95,
      "db_id": "e_commerce",
      "question": "What are the status codes and dates placed for all of the orders?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the status codes and dates placed for all of the orders?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the status codes and dates placed for all of the orders?[/QUESTION]\n[SQL]\n SELECT o.order_status_code, o.date_order_placed FROM Orders o;"
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": {
      "id": 96,
      "db_id": "e_commerce",
      "question": "List the address, town and county information of the customers who live in the USA."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the address, town and county information of the customers who live in the USA.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the address, town and county information of the customers who live in the USA.[/QUESTION]\n[SQL]\n SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE c.country ILIKE '%USA%'"
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": {
      "id": 97,
      "db_id": "e_commerce",
      "question": "What are the addresses, towns, and county information for all customers who live in the United States?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the addresses, towns, and county information for all customers who live in the United States?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the addresses, towns, and county information for all customers who live in the United States?[/QUESTION]\n[SQL]\n SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE c.country = 'United States';"
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": {
      "id": 98,
      "db_id": "e_commerce",
      "question": "List all the pairs of buyer first names and product names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all the pairs of buyer first names and product names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all the pairs of buyer first names and product names.[/QUESTION]\n[SQL]\n SELECT c.customer_first_name, p.product_name FROM Customers AS c CROSS JOIN Products AS p;"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": {
      "id": 99,
      "db_id": "e_commerce",
      "question": "What are the first names of all buyers and what products did they buy? List them in pairs."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first names of all buyers and what products did they buy? List them in pairs.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first names of all buyers and what products did they buy? List them in pairs.[/QUESTION]\n[SQL]\n SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": {
      "id": 100,
      "db_id": "e_commerce",
      "question": "How many items are shipped?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many items are shipped?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many items are shipped?[/QUESTION]\n[SQL]\n SELECT COUNT(*) AS total_shipped_items FROM Shipment_Items si JOIN Order_Items oi ON si.order_item_id = oi.order_item_id;"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": {
      "id": 101,
      "db_id": "e_commerce",
      "question": "How many products have been shipped?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many products have been shipped?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many products have been shipped?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT p.product_id) AS total_shipped_products FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id;"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": {
      "id": 102,
      "db_id": "e_commerce",
      "question": "What is the product average price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the product average price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the product average price?[/QUESTION]\n[SQL]\n SELECT AVG(p.product_price) AS average_price FROM Products p;"
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": {
      "id": 103,
      "db_id": "e_commerce",
      "question": "How much do the products cost on average?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How much do the products cost on average?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How much do the products cost on average?[/QUESTION]\n[SQL]\n SELECT AVG(p.product_price) AS average_product_price FROM Products p;"
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": {
      "id": 104,
      "db_id": "e_commerce",
      "question": "What is the average price of the products being ordered?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average price of the products being ordered?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average price of the products being ordered?[/QUESTION]\n[SQL]\n SELECT AVG(p.product_price) AS average_product_price FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR);"
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": {
      "id": 105,
      "db_id": "e_commerce",
      "question": "What is the price of all products being ordered on average?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the price of all products being ordered on average?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the price of all products being ordered on average?[/QUESTION]\n[SQL]\n SELECT AVG(p.product_price) AS average_product_price FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR);"
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": {
      "id": 106,
      "db_id": "e_commerce",
      "question": "What are the email address, town and county of the customers who are of the least common gender?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the email address, town and county of the customers who are of the least common gender?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the email address, town and county of the customers who are of the least common gender?[/QUESTION]\n[SQL]\n SELECT c.email_address, c.town_city, c.county FROM Customers c GROUP BY c.email_address, c.town_city, c.county ORDER BY COUNT(c.gender_code) ASC LIMIT 1;"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": {
      "id": 107,
      "db_id": "e_commerce",
      "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?[/QUESTION]\n[SQL]\n SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(order_id) ASC LIMIT 1);"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": {
      "id": 108,
      "db_id": "e_commerce",
      "question": "List the order date of the orders who are placed by customers with at least 2 payment methods."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the order date of the orders who are placed by customers with at least 2 payment methods.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the order date of the orders who are placed by customers with at least 2 payment methods.[/QUESTION]\n[SQL]\n SELECT o.date_order_placed FROM Orders o JOIN Customer_Payment_Methods c ON o.customer_id = c.customer_id GROUP BY o.date_order_placed HAVING COUNT(DISTINCT c.payment_method_code) >= 2;"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": {
      "id": 109,
      "db_id": "e_commerce",
      "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the date of all orders that have been placed by customers with at least 2 payment methods?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the date of all orders that have been placed by customers with at least 2 payment methods?[/QUESTION]\n[SQL]\n SELECT o.date_order_placed FROM Orders o JOIN Customer_Payment_Methods cpm ON o.customer_id = cpm.customer_id GROUP BY o.date_order_placed HAVING COUNT(DISTINCT cpm.payment_method_code) >= 2;"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": {
      "id": 110,
      "db_id": "e_commerce",
      "question": "What is the most uncommon order status?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the most uncommon order status?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the most uncommon order status?[/QUESTION]\n[SQL]\n SELECT o.order_status_code FROM Orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) ASC LIMIT 1;"
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": {
      "id": 111,
      "db_id": "e_commerce",
      "question": "What is the least common order status?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the least common order status?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the least common order status?[/QUESTION]\n[SQL]\n SELECT o.order_status_code FROM Orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) ASC LIMIT 1;"
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": {
      "id": 112,
      "db_id": "e_commerce",
      "question": "For all the products sold for more than 3 times, list their id and description."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For all the products sold for more than 3 times, list their id and description.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For all the products sold for more than 3 times, list their id and description.[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) GROUP BY p.product_id, p.product_description HAVING COUNT(oi.order_item_id) > 3;"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": {
      "id": 113,
      "db_id": "e_commerce",
      "question": "For all products sold more than 3 times, what are their ids and descriptions?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For all products sold more than 3 times, what are their ids and descriptions?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For all products sold more than 3 times, what are their ids and descriptions?[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) GROUP BY p.product_id, p.product_description HAVING COUNT(oi.order_item_id) > 3;"
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": {
      "id": 114,
      "db_id": "e_commerce",
      "question": "List the invoice dates and ids of the invoices causing at least 2 shipments."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the invoice dates and ids of the invoices causing at least 2 shipments.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the invoice dates and ids of the invoices causing at least 2 shipments.[/QUESTION]\n[SQL]\n SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_date, i.invoice_number HAVING COUNT(s.shipment_id) >= 2;"
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": {
      "id": 115,
      "db_id": "e_commerce",
      "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the dates and ids of the invoices that are related to at least 2 shipments?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the dates and ids of the invoices that are related to at least 2 shipments?[/QUESTION]\n[SQL]\n SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_date, i.invoice_number HAVING COUNT(s.shipment_id) >= 2;"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": {
      "id": 116,
      "db_id": "e_commerce",
      "question": "what are all shipment tracking numbers and shipment dates?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]what are all shipment tracking numbers and shipment dates?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]what are all shipment tracking numbers and shipment dates?[/QUESTION]\n[SQL]\n SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s;"
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": {
      "id": 117,
      "db_id": "e_commerce",
      "question": "What are the tracking numbers and dates for all shipments listed?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the tracking numbers and dates for all shipments listed?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the tracking numbers and dates for all shipments listed?[/QUESTION]\n[SQL]\n SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s ORDER BY s.shipment_date NULLS LAST;"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": {
      "id": 118,
      "db_id": "e_commerce",
      "question": "What are the color, description and size of the products priced below the maximum price."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the color, description and size of the products priced below the maximum price.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the color, description and size of the products priced below the maximum price.[/QUESTION]\n[SQL]\n SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT MAX(p.product_price) FROM Products);"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": {
      "id": 119,
      "db_id": "e_commerce",
      "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the colors , descriptions , and sizes for all products that are not at the maximum price ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the colors , descriptions , and sizes for all products that are not at the maximum price ?[/QUESTION]\n[SQL]\n SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT MAX(product_price) FROM Products);"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": {
      "id": 120,
      "db_id": "bbc_channels",
      "question": "Return the names of directors who are older than the average age."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names of directors who are older than the average age.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names of directors who are older than the average age.[/QUESTION]\n[SQL]\n SELECT d.name FROM director d WHERE d.age > (SELECT AVG(d2.age) FROM director d2);"
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": {
      "id": 121,
      "db_id": "bbc_channels",
      "question": "Find the the name of the oldest director."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the the name of the oldest director.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the the name of the oldest director.[/QUESTION]\n[SQL]\n SELECT d.name FROM director d ORDER BY d.age ASC LIMIT 1;"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": {
      "id": 122,
      "db_id": "bbc_channels",
      "question": "How many channels have the word 'bbc' in their internet link?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many channels have the word 'bbc' in their internet link?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many channels have the word 'bbc' in their internet link?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM \"channel\" c WHERE c.internet ilike '%bbc%';"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": {
      "id": 123,
      "db_id": "bbc_channels",
      "question": "How many different digital terrestrial channels are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different digital terrestrial channels are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different digital terrestrial channels are there?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.Digital_terrestrial_channel) FROM channel c;"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": {
      "id": 124,
      "db_id": "bbc_channels",
      "question": "List all program titles in the order of starting year. List the most recent one first."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all program titles in the order of starting year. List the most recent one first.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all program titles in the order of starting year. List the most recent one first.[/QUESTION]\n[SQL]\n SELECT p.title FROM program p ORDER BY p.start_year DESC;"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": {
      "id": 125,
      "db_id": "bbc_channels",
      "question": "Which director is in charge of the most programs?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which director is in charge of the most programs?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which director is in charge of the most programs?[/QUESTION]\n[SQL]\n SELECT d.name, COUNT(p.program_id) AS program_count FROM program p JOIN director d ON p.director_id = d.director_id GROUP BY d.name ORDER BY program_count DESC LIMIT 1;"
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": {
      "id": 126,
      "db_id": "bbc_channels",
      "question": "Find the name and age of the director who is in charge of the most programs?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and age of the director who is in charge of the most programs?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and age of the director who is in charge of the most programs?[/QUESTION]\n[SQL]\n SELECT d.name, d.age FROM director d JOIN (SELECT p.director_id, COUNT(p.program_id) AS program_count FROM program p GROUP BY p.director_id) AS pd ON d.director_id = pd.director_id ORDER BY program_count DESC LIMIT 1;"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": {
      "id": 127,
      "db_id": "bbc_channels",
      "question": "Return the title of the program that began most recently."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the title of the program that began most recently.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the title of the program that began most recently.[/QUESTION]\n[SQL]\n SELECT p.title FROM program p ORDER BY p.start_year DESC LIMIT 1;"
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": {
      "id": 128,
      "db_id": "bbc_channels",
      "question": "Find the name and website link of the channels that have more than one program."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and website link of the channels that have more than one program.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and website link of the channels that have more than one program.[/QUESTION]\n[SQL]\n SELECT c.name, row_number() OVER(PARTITION BY c.channel_id ORDER BY COUNT(p.program_id) DESC) AS rank FROM channel c JOIN program p ON c.channel_id = p.channel_id GROUP BY c.name, c.channel_id HAVING COUNT(p.program_id) > 1;"
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": {
      "id": 129,
      "db_id": "bbc_channels",
      "question": "Find the number of programs for each channel. Return the name of each channel as well."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of programs for each channel. Return the name of each channel as well.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of programs for each channel. Return the name of each channel as well.[/QUESTION]\n[SQL]\n SELECT c.name, COUNT(p.program_id) AS program_count FROM channel c JOIN program p ON c.channel_id = p.channel_id GROUP BY c.name ORDER BY program_count DESC NULLS LAST;"
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": {
      "id": 130,
      "db_id": "bbc_channels",
      "question": "Find the number of channels that do not run any program."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of channels that do not run any program.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of channels that do not run any program.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.Channel_ID) AS num_channels FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID WHERE p.Channel_ID IS NULL;"
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": {
      "id": 131,
      "db_id": "bbc_channels",
      "question": "What is the name of the director who is in the \"Dracula\" program?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the director who is in the \"Dracula\" program?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the director who is in the \"Dracula\" program?[/QUESTION]\n[SQL]\n SELECT d.name FROM program p JOIN director d ON p.director_id = d.director_id WHERE p.title ilike '%Dracula%';"
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": {
      "id": 132,
      "db_id": "bbc_channels",
      "question": "Find the name and internet web of the channel that is directed by the most directors."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and internet web of the channel that is directed by the most directors.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and internet web of the channel that is directed by the most directors.[/QUESTION]\n[SQL]\n SELECT c.name, c.internet FROM channel c JOIN director_admin da ON c.channel_id = da.channel_id GROUP BY c.name, c.internet ORDER BY COUNT(da.director_id) DESC LIMIT 1;"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": {
      "id": 133,
      "db_id": "bbc_channels",
      "question": "Find the name of the directors whose age is between 30 and 60."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the directors whose age is between 30 and 60.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the directors whose age is between 30 and 60.[/QUESTION]\n[SQL]\n SELECT d.name FROM director d WHERE d.age BETWEEN 30 AND 60;"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": {
      "id": 134,
      "db_id": "bbc_channels",
      "question": "give me the name of channels that have both a director younger than 40 and a director older than 60."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]give me the name of channels that have both a director younger than 40 and a director older than 60.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]give me the name of channels that have both a director younger than 40 and a director older than 60.[/QUESTION]\n[SQL]\n SELECT DISTINCT c.name FROM channel c JOIN program p ON c.channel_id = p.channel_id JOIN director d ON p.director_id = d.director_id WHERE d.age > 60 AND EXTRACT(YEAR FROM CURRENT_DATE) - d.age < 40 GROUP BY c.name HAVING COUNT(DISTINCT CASE WHEN d.age > 60 THEN p.program_id END) >= 2;"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": {
      "id": 135,
      "db_id": "bbc_channels",
      "question": "Find the id and name of the channel that is not directed by Hank Baskett."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the id and name of the channel that is not directed by Hank Baskett.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the id and name of the channel that is not directed by Hank Baskett.[/QUESTION]\n[SQL]\n SELECT c.channel_id, c.name FROM channel c JOIN program p ON c.channel_id = p.channel_id WHERE p.director_id NOT IN (SELECT director_id FROM director WHERE name ilike '%Hank%Baskett%') ORDER BY c.name NULLS LAST;"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": {
      "id": 136,
      "db_id": "tv_shows",
      "question": "How many radios are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many radios are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many radios are there?[/QUESTION]\n[SQL]\n SELECT COUNT(r.Radio_ID) FROM radio r;"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": {
      "id": 137,
      "db_id": "tv_shows",
      "question": "List the transmitters of radios in ascending order of erp kw ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the transmitters of radios in ascending order of erp kw .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the transmitters of radios in ascending order of erp kw .[/QUESTION]\n[SQL]\n SELECT r.transmitter FROM radio r ORDER BY r.erp_kw ASC;"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": {
      "id": 138,
      "db_id": "tv_shows",
      "question": "What are the names and original air dates of tv shows?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and original air dates of tv shows?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and original air dates of tv shows?[/QUESTION]\n[SQL]\n SELECT t.tv_show_name, t.original_airdate FROM tv_show t;"
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": {
      "id": 139,
      "db_id": "tv_shows",
      "question": "List the station names of city channels whose affiliation is not \"ABC\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the station names of city channels whose affiliation is not \"ABC\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the station names of city channels whose affiliation is not \"ABC\".[/QUESTION]\n[SQL]\n SELECT c.station_name FROM city_channel c WHERE c.affiliation != 'ABC';"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": {
      "id": 140,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.[/QUESTION]\n[SQL]\n SELECT r.transmitter FROM radio r WHERE CAST(r.erp_kw AS integer) > 150 OR CAST(r.erp_kw AS integer) < 30;"
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": {
      "id": 141,
      "db_id": "tv_shows",
      "question": "What is the transmitter of the radio with the largest ERP_kW?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the transmitter of the radio with the largest ERP_kW?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the transmitter of the radio with the largest ERP_kW?[/QUESTION]\n[SQL]\n SELECT r.transmitter FROM radio r ORDER BY r.erp_kw DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": {
      "id": 142,
      "db_id": "tv_shows",
      "question": "What is the average ERP across all radios?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average ERP across all radios?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average ERP across all radios?[/QUESTION]\n[SQL]\n SELECT AVG(r.ERP_kW::int) AS average_erp FROM radio r;"
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": {
      "id": 143,
      "db_id": "tv_shows",
      "question": "Show the different affiliations of city channels and the number of city channels with each affiliation."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the different affiliations of city channels and the number of city channels with each affiliation.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the different affiliations of city channels and the number of city channels with each affiliation.[/QUESTION]\n[SQL]\n SELECT cc.affiliation, COUNT(cc.id) AS count FROM city_channel cc GROUP BY cc.affiliation ORDER BY count DESC NULLS LAST;"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": {
      "id": 144,
      "db_id": "tv_shows",
      "question": "Please show the most common affiliation for city channels."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the most common affiliation for city channels.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the most common affiliation for city channels.[/QUESTION]\n[SQL]\n SELECT cc.affiliation FROM city_channel cc GROUP BY cc.affiliation ORDER BY COUNT(cc.affiliation) DESC LIMIT 1;"
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": {
      "id": 145,
      "db_id": "tv_shows",
      "question": "List the affiliations shared by more than three city channels."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the affiliations shared by more than three city channels.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the affiliations shared by more than three city channels.[/QUESTION]\n[SQL]\n SELECT c.affiliation FROM city_channel c GROUP BY c.affiliation HAVING COUNT(c.id) > 3;"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": {
      "id": 146,
      "db_id": "tv_shows",
      "question": "Show the cities and station names of city channels in ascending alphabetical order of station name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the cities and station names of city channels in ascending alphabetical order of station name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the cities and station names of city channels in ascending alphabetical order of station name.[/QUESTION]\n[SQL]\n SELECT c.city, cc.station_name FROM city_channel cc JOIN city c ON cc.city = c.city ORDER BY cc.station_name ASC;"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": {
      "id": 147,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios and the cities of the channels they are associated with."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the transmitters of radios and the cities of the channels they are associated with.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the transmitters of radios and the cities of the channels they are associated with.[/QUESTION]\n[SQL]\n SELECT r.transmitter, cc.city FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id JOIN city_channel cc ON ccr.city_channel_id = cc.id;"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": {
      "id": 148,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.[/QUESTION]\n[SQL]\n SELECT r.transmitter, cc.station_name, CAST(r.erp_kw AS FLOAT) AS erp FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id JOIN city_channel cc ON ccr.city_channel_id = cc.id ORDER BY erp DESC;"
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": {
      "id": 149,
      "db_id": "tv_shows",
      "question": "Show the transmitters of the radios and the number of city channels they are associated with."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the transmitters of the radios and the number of city channels they are associated with.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the transmitters of the radios and the number of city channels they are associated with.[/QUESTION]\n[SQL]\n SELECT r.transmitter, COUNT(ccr.city_channel_id) AS channel_count FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id GROUP BY r.transmitter ORDER BY channel_count DESC NULLS LAST;"
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": {
      "id": 150,
      "db_id": "tv_shows",
      "question": "Show the distinct transmitters of radios that are not associated with any city channel."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the distinct transmitters of radios that are not associated with any city channel.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the distinct transmitters of radios that are not associated with any city channel.[/QUESTION]\n[SQL]\n SELECT DISTINCT r.transmitter FROM radio r LEFT JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id WHERE ccr.radio_id IS NULL;"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": {
      "id": 151,
      "db_id": "vehicle_driver",
      "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the model of the vehicle with maximum top speed whose power is higher than 6000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the model of the vehicle with maximum top speed whose power is higher than 6000?[/QUESTION]\n[SQL]\n SELECT v.model FROM vehicle v WHERE v.top_speed = (SELECT MAX(v2.top_speed) FROM vehicle v2 WHERE v2.power > 6000) ORDER BY v.model NULLS LAST;"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": {
      "id": 152,
      "db_id": "vehicle_driver",
      "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.[/QUESTION]\n[SQL]\n SELECT v.model FROM vehicle v WHERE v.power > 6000 ORDER BY v.top_speed DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": {
      "id": 153,
      "db_id": "vehicle_driver",
      "question": "What are the names of the drivers who are citizens of the 'United States'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the drivers who are citizens of the 'United States'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the drivers who are citizens of the 'United States'?[/QUESTION]\n[SQL]\n SELECT d.name FROM driver d WHERE d.citizenship ilike '%United States%';"
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": {
      "id": 154,
      "db_id": "vehicle_driver",
      "question": "Return the names of drivers with citizenship from the United States."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names of drivers with citizenship from the United States.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names of drivers with citizenship from the United States.[/QUESTION]\n[SQL]\n SELECT d.name FROM driver d WHERE d.citizenship ilike '%United States%';"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": {
      "id": 155,
      "db_id": "vehicle_driver",
      "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?[/QUESTION]\n[SQL]\n SELECT d.driver_id, COUNT(v.vehicle_id) AS total_vehicles FROM vehicle_driver vd JOIN vehicle v ON vd.vehicle_id = v.vehicle_id JOIN driver d ON vd.driver_id = d.driver_id GROUP BY d.driver_id ORDER BY total_vehicles DESC LIMIT 1;"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": {
      "id": 156,
      "db_id": "vehicle_driver",
      "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the id of the driver who has driven the most vehicles, and how many vehicles is this?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the id of the driver who has driven the most vehicles, and how many vehicles is this?[/QUESTION]\n[SQL]\n SELECT d.driver_id, COUNT(v.vehicle_id) AS vehicle_count FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id GROUP BY d.driver_id ORDER BY vehicle_count DESC LIMIT 1;"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": {
      "id": 157,
      "db_id": "vehicle_driver",
      "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?[/QUESTION]\n[SQL]\n SELECT MAX(v.power) AS max_power, AVG(v.power) AS average_power FROM vehicle v WHERE v.builder ILIKE '%Zhuzhou%';"
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": {
      "id": 158,
      "db_id": "vehicle_driver",
      "question": "Return the maximum and average power for the vehicles built by Zhuzhou."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the maximum and average power for the vehicles built by Zhuzhou.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the maximum and average power for the vehicles built by Zhuzhou.[/QUESTION]\n[SQL]\n SELECT MAX(v.power) AS max_power, AVG(v.power) AS average_power FROM vehicle v WHERE v.builder ILIKE '%Zhuzhou%';"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": {
      "id": 159,
      "db_id": "vehicle_driver",
      "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the id of the vehicle driven for the least times for the vehicles ever used?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the id of the vehicle driven for the least times for the vehicles ever used?[/QUESTION]\n[SQL]\n SELECT v.Vehicle_ID FROM vehicle v JOIN (SELECT v.Vehicle_ID, COUNT(*) AS num_drivers FROM vehicle_driver v GROUP BY v.Vehicle_ID ORDER BY num_drivers ASC LIMIT 1) AS m ON v.Vehicle_ID = m.Vehicle_ID;"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": {
      "id": 160,
      "db_id": "vehicle_driver",
      "question": "Return the id of the vehicle that has been driven the fewest times."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the id of the vehicle that has been driven the fewest times.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the id of the vehicle that has been driven the fewest times.[/QUESTION]\n[SQL]\n SELECT v.vehicle_id FROM vehicle v JOIN (SELECT d.vehicle_id, COUNT(*) AS num_drivers FROM driver d GROUP BY d.vehicle_id ORDER BY num_drivers ASC LIMIT 1) AS m ON v.vehicle_id = m.vehicle_id;"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": {
      "id": 161,
      "db_id": "vehicle_driver",
      "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the top speed and power of the vehicle manufactured in the year of 1996?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the top speed and power of the vehicle manufactured in the year of 1996?[/QUESTION]\n[SQL]\n SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = '1996';"
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": {
      "id": 162,
      "db_id": "vehicle_driver",
      "question": "Return the top speed and power of the vehicle that was built in the year 1996."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the top speed and power of the vehicle that was built in the year 1996.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the top speed and power of the vehicle that was built in the year 1996.[/QUESTION]\n[SQL]\n SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = '1996' ORDER BY v.top_speed DESC, v.power DESC LIMIT 1;"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": {
      "id": 163,
      "db_id": "vehicle_driver",
      "question": "What are the build year, model name and builder of the vehicles?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the build year, model name and builder of the vehicles?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the build year, model name and builder of the vehicles?[/QUESTION]\n[SQL]\n SELECT v.build_year, v.model, v.builder FROM vehicle v;"
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": {
      "id": 164,
      "db_id": "vehicle_driver",
      "question": "Give the build year, model, and builder of each vehicle."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the build year, model, and builder of each vehicle.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the build year, model, and builder of each vehicle.[/QUESTION]\n[SQL]\n SELECT v.build_year, v.model, v.builder FROM vehicle v;"
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": {
      "id": 165,
      "db_id": "vehicle_driver",
      "question": "How many drivers have driven vehicles built in 2012?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many drivers have driven vehicles built in 2012?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many drivers have driven vehicles built in 2012?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT v.driver_id) AS number_of_drivers FROM vehicle v WHERE v.build_year = '2012';"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": {
      "id": 166,
      "db_id": "vehicle_driver",
      "question": "Count the number of different drivers who have driven vehicles built in 2012."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of different drivers who have driven vehicles built in 2012.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of different drivers who have driven vehicles built in 2012.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = '2012';"
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": {
      "id": 167,
      "db_id": "vehicle_driver",
      "question": "How many drivers have raced in 'NASCAR'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many drivers have raced in 'NASCAR'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many drivers have raced in 'NASCAR'?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT d.driver_id) FROM driver d WHERE d.racing_series ilike '%NASCAR%';"
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": {
      "id": 168,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers who have raced in NASCAR."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of drivers who have raced in NASCAR.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of drivers who have raced in NASCAR.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT d.driver_id) FROM driver d WHERE d.racing_series ilike '%NASCAR%';"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": {
      "id": 169,
      "db_id": "vehicle_driver",
      "question": "What is the average top speed of vehicles?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average top speed of vehicles?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average top speed of vehicles?[/QUESTION]\n[SQL]\n SELECT AVG(v.top_speed) AS average_top_speed FROM vehicle v;"
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": {
      "id": 170,
      "db_id": "vehicle_driver",
      "question": "Return the average top speed across all vehicles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the average top speed across all vehicles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the average top speed across all vehicles.[/QUESTION]\n[SQL]\n SELECT AVG(v.top_speed) AS average_top_speed FROM vehicle v;"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": {
      "id": 171,
      "db_id": "vehicle_driver",
      "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct driver names who have driven vehicles with power more than 5000 ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct driver names who have driven vehicles with power more than 5000 ?[/QUESTION]\n[SQL]\n SELECT d.name FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000;"
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": {
      "id": 172,
      "db_id": "vehicle_driver",
      "question": "Return the names of drivers who have driven vehicles with power over 5000."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names of drivers who have driven vehicles with power over 5000.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names of drivers who have driven vehicles with power over 5000.[/QUESTION]\n[SQL]\n SELECT d.name FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000;"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": {
      "id": 173,
      "db_id": "vehicle_driver",
      "question": "Which car models have total production larger than 100 or top speed higher than 150?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which car models have total production larger than 100 or top speed higher than 150?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which car models have total production larger than 100 or top speed higher than 150?[/QUESTION]\n[SQL]\n SELECT v.model FROM vehicle v WHERE CAST(v.total_production AS INT) > 100 OR v.top_speed > 150 ORDER BY v.model NULLS LAST;"
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": {
      "id": 174,
      "db_id": "vehicle_driver",
      "question": "Give the models of cars that have a total production of over 100 or a top speed over 150."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the models of cars that have a total production of over 100 or a top speed over 150.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the models of cars that have a total production of over 100 or a top speed over 150.[/QUESTION]\n[SQL]\n SELECT v.model FROM vehicle v WHERE CAST(v.total_production AS INT) > 100 OR v.top_speed > 150;"
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": {
      "id": 175,
      "db_id": "vehicle_driver",
      "question": "What are the model names and build year of the cars with 'DJ' in its model name?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the model names and build year of the cars with 'DJ' in its model name?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the model names and build year of the cars with 'DJ' in its model name?[/QUESTION]\n[SQL]\n SELECT v.model, v.build_year FROM vehicle v WHERE v.model ilike '%DJ%';"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": {
      "id": 176,
      "db_id": "vehicle_driver",
      "question": "Return the model and build year of cars that include \"DJ\" in their model names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the model and build year of cars that include \"DJ\" in their model names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the model and build year of cars that include \"DJ\" in their model names.[/QUESTION]\n[SQL]\n SELECT v.model, v.build_year FROM vehicle v WHERE v.model ilike '%DJ%';"
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": {
      "id": 177,
      "db_id": "vehicle_driver",
      "question": "What are the models which have not been driven by any drivers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the models which have not been driven by any drivers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the models which have not been driven by any drivers?[/QUESTION]\n[SQL]\n SELECT v.model FROM vehicle v WHERE v.model NOT IN (SELECT DISTINCT vd.model FROM vehicle_driver vd);"
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": {
      "id": 178,
      "db_id": "vehicle_driver",
      "question": "Return the models of vehicles that have never been driven."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the models of vehicles that have never been driven.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the models of vehicles that have never been driven.[/QUESTION]\n[SQL]\n SELECT v.model FROM vehicle v WHERE v.vehicle_id NOT IN (SELECT vd.vehicle_id FROM vehicle_driver vd);"
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": {
      "id": 179,
      "db_id": "vehicle_driver",
      "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.[/QUESTION]\n[SQL]\n SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE EXISTS (SELECT 1 FROM driver d WHERE d.driver_id = vd.driver_id AND d.name != 'John') OR v.builder = 'Ziyang' GROUP BY v.vehicle_id, v.model HAVING COUNT(DISTINCT vd.driver_id) >= 2"
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": {
      "id": 180,
      "db_id": "vehicle_driver",
      "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.[/QUESTION]\n[SQL]\n SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id GROUP BY v.vehicle_id, v.model HAVING COUNT(DISTINCT vd.driver_id) >= 2 OR v.builder = 'Ziyang' ORDER BY v.vehicle_id NULLS LAST;"
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": {
      "id": 181,
      "db_id": "vehicle_driver",
      "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?[/QUESTION]\n[SQL]\n SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE EXISTS (SELECT 1 FROM driver d WHERE d.name = 'Jeff Gordon' AND d.driver_id = vd.driver_id) OR (SELECT COUNT(DISTINCT vd.driver_id) FROM vehicle_driver WHERE vehicle_id = v.vehicle_id) > 2;"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": {
      "id": 182,
      "db_id": "vehicle_driver",
      "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.[/QUESTION]\n[SQL]\n SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id JOIN driver d ON vd.driver_id = d.driver_id WHERE (SELECT COUNT(DISTINCT vd.driver_id) FROM vehicle_driver WHERE vehicle_id = v.vehicle_id) > 2 OR d.name ILIKE '%Jeff%Gordon%' ORDER BY v.vehicle_id NULLS LAST;"
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": {
      "id": 183,
      "db_id": "vehicle_driver",
      "question": "How many vehicles have maximum top speed?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many vehicles have maximum top speed?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many vehicles have maximum top speed?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM \"vehicle\" v WHERE v.top_speed = (SELECT MAX(v2.top_speed) FROM \"vehicle\" v2);"
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": {
      "id": 184,
      "db_id": "vehicle_driver",
      "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of vehicles that have a top speed equal to the maximum across all vehicles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of vehicles that have a top speed equal to the maximum across all vehicles.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM \"vehicle\" v WHERE v.top_speed = (SELECT MAX(v2.top_speed) FROM \"vehicle\" v2);"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": {
      "id": 185,
      "db_id": "vehicle_driver",
      "question": "Show all driver names in the alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all driver names in the alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all driver names in the alphabetical order.[/QUESTION]\n[SQL]\n SELECT d.name FROM driver d ORDER BY d.name ASC;"
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": {
      "id": 186,
      "db_id": "vehicle_driver",
      "question": "What are the names of drivers, returned in alphbetical order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of drivers, returned in alphbetical order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of drivers, returned in alphbetical order?[/QUESTION]\n[SQL]\n SELECT d.name FROM driver d ORDER BY d.name ASC;"
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": {
      "id": 187,
      "db_id": "vehicle_driver",
      "question": "How many drivers have been racing in each racing series?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many drivers have been racing in each racing series?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many drivers have been racing in each racing series?[/QUESTION]\n[SQL]\n SELECT d.Racing_Series, COUNT(DISTINCT vd.Driver_ID) AS Driver_Count FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID GROUP BY d.Racing_Series ORDER BY Driver_Count DESC NULLS LAST;"
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": {
      "id": 188,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers that have raced in each series."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of drivers that have raced in each series.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of drivers that have raced in each series.[/QUESTION]\n[SQL]\n SELECT d.Racing_Series, COUNT(DISTINCT vd.Driver_ID) AS Driver_Count FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID GROUP BY d.Racing_Series ORDER BY Driver_Count DESC NULLS LAST;"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": {
      "id": 189,
      "db_id": "vehicle_driver",
      "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?[/QUESTION]\n[SQL]\n SELECT d.name, d.citizenship FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.model ilike '%DJ1%';"
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": {
      "id": 190,
      "db_id": "vehicle_driver",
      "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.[/QUESTION]\n[SQL]\n SELECT d.name, d.citizenship FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.model ilike '%DJ1%';"
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": {
      "id": 191,
      "db_id": "vehicle_driver",
      "question": "How many drivers have not driven any cars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many drivers have not driven any cars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many drivers have not driven any cars?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT d.driver_id) FROM driver d LEFT JOIN vehicle_driver vd ON d.driver_id = vd.driver_id WHERE vd.driver_id IS NULL"
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": {
      "id": 192,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers who have not driven any vehicles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of drivers who have not driven any vehicles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of drivers who have not driven any vehicles.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT d.driver_id) FROM driver d LEFT JOIN vehicle_driver vd ON d.driver_id = vd.driver_id WHERE vd.driver_id IS NULL;"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": {
      "id": 193,
      "db_id": "online_exams",
      "question": "How many exams are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many exams are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many exams are there?[/QUESTION]\n[SQL]\n SELECT COUNT(e.exam_id) FROM exams e;"
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": {
      "id": 194,
      "db_id": "online_exams",
      "question": "Count the number of exams."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of exams.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of exams.[/QUESTION]\n[SQL]\n SELECT COUNT(e.exam_id) FROM exams e;"
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": {
      "id": 195,
      "db_id": "online_exams",
      "question": "List the distinct subject code of exams in ascending alphabetical order ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the distinct subject code of exams in ascending alphabetical order .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the distinct subject code of exams in ascending alphabetical order .[/QUESTION]\n[SQL]\n SELECT DISTINCT e.subject_code FROM exams e ORDER BY e.subject_code ASC;"
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": {
      "id": 196,
      "db_id": "online_exams",
      "question": "Give me an alphabetically ordered list of the distinct subject code for exams."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me an alphabetically ordered list of the distinct subject code for exams.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me an alphabetically ordered list of the distinct subject code for exams.[/QUESTION]\n[SQL]\n SELECT DISTINCT e.subject_code FROM exams e ORDER BY e.subject_code ASC;"
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": {
      "id": 197,
      "db_id": "online_exams",
      "question": "What are the names and dates of the exams with subject code that is not \"Database\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and dates of the exams with subject code that is not \"Database\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and dates of the exams with subject code that is not \"Database\"?[/QUESTION]\n[SQL]\n SELECT e.exam_name, e.exam_date FROM exams e WHERE e.subject_code not ilike '%Database%';"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": {
      "id": 198,
      "db_id": "online_exams",
      "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?[/QUESTION]\n[SQL]\n SELECT e.exam_date, e.exam_name FROM exams e WHERE e.subject_code != 'Database';"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": {
      "id": 199,
      "db_id": "online_exams",
      "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the dates of the exams with subject code containing the word \"data\", in descending order of dates.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the dates of the exams with subject code containing the word \"data\", in descending order of dates.[/QUESTION]\n[SQL]\n SELECT e.exam_date FROM exams e WHERE e.subject_code ilike '%data%' ORDER BY e.exam_date DESC;"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": {
      "id": 200,
      "db_id": "online_exams",
      "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.[/QUESTION]\n[SQL]\n SELECT e.exam_date FROM exams e WHERE e.subject_code ilike '%data%' ORDER BY e.exam_date DESC;"
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": {
      "id": 201,
      "db_id": "online_exams",
      "question": "What are the type of questions and their counts?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the type of questions and their counts?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the type of questions and their counts?[/QUESTION]\n[SQL]\n SELECT q.type_of_question_code, COUNT(*) AS question_count FROM questions q GROUP BY q.type_of_question_code ORDER BY question_count DESC NULLS LAST;"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": {
      "id": 202,
      "db_id": "online_exams",
      "question": "For each question type, return its type code and its count of occurrence."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each question type, return its type code and its count of occurrence.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each question type, return its type code and its count of occurrence.[/QUESTION]\n[SQL]\n SELECT q.type_of_question_code, COUNT(*) AS COUNT FROM questions q GROUP BY q.type_of_question_code ORDER BY COUNT DESC;"
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": {
      "id": 203,
      "db_id": "online_exams",
      "question": "What are the distinct student answer texts that received comments \"Normal\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct student answer texts that received comments \"Normal\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct student answer texts that received comments \"Normal\"?[/QUESTION]\n[SQL]\n SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%';"
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": {
      "id": 204,
      "db_id": "online_exams",
      "question": "List all the distinct student answer texts to which comments \"Normal\" were given?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all the distinct student answer texts to which comments \"Normal\" were given?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all the distinct student answer texts to which comments \"Normal\" were given?[/QUESTION]\n[SQL]\n SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%';"
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": {
      "id": 205,
      "db_id": "online_exams",
      "question": "How many different comments are there for student answers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different comments are there for student answers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different comments are there for student answers?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT sa.Comments) AS number_of_comments FROM Student_Answers sa;"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": {
      "id": 206,
      "db_id": "online_exams",
      "question": "Count the number of different comments for student answers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of different comments for student answers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of different comments for student answers.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT sa.Comments) AS distinct_comment_count FROM Student_Answers sa;"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": {
      "id": 207,
      "db_id": "online_exams",
      "question": "List all the student answer texts in descending order of count."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all the student answer texts in descending order of count.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all the student answer texts in descending order of count.[/QUESTION]\n[SQL]\n SELECT sa.Student_Answer_Text, COUNT(*) AS COUNT FROM Student_Answers sa GROUP BY sa.Student_Answer_Text ORDER BY COUNT DESC;"
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": {
      "id": 208,
      "db_id": "online_exams",
      "question": "Sort the student answer texts in descending order of their frequency of occurrence."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Sort the student answer texts in descending order of their frequency of occurrence.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Sort the student answer texts in descending order of their frequency of occurrence.[/QUESTION]\n[SQL]\n SELECT sa.Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers sa GROUP BY sa.Student_Answer_Text ORDER BY Frequency DESC;"
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": {
      "id": 209,
      "db_id": "online_exams",
      "question": "Please show the first names of students and the dates of their answers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the first names of students and the dates of their answers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the first names of students and the dates of their answers.[/QUESTION]\n[SQL]\n SELECT s.first_name, sa.date_of_answer FROM students s JOIN student_answers sa ON s.student_id = sa.student_id;"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": {
      "id": 210,
      "db_id": "online_exams",
      "question": "For each student answer, find the first name of the student and the date of the answer."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each student answer, find the first name of the student and the date of the answer.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each student answer, find the first name of the student and the date of the answer.[/QUESTION]\n[SQL]\n SELECT s.first_name, sa.date_of_answer FROM students s JOIN student_answers sa ON s.student_id = sa.student_id;"
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": {
      "id": 211,
      "db_id": "online_exams",
      "question": "Please show the email addresses of students and the dates of their answers in descending order of dates."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the email addresses of students and the dates of their answers in descending order of dates.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the email addresses of students and the dates of their answers in descending order of dates.[/QUESTION]\n[SQL]\n SELECT s.email_adress, sa.date_of_answer FROM students s JOIN student_answers sa ON s.student_id = sa.student_id ORDER BY sa.date_of_answer DESC;"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": {
      "id": 212,
      "db_id": "online_exams",
      "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.[/QUESTION]\n[SQL]\n SELECT s.email_adress, sa.date_of_answer FROM student_answers sa JOIN students s ON sa.student_id = s.student_id ORDER BY sa.date_of_answer DESC;"
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": {
      "id": 213,
      "db_id": "online_exams",
      "question": "Please show the least common assessment for students."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the least common assessment for students.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the least common assessment for students.[/QUESTION]\n[SQL]\n SELECT sa.assessment FROM Student_Assessments sa GROUP BY sa.assessment ORDER BY COUNT(sa.assessment) ASC LIMIT 1;"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": {
      "id": 214,
      "db_id": "online_exams",
      "question": "Which assessment has the smallest frequency count?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which assessment has the smallest frequency count?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which assessment has the smallest frequency count?[/QUESTION]\n[SQL]\n SELECT sa.Assessment, COUNT(*) AS Frequency FROM Student_Assessments sa GROUP BY sa.Assessment ORDER BY Frequency ASC LIMIT 1;"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": {
      "id": 215,
      "db_id": "online_exams",
      "question": "Please show the first names of the students that have at least two answer records."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the first names of the students that have at least two answer records.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the first names of the students that have at least two answer records.[/QUESTION]\n[SQL]\n SELECT s.First_Name FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID GROUP BY s.First_Name HAVING COUNT(sa.Student_Answer_ID) >= 2;"
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": {
      "id": 216,
      "db_id": "online_exams",
      "question": "Which students have 2 or more answer records? Give me their first names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which students have 2 or more answer records? Give me their first names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which students have 2 or more answer records? Give me their first names.[/QUESTION]\n[SQL]\n SELECT s.First_Name FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID GROUP BY s.First_Name HAVING COUNT(sa.Student_Answer_ID) >= 2;"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": {
      "id": 217,
      "db_id": "online_exams",
      "question": "What is the most common valid answer text?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the most common valid answer text?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the most common valid answer text?[/QUESTION]\n[SQL]\n SELECT v.valid_answer_text FROM valid_answers v GROUP BY v.valid_answer_text ORDER BY COUNT(v.valid_answer_text) DESC LIMIT 1;"
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": {
      "id": 218,
      "db_id": "online_exams",
      "question": "Find the valid answer text that appeared most frequently."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the valid answer text that appeared most frequently.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the valid answer text that appeared most frequently.[/QUESTION]\n[SQL]\n SELECT v.valid_answer_text, COUNT(*) AS frequency FROM valid_answers v GROUP BY v.valid_answer_text ORDER BY frequency DESC LIMIT 1;"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": {
      "id": 219,
      "db_id": "online_exams",
      "question": "List the last names of the students whose gender is not \"M\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the last names of the students whose gender is not \"M\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the last names of the students whose gender is not \"M\".[/QUESTION]\n[SQL]\n SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU != 'M';"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": {
      "id": 220,
      "db_id": "online_exams",
      "question": "What are the last names of the students with gender other than \"M\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the last names of the students with gender other than \"M\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the last names of the students with gender other than \"M\"?[/QUESTION]\n[SQL]\n SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU != 'M';"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": {
      "id": 221,
      "db_id": "online_exams",
      "question": "List each gender and the corresponding number of students."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List each gender and the corresponding number of students.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List each gender and the corresponding number of students.[/QUESTION]\n[SQL]\n SELECT s.gender_mfu, COUNT(*) AS number_of_students FROM Students s GROUP BY s.gender_mfu ORDER BY number_of_students DESC;"
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": {
      "id": 222,
      "db_id": "online_exams",
      "question": "For each gender, return the gender code and the number of students who identify as that gender."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each gender, return the gender code and the number of students who identify as that gender.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each gender, return the gender code and the number of students who identify as that gender.[/QUESTION]\n[SQL]\n SELECT s.gender_mfu, COUNT(*) AS number_of_students FROM Students s GROUP BY s.gender_mfu ORDER BY number_of_students DESC NULLS LAST;"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": {
      "id": 223,
      "db_id": "online_exams",
      "question": "List the last names of the students whose gender is \"F\" or \"M\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the last names of the students whose gender is \"F\" or \"M\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the last names of the students whose gender is \"F\" or \"M\".[/QUESTION]\n[SQL]\n SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M');"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": {
      "id": 224,
      "db_id": "online_exams",
      "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which students identify their gender as \"F\" or \"M\"? Give me their last names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which students identify their gender as \"F\" or \"M\"? Give me their last names.[/QUESTION]\n[SQL]\n SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M');"
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": {
      "id": 225,
      "db_id": "online_exams",
      "question": "List the first names of the students who do not have any answers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the first names of the students who do not have any answers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the first names of the students who do not have any answers.[/QUESTION]\n[SQL]\n SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL;"
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": {
      "id": 226,
      "db_id": "online_exams",
      "question": "Which students do not have any answers? Find their first names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which students do not have any answers? Find their first names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which students do not have any answers? Find their first names.[/QUESTION]\n[SQL]\n SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL;"
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": {
      "id": 227,
      "db_id": "online_exams",
      "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.[/QUESTION]\n[SQL]\n SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%Absent%'"
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": {
      "id": 228,
      "db_id": "online_exams",
      "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which student answer texts were given both \"Normal\" and \"Absent\" as comments?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which student answer texts were given both \"Normal\" and \"Absent\" as comments?[/QUESTION]\n[SQL]\n SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%Absent%'"
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": {
      "id": 229,
      "db_id": "online_exams",
      "question": "Show the types of questions that have at least three questions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the types of questions that have at least three questions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the types of questions that have at least three questions.[/QUESTION]\n[SQL]\n SELECT q.type_of_question_code FROM questions q GROUP BY q.type_of_question_code HAVING COUNT(q.question_id) >= 3 ORDER BY q.type_of_question_code NULLS LAST;"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": {
      "id": 230,
      "db_id": "online_exams",
      "question": "Which types of questions have 3 or more questions? Return the questions type code."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which types of questions have 3 or more questions? Return the questions type code.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which types of questions have 3 or more questions? Return the questions type code.[/QUESTION]\n[SQL]\n SELECT q.type_of_question_code FROM questions q GROUP BY q.type_of_question_code HAVING COUNT(q.question_id) >= 3;"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": {
      "id": 231,
      "db_id": "online_exams",
      "question": "Show all information on students."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all information on students.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all information on students.[/QUESTION]\n[SQL]\n SELECT * FROM Students s;"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": {
      "id": 232,
      "db_id": "online_exams",
      "question": "What is al the available information of each student?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is al the available information of each student?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is al the available information of each student?[/QUESTION]\n[SQL]\n SELECT s.student_id, s.first_name, s.middle_name, s.last_name, s.gender_mfu, s.student_address, s.email_adress, s.cell_mobile_phone, s.home_phone FROM students s;"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": {
      "id": 233,
      "db_id": "customers_and_orders",
      "question": "How many addresses do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many addresses do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many addresses do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Addresses;"
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": {
      "id": 234,
      "db_id": "customers_and_orders",
      "question": "Count the number of addresses."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of addresses.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of addresses.[/QUESTION]\n[SQL]\n SELECT COUNT(*) AS total_addresses FROM Addresses;"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": {
      "id": 235,
      "db_id": "customers_and_orders",
      "question": "List all address ids and address details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all address ids and address details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all address ids and address details.[/QUESTION]\n[SQL]\n SELECT a.address_id, a.address_details FROM Addresses a;"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": {
      "id": 236,
      "db_id": "customers_and_orders",
      "question": "What are all the address ids and address details?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the address ids and address details?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the address ids and address details?[/QUESTION]\n[SQL]\n SELECT a.address_id, a.address_details FROM Addresses a;"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": {
      "id": 237,
      "db_id": "customers_and_orders",
      "question": "How many products do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many products do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many products do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Products p;"
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": {
      "id": 238,
      "db_id": "customers_and_orders",
      "question": "Count the number of products."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of products.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of products.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Products p;"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": {
      "id": 239,
      "db_id": "customers_and_orders",
      "question": "Show all product ids, product type codes, and product name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all product ids, product type codes, and product name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all product ids, product type codes, and product name.[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_type_code, p.product_name FROM Products p;"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": {
      "id": 240,
      "db_id": "customers_and_orders",
      "question": "What are the ids, type codes, and names for all products?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids, type codes, and names for all products?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids, type codes, and names for all products?[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_type_code, p.product_name FROM Products p ORDER BY p.product_id NULLS LAST;"
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": {
      "id": 241,
      "db_id": "customers_and_orders",
      "question": "What is the price for the product with name Monitor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the price for the product with name Monitor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the price for the product with name Monitor?[/QUESTION]\n[SQL]\n SELECT p.product_price FROM Products p WHERE p.product_name ilike '%Monitor%';"
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": {
      "id": 242,
      "db_id": "customers_and_orders",
      "question": "Give the price of the Monitor product."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the price of the Monitor product.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the price of the Monitor product.[/QUESTION]\n[SQL]\n SELECT p.product_price FROM Products p WHERE p.product_name ilike '%Monitor%';"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": {
      "id": 243,
      "db_id": "customers_and_orders",
      "question": "Show the minimum, average, maximum price for all products."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the minimum, average, maximum price for all products.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the minimum, average, maximum price for all products.[/QUESTION]\n[SQL]\n SELECT MIN(p.product_price) AS min_price, AVG(p.product_price) AS avg_price, MAX(p.product_price) AS max_price FROM Products p;"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": {
      "id": 244,
      "db_id": "customers_and_orders",
      "question": "What are the minimum, average, and maximum prices across all products?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the minimum, average, and maximum prices across all products?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the minimum, average, and maximum prices across all products?[/QUESTION]\n[SQL]\n SELECT MIN(p.product_price) AS min_price, AVG(p.product_price) AS avg_price, MAX(p.product_price) AS max_price FROM Products p;"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": {
      "id": 245,
      "db_id": "customers_and_orders",
      "question": "What is the average price for products with type Clothes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average price for products with type Clothes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average price for products with type Clothes?[/QUESTION]\n[SQL]\n SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code ilike '%Clothes%';"
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": {
      "id": 246,
      "db_id": "customers_and_orders",
      "question": "Return the average price of Clothes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the average price of Clothes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the average price of Clothes.[/QUESTION]\n[SQL]\n SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code ilike '%Clothes%';"
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": {
      "id": 247,
      "db_id": "customers_and_orders",
      "question": "How many hardware type products do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many hardware type products do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many hardware type products do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Products p WHERE p.product_type_code ilike '%hardware%';"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": {
      "id": 248,
      "db_id": "customers_and_orders",
      "question": "Count the number of products of the type Hardware."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of products of the type Hardware.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of products of the type Hardware.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Products p WHERE p.product_type_code ilike '%Hardware%';"
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": {
      "id": 249,
      "db_id": "customers_and_orders",
      "question": "Show all product names with price higher than the average."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all product names with price higher than the average.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all product names with price higher than the average.[/QUESTION]\n[SQL]\n SELECT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": {
      "id": 250,
      "db_id": "customers_and_orders",
      "question": "What are the names of products that have a price above the average for all products."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of products that have a price above the average for all products.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of products that have a price above the average for all products.[/QUESTION]\n[SQL]\n SELECT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);"
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": {
      "id": 251,
      "db_id": "customers_and_orders",
      "question": "Show all hardware product names with price higher than the average price of hardware type products."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all hardware product names with price higher than the average price of hardware type products.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all hardware product names with price higher than the average price of hardware type products.[/QUESTION]\n[SQL]\n SELECT p.product_name FROM Products p WHERE p.product_type_code = 'hardware' AND p.product_price > (SELECT AVG(p2.product_price) FROM Products p2 WHERE p2.product_type_code = 'hardware');"
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": {
      "id": 252,
      "db_id": "customers_and_orders",
      "question": "What are the names of Hardware product with prices above the average price of Hardware products."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of Hardware product with prices above the average price of Hardware products.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of Hardware product with prices above the average price of Hardware products.[/QUESTION]\n[SQL]\n SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' AND p.product_price > (SELECT AVG(p2.product_price) FROM Products p2 WHERE p2.product_type_code = 'Hardware');"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": {
      "id": 253,
      "db_id": "customers_and_orders",
      "question": "What is the name of the most expensive product with type Clothes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the most expensive product with type Clothes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the most expensive product with type Clothes?[/QUESTION]\n[SQL]\n SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Clothes' ORDER BY p.product_price DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": {
      "id": 254,
      "db_id": "customers_and_orders",
      "question": "Give the name of the most expensive Clothes product."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the name of the most expensive Clothes product.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the name of the most expensive Clothes product.[/QUESTION]\n[SQL]\n SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Clothes' ORDER BY p.product_price DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": {
      "id": 255,
      "db_id": "customers_and_orders",
      "question": "What is the product id and product name for the cheapest Hardware type product?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the product id and product name for the cheapest Hardware type product?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the product id and product name for the cheapest Hardware type product?[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1;"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": {
      "id": 256,
      "db_id": "customers_and_orders",
      "question": "Give the id and name of the cheapest Hardware product."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the id and name of the cheapest Hardware product.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the id and name of the cheapest Hardware product.[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1;"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": {
      "id": 257,
      "db_id": "customers_and_orders",
      "question": "List all product names in descending order of price."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all product names in descending order of price.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all product names in descending order of price.[/QUESTION]\n[SQL]\n SELECT p.product_name FROM Products p ORDER BY p.product_price DESC;"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": {
      "id": 258,
      "db_id": "customers_and_orders",
      "question": "What are the names of the products, sorted by descending price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the products, sorted by descending price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the products, sorted by descending price?[/QUESTION]\n[SQL]\n SELECT p.product_name FROM Products p ORDER BY p.product_price DESC;"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": {
      "id": 259,
      "db_id": "customers_and_orders",
      "question": "Show all hardware type products in ascending order of price."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all hardware type products in ascending order of price.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all hardware type products in ascending order of price.[/QUESTION]\n[SQL]\n SELECT p.product_name, p.product_price FROM Products p WHERE p.product_type_code ilike '%hardware%' ORDER BY p.product_price ASC;"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": {
      "id": 260,
      "db_id": "customers_and_orders",
      "question": "What are the names of all Hardware products, sorted by price ascending?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all Hardware products, sorted by price ascending?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all Hardware products, sorted by price ascending?[/QUESTION]\n[SQL]\n SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC;"
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": {
      "id": 261,
      "db_id": "customers_and_orders",
      "question": "List all product type codes and the number of products in each type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all product type codes and the number of products in each type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all product type codes and the number of products in each type.[/QUESTION]\n[SQL]\n SELECT p.product_type_code, COUNT(*) AS COUNT FROM Products p GROUP BY p.product_type_code ORDER BY COUNT DESC;"
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": {
      "id": 262,
      "db_id": "customers_and_orders",
      "question": "How many products are there for each product type?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many products are there for each product type?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many products are there for each product type?[/QUESTION]\n[SQL]\n SELECT p.product_type_code, COUNT(*) AS number_of_products FROM Products p GROUP BY p.product_type_code ORDER BY number_of_products DESC NULLS LAST;"
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": {
      "id": 263,
      "db_id": "customers_and_orders",
      "question": "Show all product type codes and the average price for each type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all product type codes and the average price for each type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all product type codes and the average price for each type.[/QUESTION]\n[SQL]\n SELECT p.product_type_code, AVG(p.product_price) AS average_price FROM Products p GROUP BY p.product_type_code ORDER BY average_price DESC NULLS LAST;"
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": {
      "id": 264,
      "db_id": "customers_and_orders",
      "question": "What is the average price of products for each product type?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average price of products for each product type?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average price of products for each product type?[/QUESTION]\n[SQL]\n SELECT p.product_type_code, AVG(p.product_price) AS average_price FROM Products p GROUP BY p.product_type_code ORDER BY average_price DESC NULLS LAST;"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": {
      "id": 265,
      "db_id": "customers_and_orders",
      "question": "What are the product type code with at least two products?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the product type code with at least two products?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the product type code with at least two products?[/QUESTION]\n[SQL]\n SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2;"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": {
      "id": 266,
      "db_id": "customers_and_orders",
      "question": "Give the product type codes of product types that have two or more products."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the product type codes of product types that have two or more products.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the product type codes of product types that have two or more products.[/QUESTION]\n[SQL]\n SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2;"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": {
      "id": 267,
      "db_id": "customers_and_orders",
      "question": "What is the product type code with most number of products?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the product type code with most number of products?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the product type code with most number of products?[/QUESTION]\n[SQL]\n SELECT p.product_type_code, COUNT(*) AS COUNT FROM Products p GROUP BY p.product_type_code ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": {
      "id": 268,
      "db_id": "customers_and_orders",
      "question": "What is the most frequent product type code?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the most frequent product type code?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the most frequent product type code?[/QUESTION]\n[SQL]\n SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_type_code) DESC LIMIT 1;"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": {
      "id": 269,
      "db_id": "customers_and_orders",
      "question": "How many customers do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customers do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customers do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Customers c;"
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": {
      "id": 270,
      "db_id": "customers_and_orders",
      "question": "Count the number of customers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of customers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of customers.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Customers c;"
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": {
      "id": 271,
      "db_id": "customers_and_orders",
      "question": "Show all customer ids and customer names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all customer ids and customer names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all customer ids and customer names.[/QUESTION]\n[SQL]\n SELECT c.customer_id, c.customer_name FROM Customers c;"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": {
      "id": 272,
      "db_id": "customers_and_orders",
      "question": "What are the ids and names of all customers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids and names of all customers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids and names of all customers?[/QUESTION]\n[SQL]\n SELECT c.customer_id, c.customer_name FROM Customers c ORDER BY c.customer_id NULLS LAST;"
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": {
      "id": 273,
      "db_id": "customers_and_orders",
      "question": "What is the customer address, customer phone, and customer email for Jeromy?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the customer address, customer phone, and customer email for Jeromy?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the customer address, customer phone, and customer email for Jeromy?[/QUESTION]\n[SQL]\n SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name ilike '%Jeromy%';"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": {
      "id": 274,
      "db_id": "customers_and_orders",
      "question": "Give the address, phone, and email for customers with the name Jeromy."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the address, phone, and email for customers with the name Jeromy.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the address, phone, and email for customers with the name Jeromy.[/QUESTION]\n[SQL]\n SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name ilike '%Jeromy%';"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": {
      "id": 275,
      "db_id": "customers_and_orders",
      "question": "Show all payment method codes and the number of customers in each code."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all payment method codes and the number of customers in each code.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all payment method codes and the number of customers in each code.[/QUESTION]\n[SQL]\n SELECT c.payment_method_code, COUNT(c.customer_id) AS customer_count FROM Customers c GROUP BY c.payment_method_code ORDER BY customer_count DESC NULLS LAST;"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": {
      "id": 276,
      "db_id": "customers_and_orders",
      "question": "How many customers use each payment method?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customers use each payment method?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customers use each payment method?[/QUESTION]\n[SQL]\n SELECT c.payment_method_code, COUNT(*) AS number_of_customers FROM Customers c GROUP BY c.payment_method_code ORDER BY number_of_customers DESC NULLS LAST;"
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": {
      "id": 277,
      "db_id": "customers_and_orders",
      "question": "What is the payment method code used by most number of customers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the payment method code used by most number of customers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the payment method code used by most number of customers?[/QUESTION]\n[SQL]\n SELECT c.payment_method_code, COUNT(*) AS COUNT FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": {
      "id": 278,
      "db_id": "customers_and_orders",
      "question": "Give the code of the payment method that is most commonly used."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the code of the payment method that is most commonly used.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the code of the payment method that is most commonly used.[/QUESTION]\n[SQL]\n SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.payment_method_code) DESC LIMIT 1;"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": {
      "id": 279,
      "db_id": "customers_and_orders",
      "question": "Show all customer names with the  payment method code used by least number of customers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all customer names with the  payment method code used by least number of customers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all customer names with the  payment method code used by least number of customers.[/QUESTION]\n[SQL]\n SELECT c.customer_name, c.payment_method_code FROM Customers c GROUP BY c.customer_name, c.payment_method_code ORDER BY COUNT(c.customer_id) ASC LIMIT 1;"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": {
      "id": 280,
      "db_id": "customers_and_orders",
      "question": "What are the names of customers who use the least common payment method?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of customers who use the least common payment method?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of customers who use the least common payment method?[/QUESTION]\n[SQL]\n SELECT c.customer_name, c.payment_method_code FROM Customers c GROUP BY c.customer_name, c.payment_method_code ORDER BY COUNT(c.payment_method_code) ASC LIMIT 1;"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": {
      "id": 281,
      "db_id": "customers_and_orders",
      "question": "What is the payment method and customer number for customer named Jeromy?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the payment method and customer number for customer named Jeromy?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the payment method and customer number for customer named Jeromy?[/QUESTION]\n[SQL]\n SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE c.customer_name ilike '%Jeromy%';"
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": {
      "id": 282,
      "db_id": "customers_and_orders",
      "question": "Give the payment method code and customer number corresponding to the customer named Jeromy."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the payment method code and customer number corresponding to the customer named Jeromy.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the payment method code and customer number corresponding to the customer named Jeromy.[/QUESTION]\n[SQL]\n SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE c.customer_name ilike '%Jeromy%';"
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": {
      "id": 283,
      "db_id": "customers_and_orders",
      "question": "What are the distinct payment methods used by customers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct payment methods used by customers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct payment methods used by customers?[/QUESTION]\n[SQL]\n SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.payment_method_code) DESC;"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": {
      "id": 284,
      "db_id": "customers_and_orders",
      "question": "Give the different payment method codes that customers use."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the different payment method codes that customers use.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the different payment method codes that customers use.[/QUESTION]\n[SQL]\n SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.payment_method_code) DESC;"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": {
      "id": 285,
      "db_id": "customers_and_orders",
      "question": "Show the id and the product type for all products, order by product name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the id and the product type for all products, order by product name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the id and the product type for all products, order by product name.[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_type_code, p.product_name FROM Products p ORDER BY p.product_name NULLS LAST;"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": {
      "id": 286,
      "db_id": "customers_and_orders",
      "question": "What are the ids and product types for all products, sorted alphabetically by product name?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids and product types for all products, sorted alphabetically by product name?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids and product types for all products, sorted alphabetically by product name?[/QUESTION]\n[SQL]\n SELECT p.product_id, p.product_type_code FROM Products p ORDER BY p.product_name ASC;"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": {
      "id": 287,
      "db_id": "customers_and_orders",
      "question": "What is the product type with least number of products?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the product type with least number of products?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the product type with least number of products?[/QUESTION]\n[SQL]\n SELECT p.product_type_code, COUNT(p.product_id) AS COUNT FROM Products p GROUP BY p.product_type_code ORDER BY COUNT ASC LIMIT 1;"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": {
      "id": 288,
      "db_id": "customers_and_orders",
      "question": "What is the code of the product type that is least common?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the code of the product type that is least common?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the code of the product type that is least common?[/QUESTION]\n[SQL]\n SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_type_code) ASC LIMIT 1;"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": {
      "id": 289,
      "db_id": "customers_and_orders",
      "question": "How many customer orders do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customer orders do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customer orders do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(*) AS total_orders FROM Customer_Orders co;"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": {
      "id": 290,
      "db_id": "customers_and_orders",
      "question": "Count the number of customer orders."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of customer orders.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of customer orders.[/QUESTION]\n[SQL]\n SELECT COUNT(*) AS total_orders FROM Customer_Orders co;"
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": {
      "id": 291,
      "db_id": "customers_and_orders",
      "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the order ids, order dates, and order status codes for all orders by customer Jeromy.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the order ids, order dates, and order status codes for all orders by customer Jeromy.[/QUESTION]\n[SQL]\n SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE c.customer_name ilike '%Jeromy%' ORDER BY co.order_id NULLS LAST;"
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": {
      "id": 292,
      "db_id": "customers_and_orders",
      "question": "What were the ids, dates, and status codes for orders made by Jeromy?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What were the ids, dates, and status codes for orders made by Jeromy?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What were the ids, dates, and status codes for orders made by Jeromy?[/QUESTION]\n[SQL]\n SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE c.customer_name ilike '%Jeromy%' ORDER BY co.order_id NULLS LAST;"
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": {
      "id": 293,
      "db_id": "customers_and_orders",
      "question": "Show all customer names, ids and the number of orders by each customer."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all customer names, ids and the number of orders by each customer.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all customer names, ids and the number of orders by each customer.[/QUESTION]\n[SQL]\n SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS order_count FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_name, c.customer_id ORDER BY order_count DESC NULLS LAST;"
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": {
      "id": 294,
      "db_id": "customers_and_orders",
      "question": "What are the names, ids, and number of orders made for each customer?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names, ids, and number of orders made for each customer?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names, ids, and number of orders made for each customer?[/QUESTION]\n[SQL]\n SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS total_orders FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_name, c.customer_id ORDER BY total_orders DESC NULLS LAST;"
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": {
      "id": 295,
      "db_id": "customers_and_orders",
      "question": "What is the customer id, name, phone, and email for the customer with most orders?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the customer id, name, phone, and email for the customer with most orders?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the customer id, name, phone, and email for the customer with most orders?[/QUESTION]\n[SQL]\n SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id, c.customer_name, c.customer_phone, c.customer_email ORDER BY COUNT(co.order_id) DESC LIMIT 1;"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": {
      "id": 296,
      "db_id": "customers_and_orders",
      "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the id, name, phone, and email corresponding to the customer who made the most orders.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the id, name, phone, and email corresponding to the customer who made the most orders.[/QUESTION]\n[SQL]\n SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id, c.customer_name, c.customer_phone, c.customer_email ORDER BY COUNT(co.order_id) DESC LIMIT 1;"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": {
      "id": 297,
      "db_id": "customers_and_orders",
      "question": "Show all order status and the number of orders in each status."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all order status and the number of orders in each status.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all order status and the number of orders in each status.[/QUESTION]\n[SQL]\n SELECT co.order_status_code, COUNT(*) AS order_count FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY order_count DESC NULLS LAST;"
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "question": {
      "id": 298,
      "db_id": "customers_and_orders",
      "question": "How many orders have each order status code?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many orders have each order status code?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many orders have each order status code?[/QUESTION]\n[SQL]\n SELECT co.order_status_code, COUNT(*) AS number_of_orders FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY number_of_orders DESC NULLS LAST;"
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "question": {
      "id": 299,
      "db_id": "customers_and_orders",
      "question": "What is the order status code that is most common?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the order status code that is most common?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the order status code that is most common?[/QUESTION]\n[SQL]\n SELECT co.order_status_code FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY COUNT(co.order_status_code) DESC LIMIT 1;"
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "question": {
      "id": 300,
      "db_id": "customers_and_orders",
      "question": "Give the order status code that is most frequent across customer orders."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the order status code that is most frequent across customer orders.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the order status code that is most frequent across customer orders.[/QUESTION]\n[SQL]\n SELECT co.order_status_code FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY COUNT(co.order_status_code) DESC LIMIT 1;"
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "question": {
      "id": 301,
      "db_id": "customers_and_orders",
      "question": "How many customers do not have an order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customers do not have an order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customers do not have an order?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders co);"
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "question": {
      "id": 302,
      "db_id": "customers_and_orders",
      "question": "Count the number of customers who have not made an order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of customers who have not made an order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of customers who have not made an order.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders co);"
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "question": {
      "id": 303,
      "db_id": "customers_and_orders",
      "question": "Show all product names without an order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all product names without an order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all product names without an order.[/QUESTION]\n[SQL]\n SELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL;"
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "question": {
      "id": 304,
      "db_id": "customers_and_orders",
      "question": "What are the names of products that have not been ordered?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of products that have not been ordered?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of products that have not been ordered?[/QUESTION]\n[SQL]\n SELECT p.product_name FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi);"
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "question": {
      "id": 305,
      "db_id": "customers_and_orders",
      "question": "How many products named Monitor have been ordered?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many products named Monitor have been ordered?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many products named Monitor have been ordered?[/QUESTION]\n[SQL]\n SELECT COUNT(*) AS total_monitors FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name ilike '%Monitor%';"
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "question": {
      "id": 306,
      "db_id": "customers_and_orders",
      "question": "What is the total number of Monitor products that have been ordered?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total number of Monitor products that have been ordered?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total number of Monitor products that have been ordered?[/QUESTION]\n[SQL]\n SELECT SUM(o.order_quantity::INTEGER) AS total_monitors FROM Order_Items o JOIN Products p ON o.product_id = p.product_id WHERE p.product_type_code ilike '%Monitor%';"
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "question": {
      "id": 307,
      "db_id": "customers_and_orders",
      "question": "How many customers have ordered the product named Monitor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customers have ordered the product named Monitor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customers have ordered the product named Monitor?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT co.customer_id) AS number_of_customers FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Customer_Orders co ON oi.order_id = co.order_id WHERE p.product_name ilike '%Monitor%';"
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "question": {
      "id": 308,
      "db_id": "customers_and_orders",
      "question": "Count the number of different customers who have bought a Monitor Product."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of different customers who have bought a Monitor Product.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of different customers who have bought a Monitor Product.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT co.customer_id) FROM Order_Items oi JOIN Customer_Orders co ON oi.order_id = co.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_type_code ilike '%Monitor%';"
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "question": {
      "id": 309,
      "db_id": "customers_and_orders",
      "question": "How many customers have an order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customers have an order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customers have an order?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT co.customer_id) AS number_of_customers FROM Customer_Orders co;"
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "question": {
      "id": 310,
      "db_id": "customers_and_orders",
      "question": "Count the number of differnt customers who have made an order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of differnt customers who have made an order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of differnt customers who have made an order.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT co.customer_id) AS total_customers FROM Customer_Orders co;"
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "question": {
      "id": 311,
      "db_id": "customers_and_orders",
      "question": "Show all customer ids without an order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all customer ids without an order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all customer ids without an order.[/QUESTION]\n[SQL]\n SELECT c.customer_id FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;"
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "question": {
      "id": 312,
      "db_id": "customers_and_orders",
      "question": "What are the ids of customers who have not made an order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of customers who have not made an order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of customers who have not made an order?[/QUESTION]\n[SQL]\n SELECT c.customer_id FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;"
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "question": {
      "id": 313,
      "db_id": "customers_and_orders",
      "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.[/QUESTION]\n[SQL]\n SELECT c.customer_first_name, c.customer_last_name, co.order_date, oi.product_id, CAST(oi.order_quantity AS INT) AS order_quantity FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Customers c ON co.customer_id = c.customer_id WHERE CAST(oi.order_quantity AS INT) > 6 OR CAST(COUNT(*) FILTER (WHERE oi.product_id = oi.product_id) AS INT) > 3;"
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "question": {
      "id": 314,
      "db_id": "customers_and_orders",
      "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?[/QUESTION]\n[SQL]\n SELECT o.order_id, o.order_date FROM Order_Items oi JOIN Customer_Orders o ON oi.order_id = o.order_id WHERE CAST(oi.order_quantity AS INT) > 6 OR (SELECT COUNT(*) FROM Order_Items WHERE order_id = o.order_id) > 3;"
  },
  {
    "id": 315,
    "db_id": "region_building",
    "question": {
      "id": 315,
      "db_id": "region_building",
      "question": "How many buildings are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many buildings are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many buildings are there?[/QUESTION]\n[SQL]\n SELECT COUNT(b.building_id) FROM building b;"
  },
  {
    "id": 316,
    "db_id": "region_building",
    "question": {
      "id": 316,
      "db_id": "region_building",
      "question": "Count the number of buildings."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of buildings.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of buildings.[/QUESTION]\n[SQL]\n SELECT COUNT(b.building_id) FROM building b;"
  },
  {
    "id": 317,
    "db_id": "region_building",
    "question": {
      "id": 317,
      "db_id": "region_building",
      "question": "List the names of buildings in ascending order of number of stories."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of buildings in ascending order of number of stories.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of buildings in ascending order of number of stories.[/QUESTION]\n[SQL]\n SELECT b.name FROM building b ORDER BY b.number_of_stories ASC;"
  },
  {
    "id": 318,
    "db_id": "region_building",
    "question": {
      "id": 318,
      "db_id": "region_building",
      "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the list of building names, sorted by the number of stories of each building in ascending order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the list of building names, sorted by the number of stories of each building in ascending order?[/QUESTION]\n[SQL]\n SELECT b.name FROM building b ORDER BY b.number_of_stories ASC;"
  },
  {
    "id": 319,
    "db_id": "region_building",
    "question": {
      "id": 319,
      "db_id": "region_building",
      "question": "List the addresses of buildings in descending order of building completion year."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the addresses of buildings in descending order of building completion year.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the addresses of buildings in descending order of building completion year.[/QUESTION]\n[SQL]\n SELECT b.address FROM building b ORDER BY b.completed_year DESC;"
  },
  {
    "id": 320,
    "db_id": "region_building",
    "question": {
      "id": 320,
      "db_id": "region_building",
      "question": "Sort the buildings in descending order of building completion year, and return the building addresses."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Sort the buildings in descending order of building completion year, and return the building addresses.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Sort the buildings in descending order of building completion year, and return the building addresses.[/QUESTION]\n[SQL]\n SELECT b.address FROM building b ORDER BY b.completed_year DESC;"
  },
  {
    "id": 321,
    "db_id": "region_building",
    "question": {
      "id": 321,
      "db_id": "region_building",
      "question": "What is the maximum number of stories of buildings not completed in 1980?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the maximum number of stories of buildings not completed in 1980?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the maximum number of stories of buildings not completed in 1980?[/QUESTION]\n[SQL]\n SELECT MAX(b.number_of_stories) FROM building b WHERE b.completed_year != 1980;"
  },
  {
    "id": 322,
    "db_id": "region_building",
    "question": {
      "id": 322,
      "db_id": "region_building",
      "question": "Among the buildings not completed in 1980, what is the maximum number of stories?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Among the buildings not completed in 1980, what is the maximum number of stories?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Among the buildings not completed in 1980, what is the maximum number of stories?[/QUESTION]\n[SQL]\n SELECT MAX(b.number_of_stories) FROM building b WHERE b.completed_year != 1980;"
  },
  {
    "id": 323,
    "db_id": "region_building",
    "question": {
      "id": 323,
      "db_id": "region_building",
      "question": "What is the average population for all regions?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average population for all regions?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average population for all regions?[/QUESTION]\n[SQL]\n SELECT AVG(r.population) AS average_population FROM region r;"
  },
  {
    "id": 324,
    "db_id": "region_building",
    "question": {
      "id": 324,
      "db_id": "region_building",
      "question": "Compute the average population of a region."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Compute the average population of a region.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Compute the average population of a region.[/QUESTION]\n[SQL]\n SELECT AVG(r.population) FROM region r;"
  },
  {
    "id": 325,
    "db_id": "region_building",
    "question": {
      "id": 325,
      "db_id": "region_building",
      "question": "What are the names of regions in ascending alphabetical order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of regions in ascending alphabetical order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of regions in ascending alphabetical order?[/QUESTION]\n[SQL]\n SELECT r.name FROM region r ORDER BY r.name ASC;"
  },
  {
    "id": 326,
    "db_id": "region_building",
    "question": {
      "id": 326,
      "db_id": "region_building",
      "question": "List the names of regions in alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of regions in alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of regions in alphabetical order.[/QUESTION]\n[SQL]\n SELECT r.name FROM region r ORDER BY r.name ASC;"
  },
  {
    "id": 327,
    "db_id": "region_building",
    "question": {
      "id": 327,
      "db_id": "region_building",
      "question": "What are the capitals of the regions with area bigger than 10000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the capitals of the regions with area bigger than 10000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the capitals of the regions with area bigger than 10000?[/QUESTION]\n[SQL]\n SELECT r.capital FROM region r WHERE r.area > 10000;"
  },
  {
    "id": 328,
    "db_id": "region_building",
    "question": {
      "id": 328,
      "db_id": "region_building",
      "question": "Give me the capitals of the regions whose area is larger than 10000."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me the capitals of the regions whose area is larger than 10000.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me the capitals of the regions whose area is larger than 10000.[/QUESTION]\n[SQL]\n SELECT r.capital FROM region r WHERE r.area > 10000;"
  },
  {
    "id": 329,
    "db_id": "region_building",
    "question": {
      "id": 329,
      "db_id": "region_building",
      "question": "List the capital of the region with the largest population."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the capital of the region with the largest population.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the capital of the region with the largest population.[/QUESTION]\n[SQL]\n SELECT r.capital FROM region r ORDER BY r.population DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 330,
    "db_id": "region_building",
    "question": {
      "id": 330,
      "db_id": "region_building",
      "question": "Which region has the largest population? Give me the capital of the region."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which region has the largest population? Give me the capital of the region.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which region has the largest population? Give me the capital of the region.[/QUESTION]\n[SQL]\n SELECT r.name, r.capital FROM region r ORDER BY r.population DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 331,
    "db_id": "region_building",
    "question": {
      "id": 331,
      "db_id": "region_building",
      "question": "List the names of the regions with the top 5 largest areas."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of the regions with the top 5 largest areas.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of the regions with the top 5 largest areas.[/QUESTION]\n[SQL]\n SELECT r.name FROM region r ORDER BY r.area DESC NULLS LAST LIMIT 5;"
  },
  {
    "id": 332,
    "db_id": "region_building",
    "question": {
      "id": 332,
      "db_id": "region_building",
      "question": "What are the names of the 5 largest regions in terms of area?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the 5 largest regions in terms of area?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the 5 largest regions in terms of area?[/QUESTION]\n[SQL]\n SELECT r.name FROM region r ORDER BY r.area DESC NULLS LAST LIMIT 5;"
  },
  {
    "id": 333,
    "db_id": "region_building",
    "question": {
      "id": 333,
      "db_id": "region_building",
      "question": "Show the names of buildings and the names of regions they are in."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of buildings and the names of regions they are in.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of buildings and the names of regions they are in.[/QUESTION]\n[SQL]\n SELECT b.name AS building_name, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id;"
  },
  {
    "id": 334,
    "db_id": "region_building",
    "question": {
      "id": 334,
      "db_id": "region_building",
      "question": "For each building, return the name of the building and the name of the region it belongs to."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each building, return the name of the building and the name of the region it belongs to.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each building, return the name of the building and the name of the region it belongs to.[/QUESTION]\n[SQL]\n SELECT b.name AS building_name, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id;"
  },
  {
    "id": 335,
    "db_id": "region_building",
    "question": {
      "id": 335,
      "db_id": "region_building",
      "question": "Show the names of regions that have more than one building."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of regions that have more than one building.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of regions that have more than one building.[/QUESTION]\n[SQL]\n SELECT r.name FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.name HAVING COUNT(b.building_id) > 1 ORDER BY r.name NULLS LAST;"
  },
  {
    "id": 336,
    "db_id": "region_building",
    "question": {
      "id": 336,
      "db_id": "region_building",
      "question": "Which regions have more than one building? Give me the names of the regions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which regions have more than one building? Give me the names of the regions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which regions have more than one building? Give me the names of the regions.[/QUESTION]\n[SQL]\n SELECT r.name FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.name HAVING COUNT(b.building_id) > 1 ORDER BY r.name NULLS LAST;"
  },
  {
    "id": 337,
    "db_id": "region_building",
    "question": {
      "id": 337,
      "db_id": "region_building",
      "question": "Show the capital of the region that has the most buildings."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the capital of the region that has the most buildings.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the capital of the region that has the most buildings.[/QUESTION]\n[SQL]\n SELECT r.capital FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.region_id, r.capital ORDER BY COUNT(b.building_id) DESC LIMIT 1;"
  },
  {
    "id": 338,
    "db_id": "region_building",
    "question": {
      "id": 338,
      "db_id": "region_building",
      "question": "Which region has the largest number of buildings? Show me the capital of the region."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which region has the largest number of buildings? Show me the capital of the region.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which region has the largest number of buildings? Show me the capital of the region.[/QUESTION]\n[SQL]\n SELECT r.name, r.capital FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.name, r.capital ORDER BY COUNT(b.building_id) DESC LIMIT 1;"
  },
  {
    "id": 339,
    "db_id": "region_building",
    "question": {
      "id": 339,
      "db_id": "region_building",
      "question": "Show addresses of buildings and the capitals of regions they are in."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show addresses of buildings and the capitals of regions they are in.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show addresses of buildings and the capitals of regions they are in.[/QUESTION]\n[SQL]\n SELECT b.address, r.capital FROM building b JOIN region r ON b.region_id = r.region_id;"
  },
  {
    "id": 340,
    "db_id": "region_building",
    "question": {
      "id": 340,
      "db_id": "region_building",
      "question": "For each building, return the address of the building and the name of the region it belongs to."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each building, return the address of the building and the name of the region it belongs to.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each building, return the address of the building and the name of the region it belongs to.[/QUESTION]\n[SQL]\n SELECT b.address, r.name FROM building b JOIN region r ON b.region_id = r.region_id;"
  },
  {
    "id": 341,
    "db_id": "region_building",
    "question": {
      "id": 341,
      "db_id": "region_building",
      "question": "Show the number of stories of buildings in the region with name \"Abruzzo\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the number of stories of buildings in the region with name \"Abruzzo\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the number of stories of buildings in the region with name \"Abruzzo\".[/QUESTION]\n[SQL]\n SELECT SUM(b.number_of_stories) AS total_stories FROM building b JOIN region r ON b.region_id = r.region_id WHERE r.name ilike '%Abruzzo%';"
  },
  {
    "id": 342,
    "db_id": "region_building",
    "question": {
      "id": 342,
      "db_id": "region_building",
      "question": "Return the number of stories for each building in the region named \"Abruzzo\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the number of stories for each building in the region named \"Abruzzo\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the number of stories for each building in the region named \"Abruzzo\".[/QUESTION]\n[SQL]\n SELECT b.name, b.number_of_stories FROM building b JOIN region r ON b.region_id = r.region_id WHERE r.name ilike '%Abruzzo%' ORDER BY b.number_of_stories DESC NULLS LAST;"
  },
  {
    "id": 343,
    "db_id": "region_building",
    "question": {
      "id": 343,
      "db_id": "region_building",
      "question": "Please show each completion year and the number of buildings completed in that year."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show each completion year and the number of buildings completed in that year.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show each completion year and the number of buildings completed in that year.[/QUESTION]\n[SQL]\n SELECT b.completed_year, COUNT(b.building_id) AS number_of_buildings FROM building b GROUP BY b.completed_year ORDER BY b.completed_year NULLS LAST;"
  },
  {
    "id": 344,
    "db_id": "region_building",
    "question": {
      "id": 344,
      "db_id": "region_building",
      "question": "For completion year, return the year and the number of buildings completed."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For completion year, return the year and the number of buildings completed.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For completion year, return the year and the number of buildings completed.[/QUESTION]\n[SQL]\n SELECT b.completed_year, COUNT(b.building_id) AS number_of_buildings FROM building b GROUP BY b.completed_year ORDER BY b.completed_year NULLS LAST;"
  },
  {
    "id": 345,
    "db_id": "region_building",
    "question": {
      "id": 345,
      "db_id": "region_building",
      "question": "List the year in which the most buildings are completed."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the year in which the most buildings are completed.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the year in which the most buildings are completed.[/QUESTION]\n[SQL]\n SELECT b.completed_year FROM building b GROUP BY b.completed_year ORDER BY COUNT(b.building_id) DESC LIMIT 1;"
  },
  {
    "id": 346,
    "db_id": "region_building",
    "question": {
      "id": 346,
      "db_id": "region_building",
      "question": "In which year did the most building constructions complete?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]In which year did the most building constructions complete?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]In which year did the most building constructions complete?[/QUESTION]\n[SQL]\n SELECT b.completed_year FROM building b GROUP BY b.completed_year ORDER BY COUNT(b.building_id) DESC LIMIT 1;"
  },
  {
    "id": 347,
    "db_id": "region_building",
    "question": {
      "id": 347,
      "db_id": "region_building",
      "question": "List the names of regions that do not have any buildings."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of regions that do not have any buildings.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of regions that do not have any buildings.[/QUESTION]\n[SQL]\n SELECT r.name FROM region r WHERE r.region_id NOT IN (SELECT b.region_id FROM building b);"
  },
  {
    "id": 348,
    "db_id": "region_building",
    "question": {
      "id": 348,
      "db_id": "region_building",
      "question": "What are the names of regions in which there are no buildings?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of regions in which there are no buildings?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of regions in which there are no buildings?[/QUESTION]\n[SQL]\n SELECT r.name FROM region r WHERE r.region_id NOT IN (SELECT b.region_id FROM building b);"
  },
  {
    "id": 349,
    "db_id": "region_building",
    "question": {
      "id": 349,
      "db_id": "region_building",
      "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.[/QUESTION]\n[SQL]\n SELECT b.completed_year FROM building b WHERE b.number_of_stories > 20 AND b.completed_year = (SELECT completed_year FROM building WHERE number_of_stories < 15);"
  },
  {
    "id": 350,
    "db_id": "region_building",
    "question": {
      "id": 350,
      "db_id": "region_building",
      "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?[/QUESTION]\n[SQL]\n SELECT b.completed_year FROM building b WHERE b.number_of_stories > 20 AND b.completed_year = (SELECT MIN(b2.completed_year) FROM building b2 WHERE b2.number_of_stories < 15);"
  },
  {
    "id": 351,
    "db_id": "region_building",
    "question": {
      "id": 351,
      "db_id": "region_building",
      "question": "Show the distinct addresses of buildings."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the distinct addresses of buildings.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the distinct addresses of buildings.[/QUESTION]\n[SQL]\n SELECT DISTINCT b.address FROM building b;"
  },
  {
    "id": 352,
    "db_id": "region_building",
    "question": {
      "id": 352,
      "db_id": "region_building",
      "question": "Give me a list of distinct building addresses."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me a list of distinct building addresses.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me a list of distinct building addresses.[/QUESTION]\n[SQL]\n SELECT DISTINCT b.address FROM building b;"
  },
  {
    "id": 353,
    "db_id": "region_building",
    "question": {
      "id": 353,
      "db_id": "region_building",
      "question": "Show the completed years of buildings in descending order of the number of stories."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the completed years of buildings in descending order of the number of stories.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the completed years of buildings in descending order of the number of stories.[/QUESTION]\n[SQL]\n SELECT b.completed_year, b.number_of_stories FROM building b ORDER BY b.number_of_stories DESC, b.completed_year DESC;"
  },
  {
    "id": 354,
    "db_id": "region_building",
    "question": {
      "id": 354,
      "db_id": "region_building",
      "question": "Sort buildings in descending order of the number of stories, and return their completion years."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Sort buildings in descending order of the number of stories, and return their completion years.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Sort buildings in descending order of the number of stories, and return their completion years.[/QUESTION]\n[SQL]\n SELECT b.completed_year, b.number_of_stories FROM building b ORDER BY b.number_of_stories DESC;"
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "question": {
      "id": 355,
      "db_id": "government_shift",
      "question": "List details of all the channel in alphabetical order ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List details of all the channel in alphabetical order .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List details of all the channel in alphabetical order .[/QUESTION]\n[SQL]\n SELECT c.channel_id, c.channel_details FROM channels c ORDER BY c.channel_details ASC;"
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "question": {
      "id": 356,
      "db_id": "government_shift",
      "question": "What is the list of channel details ordered alphabetically ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the list of channel details ordered alphabetically ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the list of channel details ordered alphabetically ?[/QUESTION]\n[SQL]\n SELECT c.channel_details FROM channels c ORDER BY c.channel_details ASC;"
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "question": {
      "id": 357,
      "db_id": "government_shift",
      "question": "How many services are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many services are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many services are there?[/QUESTION]\n[SQL]\n SELECT COUNT(s.service_id) FROM services s;"
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "question": {
      "id": 358,
      "db_id": "government_shift",
      "question": "Count the number of services."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of services.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of services.[/QUESTION]\n[SQL]\n SELECT COUNT(s.service_id) AS total_services FROM services s;"
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "question": {
      "id": 359,
      "db_id": "government_shift",
      "question": "What is the most common analytical layer type code?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the most common analytical layer type code?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the most common analytical layer type code?[/QUESTION]\n[SQL]\n SELECT al.Analytical_Layer_Type_Code FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY COUNT(al.Analytical_Layer_Type_Code) DESC LIMIT 1;"
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "question": {
      "id": 360,
      "db_id": "government_shift",
      "question": "Find the analytical layer type code that appears most often."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the analytical layer type code that appears most often.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the analytical layer type code that appears most often.[/QUESTION]\n[SQL]\n SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS frequency FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY frequency DESC LIMIT 1;"
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "question": {
      "id": 361,
      "db_id": "government_shift",
      "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all the services that has been used by the customer with details \"Hardy Kutch\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all the services that has been used by the customer with details \"Hardy Kutch\".[/QUESTION]\n[SQL]\n SELECT s.service_id, s.service_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id WHERE c.customer_details ilike '%Hardy Kutch%' ORDER BY s.service_id NULLS LAST;"
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "question": {
      "id": 362,
      "db_id": "government_shift",
      "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.[/QUESTION]\n[SQL]\n SELECT s.service_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id WHERE c.customer_details ilike '%Hardy%Kutch%' ORDER BY s.service_details NULLS LAST;"
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "question": {
      "id": 363,
      "db_id": "government_shift",
      "question": "Find the details of the services that have been used by more than 3 times ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the details of the services that have been used by more than 3 times .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the details of the services that have been used by more than 3 times .[/QUESTION]\n[SQL]\n SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id GROUP BY s.service_details HAVING COUNT(cs.customers_and_services_id) > 3;"
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "question": {
      "id": 364,
      "db_id": "government_shift",
      "question": "Which services were used by customers by more than 3 times? Give me the service details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which services were used by customers by more than 3 times? Give me the service details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which services were used by customers by more than 3 times? Give me the service details.[/QUESTION]\n[SQL]\n SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customer_id IN (SELECT customer_id FROM customers_and_services GROUP BY customer_id HAVING COUNT(service_id) > 3) ORDER BY s.service_details NULLS LAST;"
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "question": {
      "id": 365,
      "db_id": "government_shift",
      "question": "Find the details of the customer who has used services the most times."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the details of the customer who has used services the most times.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the details of the customer who has used services the most times.[/QUESTION]\n[SQL]\n SELECT c.customer_details, COUNT(*) AS total_interactions FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY total_interactions DESC LIMIT 1;"
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "question": {
      "id": 366,
      "db_id": "government_shift",
      "question": "return the details of the customer with largest count of used services."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]return the details of the customer with largest count of used services.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]return the details of the customer with largest count of used services.[/QUESTION]\n[SQL]\n SELECT c.customer_details, COUNT(cs.service_id) AS service_count FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY service_count DESC LIMIT 1;"
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "question": {
      "id": 367,
      "db_id": "government_shift",
      "question": "Find the name of the customer who has used the most types of services ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the customer who has used the most types of services .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the customer who has used the most types of services .[/QUESTION]\n[SQL]\n SELECT c.customer_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY COUNT(cs.service_id) DESC LIMIT 1;"
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "question": {
      "id": 368,
      "db_id": "government_shift",
      "question": "Which customer has used the most types of services ? Give me the customer details ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which customer has used the most types of services ? Give me the customer details .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which customer has used the most types of services ? Give me the customer details .[/QUESTION]\n[SQL]\n SELECT c.customer_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY COUNT(cs.service_id) DESC LIMIT 1;"
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "question": {
      "id": 369,
      "db_id": "government_shift",
      "question": "Find the details of the customer who has never used any services ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the details of the customer who has never used any services .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the details of the customer who has never used any services .[/QUESTION]\n[SQL]\n SELECT c.customer_details FROM customers c LEFT JOIN customers_and_services cs ON c.customer_id = cs.customer_id WHERE cs.customer_id IS NULL;"
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "question": {
      "id": 370,
      "db_id": "government_shift",
      "question": "Which customers never used any services ? Give me the customer details ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which customers never used any services ? Give me the customer details .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which customers never used any services ? Give me the customer details .[/QUESTION]\n[SQL]\n SELECT c.customer_details FROM customers c LEFT JOIN customers_and_services cs ON c.customer_id = cs.customer_id WHERE cs.customer_id IS NULL;"
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "question": {
      "id": 371,
      "db_id": "government_shift",
      "question": "Find the details of the customers who have used the least-used service ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the details of the customers who have used the least-used service .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the details of the customers who have used the least-used service .[/QUESTION]\n[SQL]\n SELECT c.customer_id, s.service_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id ORDER BY COUNT(cs.customers_and_services_id) ASC LIMIT 1;"
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "question": {
      "id": 372,
      "db_id": "government_shift",
      "question": "Which customers used the least commonly-used service ? Give me the distinct customer details ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which customers used the least commonly-used service ? Give me the distinct customer details .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which customers used the least commonly-used service ? Give me the distinct customer details .[/QUESTION]\n[SQL]\n SELECT c.customer_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY COUNT(cs.service_id) ASC LIMIT 1;"
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "question": {
      "id": 373,
      "db_id": "government_shift",
      "question": "How many distinct customer and services details are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many distinct customer and services details are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many distinct customer and services details are there?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT cs.Customers_and_Services_Details) AS unique_customer_service_details FROM Customers_and_Services cs;"
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "question": {
      "id": 374,
      "db_id": "government_shift",
      "question": "Count the total number of available customers and services details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the total number of available customers and services details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the total number of available customers and services details.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.customer_id) AS total_customers, COUNT(DISTINCT s.service_id) AS total_services FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id;"
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "question": {
      "id": 375,
      "db_id": "government_shift",
      "question": "Find all the customers whose name contains \"Kutch\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all the customers whose name contains \"Kutch\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all the customers whose name contains \"Kutch\".[/QUESTION]\n[SQL]\n SELECT c.customer_id, c.customer_details FROM customers c WHERE c.customer_details ilike '%Kutch%';"
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "question": {
      "id": 376,
      "db_id": "government_shift",
      "question": "What are the details of the customers who have \"Kutch\" in part of their details?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the details of the customers who have \"Kutch\" in part of their details?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the details of the customers who have \"Kutch\" in part of their details?[/QUESTION]\n[SQL]\n SELECT c.customer_details FROM customers c WHERE c.customer_details ilike '%Kutch%';"
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "question": {
      "id": 377,
      "db_id": "government_shift",
      "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.[/QUESTION]\n[SQL]\n SELECT DISTINCT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customer_id IN (SELECT c.customer_id FROM customers c WHERE c.customer_details ilike '%Hardy%Kutch%') OR EXISTS (SELECT 1 FROM customer_interactions ci JOIN analytical_layer al ON ci.customer_interaction_id = al.analytical_id WHERE ci.status_code = 'good' AND al.customers_and_services_id = cs.customers_and_services_id);"
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "question": {
      "id": 378,
      "db_id": "government_shift",
      "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.[/QUESTION]\n[SQL]\n SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customer_id IN (SELECT customer_id FROM customers WHERE customer_details ilike '%Hardy%Kutch%') OR EXISTS (SELECT 1 FROM customer_interactions ci JOIN analytical_layer al ON ci.customer_interaction_id = al.analytical_id WHERE ci.status_code = 'good' AND al.customers_and_services_id = cs.customers_and_services_id);"
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "question": {
      "id": 379,
      "db_id": "government_shift",
      "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.[/QUESTION]\n[SQL]\n SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customer_interactions ci ON cs.customer_id = ci.customer_id WHERE cs.customer_id IN (SELECT customer_id FROM customers WHERE customer_details ilike '%Hardy%Kutch%') AND ci.status_code ilike '%bad%' GROUP BY s.service_details;"
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "question": {
      "id": 380,
      "db_id": "government_shift",
      "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.[/QUESTION]\n[SQL]\n SELECT s.service_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id JOIN customer_interactions ci ON c.customer_id = ci.customer_id WHERE c.customer_details ilike '%Hardy Kutch%' AND ci.status_code ilike '%bad%' GROUP BY s.service_details;"
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "question": {
      "id": 381,
      "db_id": "government_shift",
      "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find details of all the services that have interacted with `` 15 ij '' for the the channel details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find details of all the services that have interacted with `` 15 ij '' for the the channel details.[/QUESTION]\n[SQL]\n SELECT s.service_id, s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details ilike '%15 ij %';"
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "question": {
      "id": 382,
      "db_id": "government_shift",
      "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me the details of all the services that have interacted with the channel with detail \"15 ij\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me the details of all the services that have interacted with the channel with detail \"15 ij\".[/QUESTION]\n[SQL]\n SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details ilike '%15 ij%'"
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "question": {
      "id": 383,
      "db_id": "government_shift",
      "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .[/QUESTION]\n[SQL]\n SELECT c.customer_details, s.service_details, ch.channel_details FROM customer_interactions ci JOIN customers c ON ci.customer_id = c.customer_id JOIN services s ON ci.service_id = s.service_id JOIN channels ch ON ci.channel_id = ch.channel_id WHERE ci.status_code ilike '%Stuck%' AND s.service_details ilike '%bad%' AND ch.channel_details ilike '%bad%';"
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "question": {
      "id": 384,
      "db_id": "government_shift",
      "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.[/QUESTION]\n[SQL]\n SELECT c.customer_details FROM customers c JOIN customer_interactions ci ON c.customer_id = ci.customer_id JOIN services s ON ci.service_id = s.service_id JOIN channels ch ON ci.channel_id = ch.channel_id WHERE ci.status_code ilike '%Stuck%' AND s.service_details ilike '%bad%' AND ch.channel_details ilike '%bad%' ORDER BY c.customer_details NULLS LAST;"
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "question": {
      "id": 385,
      "db_id": "government_shift",
      "question": "How many integration platforms are successful?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many integration platforms are successful?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many integration platforms are successful?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Integration_Platform i WHERE i.Status_Code = 'Successful';"
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "question": {
      "id": 386,
      "db_id": "government_shift",
      "question": "Count the number of integration platforms that have \"Success\" in the details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of integration platforms that have \"Success\" in the details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of integration platforms that have \"Success\" in the details.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Integration_Platform i JOIN Customer_Interactions c ON i.Customer_Interaction_ID = c.Customer_Interaction_ID WHERE c.Status_Code ilike '%Success%';"
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "question": {
      "id": 387,
      "db_id": "government_shift",
      "question": "List the details of all the customers who are associated with a failed integration platform ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the details of all the customers who are associated with a failed integration platform .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the details of all the customers who are associated with a failed integration platform .[/QUESTION]\n[SQL]\n SELECT c.customer_details FROM customers c JOIN customer_interactions ci ON c.customer_id = ci.customer_id WHERE ci.status_code = 'failed' AND EXISTS (SELECT 1 FROM integration_platform ip WHERE ip.customer_interaction_id = ci.customer_interaction_id);"
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "question": {
      "id": 388,
      "db_id": "government_shift",
      "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.[/QUESTION]\n[SQL]\n SELECT c.customer_details FROM customers c JOIN customer_interactions ci ON c.customer_id = ci.customer_id JOIN integration_platform ip ON ci.customer_interaction_id = ip.customer_interaction_id WHERE ip.integration_platform_details ilike '%Fail%'"
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "question": {
      "id": 389,
      "db_id": "government_shift",
      "question": "Which service ( s ) has never been used by any customer ? List their details ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which service ( s ) has never been used by any customer ? List their details .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which service ( s ) has never been used by any customer ? List their details .[/QUESTION]\n[SQL]\n SELECT s.service_id, s.service_details FROM services s LEFT JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customer_id IS NULL;"
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "question": {
      "id": 390,
      "db_id": "government_shift",
      "question": "Find details of the services that no customer has ever used . Return the service details ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find details of the services that no customer has ever used . Return the service details .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find details of the services that no customer has ever used . Return the service details .[/QUESTION]\n[SQL]\n SELECT s.service_details FROM services s LEFT JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.service_id IS NULL;"
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "question": {
      "id": 391,
      "db_id": "government_shift",
      "question": "Find all the layer type codes with their corresponding usage count."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all the layer type codes with their corresponding usage count.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all the layer type codes with their corresponding usage count.[/QUESTION]\n[SQL]\n SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS usage_count FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY usage_count DESC;"
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "question": {
      "id": 392,
      "db_id": "government_shift",
      "question": "For each analytical layer, return the analytical layer type code and the number of times it was used."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each analytical layer, return the analytical layer type code and the number of times it was used.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each analytical layer, return the analytical layer type code and the number of times it was used.[/QUESTION]\n[SQL]\n SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS COUNT FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY COUNT DESC;"
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "question": {
      "id": 393,
      "db_id": "government_shift",
      "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .[/QUESTION]\n[SQL]\n SELECT s.service_id, s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details ilike '%unsatisfied%'"
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "question": {
      "id": 394,
      "db_id": "government_shift",
      "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.[/QUESTION]\n[SQL]\n SELECT s.service_details FROM Services s JOIN Customers_and_Services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details ilike '%unsatisfied%'"
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "question": {
      "id": 395,
      "db_id": "vehicle_rent",
      "question": "How many vehicles do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many vehicles do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many vehicles do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(v.id) AS total_vehicles FROM Vehicles v;"
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "question": {
      "id": 396,
      "db_id": "vehicle_rent",
      "question": "Count the number of vehicles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of vehicles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of vehicles.[/QUESTION]\n[SQL]\n SELECT COUNT(v.id) AS total_vehicles FROM Vehicles v;"
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "question": {
      "id": 397,
      "db_id": "vehicle_rent",
      "question": "Show names for all vehicles in descending order of model year."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show names for all vehicles in descending order of model year.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show names for all vehicles in descending order of model year.[/QUESTION]\n[SQL]\n SELECT v.name FROM Vehicles v ORDER BY v.model_year DESC;"
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "question": {
      "id": 398,
      "db_id": "vehicle_rent",
      "question": "What are the names of all vehicles, ordered by model year descending?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all vehicles, ordered by model year descending?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all vehicles, ordered by model year descending?[/QUESTION]\n[SQL]\n SELECT v.name FROM Vehicles v ORDER BY v.model_year DESC;"
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "question": {
      "id": 399,
      "db_id": "vehicle_rent",
      "question": "List all distinct types of powertrain of vehicles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all distinct types of powertrain of vehicles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all distinct types of powertrain of vehicles.[/QUESTION]\n[SQL]\n SELECT DISTINCT v.type_of_powertrain FROM vehicles v;"
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "question": {
      "id": 400,
      "db_id": "vehicle_rent",
      "question": "What are the different types of powertrains?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different types of powertrains?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different types of powertrains?[/QUESTION]\n[SQL]\n SELECT DISTINCT v.Type_of_powertrain FROM Vehicles v ORDER BY v.Type_of_powertrain NULLS LAST;"
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "question": {
      "id": 401,
      "db_id": "vehicle_rent",
      "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.[/QUESTION]\n[SQL]\n SELECT v.name, v.type_of_powertrain, v.annual_fuel_cost FROM vehicles v WHERE v.model_year IN (2013, 2014);"
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "question": {
      "id": 402,
      "db_id": "vehicle_rent",
      "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?[/QUESTION]\n[SQL]\n SELECT v.name, v.type_of_powertrain, EXTRACT(YEAR FROM CURRENT_DATE) - v.model_year AS age_of_vehicle, SUM(v.annual_fuel_cost) OVER (PARTITION BY v.type_of_powertrain ORDER BY v.model_year ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS cumulative_fuel_costs FROM vehicles v WHERE v.model_year IN (2013, 2014);"
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "question": {
      "id": 403,
      "db_id": "vehicle_rent",
      "question": "Show types of powertrain with vehicles both from 2014 and 2013."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show types of powertrain with vehicles both from 2014 and 2013.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show types of powertrain with vehicles both from 2014 and 2013.[/QUESTION]\n[SQL]\n SELECT v.type_of_powertrain FROM vehicles v WHERE v.model_year IN (2014, 2013) GROUP BY v.type_of_powertrain ORDER BY COUNT(v.type_of_powertrain) DESC NULLS LAST;"
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "question": {
      "id": 404,
      "db_id": "vehicle_rent",
      "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the types of powertrains that have vehicles that were made in both 2013 and 2014?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the types of powertrains that have vehicles that were made in both 2013 and 2014?[/QUESTION]\n[SQL]\n SELECT DISTINCT v.type_of_powertrain FROM vehicles v WHERE v.model_year IN (2013, 2014);"
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "question": {
      "id": 405,
      "db_id": "vehicle_rent",
      "question": "Show all types of powertrain and the number of vehicles in each type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all types of powertrain and the number of vehicles in each type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all types of powertrain and the number of vehicles in each type.[/QUESTION]\n[SQL]\n SELECT v.type_of_powertrain, COUNT(v.id) AS number_of_vehicles FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY number_of_vehicles DESC NULLS LAST;"
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "question": {
      "id": 406,
      "db_id": "vehicle_rent",
      "question": "How many vehicles have each type of powertrain?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many vehicles have each type of powertrain?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many vehicles have each type of powertrain?[/QUESTION]\n[SQL]\n SELECT v.type_of_powertrain, COUNT(v.id) AS number_of_vehicles FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY number_of_vehicles DESC NULLS LAST;"
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "question": {
      "id": 407,
      "db_id": "vehicle_rent",
      "question": "What is the type of powertrain with most number of vehicles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the type of powertrain with most number of vehicles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the type of powertrain with most number of vehicles.[/QUESTION]\n[SQL]\n SELECT v.type_of_powertrain, COUNT(v.id) AS COUNT FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "question": {
      "id": 408,
      "db_id": "vehicle_rent",
      "question": "Which type of powertrain is most common?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which type of powertrain is most common?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which type of powertrain is most common?[/QUESTION]\n[SQL]\n SELECT v.type_of_powertrain FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY COUNT(v.type_of_powertrain) DESC LIMIT 1;"
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "question": {
      "id": 409,
      "db_id": "vehicle_rent",
      "question": "Show minimum, maximum, and average annual fuel cost for all vehicles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show minimum, maximum, and average annual fuel cost for all vehicles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show minimum, maximum, and average annual fuel cost for all vehicles.[/QUESTION]\n[SQL]\n SELECT MIN(v.Annual_fuel_cost) AS min_annual_fuel_cost, MAX(v.Annual_fuel_cost) AS max_annual_fuel_cost, AVG(v.Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles v;"
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "question": {
      "id": 410,
      "db_id": "vehicle_rent",
      "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the minimum, maximum, and average annual fuel costs across all vehicles?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the minimum, maximum, and average annual fuel costs across all vehicles?[/QUESTION]\n[SQL]\n SELECT MIN(v.Annual_fuel_cost) AS min_annual_fuel_cost, MAX(v.Annual_fuel_cost) AS max_annual_fuel_cost, AVG(v.Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles v;"
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "question": {
      "id": 411,
      "db_id": "vehicle_rent",
      "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.[/QUESTION]\n[SQL]\n SELECT v.name, v.model_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate;"
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "question": {
      "id": 412,
      "db_id": "vehicle_rent",
      "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?[/QUESTION]\n[SQL]\n SELECT v.name, v.model_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate ORDER BY v.name NULLS LAST;"
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "question": {
      "id": 413,
      "db_id": "vehicle_rent",
      "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.[/QUESTION]\n[SQL]\n SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_annual_fuel_cost FROM vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2 ORDER BY average_annual_fuel_cost DESC NULLS LAST;"
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "question": {
      "id": 414,
      "db_id": "vehicle_rent",
      "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?[/QUESTION]\n[SQL]\n SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_annual_fuel_cost FROM vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2 ORDER BY average_annual_fuel_cost DESC NULLS LAST;"
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "question": {
      "id": 415,
      "db_id": "vehicle_rent",
      "question": "Show the name, age, membership credit for all customers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the name, age, membership credit for all customers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the name, age, membership credit for all customers?[/QUESTION]\n[SQL]\n SELECT c.name, c.age, c.membership_credit FROM \"Customers\" c;"
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "question": {
      "id": 416,
      "db_id": "vehicle_rent",
      "question": "What are the names, ages, and membership credits for all customers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names, ages, and membership credits for all customers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names, ages, and membership credits for all customers?[/QUESTION]\n[SQL]\n SELECT c.name, c.age, c.membership_credit FROM \"Customers\" c;"
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "question": {
      "id": 417,
      "db_id": "vehicle_rent",
      "question": "Show the name and age of the customer with maximum membership credit."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the name and age of the customer with maximum membership credit.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the name and age of the customer with maximum membership credit.[/QUESTION]\n[SQL]\n SELECT c.name, c.age FROM \"Customers\" c WHERE c.membership_credit = (SELECT MAX(membership_credit) FROM \"Customers\");"
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "question": {
      "id": 418,
      "db_id": "vehicle_rent",
      "question": "What is the name and age of the customer with the most membership credit?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name and age of the customer with the most membership credit?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name and age of the customer with the most membership credit?[/QUESTION]\n[SQL]\n SELECT c.name, c.age FROM \"Customers\" c WHERE c.membership_credit = (SELECT MAX(membership_credit) FROM \"Customers\");"
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "question": {
      "id": 419,
      "db_id": "vehicle_rent",
      "question": "What is the average age for customers with a membership credit above the average?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average age for customers with a membership credit above the average?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average age for customers with a membership credit above the average?[/QUESTION]\n[SQL]\n SELECT AVG(c.age) FROM \"Customers\" c WHERE c.membership_credit > (SELECT AVG(d.membership_credit) FROM \"Discount\" d);"
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "question": {
      "id": 420,
      "db_id": "vehicle_rent",
      "question": "Return the average age for customers who have membership above the average across all customers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the average age for customers who have membership above the average across all customers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the average age for customers who have membership above the average across all customers.[/QUESTION]\n[SQL]\n SELECT AVG(c.age) FROM \"Customers\" c WHERE c.membership_credit > (SELECT AVG(m.membership_credit) FROM \"Customers\" m);"
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "question": {
      "id": 421,
      "db_id": "vehicle_rent",
      "question": "Show all information for all discounts."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all information for all discounts.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all information for all discounts.[/QUESTION]\n[SQL]\n SELECT * FROM \"Discount\";"
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "question": {
      "id": 422,
      "db_id": "vehicle_rent",
      "question": "Return all information about discounts."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return all information about discounts.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return all information about discounts.[/QUESTION]\n[SQL]\n SELECT * FROM \"Discount\";"
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "question": {
      "id": 423,
      "db_id": "vehicle_rent",
      "question": "Show the name and total hours of renting for each vehicle."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the name and total hours of renting for each vehicle.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the name and total hours of renting for each vehicle.[/QUESTION]\n[SQL]\n SELECT v.name AS vehicle_name, SUM(r.total_hours) AS total_rental_hours FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY total_rental_hours DESC NULLS LAST;"
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "question": {
      "id": 424,
      "db_id": "vehicle_rent",
      "question": "What are the names and total rental hours for each vehicle?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and total rental hours for each vehicle?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and total rental hours for each vehicle?[/QUESTION]\n[SQL]\n SELECT v.name AS vehicle_name, SUM(r.total_hours) AS total_rental_hours FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY total_rental_hours DESC NULLS LAST;"
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "question": {
      "id": 425,
      "db_id": "vehicle_rent",
      "question": "Show the name of vehicles with no renting history."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the name of vehicles with no renting history.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the name of vehicles with no renting history.[/QUESTION]\n[SQL]\n SELECT v.name FROM \"Vehicles\" v WHERE v.id NOT IN (SELECT r.vehicles_id FROM \"Renting_history\" r);"
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "question": {
      "id": 426,
      "db_id": "vehicle_rent",
      "question": "What are the names of vehicles that have never been rented?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of vehicles that have never been rented?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of vehicles that have never been rented?[/QUESTION]\n[SQL]\n SELECT v.name FROM Vehicles v WHERE v.id NOT IN (SELECT r.vehicles_id FROM Renting_history r);"
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "question": {
      "id": 427,
      "db_id": "vehicle_rent",
      "question": "Show the name of customer with at least two renting history records."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the name of customer with at least two renting history records.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the name of customer with at least two renting history records.[/QUESTION]\n[SQL]\n SELECT c.name FROM \"Customers\" c JOIN Renting_history r ON c.id = r.customer_id GROUP BY c.name HAVING COUNT(r.id) >= 2;"
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "question": {
      "id": 428,
      "db_id": "vehicle_rent",
      "question": "What are the names of customers who have two or more records of rental history?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of customers who have two or more records of rental history?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of customers who have two or more records of rental history?[/QUESTION]\n[SQL]\n SELECT c.name FROM \"Customers\" c JOIN Renting_history rh ON c.id = rh.customer_id GROUP BY c.name HAVING COUNT(rh.id) >= 2;"
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "question": {
      "id": 429,
      "db_id": "vehicle_rent",
      "question": "Show the name and model year of the vehicle with most number of renting history records."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the name and model year of the vehicle with most number of renting history records.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the name and model year of the vehicle with most number of renting history records.[/QUESTION]\n[SQL]\n SELECT v.name, v.model_year FROM vehicles v JOIN renting_history r ON v.id = r.vehicles_id GROUP BY v.name, v.model_year ORDER BY COUNT(r.id) DESC LIMIT 1;"
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "question": {
      "id": 430,
      "db_id": "vehicle_rent",
      "question": "What is the name and model year of the vehicle which has been rented the most times?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name and model year of the vehicle which has been rented the most times?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name and model year of the vehicle which has been rented the most times?[/QUESTION]\n[SQL]\n SELECT v.name, v.model_year FROM vehicles v JOIN renting_history rh ON v.id = rh.vehicles_id GROUP BY v.name, v.model_year ORDER BY COUNT(rh.id) DESC LIMIT 1;"
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "question": {
      "id": 431,
      "db_id": "vehicle_rent",
      "question": "Show the vehicle name with a descending order of total hours of renting."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the vehicle name with a descending order of total hours of renting.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the vehicle name with a descending order of total hours of renting.[/QUESTION]\n[SQL]\n SELECT v.name FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY SUM(r.total_hours) DESC;"
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "question": {
      "id": 432,
      "db_id": "vehicle_rent",
      "question": "What are the names of vehicles, sorted descending by total hours of renting?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of vehicles, sorted descending by total hours of renting?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of vehicles, sorted descending by total hours of renting?[/QUESTION]\n[SQL]\n SELECT v.name FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY SUM(r.total_hours) DESC;"
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "question": {
      "id": 433,
      "db_id": "vehicle_rent",
      "question": "What is the discount name with most number of renting history records?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the discount name with most number of renting history records?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the discount name with most number of renting history records?[/QUESTION]\n[SQL]\n SELECT d.name, COUNT(r.id) AS total_rentals FROM Renting_history r JOIN Discount d ON r.discount_id = d.id GROUP BY d.name ORDER BY total_rentals DESC LIMIT 1;"
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "question": {
      "id": 434,
      "db_id": "vehicle_rent",
      "question": "Return the name of the discount that corresponds to the most rental history records."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the name of the discount that corresponds to the most rental history records.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the name of the discount that corresponds to the most rental history records.[/QUESTION]\n[SQL]\n SELECT d.name FROM Discount d JOIN Renting_history rh ON d.id = rh.discount_id GROUP BY d.name ORDER BY COUNT(rh.id) DESC LIMIT 1;"
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "question": {
      "id": 435,
      "db_id": "vehicle_rent",
      "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and powertrain type of the cars that rented for more than 30 total hours.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and powertrain type of the cars that rented for more than 30 total hours.[/QUESTION]\n[SQL]\n SELECT c.name, v.type_of_powertrain FROM renting_history rh JOIN customers c ON rh.customer_id = c.id JOIN vehicles v ON rh.vehicles_id = v.id WHERE rh.total_hours > 30;"
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "question": {
      "id": 436,
      "db_id": "vehicle_rent",
      "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and powertrain types of cars that have more than 30 total rental hours?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and powertrain types of cars that have more than 30 total rental hours?[/QUESTION]\n[SQL]\n SELECT v.name, v.type_of_powertrain FROM vehicles v JOIN renting_history rh ON v.id = rh.vehicles_id WHERE rh.total_hours > 30;"
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "question": {
      "id": 437,
      "db_id": "vehicle_rent",
      "question": "Find the average city and highway fuel rates for cars with different powertrain types."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average city and highway fuel rates for cars with different powertrain types.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average city and highway fuel rates for cars with different powertrain types.[/QUESTION]\n[SQL]\n SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS average_city_fuel_rate, AVG(v.highway_fuel_economy_rate) AS average_highway_fuel_rate FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY average_city_fuel_rate DESC NULLS LAST, average_highway_fuel_rate DESC NULLS LAST;"
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "question": {
      "id": 438,
      "db_id": "vehicle_rent",
      "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?[/QUESTION]\n[SQL]\n SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS average_city_fuel_economy_rate, AVG(v.highway_fuel_economy_rate) AS average_highway_fuel_economy_rate FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY average_city_fuel_economy_rate DESC NULLS LAST, average_highway_fuel_economy_rate DESC NULLS LAST;"
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 439,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the average amount of a student loan?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average amount of a student loan?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average amount of a student loan?[/QUESTION]\n[SQL]\n SELECT AVG(sl.amount_of_loan) AS average_amount_of_loan FROM Student_Loans sl;"
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 440,
      "db_id": "cre_Students_Information_Systems",
      "question": "Compute the average amount of student loans."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Compute the average amount of student loans.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Compute the average amount of student loans.[/QUESTION]\n[SQL]\n SELECT AVG(sl.amount_of_loan) AS average_loan_amount FROM Student_Loans sl;"
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 441,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data FROM Students s JOIN (SELECT c.student_id FROM Classes c GROUP BY c.student_id HAVING COUNT(c.class_id) >= 2) AS mc ON s.student_id = mc.student_id WHERE EXISTS (SELECT d.student_id FROM Detention d WHERE d.student_id = s.student_id GROUP BY d.student_id HAVING COUNT(d.detention_id) < 2) ORDER BY s.student_id NULLS LAST;"
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 442,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data FROM Students s JOIN Transcripts t ON s.student_id = t.student_id WHERE (SELECT COUNT(DISTINCT c.class_id) FROM Classes c WHERE c.student_id = s.student_id) >= 2 AND (SELECT COUNT(DISTINCT d.detention_id) FROM Detention d WHERE d.student_id = s.student_id) <= 2;"
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 443,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'[/QUESTION]\n[SQL]\n SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details ilike '%data%' AND c.class_details not ilike 'net%' ORDER BY t.teacher_details NULLS LAST;"
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 444,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.[/QUESTION]\n[SQL]\n SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details ilike '%data%' AND c.class_details not ilike 'net%' ORDER BY t.teacher_details NULLS LAST;"
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 445,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the biographical data of the students who never had a detention or student loan ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the biographical data of the students who never had a detention or student loan .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the biographical data of the students who never had a detention or student loan .[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data FROM Students s LEFT JOIN Detention d ON s.student_id = d.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE d.student_id IS NULL AND sl.student_id IS NULL;"
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 446,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students never had a detention or student loan ? Find their biographical data ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which students never had a detention or student loan ? Find their biographical data .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which students never had a detention or student loan ? Find their biographical data .[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data FROM Students s LEFT JOIN Detention d ON s.student_id = d.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE d.student_id IS NULL AND sl.student_id IS NULL;"
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 447,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the loan amounts and loan dates of the students who have at least 2 achievements?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the loan amounts and loan dates of the students who have at least 2 achievements?[/QUESTION]\n[SQL]\n SELECT s.student_id, sl.amount_of_loan, sl.date_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE s.student_id IN (SELECT a.student_id FROM Achievements a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2);"
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 448,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the amount and date of loan for the students who have two or more achievements."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the amount and date of loan for the students who have two or more achievements.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the amount and date of loan for the students who have two or more achievements.[/QUESTION]\n[SQL]\n SELECT s.student_id, sl.amount_of_loan, sl.date_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE s.student_id IN (SELECT a.student_id FROM Achievements a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2);"
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 449,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the detail and id of the teacher who teaches the most courses."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the detail and id of the teacher who teaches the most courses.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the detail and id of the teacher who teaches the most courses.[/QUESTION]\n[SQL]\n SELECT t.teacher_details, t.teacher_id FROM Teachers t JOIN (SELECT c.teacher_id, COUNT(*) AS num_classes FROM Classes c GROUP BY c.teacher_id) AS cl ON t.teacher_id = cl.teacher_id ORDER BY num_classes DESC LIMIT 1;"
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 450,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the detail and id of the teacher who teaches the largest number of courses?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the detail and id of the teacher who teaches the largest number of courses?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the detail and id of the teacher who teaches the largest number of courses?[/QUESTION]\n[SQL]\n SELECT t.teacher_details, t.teacher_id FROM Teachers t JOIN (SELECT c.teacher_id, COUNT(*) AS num_classes FROM Classes c GROUP BY c.teacher_id ORDER BY num_classes DESC LIMIT 1) AS mc ON t.teacher_id = mc.teacher_id;"
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 451,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the distinct descriptions of all the detentions which have ever happened?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct descriptions of all the detentions which have ever happened?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct descriptions of all the detentions which have ever happened?[/QUESTION]\n[SQL]\n SELECT DISTINCT r.detention_type_description FROM Detention d JOIN Ref_Detention_Type r ON d.detention_type_code = r.detention_type_code;"
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 452,
      "db_id": "cre_Students_Information_Systems",
      "question": "Return the distinct descriptions of all the detentions that have happened."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the distinct descriptions of all the detentions that have happened.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the distinct descriptions of all the detentions that have happened.[/QUESTION]\n[SQL]\n SELECT DISTINCT d.detention_type_description FROM Detention d;"
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 453,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the personal details and the address type descriptions of all the students."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the personal details and the address type descriptions of all the students.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the personal details and the address type descriptions of all the students.[/QUESTION]\n[SQL]\n SELECT s.student_details, r.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id JOIN Ref_Address_Types r ON sa.address_type_code = r.address_type_code;"
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 454,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the personal details and the address type descriptions of each student?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the personal details and the address type descriptions of each student?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the personal details and the address type descriptions of each student?[/QUESTION]\n[SQL]\n SELECT s.student_details, r.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types r ON sa.address_type_code = r.address_type_code;"
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 455,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the the address details and the biographical information of the students."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the the address details and the biographical information of the students.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the the address details and the biographical information of the students.[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data, sa.address_details FROM Students AS s JOIN Students_Addresses AS sa ON s.student_id = sa.student_id;"
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 456,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the address details and biographical information of each student?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the address details and biographical information of each student?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the address details and biographical information of each student?[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data, sa.address_details FROM Students AS s JOIN Students_Addresses AS sa ON s.student_id = sa.student_id;"
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 457,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the biographical data and the date of the transcript of all the students."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the biographical data and the date of the transcript of all the students.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the biographical data and the date of the transcript of all the students.[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data, t.date_of_transcript FROM Students AS s JOIN Transcripts AS t ON s.student_id = t.student_id;"
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 458,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the biographical data and the date of transcript issuance of each student?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the biographical data and the date of transcript issuance of each student?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the biographical data and the date of transcript issuance of each student?[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data, t.date_of_transcript FROM Students s JOIN Transcripts t ON s.student_id = t.student_id;"
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 459,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many students got the most common result in the behavioral monitoring details? Also list the result details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many students got the most common result in the behavioral monitoring details? Also list the result details.[/QUESTION]\n[SQL]\n SELECT s.student_id, b.behaviour_monitoring_details FROM Students s JOIN Behaviour_Monitoring b ON s.student_id = b.student_id GROUP BY s.student_id, b.behaviour_monitoring_details ORDER BY COUNT(b.behaviour_monitoring_details) DESC LIMIT 1;"
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 460,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the most common result in the behavioral monitoring details. What are the count and the details of this result?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the most common result in the behavioral monitoring details. What are the count and the details of this result?[/QUESTION]\n[SQL]\n SELECT bm.behaviour_monitoring_details, COUNT(*) AS COUNT FROM Behaviour_Monitoring bm GROUP BY bm.behaviour_monitoring_details ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 461,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.[/QUESTION]\n[SQL]\n WITH transcript_count AS (SELECT t.student_id, COUNT(t.transcript_id) AS transcript_count FROM Transcripts t GROUP BY t.student_id), behavior_monitoring_count AS (SELECT b.student_id, COUNT(b.behaviour_monitoring_id) AS behavior_monitoring_count FROM Behaviour_Monitoring b GROUP BY b.student_id) SELECT s.student_id, s.bio_data, s.student_details, tc.transcript_count, bmc.behavior_monitoring_count FROM Students s JOIN transcript_count tc ON s.student_id = tc.student_id JOIN behavior_monitoring_count bmc ON s.student_id = bmc.student_id WHERE tc.transcript_count > 1 AND bmc.behavior_mon"
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 462,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.[/QUESTION]\n[SQL]\n WITH transcript_count AS (SELECT t.student_id, COUNT(t.transcript_id) AS total_transcripts FROM Transcripts t GROUP BY t.student_id), student_behaviour AS (SELECT b.student_id, COUNT(b.behaviour_monitoring_id) AS total_behaviours FROM Behaviour_Monitoring b GROUP BY b.student_id HAVING COUNT(b.behaviour_monitoring_id) >= 3) SELECT s.student_id, s.bio_data, s.student_details, tc.total_transcripts, sb.total_behaviours FROM Students s JOIN transcript_count tc ON s.student_id = tc.student_id LEFT JOIN student_behaviour sb ON s.student_id = sb.student_id WHERE tc.total_"
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 463,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data FROM Students s JOIN (SELECT bm.student_id, COUNT(*) AS frequency, array_agg(bm.behaviour_monitoring_details) AS all_details FROM Behaviour_Monitoring bm GROUP BY bm.student_id ORDER BY frequency DESC LIMIT 1) AS m ON s.student_id = m.student_id;"
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 464,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the biographical information of the students who got the most common result for their behaviour monitoring details ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the biographical information of the students who got the most common result for their behaviour monitoring details ?[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data FROM Students s JOIN Behaviour_Monitoring b ON s.student_id = b.student_id GROUP BY s.student_id, s.bio_data ORDER BY COUNT(b.behaviour_monitoring_details) DESC LIMIT 1;"
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 465,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students have gone through any event? List the students' biographical data and event date."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which students have gone through any event? List the students' biographical data and event date.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which students have gone through any event? List the students' biographical data and event date.[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data, se.event_date FROM Students AS s JOIN Student_Events AS se ON s.student_id = se.student_id;"
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 466,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical data and event date for students who participated in any events."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the biographical data and event date for students who participated in any events.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the biographical data and event date for students who participated in any events.[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data, se.event_date FROM Students AS s JOIN Student_Events AS se ON s.student_id = se.student_id;"
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 467,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many students have joined in the most common type of event? List the number, the event type and description."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many students have joined in the most common type of event? List the number, the event type and description.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many students have joined in the most common type of event? List the number, the event type and description.[/QUESTION]\n[SQL]\n SELECT COUNT(*) AS total_students, r.event_type_code, r.event_type_description FROM Student_Events se JOIN Ref_Event_Types r ON se.event_type_code = r.event_type_code GROUP BY r.event_type_code, r.event_type_description ORDER BY total_students DESC LIMIT 1;"
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 468,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the type of event the most students joined? Give me the number of students, and the event type code and description.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the type of event the most students joined? Give me the number of students, and the event type code and description.[/QUESTION]\n[SQL]\n SELECT e.event_type_code, e.event_type_description, COUNT(DISTINCT s.student_id) AS student_count FROM Student_Events s JOIN Ref_Event_Types e ON s.event_type_code = e.event_type_code GROUP BY e.event_type_code, e.event_type_description ORDER BY student_count DESC LIMIT 1;"
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 469,
      "db_id": "cre_Students_Information_Systems",
      "question": "How are all the achievements described? List the achievement detail and the type description."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How are all the achievements described? List the achievement detail and the type description.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How are all the achievements described? List the achievement detail and the type description.[/QUESTION]\n[SQL]\n SELECT a.achievement_id, a.achievement_details, t.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type t ON a.achievement_type_code = t.achievement_type_code;"
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 470,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the achievement detail and the type description of each achievements?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the achievement detail and the type description of each achievements?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the achievement detail and the type description of each achievements?[/QUESTION]\n[SQL]\n SELECT a.achievement_id, a.achievement_details, t.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type t ON a.achievement_type_code = t.achievement_type_code;"
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 471,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many teachers have taught a student who has not won any achievements?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many teachers have taught a student who has not won any achievements?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many teachers have taught a student who has not won any achievements?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.teacher_id) AS number_of_teachers FROM Classes c JOIN Students s ON c.student_id = s.student_id LEFT JOIN Achievements a ON s.student_id = a.student_id WHERE a.student_id IS NULL;"
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 472,
      "db_id": "cre_Students_Information_Systems",
      "question": "Count the number of teachers who have taught students who have never won an achievement."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of teachers who have taught students who have never won an achievement.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of teachers who have taught students who have never won an achievement.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.teacher_id) AS number_of_teachers FROM Classes c JOIN Students s ON c.student_id = s.student_id WHERE NOT EXISTS (SELECT 1 FROM Achievements a WHERE a.student_id = s.student_id);"
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 473,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the date of the transcripts and the transcript details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the date of the transcripts and the transcript details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the date of the transcripts and the transcript details.[/QUESTION]\n[SQL]\n SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t ORDER BY t.date_of_transcript NULLS LAST;"
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 474,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the date and detail of each transcript?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the date and detail of each transcript?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the date and detail of each transcript?[/QUESTION]\n[SQL]\n SELECT t.transcript_id, t.date_of_transcript, t.transcript_details FROM Transcripts t ORDER BY t.date_of_transcript NULLS LAST;"
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 475,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the achievement type code, achievement details and the date of the achievements."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the achievement type code, achievement details and the date of the achievements.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the achievement type code, achievement details and the date of the achievements.[/QUESTION]\n[SQL]\n SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements a ORDER BY a.date_achievement NULLS LAST;"
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 476,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the type code, details, and date of each achievement?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the type code, details, and date of each achievement?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the type code, details, and date of each achievement?[/QUESTION]\n[SQL]\n SELECT a.achievement_id, a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements a ORDER BY a.date_achievement NULLS LAST;"
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 477,
      "db_id": "cre_Students_Information_Systems",
      "question": "Show the detention start time and end time of the detentions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the detention start time and end time of the detentions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the detention start time and end time of the detentions.[/QUESTION]\n[SQL]\n SELECT d.detention_id, d.datetime_detention_start, d.datetime_detention_end FROM Detention d;"
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 478,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the starting time and ending time of each detention record?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the starting time and ending time of each detention record?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the starting time and ending time of each detention record?[/QUESTION]\n[SQL]\n SELECT d.detention_id, d.datetime_detention_start, d.datetime_detention_end FROM Detention d ORDER BY d.detention_id NULLS LAST;"
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 479,
      "db_id": "cre_Students_Information_Systems",
      "question": "Show the biographical information of the students whose details include the substring 'Suite'."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the biographical information of the students whose details include the substring 'Suite'.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the biographical information of the students whose details include the substring 'Suite'.[/QUESTION]\n[SQL]\n SELECT s.bio_data FROM Students s WHERE s.student_details ilike '%Suite%';"
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 480,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which students have 'Suite' as a substring in their details? Give me their biographical information.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which students have 'Suite' as a substring in their details? Give me their biographical information.[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data FROM Students s WHERE s.student_details ilike '%Suite%';"
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 481,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the details for all the pairs of teachers and students who are in the same class."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the details for all the pairs of teachers and students who are in the same class.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the details for all the pairs of teachers and students who are in the same class.[/QUESTION]\n[SQL]\n SELECT t.teacher_id, s.student_id FROM Teachers AS t CROSS JOIN Students AS s INNER JOIN Classes AS c ON t.teacher_id = c.teacher_id AND s.student_id = c.student_id;"
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 482,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.[/QUESTION]\n[SQL]\n SELECT t.teacher_id, s.student_id FROM Teachers AS t CROSS JOIN Students AS s INNER JOIN Classes AS c ON t.teacher_id = c.teacher_id AND s.student_id = c.student_id;"
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 483,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.[/QUESTION]\n[SQL]\n SELECT t.teacher_id, COUNT(c.class_id) AS number_of_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY number_of_classes DESC LIMIT 1;"
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 484,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.[/QUESTION]\n[SQL]\n SELECT t.teacher_id, COUNT(c.class_id) AS num_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY num_classes DESC LIMIT 1;"
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 485,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many courses do students take at most? Also find the id of the student who takes the most courses."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many courses do students take at most? Also find the id of the student who takes the most courses.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many courses do students take at most? Also find the id of the student who takes the most courses.[/QUESTION]\n[SQL]\n SELECT MAX(COUNT) AS max_courses, s.student_id FROM (SELECT t.student_id, COUNT(*) AS COUNT FROM Transcripts t GROUP BY t.student_id) AS subquery JOIN Students s ON subquery.student_id = s.student_id GROUP BY s.student_id ORDER BY max_courses DESC LIMIT 1;"
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 486,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.[/QUESTION]\n[SQL]\n SELECT s.student_id, COUNT(c.class_id) AS class_count FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id ORDER BY class_count DESC LIMIT 1;"
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 487,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students take 2 courses? List student id and details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which students take 2 courses? List student id and details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which students take 2 courses? List student id and details.[/QUESTION]\n[SQL]\n SELECT s.student_id, s.student_details FROM Students s JOIN Transcripts t ON s.student_id = t.student_id WHERE EXISTS (SELECT 1 FROM Transcripts t2 WHERE t2.student_id = t.student_id AND t2.transcript_id != t.transcript_id) GROUP BY s.student_id, s.student_details HAVING COUNT(t.transcript_id) >= 2;"
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 488,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the ids and details of the students who take 2 courses?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids and details of the students who take 2 courses?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids and details of the students who take 2 courses?[/QUESTION]\n[SQL]\n SELECT s.student_id, s.student_details FROM Students s JOIN (SELECT t.student_id FROM Transcripts t GROUP BY t.student_id HAVING COUNT(t.transcript_id) >= 2) AS m ON s.student_id = m.student_id;"
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 489,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the least common detention type? Show the type code and the description."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the least common detention type? Show the type code and the description.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the least common detention type? Show the type code and the description.[/QUESTION]\n[SQL]\n SELECT rdt.detention_type_code, rdt.detention_type_description FROM Ref_Detention_Type rdt GROUP BY rdt.detention_type_code, rdt.detention_type_description ORDER BY COUNT(rdt.detention_type_code) ASC LIMIT 1;"
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 490,
      "db_id": "cre_Students_Information_Systems",
      "question": "Give me the type code and description of the least common detention type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me the type code and description of the least common detention type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me the type code and description of the least common detention type.[/QUESTION]\n[SQL]\n SELECT rd.detention_type_code, rd.detention_type_description FROM Ref_Detention_Type rd GROUP BY rd.detention_type_code, rd.detention_type_description ORDER BY COUNT(rd.detention_type_code) ASC LIMIT 1;"
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 491,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which students have a student loan more than the average amount? List the students' biographical data and the details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which students have a student loan more than the average amount? List the students' biographical data and the details.[/QUESTION]\n[SQL]\n SELECT s.bio_data, s.student_details, sl.amount_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);"
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 492,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical data and details for students whose student loan is above the average amount."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the biographical data and details for students whose student loan is above the average amount.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the biographical data and details for students whose student loan is above the average amount.[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data, s.student_details, sl.amount_of_loan FROM Students AS s JOIN Student_Loans AS sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);"
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 493,
      "db_id": "cre_Students_Information_Systems",
      "question": "When was the earliest date of loan?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]When was the earliest date of loan?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]When was the earliest date of loan?[/QUESTION]\n[SQL]\n SELECT MIN(s.date_of_loan) AS min_date_of_loan FROM Student_Loans s;"
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 494,
      "db_id": "cre_Students_Information_Systems",
      "question": "Return the earliest date of loan in the record."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the earliest date of loan in the record.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the earliest date of loan in the record.[/QUESTION]\n[SQL]\n SELECT MIN(s.date_of_loan) AS min_date_of_loan FROM Student_Loans s;"
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 495,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which student has the loan with the minimum value? List the student's biographical information."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which student has the loan with the minimum value? List the student's biographical information.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which student has the loan with the minimum value? List the student's biographical information.[/QUESTION]\n[SQL]\n SELECT s.bio_data FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1;"
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 496,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical information of the student with the smallest student loan."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the biographical information of the student with the smallest student loan.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the biographical information of the student with the smallest student loan.[/QUESTION]\n[SQL]\n SELECT s.bio_data FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1;"
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 497,
      "db_id": "cre_Students_Information_Systems",
      "question": "When was the transcript issued for the student with loan of maximum value?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]When was the transcript issued for the student with loan of maximum value?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]When was the transcript issued for the student with loan of maximum value?[/QUESTION]\n[SQL]\n SELECT MAX(t.date_of_transcript) AS latest_transcript_issue_date FROM Transcripts t JOIN Student_Loans s ON t.student_id = s.student_id;"
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 498,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the transcript issuance date for the student with the largest amount of loan?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the transcript issuance date for the student with the largest amount of loan?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the transcript issuance date for the student with the largest amount of loan?[/QUESTION]\n[SQL]\n SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans s ON t.student_id = s.student_id ORDER BY s.amount_of_loan DESC LIMIT 1;"
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 499,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which teachers have taught the student with the earliest transcript issuance? List the teacher details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which teachers have taught the student with the earliest transcript issuance? List the teacher details.[/QUESTION]\n[SQL]\n SELECT t.teacher_id, t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Transcripts tr ON c.student_id = tr.student_id ORDER BY tr.date_of_transcript ASC LIMIT 1;"
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 500,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the details of the teachers who have taught the student with the earliest transcript issuance.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the details of the teachers who have taught the student with the earliest transcript issuance.[/QUESTION]\n[SQL]\n SELECT t.teacher_id, t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Transcripts tr ON c.student_id = tr.student_id ORDER BY tr.date_of_transcript ASC LIMIT 1;"
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 501,
      "db_id": "cre_Students_Information_Systems",
      "question": "How much total loan does each student have ? List the student ids and the amounts ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How much total loan does each student have ? List the student ids and the amounts .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How much total loan does each student have ? List the student ids and the amounts .[/QUESTION]\n[SQL]\n SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id ORDER BY total_loan DESC NULLS LAST;"
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 502,
      "db_id": "cre_Students_Information_Systems",
      "question": "For each student, find the student id and the total amount of loan he or she has."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each student, find the student id and the total amount of loan he or she has.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each student, find the student id and the total amount of loan he or she has.[/QUESTION]\n[SQL]\n SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id ORDER BY total_loan DESC NULLS LAST;"
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 503,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many courses does each student take? List the student id, the student biographical data and the course count."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many courses does each student take? List the student id, the student biographical data and the course count.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many courses does each student take? List the student id, the student biographical data and the course count.[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS total_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data ORDER BY total_classes DESC NULLS LAST;"
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 504,
      "db_id": "cre_Students_Information_Systems",
      "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each student, find the student id, student biographical data, and the number of courses he or she takes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each student, find the student id, student biographical data, and the number of courses he or she takes.[/QUESTION]\n[SQL]\n SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS num_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data;"
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 505,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many students have gone through a detention?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many students have gone through a detention?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many students have gone through a detention?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT d.student_id) AS number_of_students FROM Detention d;"
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 506,
      "db_id": "cre_Students_Information_Systems",
      "question": "Count the number of students who have a detention record."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of students who have a detention record.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of students who have a detention record.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT d.student_id) AS number_of_students FROM Detention d;"
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 507,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the code and description of the most common student address type?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the code and description of the most common student address type?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the code and description of the most common student address type?[/QUESTION]\n[SQL]\n SELECT r.address_type_code, r.address_type_description FROM Ref_Address_Types r JOIN (SELECT s.address_type_code, COUNT(*) AS frequency FROM Students_Addresses s GROUP BY s.address_type_code ORDER BY frequency DESC LIMIT 1) AS m ON r.address_type_code = m.address_type_code;"
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 508,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the most common student address type? Give me the code and description of the address type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the most common student address type? Give me the code and description of the address type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the most common student address type? Give me the code and description of the address type.[/QUESTION]\n[SQL]\n SELECT r.address_type_code, r.address_type_description FROM (SELECT s.address_type_code, COUNT(*) AS frequency FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id GROUP BY s.address_type_code) AS subquery ORDER BY frequency DESC LIMIT 1;"
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 509,
      "db_id": "cre_Students_Information_Systems",
      "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For those students who have gone through an event, who do not have a student loan? List the students' biographical data[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For those students who have gone through an event, who do not have a student loan? List the students' biographical data[/QUESTION]\n[SQL]\n SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL ORDER BY s.bio_data NULLS LAST;"
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 510,
      "db_id": "cre_Students_Information_Systems",
      "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Among the students who have an event record, who do not have a student loan? Return the students' biographical data.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Among the students who have an event record, who do not have a student loan? Return the students' biographical data.[/QUESTION]\n[SQL]\n SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL;"
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 511,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the start time and the end time of the students' addresses for the students who have 2 transcripts.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the start time and the end time of the students' addresses for the students who have 2 transcripts.[/QUESTION]\n[SQL]\n SELECT s.student_id, a.address_details, t.date_of_transcript, lag(t.date_of_transcript) OVER (PARTITION BY s.student_id ORDER BY t.date_of_transcript) AS previous_transcript FROM Students AS s JOIN Transcripts AS t ON s.student_id = t.student_id JOIN Students_Addresses AS sa ON s.student_id = sa.student_id JOIN Addresses AS a ON sa.address_id = a.address_id WHERE date_part('year', age(now(), t.date_of_transcript)) <= 2;"
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 512,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the start time and end time of addresses for the students who receive 2 transcripts?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the start time and end time of addresses for the students who receive 2 transcripts?[/QUESTION]\n[SQL]\n SELECT s.student_id, a.address_details, t.date_of_transcript, lag(t.date_of_transcript) OVER (PARTITION BY s.student_id ORDER BY t.date_of_transcript) AS previous_transcript FROM Students AS s JOIN Addresses AS a ON a.address_id = s.current_address JOIN Transcripts AS t ON t.student_id = s.student_id WHERE EXISTS (SELECT 1 FROM Transcripts t2 WHERE t2.student_id = t.student_id AND t2.date_of_transcript > t.date_of_transcript) ORDER BY s.student_id, t.date_of_transcript NULLS LAST;"
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 513,
      "db_id": "cre_Students_Information_Systems",
      "question": "When did all the detentions start?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]When did all the detentions start?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]When did all the detentions start?[/QUESTION]\n[SQL]\n SELECT MIN(d.datetime_detention_start) AS earliest_start_time FROM Detention d;"
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 514,
      "db_id": "cre_Students_Information_Systems",
      "question": "Give me the detention start date for all the detention records."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me the detention start date for all the detention records.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me the detention start date for all the detention records.[/QUESTION]\n[SQL]\n SELECT d.detention_id, d.datetime_detention_start FROM Detention d;"
  },
  {
    "id": 515,
    "db_id": "book_1",
    "question": {
      "id": 515,
      "db_id": "book_1",
      "question": "List all the author names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all the author names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all the author names.[/QUESTION]\n[SQL]\n SELECT a.name FROM author a ORDER BY a.name NULLS LAST;"
  },
  {
    "id": 516,
    "db_id": "book_1",
    "question": {
      "id": 516,
      "db_id": "book_1",
      "question": "What are the names of all the authors?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all the authors?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all the authors?[/QUESTION]\n[SQL]\n SELECT a.name FROM author a;"
  },
  {
    "id": 517,
    "db_id": "book_1",
    "question": {
      "id": 517,
      "db_id": "book_1",
      "question": "Show all Client names and their addresses."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all Client names and their addresses.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all Client names and their addresses.[/QUESTION]\n[SQL]\n SELECT c.name, c.address FROM client c;"
  },
  {
    "id": 518,
    "db_id": "book_1",
    "question": {
      "id": 518,
      "db_id": "book_1",
      "question": "What are the names and addressed of all clients?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and addressed of all clients?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and addressed of all clients?[/QUESTION]\n[SQL]\n SELECT c.name, c.address FROM client c;"
  },
  {
    "id": 519,
    "db_id": "book_1",
    "question": {
      "id": 519,
      "db_id": "book_1",
      "question": "List all Book titles, ISBNs, and sale prices."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all Book titles, ISBNs, and sale prices.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all Book titles, ISBNs, and sale prices.[/QUESTION]\n[SQL]\n SELECT b.title, b.isbn, b.saleprice FROM book b;"
  },
  {
    "id": 520,
    "db_id": "book_1",
    "question": {
      "id": 520,
      "db_id": "book_1",
      "question": "What are the titles, ISBNs, and sale prices for all books?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles, ISBNs, and sale prices for all books?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles, ISBNs, and sale prices for all books?[/QUESTION]\n[SQL]\n SELECT b.title, b.isbn, b.saleprice FROM book b;"
  },
  {
    "id": 521,
    "db_id": "book_1",
    "question": {
      "id": 521,
      "db_id": "book_1",
      "question": "How many books do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many books do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many books do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Book b;"
  },
  {
    "id": 522,
    "db_id": "book_1",
    "question": {
      "id": 522,
      "db_id": "book_1",
      "question": "Count the number of books."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of books.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of books.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Book;"
  },
  {
    "id": 523,
    "db_id": "book_1",
    "question": {
      "id": 523,
      "db_id": "book_1",
      "question": "How many authors are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many authors are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many authors are there?[/QUESTION]\n[SQL]\n SELECT COUNT(a.idAuthor) FROM Author a;"
  },
  {
    "id": 524,
    "db_id": "book_1",
    "question": {
      "id": 524,
      "db_id": "book_1",
      "question": "Count the number of authors."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of authors.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of authors.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT a.idAuthor) AS total_authors FROM Author a;"
  },
  {
    "id": 525,
    "db_id": "book_1",
    "question": {
      "id": 525,
      "db_id": "book_1",
      "question": "How many clients are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many clients are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many clients are there?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.idclient) AS number_of_clients FROM client c;"
  },
  {
    "id": 526,
    "db_id": "book_1",
    "question": {
      "id": 526,
      "db_id": "book_1",
      "question": "Return the number of clients."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the number of clients.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the number of clients.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.idclient) AS total_clients FROM client c;"
  },
  {
    "id": 527,
    "db_id": "book_1",
    "question": {
      "id": 527,
      "db_id": "book_1",
      "question": "List names and addresses of all clients in alphabetical order by their names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List names and addresses of all clients in alphabetical order by their names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List names and addresses of all clients in alphabetical order by their names.[/QUESTION]\n[SQL]\n SELECT c.name, c.address FROM client c ORDER BY c.name ASC;"
  },
  {
    "id": 528,
    "db_id": "book_1",
    "question": {
      "id": 528,
      "db_id": "book_1",
      "question": "What are the names and addressed of all clients, ordered alphabetically by name?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and addressed of all clients, ordered alphabetically by name?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and addressed of all clients, ordered alphabetically by name?[/QUESTION]\n[SQL]\n SELECT c.name, c.address FROM client c ORDER BY c.name ASC;"
  },
  {
    "id": 529,
    "db_id": "book_1",
    "question": {
      "id": 529,
      "db_id": "book_1",
      "question": "Show all book titles and corresponding author names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all book titles and corresponding author names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all book titles and corresponding author names.[/QUESTION]\n[SQL]\n SELECT b.title, a.\"name\" FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor;"
  },
  {
    "id": 530,
    "db_id": "book_1",
    "question": {
      "id": 530,
      "db_id": "book_1",
      "question": "What are the names of all books and their corresponding authors?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all books and their corresponding authors?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all books and their corresponding authors?[/QUESTION]\n[SQL]\n SELECT b.title, a.name FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor;"
  },
  {
    "id": 531,
    "db_id": "book_1",
    "question": {
      "id": 531,
      "db_id": "book_1",
      "question": "Show all order ids and their client names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all order ids and their client names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all order ids and their client names.[/QUESTION]\n[SQL]\n SELECT o.idorder, c.name FROM orders o JOIN clients c ON o.idclient = c.idclient;"
  },
  {
    "id": 532,
    "db_id": "book_1",
    "question": {
      "id": 532,
      "db_id": "book_1",
      "question": "What are the ids of all orders and the corresponding client names?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of all orders and the corresponding client names?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of all orders and the corresponding client names?[/QUESTION]\n[SQL]\n SELECT o.idorder, c.name FROM orders o JOIN clients c ON o.idclient = c.idclient;"
  },
  {
    "id": 533,
    "db_id": "book_1",
    "question": {
      "id": 533,
      "db_id": "book_1",
      "question": "Show all author names and the numbers of books each has written."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all author names and the numbers of books each has written.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all author names and the numbers of books each has written.[/QUESTION]\n[SQL]\n WITH total_books AS (SELECT ab.author, COUNT(ab.isbn) AS num_books FROM author_book ab GROUP BY ab.author) SELECT a.\"name\", tb.num_books FROM author a JOIN total_books tb ON a.idauthor = tb.author;"
  },
  {
    "id": 534,
    "db_id": "book_1",
    "question": {
      "id": 534,
      "db_id": "book_1",
      "question": "What are the names of all the authors, and how many books has each written?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all the authors, and how many books has each written?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all the authors, and how many books has each written?[/QUESTION]\n[SQL]\n WITH author_book AS (SELECT ab.author, COUNT(ab.isbn) AS book_count FROM author_book ab GROUP BY ab.author) SELECT a.\"name\", ab.book_count FROM author_book ab JOIN author a ON ab.author = a.idauthor;"
  },
  {
    "id": 535,
    "db_id": "book_1",
    "question": {
      "id": 535,
      "db_id": "book_1",
      "question": "Show all book isbns and the numbers of orders for each."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all book isbns and the numbers of orders for each.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all book isbns and the numbers of orders for each.[/QUESTION]\n[SQL]\n WITH book_orders AS (SELECT b.isbn, COUNT(o.idorder) AS num_orders FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN books_order bo ON b.isbn = bo.isbn JOIN order o ON bo.idorder = o.idorder GROUP BY b.isbn) SELECT io.isbn, io.num_orders FROM book_orders io ORDER BY io.num_orders DESC;"
  },
  {
    "id": 536,
    "db_id": "book_1",
    "question": {
      "id": 536,
      "db_id": "book_1",
      "question": "What are all isbns for each book, and how many times has each been ordered?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all isbns for each book, and how many times has each been ordered?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all isbns for each book, and how many times has each been ordered?[/QUESTION]\n[SQL]\n WITH book_orders AS (SELECT b.isbn, co.idorder FROM book b JOIN books_order bo ON b.isbn = bo.isbn JOIN orders co ON bo.idorder = co.idorder) SELECT io.isbn, COUNT(*) OVER (PARTITION BY io.isbn) AS num_orders FROM book_orders io;"
  },
  {
    "id": 537,
    "db_id": "book_1",
    "question": {
      "id": 537,
      "db_id": "book_1",
      "question": "Show all book isbns and the total amount ordered for each."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all book isbns and the total amount ordered for each.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all book isbns and the total amount ordered for each.[/QUESTION]\n[SQL]\n WITH total_ordered AS (SELECT b.isbn, SUM(bo.amount) AS total_amount FROM book b JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.isbn) SELECT t.isbn, t.total_amount FROM total_ordered t;"
  },
  {
    "id": 538,
    "db_id": "book_1",
    "question": {
      "id": 538,
      "db_id": "book_1",
      "question": "What are the isbns for all books, and what is the total amount ordered for each?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the isbns for all books, and what is the total amount ordered for each?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the isbns for all books, and what is the total amount ordered for each?[/QUESTION]\n[SQL]\n SELECT b.ISBN, SUM(bo.amount) AS total_amount FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN ORDER BY total_amount DESC NULLS LAST;"
  },
  {
    "id": 539,
    "db_id": "book_1",
    "question": {
      "id": 539,
      "db_id": "book_1",
      "question": "Show the book title corresponding to the book with the most number of orders."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the book title corresponding to the book with the most number of orders.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the book title corresponding to the book with the most number of orders.[/QUESTION]\n[SQL]\n SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.title ORDER BY COUNT(bo.idorder) DESC LIMIT 1;"
  },
  {
    "id": 540,
    "db_id": "book_1",
    "question": {
      "id": 540,
      "db_id": "book_1",
      "question": "What is the title of the book that has been ordered the greatest number of times?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the title of the book that has been ordered the greatest number of times?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the title of the book that has been ordered the greatest number of times?[/QUESTION]\n[SQL]\n SELECT b.title, COUNT(*) AS total_orders FROM books_order bo JOIN book b ON bo.isbn = b.isbn GROUP BY b.title ORDER BY total_orders DESC LIMIT 1;"
  },
  {
    "id": 541,
    "db_id": "book_1",
    "question": {
      "id": 541,
      "db_id": "book_1",
      "question": "Show the book title and purchase price of the book that has had the greatest amount in orders."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the book title and purchase price of the book that has had the greatest amount in orders.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the book title and purchase price of the book that has had the greatest amount in orders.[/QUESTION]\n[SQL]\n SELECT b.title, b.purchaseprice FROM book b JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.amount = (SELECT MAX(amount) FROM books_order);"
  },
  {
    "id": 542,
    "db_id": "book_1",
    "question": {
      "id": 542,
      "db_id": "book_1",
      "question": "What is the title and purchase price of the book that has the highest total order amount?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the title and purchase price of the book that has the highest total order amount?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the title and purchase price of the book that has the highest total order amount?[/QUESTION]\n[SQL]\n SELECT b.title, b.purchaseprice FROM book b JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.amount = (SELECT MAX(amount) FROM books_order);"
  },
  {
    "id": 543,
    "db_id": "book_1",
    "question": {
      "id": 543,
      "db_id": "book_1",
      "question": "Show the titles of books that have been ordered."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the titles of books that have been ordered.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the titles of books that have been ordered.[/QUESTION]\n[SQL]\n SELECT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.idorder IN (SELECT o.idorder FROM orders o);"
  },
  {
    "id": 544,
    "db_id": "book_1",
    "question": {
      "id": 544,
      "db_id": "book_1",
      "question": "What are the different titles of books that have been ordered in the past?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different titles of books that have been ordered in the past?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different titles of books that have been ordered in the past?[/QUESTION]\n[SQL]\n SELECT DISTINCT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn JOIN orders o ON bo.idorder = o.idorder WHERE o.dateorder < CURRENT_DATE;"
  },
  {
    "id": 545,
    "db_id": "book_1",
    "question": {
      "id": 545,
      "db_id": "book_1",
      "question": "Show the names of clients who have ordered at least once."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of clients who have ordered at least once.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of clients who have ordered at least once.[/QUESTION]\n[SQL]\n SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name;"
  },
  {
    "id": 546,
    "db_id": "book_1",
    "question": {
      "id": 546,
      "db_id": "book_1",
      "question": "What are the names of the different clients who have made an order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the different clients who have made an order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the different clients who have made an order?[/QUESTION]\n[SQL]\n SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient;"
  },
  {
    "id": 547,
    "db_id": "book_1",
    "question": {
      "id": 547,
      "db_id": "book_1",
      "question": "Show all client names and the number of orders each has made."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all client names and the number of orders each has made.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all client names and the number of orders each has made.[/QUESTION]\n[SQL]\n SELECT c.name, COUNT(o.idorder) AS order_count FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY order_count DESC NULLS LAST;"
  },
  {
    "id": 548,
    "db_id": "book_1",
    "question": {
      "id": 548,
      "db_id": "book_1",
      "question": "What are the names of all the clients, and how many times has each of them ordered?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all the clients, and how many times has each of them ordered?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all the clients, and how many times has each of them ordered?[/QUESTION]\n[SQL]\n SELECT c.name, COUNT(o.idorder) AS number_of_orders FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY number_of_orders DESC NULLS LAST;"
  },
  {
    "id": 549,
    "db_id": "book_1",
    "question": {
      "id": 549,
      "db_id": "book_1",
      "question": "What is the name of the client with the most number of orders?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the client with the most number of orders?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the client with the most number of orders?[/QUESTION]\n[SQL]\n SELECT c.name, COUNT(o.idorder) AS order_count FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY order_count DESC LIMIT 1;"
  },
  {
    "id": 550,
    "db_id": "book_1",
    "question": {
      "id": 550,
      "db_id": "book_1",
      "question": "Give the name of the client who has made the most orders."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the name of the client who has made the most orders.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the name of the client who has made the most orders.[/QUESTION]\n[SQL]\n SELECT c.name FROM Client c JOIN Orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY COUNT(o.idorder) DESC LIMIT 1;"
  },
  {
    "id": 551,
    "db_id": "book_1",
    "question": {
      "id": 551,
      "db_id": "book_1",
      "question": "Show the client names and their total amounts of books ordered."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the client names and their total amounts of books ordered.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the client names and their total amounts of books ordered.[/QUESTION]\n[SQL]\n WITH total_books AS (SELECT o.idclient, COUNT(*) AS total_books FROM orders o GROUP BY o.idclient), client_info AS (SELECT c.name, c.address, c.numcc FROM client c JOIN total_books tb ON c.idclient = tb.idclient) SELECT ci.name, ci.address, ci.numcc, tb.total_books FROM client_info ci JOIN total_books tb ON ci.name = 'John'"
  },
  {
    "id": 552,
    "db_id": "book_1",
    "question": {
      "id": 552,
      "db_id": "book_1",
      "question": "What are the names of all the clients, and the total amount of books ordered by each?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all the clients, and the total amount of books ordered by each?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all the clients, and the total amount of books ordered by each?[/QUESTION]\n[SQL]\n WITH client_orders AS (SELECT c.name, co.idorder FROM client c JOIN orders o ON c.idclient = o.idclient JOIN books_order bo ON o.idorder = bo.idorder), order_books AS (SELECT co.idorder, COUNT(*) AS total_books FROM client_orders co GROUP BY co.idorder) SELECT co.name, ob.total_books FROM client_orders co JOIN order_books ob ON co.idorder = ob.idorder;"
  },
  {
    "id": 553,
    "db_id": "book_1",
    "question": {
      "id": 553,
      "db_id": "book_1",
      "question": "Show the client name who has the most total amount of books ordered."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the client name who has the most total amount of books ordered.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the client name who has the most total amount of books ordered.[/QUESTION]\n[SQL]\n SELECT c.name, SUM(b.price) AS total_spent FROM client c JOIN orders o ON c.idclient = o.idclient JOIN book_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn GROUP BY c.name ORDER BY total_spent DESC LIMIT 1;"
  },
  {
    "id": 554,
    "db_id": "book_1",
    "question": {
      "id": 554,
      "db_id": "book_1",
      "question": "What is the name of the client who has ordered the greatest total amount of books?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the client who has ordered the greatest total amount of books?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the client who has ordered the greatest total amount of books?[/QUESTION]\n[SQL]\n SELECT c.name, SUM(b.saleprice * b.amount) AS total_spent FROM client c JOIN orders o ON c.idclient = o.idclient JOIN book_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn GROUP BY c.name ORDER BY total_spent DESC LIMIT 1;"
  },
  {
    "id": 555,
    "db_id": "book_1",
    "question": {
      "id": 555,
      "db_id": "book_1",
      "question": "Show all book titles for books that have no orders."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all book titles for books that have no orders.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all book titles for books that have no orders.[/QUESTION]\n[SQL]\n SELECT b.title FROM book b LEFT JOIN Books_Order bo ON b.isbn = bo.isbn WHERE bo.isbn IS NULL;"
  },
  {
    "id": 556,
    "db_id": "book_1",
    "question": {
      "id": 556,
      "db_id": "book_1",
      "question": "What are the titles of books that have never been ordered?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of books that have never been ordered?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of books that have never been ordered?[/QUESTION]\n[SQL]\n SELECT b.title FROM book b WHERE b.isbn NOT IN (SELECT o.isbn FROM orders o);"
  },
  {
    "id": 557,
    "db_id": "book_1",
    "question": {
      "id": 557,
      "db_id": "book_1",
      "question": "Show all client names for clients who have not made orders."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all client names for clients who have not made orders.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all client names for clients who have not made orders.[/QUESTION]\n[SQL]\n SELECT c.name FROM client c LEFT JOIN orders o ON c.idclient = o.idclient WHERE o.idclient IS NULL;"
  },
  {
    "id": 558,
    "db_id": "book_1",
    "question": {
      "id": 558,
      "db_id": "book_1",
      "question": "What are the names of clients who have never made an order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of clients who have never made an order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of clients who have never made an order?[/QUESTION]\n[SQL]\n SELECT c.name FROM client c WHERE c.idclient NOT IN (SELECT o.idclient FROM orders o);"
  },
  {
    "id": 559,
    "db_id": "book_1",
    "question": {
      "id": 559,
      "db_id": "book_1",
      "question": "What is the maximum and the minimum sale price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the maximum and the minimum sale price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the maximum and the minimum sale price?[/QUESTION]\n[SQL]\n SELECT MAX(b.SalePrice) AS max_sale_price, MIN(b.SalePrice) AS min_sale_price FROM Book b;"
  },
  {
    "id": 560,
    "db_id": "book_1",
    "question": {
      "id": 560,
      "db_id": "book_1",
      "question": "Give the maximum and minimum sale price of books."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the maximum and minimum sale price of books.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the maximum and minimum sale price of books.[/QUESTION]\n[SQL]\n SELECT MAX(b.SalePrice) AS max_sale_price, MIN(b.SalePrice) AS min_sale_price FROM Book b;"
  },
  {
    "id": 561,
    "db_id": "book_1",
    "question": {
      "id": 561,
      "db_id": "book_1",
      "question": "What is the average purchase price and the average sale price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average purchase price and the average sale price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average purchase price and the average sale price?[/QUESTION]\n[SQL]\n SELECT AVG(b.PurchasePrice) AS Average_Purchase_Price, AVG(b.SalePrice) AS Average_Sale_Price FROM Book b;"
  },
  {
    "id": 562,
    "db_id": "book_1",
    "question": {
      "id": 562,
      "db_id": "book_1",
      "question": "Give the average purchase price and average sale price for books."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the average purchase price and average sale price for books.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the average purchase price and average sale price for books.[/QUESTION]\n[SQL]\n SELECT AVG(b.PurchasePrice) AS Average_Purchase_Price, AVG(b.SalePrice) AS Average_Sale_Price FROM Book b;"
  },
  {
    "id": 563,
    "db_id": "book_1",
    "question": {
      "id": 563,
      "db_id": "book_1",
      "question": "What is the maximum difference between the sale price and purchase price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the maximum difference between the sale price and purchase price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the maximum difference between the sale price and purchase price?[/QUESTION]\n[SQL]\n SELECT MAX(b.salePrice - b.purchasePrice) AS max_difference FROM book b;"
  },
  {
    "id": 564,
    "db_id": "book_1",
    "question": {
      "id": 564,
      "db_id": "book_1",
      "question": "Return the largest difference in sale price and purchase price."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the largest difference in sale price and purchase price.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the largest difference in sale price and purchase price.[/QUESTION]\n[SQL]\n SELECT MAX(b.salePrice - b.purchasePrice) AS max_difference FROM book b;"
  },
  {
    "id": 565,
    "db_id": "book_1",
    "question": {
      "id": 565,
      "db_id": "book_1",
      "question": "List all book titles which have sale prices higher than the average."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all book titles which have sale prices higher than the average.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all book titles which have sale prices higher than the average.[/QUESTION]\n[SQL]\n SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2);"
  },
  {
    "id": 566,
    "db_id": "book_1",
    "question": {
      "id": 566,
      "db_id": "book_1",
      "question": "What are the titles of books with sale prices above the average sale price across all books?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of books with sale prices above the average sale price across all books?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of books with sale prices above the average sale price across all books?[/QUESTION]\n[SQL]\n SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2);"
  },
  {
    "id": 567,
    "db_id": "book_1",
    "question": {
      "id": 567,
      "db_id": "book_1",
      "question": "List all book titles which have the lowest sale price ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all book titles which have the lowest sale price .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all book titles which have the lowest sale price .[/QUESTION]\n[SQL]\n SELECT b.title FROM book b ORDER BY b.saleprice ASC NULLS LAST;"
  },
  {
    "id": 568,
    "db_id": "book_1",
    "question": {
      "id": 568,
      "db_id": "book_1",
      "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of books that have a sale price equal to the lowest sale price across all books ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of books that have a sale price equal to the lowest sale price across all books ?[/QUESTION]\n[SQL]\n SELECT b.title FROM book b WHERE b.saleprice = (SELECT MIN(saleprice) FROM book);"
  },
  {
    "id": 569,
    "db_id": "book_1",
    "question": {
      "id": 569,
      "db_id": "book_1",
      "question": "List all book titles which have highest purchase prices ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all book titles which have highest purchase prices .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all book titles which have highest purchase prices .[/QUESTION]\n[SQL]\n SELECT b.title FROM book b ORDER BY b.purchaseprice DESC NULLS LAST;"
  },
  {
    "id": 570,
    "db_id": "book_1",
    "question": {
      "id": 570,
      "db_id": "book_1",
      "question": "What are the titles of books with the highest purchase price across all books ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of books with the highest purchase price across all books ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of books with the highest purchase price across all books ?[/QUESTION]\n[SQL]\n SELECT b.title FROM book b WHERE b.purchaseprice = (SELECT MAX(b2.purchaseprice) FROM book b2);"
  },
  {
    "id": 571,
    "db_id": "book_1",
    "question": {
      "id": 571,
      "db_id": "book_1",
      "question": "What is the average sale price of books written by George Orwell?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average sale price of books written by George Orwell?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average sale price of books written by George Orwell?[/QUESTION]\n[SQL]\n SELECT AVG(b.SalePrice) FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.\"Name\" ILIKE '%George%Orwell%'"
  },
  {
    "id": 572,
    "db_id": "book_1",
    "question": {
      "id": 572,
      "db_id": "book_1",
      "question": "Give the average sale price of books authored by George Orwell."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the average sale price of books authored by George Orwell.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the average sale price of books authored by George Orwell.[/QUESTION]\n[SQL]\n SELECT AVG(b.SalePrice) FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.\"Name\" ILIKE '%George%Orwell%'"
  },
  {
    "id": 573,
    "db_id": "book_1",
    "question": {
      "id": 573,
      "db_id": "book_1",
      "question": "What are sale prices of books written by Plato?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are sale prices of books written by Plato?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are sale prices of books written by Plato?[/QUESTION]\n[SQL]\n SELECT b.saleprice FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE ab.author = (SELECT idauthor FROM author WHERE name ilike '%Plato%');"
  },
  {
    "id": 574,
    "db_id": "book_1",
    "question": {
      "id": 574,
      "db_id": "book_1",
      "question": "Return the sale prices of books authored by Plato."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the sale prices of books authored by Plato.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the sale prices of books authored by Plato.[/QUESTION]\n[SQL]\n SELECT b.saleprice FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.\"name\" ILIKE '%Plato%'"
  },
  {
    "id": 575,
    "db_id": "book_1",
    "question": {
      "id": 575,
      "db_id": "book_1",
      "question": "What is the title of the book written by George Orwell that has the lowest sale price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the title of the book written by George Orwell that has the lowest sale price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the title of the book written by George Orwell that has the lowest sale price?[/QUESTION]\n[SQL]\n SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE ab.author = (SELECT idAuthor FROM author WHERE name ilike '%George%Orwell%') ORDER BY b.saleprice ASC LIMIT 1;"
  },
  {
    "id": 576,
    "db_id": "book_1",
    "question": {
      "id": 576,
      "db_id": "book_1",
      "question": "Give the title of book by George Orwell that has the lowest saleprice."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the title of book by George Orwell that has the lowest saleprice.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the title of book by George Orwell that has the lowest saleprice.[/QUESTION]\n[SQL]\n SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.\"name\" ilike '%George%Orwell%' ORDER BY b.saleprice ASC LIMIT 1;"
  },
  {
    "id": 577,
    "db_id": "book_1",
    "question": {
      "id": 577,
      "db_id": "book_1",
      "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the title of the book written by Plato has price lower than the average sale price of all books?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the title of the book written by Plato has price lower than the average sale price of all books?[/QUESTION]\n[SQL]\n SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE ab.author = (SELECT idAuthor FROM author WHERE name ilike '%Plato%') AND b.saleprice < (SELECT AVG(saleprice) FROM book);"
  },
  {
    "id": 578,
    "db_id": "book_1",
    "question": {
      "id": 578,
      "db_id": "book_1",
      "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.[/QUESTION]\n[SQL]\n SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE ab.author = (SELECT idAuthor FROM author WHERE name ilike '%Plato%') AND b.saleprice < (SELECT AVG(saleprice) FROM book);"
  },
  {
    "id": 579,
    "db_id": "book_1",
    "question": {
      "id": 579,
      "db_id": "book_1",
      "question": "Who is the author of the book \"Pride and Prejudice\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who is the author of the book \"Pride and Prejudice\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who is the author of the book \"Pride and Prejudice\"?[/QUESTION]\n[SQL]\n SELECT a.name FROM Author a JOIN Book b ON a.idAuthor = b.author WHERE b.title ilike '%Pride%and%Prejudice%'"
  },
  {
    "id": 580,
    "db_id": "book_1",
    "question": {
      "id": 580,
      "db_id": "book_1",
      "question": "Give the name of the author who wrote the book titled Pride and Prejudice."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the name of the author who wrote the book titled Pride and Prejudice.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the name of the author who wrote the book titled Pride and Prejudice.[/QUESTION]\n[SQL]\n SELECT a.name FROM Author a JOIN Book b ON a.idAuthor = b.author WHERE b.title ilike '%Pride%and%Prejudice%'"
  },
  {
    "id": 581,
    "db_id": "book_1",
    "question": {
      "id": 581,
      "db_id": "book_1",
      "question": "List titles of all books published by an author whose name contains the string 'Plato'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List titles of all books published by an author whose name contains the string 'Plato'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List titles of all books published by an author whose name contains the string 'Plato'?[/QUESTION]\n[SQL]\n SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name ilike '%Plato%'"
  },
  {
    "id": 582,
    "db_id": "book_1",
    "question": {
      "id": 582,
      "db_id": "book_1",
      "question": "What are the titles of all books written by an author with a name that contains Plato?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of all books written by an author with a name that contains Plato?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of all books written by an author with a name that contains Plato?[/QUESTION]\n[SQL]\n SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name ilike '%Plato%' ORDER BY b.title NULLS LAST;"
  },
  {
    "id": 583,
    "db_id": "book_1",
    "question": {
      "id": 583,
      "db_id": "book_1",
      "question": "How many orders do we have for \"Pride and Prejudice\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many orders do we have for \"Pride and Prejudice\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many orders do we have for \"Pride and Prejudice\"?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Books_Order bo JOIN Order o ON bo.idOrder = o.idOrder WHERE bo.ISBN = '978-0-553-19325-3';"
  },
  {
    "id": 584,
    "db_id": "book_1",
    "question": {
      "id": 584,
      "db_id": "book_1",
      "question": "Return the number of orders received for Pride and Prejudice."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the number of orders received for Pride and Prejudice.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the number of orders received for Pride and Prejudice.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.idOrder WHERE bo.ISBN = '9780140449695';"
  },
  {
    "id": 585,
    "db_id": "book_1",
    "question": {
      "id": 585,
      "db_id": "book_1",
      "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".[/QUESTION]\n[SQL]\n SELECT DISTINCT o.idorder FROM orders o JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%' AND b.title ilike '%The%Little%Prince%'"
  },
  {
    "id": 586,
    "db_id": "book_1",
    "question": {
      "id": 586,
      "db_id": "book_1",
      "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the order ids for orders that include both Pride and Prejudice and The Little Prince?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the order ids for orders that include both Pride and Prejudice and The Little Prince?[/QUESTION]\n[SQL]\n SELECT DISTINCT o.idorder FROM orders o JOIN books_order bo ON o.idorder = bo.idorder WHERE bo.isbn IN ('0-7181-57970-7', '0-7181-57972-3', '0-7181-57971-X')"
  },
  {
    "id": 587,
    "db_id": "book_1",
    "question": {
      "id": 587,
      "db_id": "book_1",
      "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all book isbns which were ordered by both client Peter Doe and client James Smith.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all book isbns which were ordered by both client Peter Doe and client James Smith.[/QUESTION]\n[SQL]\n SELECT DISTINCT b.ISBN FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN JOIN Orders o ON bo.idOrder = o.IdOrder WHERE o.IdClient IN ('Peter Doe', 'James Smith') GROUP BY b.ISBN HAVING COUNT(DISTINCT o.IdClient) >= 2;"
  },
  {
    "id": 588,
    "db_id": "book_1",
    "question": {
      "id": 588,
      "db_id": "book_1",
      "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the isbns of books ordered by both clients named Peter Doe and James Smith?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the isbns of books ordered by both clients named Peter Doe and James Smith?[/QUESTION]\n[SQL]\n SELECT DISTINCT b.ISBN FROM Books_Order bo JOIN Orders o ON bo.idOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient JOIN Book b ON bo.ISBN = b.ISBN WHERE c.Name ilike '%Peter%Doe%' AND c.Name ilike '%James%Smith%'"
  },
  {
    "id": 589,
    "db_id": "book_1",
    "question": {
      "id": 589,
      "db_id": "book_1",
      "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the title of books which are ordered by client Peter Doe but not client James Smith.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the title of books which are ordered by client Peter Doe but not client James Smith.[/QUESTION]\n[SQL]\n SELECT DISTINCT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN orders o ON ab.isbn = o.idclient WHERE o.idclient IN (SELECT c.idclient FROM client c WHERE c.name ilike '%Peter%Doe%' AND c.name not ilike '%James%Smith%') ORDER BY b.title NULLS LAST;"
  },
  {
    "id": 590,
    "db_id": "book_1",
    "question": {
      "id": 590,
      "db_id": "book_1",
      "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?[/QUESTION]\n[SQL]\n SELECT DISTINCT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN orders o ON ab.isbn = o.idclient WHERE o.idclient IN (SELECT idorder FROM orders WHERE idclient = 'Peter Doe') AND o.idclient NOT IN (SELECT idorder FROM orders WHERE idclient = 'James Smith');"
  },
  {
    "id": 591,
    "db_id": "book_1",
    "question": {
      "id": 591,
      "db_id": "book_1",
      "question": "Show all client names who have orders for \"Pride and Prejudice\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all client names who have orders for \"Pride and Prejudice\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all client names who have orders for \"Pride and Prejudice\".[/QUESTION]\n[SQL]\n SELECT c.name FROM Client c JOIN Orders o ON c.idclient = o.idclient JOIN Books_Order bo ON o.idorder = bo.idorder JOIN Book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%'"
  },
  {
    "id": 592,
    "db_id": "book_1",
    "question": {
      "id": 592,
      "db_id": "book_1",
      "question": "What are the names of clients who have ordered Pride and Prejudice?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of clients who have ordered Pride and Prejudice?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of clients who have ordered Pride and Prejudice?[/QUESTION]\n[SQL]\n SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%'"
  },
  {
    "id": 593,
    "db_id": "book_review",
    "question": {
      "id": 593,
      "db_id": "book_review",
      "question": "How many books are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many books are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many books are there?[/QUESTION]\n[SQL]\n SELECT COUNT(b.book_id) FROM book b;"
  },
  {
    "id": 594,
    "db_id": "book_review",
    "question": {
      "id": 594,
      "db_id": "book_review",
      "question": "List the titles of books in ascending alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the titles of books in ascending alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the titles of books in ascending alphabetical order.[/QUESTION]\n[SQL]\n SELECT b.title FROM book b ORDER BY b.title ASC;"
  },
  {
    "id": 595,
    "db_id": "book_review",
    "question": {
      "id": 595,
      "db_id": "book_review",
      "question": "List the titles of books in descending order of pages."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the titles of books in descending order of pages.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the titles of books in descending order of pages.[/QUESTION]\n[SQL]\n SELECT b.title FROM book b ORDER BY b.pages DESC;"
  },
  {
    "id": 596,
    "db_id": "book_review",
    "question": {
      "id": 596,
      "db_id": "book_review",
      "question": "What are the types and release dates of books?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the types and release dates of books?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the types and release dates of books?[/QUESTION]\n[SQL]\n SELECT b.type, b.release FROM book b ORDER BY b.type NULLS LAST;"
  },
  {
    "id": 597,
    "db_id": "book_review",
    "question": {
      "id": 597,
      "db_id": "book_review",
      "question": "What are the maximum and minimum number of chapters for each book?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum and minimum number of chapters for each book?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum and minimum number of chapters for each book?[/QUESTION]\n[SQL]\n SELECT b.title, MIN(b.chapters) AS min_chapters, MAX(b.chapters) AS max_chapters FROM book b GROUP BY b.title;"
  },
  {
    "id": 598,
    "db_id": "book_review",
    "question": {
      "id": 598,
      "db_id": "book_review",
      "question": "What are the titles of books that are not \"Poet\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of books that are not \"Poet\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of books that are not \"Poet\"?[/QUESTION]\n[SQL]\n SELECT b.title FROM book b WHERE b.type != 'Poet';"
  },
  {
    "id": 599,
    "db_id": "book_review",
    "question": {
      "id": 599,
      "db_id": "book_review",
      "question": "What is the average rating in reviews?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average rating in reviews?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average rating in reviews?[/QUESTION]\n[SQL]\n SELECT AVG(r.rating) AS average_rating FROM review r;"
  },
  {
    "id": 600,
    "db_id": "book_review",
    "question": {
      "id": 600,
      "db_id": "book_review",
      "question": "What are the titles and ratings of books?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles and ratings of books?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles and ratings of books?[/QUESTION]\n[SQL]\n SELECT b.title, r.rating FROM book b JOIN review r ON b.book_id = r.book_id;"
  },
  {
    "id": 601,
    "db_id": "book_review",
    "question": {
      "id": 601,
      "db_id": "book_review",
      "question": "What is the rating of the book with the largest number of chapters?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the rating of the book with the largest number of chapters?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the rating of the book with the largest number of chapters?[/QUESTION]\n[SQL]\n SELECT b.title, r.rating FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY b.chapters DESC LIMIT 1;"
  },
  {
    "id": 602,
    "db_id": "book_review",
    "question": {
      "id": 602,
      "db_id": "book_review",
      "question": "What is the rank of the book with the smallest number of pages?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the rank of the book with the smallest number of pages?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the rank of the book with the smallest number of pages?[/QUESTION]\n[SQL]\n SELECT b.title, b.pages, rank() OVER (ORDER BY b.pages ASC) AS rank FROM book b ORDER BY rank NULLS LAST;"
  },
  {
    "id": 603,
    "db_id": "book_review",
    "question": {
      "id": 603,
      "db_id": "book_review",
      "question": "What is the title of the book with the highest rank in the review?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the title of the book with the highest rank in the review?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the title of the book with the highest rank in the review?[/QUESTION]\n[SQL]\n SELECT b.title FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY r.rank DESC LIMIT 1;"
  },
  {
    "id": 604,
    "db_id": "book_review",
    "question": {
      "id": 604,
      "db_id": "book_review",
      "question": "What is the average number of readers for books of type \"Novel\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average number of readers for books of type \"Novel\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average number of readers for books of type \"Novel\"?[/QUESTION]\n[SQL]\n SELECT AVG(r.Readers_in_Million) AS Average_Readers FROM book b JOIN review r ON b.Book_ID = r.Book_ID WHERE b.Type = 'Novel';"
  },
  {
    "id": 605,
    "db_id": "book_review",
    "question": {
      "id": 605,
      "db_id": "book_review",
      "question": "For each book type return the type and the number of books of that type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each book type return the type and the number of books of that type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each book type return the type and the number of books of that type.[/QUESTION]\n[SQL]\n SELECT b.type, COUNT(b.book_id) AS number_of_books FROM book b GROUP BY b.type ORDER BY number_of_books DESC NULLS LAST;"
  },
  {
    "id": 606,
    "db_id": "book_review",
    "question": {
      "id": 606,
      "db_id": "book_review",
      "question": "What is the most common type of books?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the most common type of books?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the most common type of books?[/QUESTION]\n[SQL]\n SELECT b.type FROM book b GROUP BY b.type ORDER BY COUNT(b.type) DESC LIMIT 1;"
  },
  {
    "id": 607,
    "db_id": "book_review",
    "question": {
      "id": 607,
      "db_id": "book_review",
      "question": "What are the types of books that have at least three books belonging to?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the types of books that have at least three books belonging to?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the types of books that have at least three books belonging to?[/QUESTION]\n[SQL]\n SELECT b.type FROM book b GROUP BY b.type HAVING COUNT(b.book_id) >= 3;"
  },
  {
    "id": 608,
    "db_id": "book_review",
    "question": {
      "id": 608,
      "db_id": "book_review",
      "question": "List the titles of books in ascending order of the ratings in review?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the titles of books in ascending order of the ratings in review?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the titles of books in ascending order of the ratings in review?[/QUESTION]\n[SQL]\n SELECT b.title FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY r.rating ASC;"
  },
  {
    "id": 609,
    "db_id": "book_review",
    "question": {
      "id": 609,
      "db_id": "book_review",
      "question": "List the title and audio length for all the books in descending order of the number of readers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the title and audio length for all the books in descending order of the number of readers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the title and audio length for all the books in descending order of the number of readers.[/QUESTION]\n[SQL]\n SELECT b.title, b.audio FROM book b JOIN review r ON b.book_id = r.book_id WHERE r.readers_in_million IS NOT NULL ORDER BY r.readers_in_million DESC;"
  },
  {
    "id": 610,
    "db_id": "book_review",
    "question": {
      "id": 610,
      "db_id": "book_review",
      "question": "How many books do not have reviews?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many books do not have reviews?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many books do not have reviews?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT b.book_id) AS num_books FROM book b LEFT JOIN review r ON b.book_id = r.book_id WHERE r.book_id IS NULL"
  },
  {
    "id": 611,
    "db_id": "book_review",
    "question": {
      "id": 611,
      "db_id": "book_review",
      "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.[/QUESTION]\n[SQL]\n SELECT b.type FROM book b WHERE b.chapters > 75 AND b.chapters < 50 GROUP BY b.type;"
  },
  {
    "id": 612,
    "db_id": "book_review",
    "question": {
      "id": 612,
      "db_id": "book_review",
      "question": "How many distinct types of book are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many distinct types of book are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many distinct types of book are there?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT b.type) FROM book b;"
  },
  {
    "id": 613,
    "db_id": "book_review",
    "question": {
      "id": 613,
      "db_id": "book_review",
      "question": "What are the type and title of the books that are not rated?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the type and title of the books that are not rated?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the type and title of the books that are not rated?[/QUESTION]\n[SQL]\n SELECT b.type, b.title FROM book b LEFT JOIN review r ON b.book_id = r.book_id WHERE r.rating IS NULL;"
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "question": {
      "id": 614,
      "db_id": "restaurant_bills",
      "question": "How many customers are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customers are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customers are there?[/QUESTION]\n[SQL]\n SELECT COUNT(c.customer_id) FROM customer c;"
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "question": {
      "id": 615,
      "db_id": "restaurant_bills",
      "question": "Count the number of customers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of customers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of customers.[/QUESTION]\n[SQL]\n SELECT COUNT(c.customer_id) FROM customer c;"
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "question": {
      "id": 616,
      "db_id": "restaurant_bills",
      "question": "List the names of customers in ascending order of level of membership."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of customers in ascending order of level of membership.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of customers in ascending order of level of membership.[/QUESTION]\n[SQL]\n SELECT c.name FROM customer c ORDER BY c.level_of_membership ASC;"
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "question": {
      "id": 617,
      "db_id": "restaurant_bills",
      "question": "Sort all the customers by the level of membership in ascending order, and return the customer names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Sort all the customers by the level of membership in ascending order, and return the customer names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Sort all the customers by the level of membership in ascending order, and return the customer names.[/QUESTION]\n[SQL]\n SELECT c.name FROM customer c ORDER BY c.level_of_membership ASC;"
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "question": {
      "id": 618,
      "db_id": "restaurant_bills",
      "question": "What are the nationalities and card credits of customers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the nationalities and card credits of customers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the nationalities and card credits of customers?[/QUESTION]\n[SQL]\n SELECT c.name, c.nationality, c.card_credit FROM customer c;"
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "question": {
      "id": 619,
      "db_id": "restaurant_bills",
      "question": "Find the nationality and card credit of each customer."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the nationality and card credit of each customer.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the nationality and card credit of each customer.[/QUESTION]\n[SQL]\n SELECT c.name, c.nationality, c.card_credit FROM customer c;"
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "question": {
      "id": 620,
      "db_id": "restaurant_bills",
      "question": "Show the names of customers with nationality \"England\" or \"Australia\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of customers with nationality \"England\" or \"Australia\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of customers with nationality \"England\" or \"Australia\".[/QUESTION]\n[SQL]\n SELECT c.name FROM customer c WHERE c.nationality ilike '%England%' OR c.nationality ilike '%Australia%';"
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "question": {
      "id": 621,
      "db_id": "restaurant_bills",
      "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which customers have nationality \"England\" or \"Australia\"? Give me their names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which customers have nationality \"England\" or \"Australia\"? Give me their names.[/QUESTION]\n[SQL]\n SELECT c.name FROM customer c WHERE c.nationality ilike '%England%' OR c.nationality ilike '%Australia%';"
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "question": {
      "id": 622,
      "db_id": "restaurant_bills",
      "question": "What is the average card credit of customers with membership level higher than 1?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average card credit of customers with membership level higher than 1?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average card credit of customers with membership level higher than 1?[/QUESTION]\n[SQL]\n SELECT AVG(c.card_credit) FROM customer c WHERE c.level_of_membership > 1;"
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "question": {
      "id": 623,
      "db_id": "restaurant_bills",
      "question": "Find the average card credit customers whose membership level is above 1."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average card credit customers whose membership level is above 1.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average card credit customers whose membership level is above 1.[/QUESTION]\n[SQL]\n SELECT AVG(c.card_credit) FROM customer c WHERE c.level_of_membership > 1;"
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "question": {
      "id": 624,
      "db_id": "restaurant_bills",
      "question": "What is the card credit of the customer with the highest membership level?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the card credit of the customer with the highest membership level?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the card credit of the customer with the highest membership level?[/QUESTION]\n[SQL]\n SELECT c.name, c.card_credit FROM customer c WHERE c.level_of_membership = (SELECT MAX(c2.level_of_membership) FROM customer c2);"
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "question": {
      "id": 625,
      "db_id": "restaurant_bills",
      "question": "Find the customer with the highest membership level and return his or her card credit."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the customer with the highest membership level and return his or her card credit.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the customer with the highest membership level and return his or her card credit.[/QUESTION]\n[SQL]\n SELECT c.name, c.card_credit FROM customer c ORDER BY c.level_of_membership DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "question": {
      "id": 626,
      "db_id": "restaurant_bills",
      "question": "Show different nationalities of customers, along with the number of customers of each nationality."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show different nationalities of customers, along with the number of customers of each nationality.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show different nationalities of customers, along with the number of customers of each nationality.[/QUESTION]\n[SQL]\n SELECT c.nationality, COUNT(c.customer_id) AS customer_count FROM customer c GROUP BY c.nationality ORDER BY customer_count DESC NULLS LAST;"
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "question": {
      "id": 627,
      "db_id": "restaurant_bills",
      "question": "How many customers are associated with each nationality? List the nationality and the number of customers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customers are associated with each nationality? List the nationality and the number of customers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customers are associated with each nationality? List the nationality and the number of customers.[/QUESTION]\n[SQL]\n SELECT c.nationality, COUNT(c.customer_id) AS customer_count FROM customer c GROUP BY c.nationality ORDER BY customer_count DESC NULLS LAST;"
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "question": {
      "id": 628,
      "db_id": "restaurant_bills",
      "question": "Show the most common nationality of customers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the most common nationality of customers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the most common nationality of customers.[/QUESTION]\n[SQL]\n SELECT c.nationality FROM customer c GROUP BY c.nationality ORDER BY COUNT(c.nationality) DESC LIMIT 1;"
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "question": {
      "id": 629,
      "db_id": "restaurant_bills",
      "question": "Which nationality does the most customers have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which nationality does the most customers have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which nationality does the most customers have?[/QUESTION]\n[SQL]\n SELECT c.nationality, COUNT(c.customer_id) AS number_of_customers FROM customer c GROUP BY c.nationality ORDER BY number_of_customers DESC LIMIT 1;"
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "question": {
      "id": 630,
      "db_id": "restaurant_bills",
      "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.[/QUESTION]\n[SQL]\n SELECT c.nationality FROM customer c WHERE c.card_credit < 50 AND c.card_credit > 75 GROUP BY c.nationality;"
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "question": {
      "id": 631,
      "db_id": "restaurant_bills",
      "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which nations have both customers with card credit above 50 and customers with card credit below 75.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which nations have both customers with card credit above 50 and customers with card credit below 75.[/QUESTION]\n[SQL]\n SELECT c.nationality FROM customer c WHERE c.card_credit > 50 AND c.card_credit < 75 GROUP BY c.nationality;"
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "question": {
      "id": 632,
      "db_id": "restaurant_bills",
      "question": "Show the names of customers and names of dishes they order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of customers and names of dishes they order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of customers and names of dishes they order.[/QUESTION]\n[SQL]\n SELECT c.name AS customer_name, co.dish_name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id;"
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "question": {
      "id": 633,
      "db_id": "restaurant_bills",
      "question": "For each order, return the customer name and the dish name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each order, return the customer name and the dish name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each order, return the customer name and the dish name.[/QUESTION]\n[SQL]\n SELECT c.name AS customer_name, co.dish_name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id;"
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "question": {
      "id": 634,
      "db_id": "restaurant_bills",
      "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of customers and names of dishes they order, in descending order of the quantity of dish.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of customers and names of dishes they order, in descending order of the quantity of dish.[/QUESTION]\n[SQL]\n SELECT c.name AS customer_name, co.dish_name, co.quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id ORDER BY co.quantity DESC;"
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "question": {
      "id": 635,
      "db_id": "restaurant_bills",
      "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.[/QUESTION]\n[SQL]\n SELECT c.name AS customer_name, co.dish_name, co.quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id ORDER BY co.quantity DESC;"
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "question": {
      "id": 636,
      "db_id": "restaurant_bills",
      "question": "Show each customer name and the total quantities of dishes ordered by that customer."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show each customer name and the total quantities of dishes ordered by that customer.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show each customer name and the total quantities of dishes ordered by that customer.[/QUESTION]\n[SQL]\n SELECT c.name, SUM(co.quantity) AS total_quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name ORDER BY total_quantity DESC NULLS LAST;"
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "question": {
      "id": 637,
      "db_id": "restaurant_bills",
      "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .[/QUESTION]\n[SQL]\n SELECT c.name, SUM(co.quantity) AS total_quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name ORDER BY total_quantity DESC NULLS LAST;"
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "question": {
      "id": 638,
      "db_id": "restaurant_bills",
      "question": "Show the customers with total quantity of order bigger than 1."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the customers with total quantity of order bigger than 1.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the customers with total quantity of order bigger than 1.[/QUESTION]\n[SQL]\n SELECT c.name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name HAVING SUM(co.quantity) > 1;"
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "question": {
      "id": 639,
      "db_id": "restaurant_bills",
      "question": "Which customers have total order quantity greater than 1? Give me the customer names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which customers have total order quantity greater than 1? Give me the customer names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which customers have total order quantity greater than 1? Give me the customer names.[/QUESTION]\n[SQL]\n SELECT c.name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name HAVING SUM(co.quantity) > 1;"
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "question": {
      "id": 640,
      "db_id": "restaurant_bills",
      "question": "Show distinct managers of branches."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show distinct managers of branches.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show distinct managers of branches.[/QUESTION]\n[SQL]\n SELECT DISTINCT b.manager FROM branch b;"
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "question": {
      "id": 641,
      "db_id": "restaurant_bills",
      "question": "Who are the distinct managers of branches?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who are the distinct managers of branches?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who are the distinct managers of branches?[/QUESTION]\n[SQL]\n SELECT DISTINCT b.manager FROM branch b;"
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "question": {
      "id": 642,
      "db_id": "restaurant_bills",
      "question": "List the names of customers that do not have any order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of customers that do not have any order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of customers that do not have any order.[/QUESTION]\n[SQL]\n SELECT c.name FROM customer c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM customer_order co);"
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "question": {
      "id": 643,
      "db_id": "restaurant_bills",
      "question": "Which customers do not have any order? Give me the customer names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which customers do not have any order? Give me the customer names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which customers do not have any order? Give me the customer names.[/QUESTION]\n[SQL]\n SELECT c.name FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;"
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "question": {
      "id": 644,
      "db_id": "club_leader",
      "question": "How many members are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many members are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many members are there?[/QUESTION]\n[SQL]\n SELECT COUNT(m.member_id) FROM member m;"
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "question": {
      "id": 645,
      "db_id": "club_leader",
      "question": "List the names of members in ascending order of age."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of members in ascending order of age.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of members in ascending order of age.[/QUESTION]\n[SQL]\n SELECT m.name FROM member m ORDER BY m.age ASC;"
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "question": {
      "id": 646,
      "db_id": "club_leader",
      "question": "What are the names and nationalities of the members?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and nationalities of the members?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and nationalities of the members?[/QUESTION]\n[SQL]\n SELECT m.name, m.nationality FROM member m;"
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "question": {
      "id": 647,
      "db_id": "club_leader",
      "question": "List the names of members whose nationality is not `` England '' ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of members whose nationality is not `` England '' .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of members whose nationality is not `` England '' .[/QUESTION]\n[SQL]\n SELECT m.name FROM member m WHERE m.nationality NOT ILIKE '%England%';"
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "question": {
      "id": 648,
      "db_id": "club_leader",
      "question": "Show the names of members whose age is either 19 or 20."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of members whose age is either 19 or 20.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of members whose age is either 19 or 20.[/QUESTION]\n[SQL]\n SELECT m.name FROM member m WHERE m.age IN (19, 20);"
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "question": {
      "id": 649,
      "db_id": "club_leader",
      "question": "What is the name of the oldest member?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the oldest member?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the oldest member?[/QUESTION]\n[SQL]\n SELECT m.name FROM member m ORDER BY m.age ASC NULLS LAST LIMIT 1;"
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "question": {
      "id": 650,
      "db_id": "club_leader",
      "question": "Show different nationalities along with the number of members of each nationality."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show different nationalities along with the number of members of each nationality.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show different nationalities along with the number of members of each nationality.[/QUESTION]\n[SQL]\n SELECT m.nationality, COUNT(m.member_id) AS member_count FROM member m GROUP BY m.nationality ORDER BY member_count DESC NULLS LAST;"
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "question": {
      "id": 651,
      "db_id": "club_leader",
      "question": "Please show the most common nationality of members."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the most common nationality of members.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the most common nationality of members.[/QUESTION]\n[SQL]\n SELECT m.nationality FROM member m GROUP BY m.nationality ORDER BY COUNT(m.nationality) DESC LIMIT 1;"
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "question": {
      "id": 652,
      "db_id": "club_leader",
      "question": "Show the nations that have at least two members."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the nations that have at least two members.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the nations that have at least two members.[/QUESTION]\n[SQL]\n SELECT m.nationality FROM member m GROUP BY m.nationality HAVING COUNT(m.member_id) >= 2 ORDER BY m.nationality NULLS LAST;"
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "question": {
      "id": 653,
      "db_id": "club_leader",
      "question": "Show the names of club leaders and the names of clubs they joined."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of club leaders and the names of clubs they joined.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of club leaders and the names of clubs they joined.[/QUESTION]\n[SQL]\n SELECT m.name AS member_name, c.club_name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id JOIN club c ON cl.club_id = c.club_id;"
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "question": {
      "id": 654,
      "db_id": "club_leader",
      "question": "Show the names of club leaders of clubs with overall ranking higher than 100."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of club leaders of clubs with overall ranking higher than 100.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of club leaders of clubs with overall ranking higher than 100.[/QUESTION]\n[SQL]\n SELECT m.name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id JOIN club c ON cl.club_id = c.club_id WHERE c.overall_ranking > 100;"
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "question": {
      "id": 655,
      "db_id": "club_leader",
      "question": "Show the names of club leaders that joined their club before 2018."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of club leaders that joined their club before 2018.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of club leaders that joined their club before 2018.[/QUESTION]\n[SQL]\n SELECT m.name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id WHERE cl.year_join < '2018' ORDER BY m.name NULLS LAST;"
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "question": {
      "id": 656,
      "db_id": "club_leader",
      "question": "Show the name of the leader of the club named \"Houston\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the name of the leader of the club named \"Houston\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the name of the leader of the club named \"Houston\".[/QUESTION]\n[SQL]\n SELECT c.team_leader FROM club c WHERE c.club_name ilike '%Houston%';"
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "question": {
      "id": 657,
      "db_id": "club_leader",
      "question": "List the names of members that are not club leaders."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of members that are not club leaders.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of members that are not club leaders.[/QUESTION]\n[SQL]\n SELECT m.name FROM member m LEFT JOIN club_leader cl ON m.member_id = cl.member_id WHERE cl.member_id IS NULL;"
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "question": {
      "id": 658,
      "db_id": "club_leader",
      "question": "Show the nations that have both members older than 22 and members younger than 19."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the nations that have both members older than 22 and members younger than 19.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the nations that have both members older than 22 and members younger than 19.[/QUESTION]\n[SQL]\n SELECT m.nationality FROM member m GROUP BY m.nationality HAVING COUNT(CASE WHEN m.age > 22 THEN 1 END) > 0 AND COUNT(CASE WHEN m.age < 19 THEN 1 END) > 0;"
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "question": {
      "id": 659,
      "db_id": "club_leader",
      "question": "What is the average age of all the club leaders?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average age of all the club leaders?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average age of all the club leaders?[/QUESTION]\n[SQL]\n SELECT AVG(m.age) AS average_age FROM member m JOIN club_leader cl ON m.member_id = cl.member_id;"
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "question": {
      "id": 660,
      "db_id": "club_leader",
      "question": "Which club name contains the string 'state'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which club name contains the string 'state'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which club name contains the string 'state'?[/QUESTION]\n[SQL]\n SELECT c.club_name FROM club c WHERE c.club_name ilike '%state%' ORDER BY c.club_name NULLS LAST;"
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 661,
      "db_id": "cre_Doc_and_collections",
      "question": "List all collections' subset. List the subsets' names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all collections' subset. List the subsets' names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all collections' subset. List the subsets' names.[/QUESTION]\n[SQL]\n SELECT c.collection_name, cs.collection_subset_name FROM collections c JOIN collection_subsets cs ON c.collection_id = cs.collection_id;"
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 662,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection susbset names?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the collection susbset names?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the collection susbset names?[/QUESTION]\n[SQL]\n SELECT c.collection_name, cs.collection_subset_name FROM collections c JOIN collection_subset_members csm ON c.collection_id = csm.related_collection_id JOIN collection_subsets cs ON csm.collection_subset_id = cs.collection_subset_id;"
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 663,
      "db_id": "cre_Doc_and_collections",
      "question": "What is detail of collection subset with name 'Top collection'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is detail of collection subset with name 'Top collection'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is detail of collection subset with name 'Top collection'?[/QUESTION]\n[SQL]\n SELECT cs.collecrtion_subset_details FROM collection_subsets cs WHERE cs.collection_subset_name = 'Top collection';"
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 664,
      "db_id": "cre_Doc_and_collections",
      "question": "What collection details are there on the subset named 'Top collection'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What collection details are there on the subset named 'Top collection'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What collection details are there on the subset named 'Top collection'?[/QUESTION]\n[SQL]\n SELECT c.Collection_Name, c.Collection_Description FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Related_Collection_ID = c.Collection_ID WHERE cs.Collection_Subset_Name = 'Top collection';"
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 665,
      "db_id": "cre_Doc_and_collections",
      "question": "List all documents's subset. List the subset's name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all documents's subset. List the subset's name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all documents's subset. List the subset's name.[/QUESTION]\n[SQL]\n SELECT d.document_subset_name FROM document_subsets d;"
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 666,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the document subset names?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the document subset names?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the document subset names?[/QUESTION]\n[SQL]\n SELECT d.document_subset_name FROM document_subsets d;"
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 667,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the detail of document subset with name 'Best for 2000'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the detail of document subset with name 'Best for 2000'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the detail of document subset with name 'Best for 2000'?[/QUESTION]\n[SQL]\n SELECT d.document_subset_details FROM document_subsets d WHERE d.document_subset_name ilike '%Best%for%2000%'"
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 668,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the details on the document subsets that are named 'Best for 2000'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the details on the document subsets that are named 'Best for 2000'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the details on the document subsets that are named 'Best for 2000'?[/QUESTION]\n[SQL]\n SELECT d.document_subset_details FROM document_subsets d WHERE d.document_subset_name ilike '%Best%for%2000%' ORDER BY d.document_subset_details NULLS LAST;"
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 669,
      "db_id": "cre_Doc_and_collections",
      "question": "List document id of all documents."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List document id of all documents.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List document id of all documents.[/QUESTION]\n[SQL]\n SELECT d.Document_Object_ID FROM Documents_in_Collections AS d;"
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 670,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the object id of the document objects?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the object id of the document objects?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the object id of the document objects?[/QUESTION]\n[SQL]\n SELECT d.document_object_id FROM documents_in_collections AS d;"
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 671,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the parent document of document owned by Marlin? List the document id."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the parent document of document owned by Marlin? List the document id.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the parent document of document owned by Marlin? List the document id.[/QUESTION]\n[SQL]\n SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin' AND d.Parent_Document_Object_ID IS NOT NULL;"
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 672,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the document object ids of the objects owned by Marlin?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the document object ids of the objects owned by Marlin?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the document object ids of the objects owned by Marlin?[/QUESTION]\n[SQL]\n SELECT d.document_object_id FROM document_objects d WHERE d.owner ilike '%Marlin%' ORDER BY d.document_object_id NULLS LAST;"
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 673,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the owner of document with the Description 'Braeden Collection'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the owner of document with the Description 'Braeden Collection'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the owner of document with the Description 'Braeden Collection'?[/QUESTION]\n[SQL]\n SELECT d.owner FROM Document_Objects d WHERE d.description ilike '%Braeden%Collection%'"
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 674,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the owners of the document objects described as the 'Braeden Collection'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the owners of the document objects described as the 'Braeden Collection'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the owners of the document objects described as the 'Braeden Collection'?[/QUESTION]\n[SQL]\n SELECT d.owner FROM Document_Objects d JOIN Documents_in_Collections di ON d.document_object_id = di.document_object_id JOIN Collections c ON di.collection_id = c.collection_id WHERE c.collection_name ilike '%Braeden%Collection%'"
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 675,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the owner of the parent document of document owned by 'Marlin'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the owner of the parent document of document owned by 'Marlin'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the owner of the parent document of document owned by 'Marlin'?[/QUESTION]\n[SQL]\n SELECT d.owner FROM Document_Objects d WHERE d.owner ilike '%Marlin%'"
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 676,
      "db_id": "cre_Doc_and_collections",
      "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who is the owner of the parent document of every documents where 'Marlin' is the owner?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who is the owner of the parent document of every documents where 'Marlin' is the owner?[/QUESTION]\n[SQL]\n SELECT d.owner AS parent_document_owner FROM Document_Objects d WHERE d.owner ilike '%Marlin%'"
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 677,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different descriptions of all the parent documents?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different descriptions of all the parent documents?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different descriptions of all the parent documents?[/QUESTION]\n[SQL]\n SELECT d.description FROM document_objects d WHERE d.parent_document_object_id IS NULL;"
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 678,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the unique description of every parent document?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the unique description of every parent document?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the unique description of every parent document?[/QUESTION]\n[SQL]\n SELECT d.description FROM Document_Objects d WHERE d.parent_document_object_id IS NULL;"
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 679,
      "db_id": "cre_Doc_and_collections",
      "question": "How many documents owned by Marlin?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many documents owned by Marlin?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many documents owned by Marlin?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Document_Objects WHERE Owner ILIKE '%Marlin%';"
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 680,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the count of documents owned by Marlin?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the count of documents owned by Marlin?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the count of documents owned by Marlin?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Document_Objects WHERE Owner ILIKE '%Marlin%';"
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 681,
      "db_id": "cre_Doc_and_collections",
      "question": "List all documents ids that are not the parent of other documents."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all documents ids that are not the parent of other documents.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all documents ids that are not the parent of other documents.[/QUESTION]\n[SQL]\n SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NULL"
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 682,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the ids of the documents that are not parent documents?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of the documents that are not parent documents?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of the documents that are not parent documents?[/QUESTION]\n[SQL]\n SELECT d.document_object_id FROM document_objects d WHERE d.parent_document_object_id IS NULL;"
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 683,
      "db_id": "cre_Doc_and_collections",
      "question": "How many child documents does each parent document has? List the document id and the number."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many child documents does each parent document has? List the document id and the number.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many child documents does each parent document has? List the document id and the number.[/QUESTION]\n[SQL]\n SELECT d.document_id, COUNT(d.document_id) AS number_of_children FROM documents d JOIN document_objects do ON d.document_id = do.parent_document_object_id GROUP BY d.document_id ORDER BY number_of_children DESC NULLS LAST;"
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 684,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the number of child documents for each parent document, and what are the ids of the parent documents?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the number of child documents for each parent document, and what are the ids of the parent documents?[/QUESTION]\n[SQL]\n SELECT d.document_object_id AS parent_document_id, COUNT(d.document_object_id) AS child_documents_count FROM document_objects d GROUP BY d.document_object_id ORDER BY child_documents_count DESC NULLS LAST;"
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 685,
      "db_id": "cre_Doc_and_collections",
      "question": "List the name of all collections."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the name of all collections.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the name of all collections.[/QUESTION]\n[SQL]\n SELECT c.Collection_Name FROM Collections c ORDER BY c.Collection_Name NULLS LAST;"
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 686,
      "db_id": "cre_Doc_and_collections",
      "question": "what are the collection names?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]what are the collection names?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]what are the collection names?[/QUESTION]\n[SQL]\n SELECT c.Collection_Name FROM Collections c;"
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 687,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the description of collection named Best?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the description of collection named Best?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the description of collection named Best?[/QUESTION]\n[SQL]\n SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name = 'Best';"
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 688,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection descriptions that are named as 'Best'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the collection descriptions that are named as 'Best'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the collection descriptions that are named as 'Best'?[/QUESTION]\n[SQL]\n SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name ilike '%Best%';"
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 689,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the name of the parent collection of the collection named Nice?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the parent collection of the collection named Nice?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the parent collection of the collection named Nice?[/QUESTION]\n[SQL]\n SELECT c.Collection_Name FROM Collections c JOIN Collection_Subsets cs ON c.Collection_ID = cs.Collection_Subset_ID WHERE cs.Collection_Subset_Name ilike '%Nice%' LIMIT 1;"
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 690,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the names of all parent collections of the collection named Nice?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all parent collections of the collection named Nice?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all parent collections of the collection named Nice?[/QUESTION]\n[SQL]\n SELECT c.Collection_Name FROM Collections c WHERE c.Collection_Name ilike '%Nice%'"
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 691,
      "db_id": "cre_Doc_and_collections",
      "question": "Which collection is not the parent of other collection? List the collection's name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which collection is not the parent of other collection? List the collection's name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which collection is not the parent of other collection? List the collection's name.[/QUESTION]\n[SQL]\n SELECT c.Collection_Name FROM Collections c WHERE c.Collection_ID NOT IN (SELECT p.Collection_ID FROM Collections p);"
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 692,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the names of the collections that are not the parent of the other collections?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the collections that are not the parent of the other collections?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the collections that are not the parent of the other collections?[/QUESTION]\n[SQL]\n SELECT c.Collection_Name FROM Collections c WHERE c.Collection_ID NOT IN (SELECT p.Collection_ID FROM Collections p);"
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 693,
      "db_id": "cre_Doc_and_collections",
      "question": "List document that have more than one child. List the document id."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List document that have more than one child. List the document id.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List document that have more than one child. List the document id.[/QUESTION]\n[SQL]\n SELECT d.Document_ID FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT p.Parent_Document_Object_ID FROM Document_Objects p GROUP BY p.Parent_Document_Object_ID HAVING COUNT(p.Document_Object_ID) > 1);"
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 694,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the ids of the documents that have more than one child?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of the documents that have more than one child?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of the documents that have more than one child?[/QUESTION]\n[SQL]\n SELECT d.document_object_id FROM document_objects d WHERE d.document_object_id IN (SELECT p.parent_document_object_id FROM document_objects p GROUP BY p.parent_document_object_id HAVING COUNT(p.document_object_id) > 1);"
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 695,
      "db_id": "cre_Doc_and_collections",
      "question": "How many child collection does the collection named Best has?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many child collection does the collection named Best has?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many child collection does the collection named Best has?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name ilike '%Best%');"
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 696,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of child collections belonging to the collection named Best?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the number of child collections belonging to the collection named Best?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the number of child collections belonging to the collection named Best?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID WHERE cs.Collection_Subset_Name ilike '%Best%'"
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 697,
      "db_id": "cre_Doc_and_collections",
      "question": "List all document which is related to document owned by Ransom . List the document id ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all document which is related to document owned by Ransom . List the document id .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all document which is related to document owned by Ransom . List the document id .[/QUESTION]\n[SQL]\n SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID WHERE d.Owner ilike '%Ransom%'"
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 698,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the document object ids of the related to the document owned by Ransom ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the document object ids of the related to the document owned by Ransom ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the document object ids of the related to the document owned by Ransom ?[/QUESTION]\n[SQL]\n SELECT d.document_object_id FROM document_objects d JOIN document_subset_members m ON d.document_object_id = m.related_document_object_id WHERE d.owner ilike '%Ransom%'"
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 699,
      "db_id": "cre_Doc_and_collections",
      "question": "List collection subset id, name and number of collections in each subset."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List collection subset id, name and number of collections in each subset.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List collection subset id, name and number of collections in each subset.[/QUESTION]\n[SQL]\n SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Related_Collection_ID = c.Collection_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name ORDER BY number_of_collections DESC NULLS LAST;"
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 700,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection subset ids, names, and number of collections for each subset?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the collection subset ids, names, and number of collections for each subset?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the collection subset ids, names, and number of collections for each subset?[/QUESTION]\n[SQL]\n WITH subset_collections AS (SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(DISTINCT c.collection_id) AS num_collections FROM collection_subsets cs JOIN collections c ON cs.collection_subset_id = c.parent_collection_id GROUP BY cs.collection_subset_id, cs.collection_subset_name) SELECT sc.*, rank() OVER (ORDER BY sc.num_collections DESC) AS rank FROM subset_collections sc ORDER BY rank;"
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 701,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document has most of child? List the document id and the number of child."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which document has most of child? List the document id and the number of child.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which document has most of child? List the document id and the number of child.[/QUESTION]\n[SQL]\n SELECT d.document_id, COUNT(d.document_id) AS total_children FROM documents_in_collections AS d GROUP BY d.document_id ORDER BY total_children DESC LIMIT 1;"
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 702,
      "db_id": "cre_Doc_and_collections",
      "question": "For each document object id, how many children do they have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each document object id, how many children do they have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each document object id, how many children do they have?[/QUESTION]\n[SQL]\n SELECT d.document_object_id, COUNT(d.document_object_id) AS child_count FROM document_objects d GROUP BY d.document_object_id ORDER BY child_count DESC NULLS LAST;"
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 703,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document has least number of related documents? List the document id and the number of related documents."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which document has least number of related documents? List the document id and the number of related documents.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which document has least number of related documents? List the document id and the number of related documents.[/QUESTION]\n[SQL]\n SELECT d.Document_Object_ID, COUNT(ds.Related_Document_Object_ID) AS related_document_count FROM Documents_in_Collections d JOIN Document_Subset_Members ds ON d.Document_Object_ID = ds.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY related_document_count ASC LIMIT 1;"
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 704,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the document object id with the least number of documents ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the document object id with the least number of documents ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the document object id with the least number of documents ?[/QUESTION]\n[SQL]\n SELECT d.document_object_id FROM document_objects d ORDER BY COUNT(d.document_object_id) ASC LIMIT 1;"
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 705,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .[/QUESTION]\n[SQL]\n SELECT d.Document_Object_ID, COUNT(ds.Related_Document_Object_ID) AS related_document_count FROM Documents_in_Collections d JOIN Document_Subset_Members ds ON d.Document_Object_ID = ds.Document_Object_ID GROUP BY d.Document_Object_ID HAVING COUNT(ds.Related_Document_Object_ID) BETWEEN 2 AND 4 ORDER BY related_document_count DESC NULLS LAST;"
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 706,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?[/QUESTION]\n[SQL]\n WITH related_documents AS (SELECT d.document_object_id, COUNT(ds.related_document_object_id) AS related_count FROM documents d JOIN document_subset_members ds ON d.document_object_id = ds.document_object_id GROUP BY d.document_object_id HAVING COUNT(ds.related_document_object_id) BETWEEN 2 AND 4) SELECT rd.document_object_id, rd.related_count FROM related_documents rd ORDER BY rd.related_count DESC NULLS LAST;"
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 707,
      "db_id": "cre_Doc_and_collections",
      "question": "List all owner of documents that is related to documents owned by Braeden."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all owner of documents that is related to documents owned by Braeden.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all owner of documents that is related to documents owned by Braeden.[/QUESTION]\n[SQL]\n SELECT d.owner FROM Document_Objects d JOIN Document_Subset_Members m ON d.document_object_id = m.related_document_object_id WHERE d.owner ilike '%Braeden%'"
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 708,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different owners of documents that are related to ones owned by Braeden?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different owners of documents that are related to ones owned by Braeden?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different owners of documents that are related to ones owned by Braeden?[/QUESTION]\n[SQL]\n SELECT DISTINCT d.owner FROM Document_Objects d JOIN Document_Subset_Members m ON d.document_object_id = m.related_document_object_id WHERE d.owner != 'Braeden'"
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 709,
      "db_id": "cre_Doc_and_collections",
      "question": "Which unique subset does document owned by Braeden belong to? List the subset name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which unique subset does document owned by Braeden belong to? List the subset name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which unique subset does document owned by Braeden belong to? List the subset name.[/QUESTION]\n[SQL]\n SELECT d.document_subset_name FROM document_objects o JOIN document_subset_members m ON o.document_object_id = m.document_object_id JOIN document_subsets d ON m.document_subset_id = d.document_subset_id WHERE o.owner ilike '%Braeden%' GROUP BY d.document_subset_name;"
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 710,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different subset names of all documents owned by Braeden?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different subset names of all documents owned by Braeden?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different subset names of all documents owned by Braeden?[/QUESTION]\n[SQL]\n SELECT d.document_subset_name FROM document_objects d WHERE d.owner ilike '%Braeden%' ORDER BY d.document_subset_name NULLS LAST;"
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 711,
      "db_id": "cre_Doc_and_collections",
      "question": "List subset id, name and number of different documents in each subset."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List subset id, name and number of different documents in each subset.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List subset id, name and number of different documents in each subset.[/QUESTION]\n[SQL]\n SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT doc.document_object_id) AS num_documents FROM document_subsets d JOIN document_objects doc ON d.document_subset_id = doc.owner GROUP BY d.document_subset_id, d.document_subset_name ORDER BY num_documents DESC NULLS LAST;"
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 712,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the subset id, name, and number of different documents for each subset?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the subset id, name, and number of different documents for each subset?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the subset id, name, and number of different documents for each subset?[/QUESTION]\n[SQL]\n SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT m.related_document_object_id) AS num_documents FROM document_subsets d JOIN document_subset_members m ON d.document_subset_id = m.document_subset_id GROUP BY d.document_subset_id, d.document_subset_name ORDER BY num_documents DESC NULLS LAST;"
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 713,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which document subset has most of number of distinct documents ? List subset id , name and number of documents .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which document subset has most of number of distinct documents ? List subset id , name and number of documents .[/QUESTION]\n[SQL]\n SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT m.related_document_object_id) AS num_distinct_documents FROM document_subset_members m JOIN document_subsets d ON m.document_subset_id = d.document_subset_id GROUP BY d.document_subset_id, d.document_subset_name ORDER BY num_distinct_documents DESC LIMIT 1;"
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 714,
      "db_id": "cre_Doc_and_collections",
      "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?[/QUESTION]\n[SQL]\n SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT m.related_document_object_id) AS num_distinct_documents FROM document_subsets d JOIN document_subset_members m ON d.document_subset_id = m.document_subset_id GROUP BY d.document_subset_id, d.document_subset_name ORDER BY num_distinct_documents DESC LIMIT 1;"
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 715,
      "db_id": "cre_Doc_and_collections",
      "question": "For document subset named 'Best for 2000', List all document id that in this subset."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For document subset named 'Best for 2000', List all document id that in this subset.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For document subset named 'Best for 2000', List all document id that in this subset.[/QUESTION]\n[SQL]\n SELECT d.Document_ID FROM Document_Subsets s JOIN Document_Subset_Members m ON s.Document_Subset_ID = m.Document_Subset_ID JOIN Document_Objects o ON m.Document_Object_ID = o.Document_Object_ID WHERE s.Document_Subset_Name ilike '%Best%for%2000%'"
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 716,
      "db_id": "cre_Doc_and_collections",
      "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For the document subset named 'Best for 2000', what are the document ids in that subset?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For the document subset named 'Best for 2000', what are the document ids in that subset?[/QUESTION]\n[SQL]\n SELECT d.Document_ID FROM Document_Subsets s JOIN Document_Subset_Members m ON s.Document_Subset_ID = m.Document_Subset_ID JOIN Document_Objects o ON m.Document_Object_ID = o.Document_Object_ID WHERE s.Document_Subset_Name ilike '%Best%for%2000%'"
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 717,
      "db_id": "cre_Doc_and_collections",
      "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all document subsets of documents that related to each document id. List the name of document subset and the document id.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all document subsets of documents that related to each document id. List the name of document subset and the document id.[/QUESTION]\n[SQL]\n SELECT d.document_id, ds.document_subset_name FROM documents d JOIN document_subset_members dsm ON d.document_id = dsm.related_document_object_id JOIN document_subsets ds ON dsm.document_subset_id = ds.document_subset_id;"
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 718,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?[/QUESTION]\n[SQL]\n SELECT d.document_id, ds.document_subset_name FROM documents d JOIN document_subset_members dsm ON d.document_id = dsm.related_document_object_id JOIN document_subsets ds ON dsm.document_subset_id = ds.document_subset_id;"
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 719,
      "db_id": "cre_Doc_and_collections",
      "question": "List the Collection Name that document owned by 'Ransom ' belong to ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the Collection Name that document owned by 'Ransom ' belong to .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the Collection Name that document owned by 'Ransom ' belong to .[/QUESTION]\n[SQL]\n SELECT c.Collection_Name FROM Document_Objects d JOIN Documents_in_Collections di ON d.Document_Object_ID = di.Document_Object_ID JOIN Collections c ON di.Collection_ID = c.Collection_ID WHERE d.Owner ilike '%Ransom%'"
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 720,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the collection name of a document owned by 'Ransom'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the collection name of a document owned by 'Ransom'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the collection name of a document owned by 'Ransom'?[/QUESTION]\n[SQL]\n SELECT c.Collection_Name FROM Document_Objects d JOIN Documents_in_Collections di ON d.Document_Object_ID = di.Document_Object_ID JOIN Collections c ON di.Collection_ID = c.Collection_ID WHERE d.Owner = 'Ransom';"
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 721,
      "db_id": "cre_Doc_and_collections",
      "question": "How many collections does each document belong to? List the count and the document id."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many collections does each document belong to? List the count and the document id.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many collections does each document belong to? List the count and the document id.[/QUESTION]\n[SQL]\n SELECT d.document_id, COUNT(DISTINCT c.collection_id) AS number_of_collections FROM documents_in_collections dc JOIN Documents d ON dc.document_object_id = d.document_id JOIN Collections c ON dc.collection_id = c.collection_id GROUP BY d.document_id ORDER BY number_of_collections DESC NULLS LAST;"
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 722,
      "db_id": "cre_Doc_and_collections",
      "question": "For each document object id, how many collections does it belong to?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each document object id, how many collections does it belong to?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each document object id, how many collections does it belong to?[/QUESTION]\n[SQL]\n SELECT d.document_object_id, COUNT(DISTINCT c.collection_id) AS number_of_collections FROM documents_in_collections d JOIN collections c ON d.collection_id = c.collection_id GROUP BY d.document_object_id ORDER BY number_of_collections DESC NULLS LAST;"
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 723,
      "db_id": "cre_Doc_and_collections",
      "question": "How many documents does collection named 'Best' has?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many documents does collection named 'Best' has?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many documents does collection named 'Best' has?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT d.Document_Object_ID) AS number_of_documents FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';"
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 724,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of documents in the collection named 'Best'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the number of documents in the collection named 'Best'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the number of documents in the collection named 'Best'?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT d.document_object_id) AS number_of_documents FROM documents_in_collections d JOIN collections c ON d.collection_id = c.collection_id WHERE c.collection_name ilike '%Best%';"
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 725,
      "db_id": "cre_Doc_and_collections",
      "question": "List the document id of all documents in collection named Best."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the document id of all documents in collection named Best.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the document id of all documents in collection named Best.[/QUESTION]\n[SQL]\n SELECT d.Document_Object_ID FROM Documents_in_Collections dc JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';"
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 726,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of document object ids in the collection named Best?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the number of document object ids in the collection named Best?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the number of document object ids in the collection named Best?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT d.document_object_id) AS number_of_document_object_ids FROM documents_in_collections d JOIN collections c ON d.collection_id = c.collection_id WHERE c.collection_name ilike '%Best%';"
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 727,
      "db_id": "cre_Doc_and_collections",
      "question": "Which collection have most number of documents? List collection name, id and number of documents."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which collection have most number of documents? List collection name, id and number of documents.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which collection have most number of documents? List collection name, id and number of documents.[/QUESTION]\n[SQL]\n SELECT c.collection_name, c.collection_id, COUNT(d.document_object_id) AS document_count FROM collections c JOIN documents_in_collections d ON c.collection_id = d.collection_id GROUP BY c.collection_name, c.collection_id ORDER BY document_count DESC LIMIT 1;"
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 728,
      "db_id": "cre_Doc_and_collections",
      "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?[/QUESTION]\n[SQL]\n SELECT c.Collection_Name, c.Collection_ID, COUNT(d.Document_Object_ID) AS total_documents FROM Collections c JOIN Documents_in_Collections d ON c.Collection_ID = d.Collection_ID WHERE c.Collection_Name ILIKE '%Best%' GROUP BY c.Collection_Name, c.Collection_ID ORDER BY total_documents DESC LIMIT 1;"
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 729,
      "db_id": "cre_Doc_and_collections",
      "question": "List id of documents that in document subset Best for 2000 and collection named Best."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List id of documents that in document subset Best for 2000 and collection named Best.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List id of documents that in document subset Best for 2000 and collection named Best.[/QUESTION]\n[SQL]\n SELECT d.Document_Object_ID FROM Document_Subset_Members m JOIN Document_Subsets s ON m.Document_Subset_ID = s.Document_Subset_ID JOIN Documents_in_Collections c ON m.Document_Object_ID = c.Document_Object_ID WHERE s.Document_Subset_Name = 'Best' AND EXTRACT(YEAR FROM TO_DATE(m.Related_Document_Object_ID::TEXT, 'YYYY')) = 2000 AND c.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');"
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 730,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?[/QUESTION]\n[SQL]\n SELECT DISTINCT d.document_object_id FROM document_subsets s JOIN document_subset_members m ON s.document_subset_id = m.document_subset_id JOIN documents_in_collections c ON m.related_document_object_id = c.document_object_id WHERE s.document_subset_name ilike '%Best%for%2000%' AND c.collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best');"
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 731,
      "db_id": "cre_Doc_and_collections",
      "question": "List id of documents that in collection named Best but not in document subset Best for 2000."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List id of documents that in collection named Best but not in document subset Best for 2000.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List id of documents that in collection named Best but not in document subset Best for 2000.[/QUESTION]\n[SQL]\n SELECT d.Document_Object_ID FROM Documents_in_Collections AS d JOIN Collection_Subsets AS c ON d.Collection_ID = c.Collection_Subset_ID WHERE c.Collection_Subset_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best')) AND EXTRACT(YEAR FROM TO_DATE(d.Description, 'YYYY')) = 2000;"
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 732,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?[/QUESTION]\n[SQL]\n SELECT d.document_object_id FROM documents_in_collections AS d JOIN collections AS c ON d.collection_id = c.collection_id WHERE c.collection_name = 'Best' AND d.document_object_id NOT IN (SELECT m.related_document_object_id FROM document_subset_members AS m JOIN document_subsets AS s ON m.document_subset_id = s.document_subset_id WHERE s.document_subset_name = 'Best for 2000') ORDER BY d.document_object_id NULLS LAST;"
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 733,
      "db_id": "cre_Doc_and_collections",
      "question": "List id of documents that in document subset Best for 2000 or in collection named Best."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List id of documents that in document subset Best for 2000 or in collection named Best.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List id of documents that in document subset Best for 2000 or in collection named Best.[/QUESTION]\n[SQL]\n SELECT d.Document_Object_ID FROM Document_Subset_Members m JOIN Document_Subsets s ON m.Document_Subset_ID = s.Document_Subset_ID JOIN Document_Objects o ON m.Document_Object_ID = o.Document_Object_ID WHERE s.Document_Subset_Name = 'Best' OR o.Description = 'Best' UNION SELECT c.Collection_ID FROM Collection_Subset_Members cm JOIN Collection_Subsets cs ON cm.Collection_Subset_ID = cs.Collection_Subset_ID JOIN Collections c ON cm.Collection_ID = c.Collection_ID WHERE cs.Collecrtion_Subset_Name = 'Best' OR c.Collection_Name = 'Best';"
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 734,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?[/QUESTION]\n[SQL]\n SELECT DISTINCT d.document_object_id FROM documents_in_collections AS d JOIN document_subset_members AS ds ON d.document_object_id = ds.related_document_object_id WHERE ds.document_subset_id IN (SELECT document_subset_id FROM document_subsets WHERE document_subset_name ilike '%Best%for%2000%' OR document_subset_name ilike '%Best%')"
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 735,
      "db_id": "cre_Doc_and_collections",
      "question": "List all name of collections that are related to collection named Best."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all name of collections that are related to collection named Best.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all name of collections that are related to collection named Best.[/QUESTION]\n[SQL]\n SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name ilike '%Best%') ORDER BY c.Collection_Name NULLS LAST;"
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 736,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the names of the collections that are related to the collection named Best?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the collections that are related to the collection named Best?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the collections that are related to the collection named Best?[/QUESTION]\n[SQL]\n SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name ilike '%Best%')"
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 737,
      "db_id": "cre_Doc_and_collections",
      "question": "How many collections that are related to collection named Best?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many collections that are related to collection named Best?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many collections that are related to collection named Best?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name ILIKE '%Best%');"
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 738,
      "db_id": "cre_Doc_and_collections",
      "question": "How many different collections are related to the one named 'Best'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different collections are related to the one named 'Best'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different collections are related to the one named 'Best'?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Related_Collection_ID = c.Collection_ID WHERE cs.Collection_Subset_Name ilike '%Best%';"
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 739,
      "db_id": "cre_Doc_and_collections",
      "question": "Which collection subset does collection name Best in? List collection subset name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which collection subset does collection name Best in? List collection subset name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which collection subset does collection name Best in? List collection subset name.[/QUESTION]\n[SQL]\n SELECT c.collection_name, cs.collection_subset_name FROM collections c JOIN collection_subset_members csm ON c.collection_id = csm.related_collection_id JOIN collection_subsets cs ON csm.collection_subset_id = cs.collection_subset_id WHERE c.collection_name ilike '%Best%'"
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 740,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection subsets that the collection named 'Best' in?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the collection subsets that the collection named 'Best' in?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the collection subsets that the collection named 'Best' in?[/QUESTION]\n[SQL]\n SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID WHERE csm.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');"
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "question": {
      "id": 741,
      "db_id": "sing_contest",
      "question": "How many songs contain \"Love\" in their names?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many songs contain \"Love\" in their names?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many songs contain \"Love\" in their names?[/QUESTION]\n[SQL]\n SELECT COUNT(s.id) FROM songs s WHERE s.name ilike '%Love%';"
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "question": {
      "id": 742,
      "db_id": "sing_contest",
      "question": "List the name of the songs in ascending, lexicographical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the name of the songs in ascending, lexicographical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the name of the songs in ascending, lexicographical order.[/QUESTION]\n[SQL]\n SELECT s.name FROM songs s ORDER BY s.name ASC;"
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "question": {
      "id": 743,
      "db_id": "sing_contest",
      "question": "List the names and languages of the songs ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names and languages of the songs .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names and languages of the songs .[/QUESTION]\n[SQL]\n SELECT s.name, s.language FROM songs s;"
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "question": {
      "id": 744,
      "db_id": "sing_contest",
      "question": "What are the maximum and minimum voice sound quality score of the performances?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum and minimum voice sound quality score of the performances?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum and minimum voice sound quality score of the performances?[/QUESTION]\n[SQL]\n SELECT MAX(ps.voice_sound_quality) AS max_voice_sound_quality, MIN(ps.voice_sound_quality) AS min_voice_sound_quality FROM performance_score ps;"
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "question": {
      "id": 745,
      "db_id": "sing_contest",
      "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?[/QUESTION]\n[SQL]\n SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE p.name ilike '%Freeway%';"
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "question": {
      "id": 746,
      "db_id": "sing_contest",
      "question": "What are the id, language and original artist of the songs whose name is not 'Love'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the id, language and original artist of the songs whose name is not 'Love'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the id, language and original artist of the songs whose name is not 'Love'?[/QUESTION]\n[SQL]\n SELECT s.id, s.language, s.original_artist FROM songs s WHERE s.name not ilike '%Love%';"
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "question": {
      "id": 747,
      "db_id": "sing_contest",
      "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and original artists of the song whose English translation is 'All the streets of love'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and original artists of the song whose English translation is 'All the streets of love'?[/QUESTION]\n[SQL]\n SELECT s.name, s.original_artist FROM songs s WHERE s.english_translation ilike '%All%the%streets%of%love%'"
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "question": {
      "id": 748,
      "db_id": "sing_contest",
      "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct stage presence scores for all the songs that are in language 'English' ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct stage presence scores for all the songs that are in language 'English' ?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.stage_presence FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English';"
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "question": {
      "id": 749,
      "db_id": "sing_contest",
      "question": "What are the ids and names of the participants who have performed at least two songs?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids and names of the participants who have performed at least two songs?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids and names of the participants who have performed at least two songs?[/QUESTION]\n[SQL]\n SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name HAVING COUNT(ps.songs_id) >= 2 ORDER BY p.name NULLS LAST;"
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "question": {
      "id": 750,
      "db_id": "sing_contest",
      "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids, names and popularity of the participants, order by the number of songs they perform?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids, names and popularity of the participants, order by the number of songs they perform?[/QUESTION]\n[SQL]\n SELECT p.id, p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name, p.popularity ORDER BY COUNT(ps.songs_id) DESC;"
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "question": {
      "id": 751,
      "db_id": "sing_contest",
      "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?[/QUESTION]\n[SQL]\n SELECT p.id, p.name FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5;"
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "question": {
      "id": 752,
      "db_id": "sing_contest",
      "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?[/QUESTION]\n[SQL]\n SELECT ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.name ilike '%The Balkan Girls%' AND s.language ilike '%English%';"
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "question": {
      "id": 753,
      "db_id": "sing_contest",
      "question": "What are the id and name of the song sung by the most participants?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the id and name of the song sung by the most participants?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the id and name of the song sung by the most participants?[/QUESTION]\n[SQL]\n SELECT s.id AS song_id, s.name AS song_name, COUNT(ps.participant_id) AS number_of_participants FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY number_of_participants DESC LIMIT 1;"
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "question": {
      "id": 754,
      "db_id": "sing_contest",
      "question": "How many performances have a stage presence score less than 7 or higher than 9?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many performances have a stage presence score less than 7 or higher than 9?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many performances have a stage presence score less than 7 or higher than 9?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM performance_score ps WHERE (ps.stage_presence < 7 OR ps.stage_presence > 9);"
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "question": {
      "id": 755,
      "db_id": "sing_contest",
      "question": "How many songs listed are not performed?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many songs listed are not performed?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many songs listed are not performed?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT s.id) AS unperformed_songs FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.participant_id IS NULL"
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "question": {
      "id": 756,
      "db_id": "sing_contest",
      "question": "What are the average rhythm scores for the songs in each different language?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average rhythm scores for the songs in each different language?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average rhythm scores for the songs in each different language?[/QUESTION]\n[SQL]\n SELECT s.language, AVG(ps.rhythm_tempo) AS average_rhythm_tempo FROM performance_score ps JOIN songs s ON ps.songs_id = s.id GROUP BY s.language ORDER BY average_rhythm_tempo DESC NULLS LAST;"
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "question": {
      "id": 757,
      "db_id": "sing_contest",
      "question": "What are the distinct names of the participants who have sung a song in 'English'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct names of the participants who have sung a song in 'English'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct names of the participants who have sung a song in 'English'?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English';"
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "question": {
      "id": 758,
      "db_id": "sing_contest",
      "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?[/QUESTION]\n[SQL]\n SELECT p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language IN ('Croatian', 'English') GROUP BY p.name, p.popularity HAVING COUNT(DISTINCT s.language) = 2 ORDER BY p.popularity DESC NULLS LAST;"
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "question": {
      "id": 759,
      "db_id": "sing_contest",
      "question": "Which song names have the substring \"Is\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which song names have the substring \"Is\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which song names have the substring \"Is\"?[/QUESTION]\n[SQL]\n SELECT s.name FROM songs s WHERE s.name ilike '%Is%';"
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "question": {
      "id": 760,
      "db_id": "sing_contest",
      "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .[/QUESTION]\n[SQL]\n SELECT s.original_artist FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC;"
  },
  {
    "id": 761,
    "db_id": "address_1",
    "question": {
      "id": 761,
      "db_id": "address_1",
      "question": "How many cities do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many cities do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many cities do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(c.city_code) FROM City c;"
  },
  {
    "id": 762,
    "db_id": "address_1",
    "question": {
      "id": 762,
      "db_id": "address_1",
      "question": "Count the number of cities."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of cities.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of cities.[/QUESTION]\n[SQL]\n SELECT COUNT(c.city_code) FROM City c;"
  },
  {
    "id": 763,
    "db_id": "address_1",
    "question": {
      "id": 763,
      "db_id": "address_1",
      "question": "List all different states ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all different states .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all different states .[/QUESTION]\n[SQL]\n SELECT DISTINCT c.state FROM City c;"
  },
  {
    "id": 764,
    "db_id": "address_1",
    "question": {
      "id": 764,
      "db_id": "address_1",
      "question": "What are all the distinct states?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the distinct states?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the distinct states?[/QUESTION]\n[SQL]\n SELECT DISTINCT c.state FROM City c;"
  },
  {
    "id": 765,
    "db_id": "address_1",
    "question": {
      "id": 765,
      "db_id": "address_1",
      "question": "How many countries do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many countries do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many countries do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.country) FROM City c;"
  },
  {
    "id": 766,
    "db_id": "address_1",
    "question": {
      "id": 766,
      "db_id": "address_1",
      "question": "Count the number of coutries."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of coutries.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of coutries.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.country) FROM City c;"
  },
  {
    "id": 767,
    "db_id": "address_1",
    "question": {
      "id": 767,
      "db_id": "address_1",
      "question": "Show names, codes, states, countries for all cities."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show names, codes, states, countries for all cities.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show names, codes, states, countries for all cities.[/QUESTION]\n[SQL]\n SELECT c.city_name, c.city_code, c.state, c.country FROM City c;"
  },
  {
    "id": 768,
    "db_id": "address_1",
    "question": {
      "id": 768,
      "db_id": "address_1",
      "question": "What are the names, codes, states, and countries for all cities?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names, codes, states, and countries for all cities?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names, codes, states, and countries for all cities?[/QUESTION]\n[SQL]\n SELECT c.city_name, c.city_code, c.state, c.country FROM City c;"
  },
  {
    "id": 769,
    "db_id": "address_1",
    "question": {
      "id": 769,
      "db_id": "address_1",
      "question": "What is the latitude and longitude for Baltimore?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the latitude and longitude for Baltimore?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the latitude and longitude for Baltimore?[/QUESTION]\n[SQL]\n SELECT c.latitude, c.longitude FROM City c WHERE c.city_name ilike '%Baltimore%';"
  },
  {
    "id": 770,
    "db_id": "address_1",
    "question": {
      "id": 770,
      "db_id": "address_1",
      "question": "What latitude and longitude correspond to Baltimore?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What latitude and longitude correspond to Baltimore?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What latitude and longitude correspond to Baltimore?[/QUESTION]\n[SQL]\n SELECT c.latitude, c.longitude FROM City c WHERE c.city_name ilike '%Baltimore%';"
  },
  {
    "id": 771,
    "db_id": "address_1",
    "question": {
      "id": 771,
      "db_id": "address_1",
      "question": "Show names for all cities in state PA."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show names for all cities in state PA.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show names for all cities in state PA.[/QUESTION]\n[SQL]\n SELECT c.city_name FROM City c WHERE c.state = 'PA';"
  },
  {
    "id": 772,
    "db_id": "address_1",
    "question": {
      "id": 772,
      "db_id": "address_1",
      "question": "What are the names of all cities in PA?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all cities in PA?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all cities in PA?[/QUESTION]\n[SQL]\n SELECT c.city_name FROM City c WHERE c.state = 'PA';"
  },
  {
    "id": 773,
    "db_id": "address_1",
    "question": {
      "id": 773,
      "db_id": "address_1",
      "question": "How many cities are in Canada?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many cities are in Canada?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many cities are in Canada?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM City WHERE country ILIKE '%Canada%';"
  },
  {
    "id": 774,
    "db_id": "address_1",
    "question": {
      "id": 774,
      "db_id": "address_1",
      "question": "Count the number of cities in Canada."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of cities in Canada.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of cities in Canada.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM City WHERE country = 'Canada';"
  },
  {
    "id": 775,
    "db_id": "address_1",
    "question": {
      "id": 775,
      "db_id": "address_1",
      "question": "Show names for all USA city ordered by latitude."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show names for all USA city ordered by latitude.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show names for all USA city ordered by latitude.[/QUESTION]\n[SQL]\n SELECT c.city_name FROM City c WHERE c.country = 'USA' ORDER BY c.latitude NULLS LAST;"
  },
  {
    "id": 776,
    "db_id": "address_1",
    "question": {
      "id": 776,
      "db_id": "address_1",
      "question": "What are all the city names for cities in the USA, ordered by latitude?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the city names for cities in the USA, ordered by latitude?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the city names for cities in the USA, ordered by latitude?[/QUESTION]\n[SQL]\n SELECT c.city_name FROM City c WHERE c.country = 'United States' ORDER BY c.latitude NULLS LAST;"
  },
  {
    "id": 777,
    "db_id": "address_1",
    "question": {
      "id": 777,
      "db_id": "address_1",
      "question": "Show all states and number of cities in each state."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all states and number of cities in each state.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all states and number of cities in each state.[/QUESTION]\n[SQL]\n SELECT c.state, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.state ORDER BY city_count DESC NULLS LAST;"
  },
  {
    "id": 778,
    "db_id": "address_1",
    "question": {
      "id": 778,
      "db_id": "address_1",
      "question": "How many cities are in each state?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many cities are in each state?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many cities are in each state?[/QUESTION]\n[SQL]\n SELECT c.state, COUNT(c.city_code) AS number_of_cities FROM City c GROUP BY c.state ORDER BY number_of_cities DESC NULLS LAST;"
  },
  {
    "id": 779,
    "db_id": "address_1",
    "question": {
      "id": 779,
      "db_id": "address_1",
      "question": "Show all countries and number of cities in each ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all countries and number of cities in each .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all countries and number of cities in each .[/QUESTION]\n[SQL]\n SELECT c.country, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.country ORDER BY city_count DESC NULLS LAST;"
  },
  {
    "id": 780,
    "db_id": "address_1",
    "question": {
      "id": 780,
      "db_id": "address_1",
      "question": "How many cities are there in each country?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many cities are there in each country?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many cities are there in each country?[/QUESTION]\n[SQL]\n SELECT c.country, COUNT(c.city_code) AS number_of_cities FROM City c GROUP BY c.country ORDER BY number_of_cities DESC NULLS LAST;"
  },
  {
    "id": 781,
    "db_id": "address_1",
    "question": {
      "id": 781,
      "db_id": "address_1",
      "question": "List all states with at least two cities."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all states with at least two cities.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all states with at least two cities.[/QUESTION]\n[SQL]\n SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) >= 2;"
  },
  {
    "id": 782,
    "db_id": "address_1",
    "question": {
      "id": 782,
      "db_id": "address_1",
      "question": "Which states have at least two cities?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which states have at least two cities?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which states have at least two cities?[/QUESTION]\n[SQL]\n SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) >= 2;"
  },
  {
    "id": 783,
    "db_id": "address_1",
    "question": {
      "id": 783,
      "db_id": "address_1",
      "question": "Which state has most number of cities?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which state has most number of cities?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which state has most number of cities?[/QUESTION]\n[SQL]\n SELECT c.state, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.state ORDER BY city_count DESC LIMIT 1;"
  },
  {
    "id": 784,
    "db_id": "address_1",
    "question": {
      "id": 784,
      "db_id": "address_1",
      "question": "Give the state that has the most cities."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the state that has the most cities.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the state that has the most cities.[/QUESTION]\n[SQL]\n SELECT c.state, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.state ORDER BY city_count DESC LIMIT 1;"
  },
  {
    "id": 785,
    "db_id": "address_1",
    "question": {
      "id": 785,
      "db_id": "address_1",
      "question": "Which country has fewest number of cities?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which country has fewest number of cities?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which country has fewest number of cities?[/QUESTION]\n[SQL]\n SELECT c.country, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.country ORDER BY city_count ASC LIMIT 1;"
  },
  {
    "id": 786,
    "db_id": "address_1",
    "question": {
      "id": 786,
      "db_id": "address_1",
      "question": "Give the country with the fewest number of cities."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the country with the fewest number of cities.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the country with the fewest number of cities.[/QUESTION]\n[SQL]\n SELECT c.country, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.country ORDER BY city_count ASC LIMIT 1;"
  },
  {
    "id": 787,
    "db_id": "address_1",
    "question": {
      "id": 787,
      "db_id": "address_1",
      "question": "Show the first name and the last name for students living in state MD."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the first name and the last name for students living in state MD.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the first name and the last name for students living in state MD.[/QUESTION]\n[SQL]\n SELECT s.fname, s.lname FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.state = 'MD';"
  },
  {
    "id": 788,
    "db_id": "address_1",
    "question": {
      "id": 788,
      "db_id": "address_1",
      "question": "What are the full names of students living in MD?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the full names of students living in MD?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the full names of students living in MD?[/QUESTION]\n[SQL]\n SELECT s.fname, s.lname FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.state = 'MD';"
  },
  {
    "id": 789,
    "db_id": "address_1",
    "question": {
      "id": 789,
      "db_id": "address_1",
      "question": "How many students live in China?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many students live in China?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many students live in China?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China';"
  },
  {
    "id": 790,
    "db_id": "address_1",
    "question": {
      "id": 790,
      "db_id": "address_1",
      "question": "Count the number of students living in China."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of students living in China.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of students living in China.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China';"
  },
  {
    "id": 791,
    "db_id": "address_1",
    "question": {
      "id": 791,
      "db_id": "address_1",
      "question": "Return the first name and major of students are living in Baltimore?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the first name and major of students are living in Baltimore?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the first name and major of students are living in Baltimore?[/QUESTION]\n[SQL]\n SELECT s.fname, s.major FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.city_name ilike '%Baltimore%' ORDER BY s.fname NULLS LAST;"
  },
  {
    "id": 792,
    "db_id": "address_1",
    "question": {
      "id": 792,
      "db_id": "address_1",
      "question": "What are the first names and majors of students living in Baltimore?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first names and majors of students living in Baltimore?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first names and majors of students living in Baltimore?[/QUESTION]\n[SQL]\n SELECT s.fname, m.major_name FROM Student s JOIN Major m ON s.major = m.major_id JOIN City c ON s.city_code = c.city_code WHERE c.city_name ilike '%Baltimore%'"
  },
  {
    "id": 793,
    "db_id": "address_1",
    "question": {
      "id": 793,
      "db_id": "address_1",
      "question": "Show the number of students living in each country."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the number of students living in each country.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the number of students living in each country.[/QUESTION]\n[SQL]\n SELECT c.country, COUNT(s.stuid) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY total_students DESC NULLS LAST;"
  },
  {
    "id": 794,
    "db_id": "address_1",
    "question": {
      "id": 794,
      "db_id": "address_1",
      "question": "How many students live in each country?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many students live in each country?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many students live in each country?[/QUESTION]\n[SQL]\n SELECT c.country, COUNT(s.stuid) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY number_of_students DESC NULLS LAST;"
  },
  {
    "id": 795,
    "db_id": "address_1",
    "question": {
      "id": 795,
      "db_id": "address_1",
      "question": "Find the number of students living in each city."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of students living in each city.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of students living in each city.[/QUESTION]\n[SQL]\n SELECT c.city_name, COUNT(s.stu_id) AS total_students FROM student s JOIN city c ON s.city_code = c.city_code GROUP BY c.city_name ORDER BY total_students DESC NULLS LAST;"
  },
  {
    "id": 796,
    "db_id": "address_1",
    "question": {
      "id": 796,
      "db_id": "address_1",
      "question": "How many students live in each city?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many students live in each city?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many students live in each city?[/QUESTION]\n[SQL]\n SELECT c.city_name, COUNT(s.stu_id) AS number_of_students FROM student s JOIN city c ON s.city_code = c.city_code GROUP BY c.city_name ORDER BY number_of_students DESC NULLS LAST;"
  },
  {
    "id": 797,
    "db_id": "address_1",
    "question": {
      "id": 797,
      "db_id": "address_1",
      "question": "Which state has most number of students?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which state has most number of students?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which state has most number of students?[/QUESTION]\n[SQL]\n SELECT c.state, COUNT(s.stuid) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state ORDER BY total_students DESC LIMIT 1;"
  },
  {
    "id": 798,
    "db_id": "address_1",
    "question": {
      "id": 798,
      "db_id": "address_1",
      "question": "Give the state that has the most students."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the state that has the most students.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the state that has the most students.[/QUESTION]\n[SQL]\n SELECT c.state, COUNT(s.stuid) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state ORDER BY total_students DESC LIMIT 1;"
  },
  {
    "id": 799,
    "db_id": "address_1",
    "question": {
      "id": 799,
      "db_id": "address_1",
      "question": "Which country has least number of students?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which country has least number of students?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which country has least number of students?[/QUESTION]\n[SQL]\n SELECT c.country, COUNT(s.stuid) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY total_students ASC LIMIT 1;"
  },
  {
    "id": 800,
    "db_id": "address_1",
    "question": {
      "id": 800,
      "db_id": "address_1",
      "question": "Give the country with the fewest students."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the country with the fewest students.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the country with the fewest students.[/QUESTION]\n[SQL]\n SELECT c.country, COUNT(s.stuid) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY number_of_students ASC LIMIT 1;"
  },
  {
    "id": 801,
    "db_id": "address_1",
    "question": {
      "id": 801,
      "db_id": "address_1",
      "question": "Show names for all cities where at least three students live."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show names for all cities where at least three students live.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show names for all cities where at least three students live.[/QUESTION]\n[SQL]\n SELECT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.stu_id) >= 3;"
  },
  {
    "id": 802,
    "db_id": "address_1",
    "question": {
      "id": 802,
      "db_id": "address_1",
      "question": "What are the names of cities with at least three students?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of cities with at least three students?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of cities with at least three students?[/QUESTION]\n[SQL]\n SELECT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.stu_id) >= 3;"
  },
  {
    "id": 803,
    "db_id": "address_1",
    "question": {
      "id": 803,
      "db_id": "address_1",
      "question": "Show all states where more than 5 students live."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all states where more than 5 students live.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all states where more than 5 students live.[/QUESTION]\n[SQL]\n SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) > 5;"
  },
  {
    "id": 804,
    "db_id": "address_1",
    "question": {
      "id": 804,
      "db_id": "address_1",
      "question": "What are the states with more than 5 students?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the states with more than 5 students?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the states with more than 5 students?[/QUESTION]\n[SQL]\n SELECT c.state FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.state HAVING COUNT(s.stu_id) > 5;"
  },
  {
    "id": 805,
    "db_id": "address_1",
    "question": {
      "id": 805,
      "db_id": "address_1",
      "question": "Show ids for all students who don't live in USA."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show ids for all students who don't live in USA.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show ids for all students who don't live in USA.[/QUESTION]\n[SQL]\n SELECT s.stu_id FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.country != 'United States';"
  },
  {
    "id": 806,
    "db_id": "address_1",
    "question": {
      "id": 806,
      "db_id": "address_1",
      "question": "What the the student ids for students not living in the USA?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What the the student ids for students not living in the USA?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What the the student ids for students not living in the USA?[/QUESTION]\n[SQL]\n SELECT s.stu_id FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.country != 'United States';"
  },
  {
    "id": 807,
    "db_id": "address_1",
    "question": {
      "id": 807,
      "db_id": "address_1",
      "question": "Show ids for all female (sex is F) students living in state PA."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show ids for all female (sex is F) students living in state PA.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show ids for all female (sex is F) students living in state PA.[/QUESTION]\n[SQL]\n SELECT s.stuid FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.sex = 'F' AND c.state = 'PA';"
  },
  {
    "id": 808,
    "db_id": "address_1",
    "question": {
      "id": 808,
      "db_id": "address_1",
      "question": "What are the student ids for female students in the state of PA?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the student ids for female students in the state of PA?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the student ids for female students in the state of PA?[/QUESTION]\n[SQL]\n SELECT s.stuid FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.sex = 'F' AND c.state = 'PA';"
  },
  {
    "id": 809,
    "db_id": "address_1",
    "question": {
      "id": 809,
      "db_id": "address_1",
      "question": "Show ids for all male students living outside of USA."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show ids for all male students living outside of USA.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show ids for all male students living outside of USA.[/QUESTION]\n[SQL]\n SELECT s.stuid FROM student s JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'M' AND c.country != 'United States';"
  },
  {
    "id": 810,
    "db_id": "address_1",
    "question": {
      "id": 810,
      "db_id": "address_1",
      "question": "What are the ids for male students not in the USA?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids for male students not in the USA?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids for male students not in the USA?[/QUESTION]\n[SQL]\n SELECT s.stuid FROM student s JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'M' AND c.country != 'United States';"
  },
  {
    "id": 811,
    "db_id": "address_1",
    "question": {
      "id": 811,
      "db_id": "address_1",
      "question": "What is the distance between BAL and CHI?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the distance between BAL and CHI?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the distance between BAL and CHI?[/QUESTION]\n[SQL]\n SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI';"
  },
  {
    "id": 812,
    "db_id": "address_1",
    "question": {
      "id": 812,
      "db_id": "address_1",
      "question": "Give the distance between BAL and CHI?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the distance between BAL and CHI?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the distance between BAL and CHI?[/QUESTION]\n[SQL]\n SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI';"
  },
  {
    "id": 813,
    "db_id": "address_1",
    "question": {
      "id": 813,
      "db_id": "address_1",
      "question": "Show me the distance between Boston and Newark."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show me the distance between Boston and Newark.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show me the distance between Boston and Newark.[/QUESTION]\n[SQL]\n SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BOS' AND d.city2_code = 'NJK';"
  },
  {
    "id": 814,
    "db_id": "address_1",
    "question": {
      "id": 814,
      "db_id": "address_1",
      "question": "What is the distance between Boston and Newark?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the distance between Boston and Newark?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the distance between Boston and Newark?[/QUESTION]\n[SQL]\n SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BOS' AND d.city2_code = 'NJK';"
  },
  {
    "id": 815,
    "db_id": "address_1",
    "question": {
      "id": 815,
      "db_id": "address_1",
      "question": "What is the average, minimum, maximum distance between two cities?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average, minimum, maximum distance between two cities?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average, minimum, maximum distance between two cities?[/QUESTION]\n[SQL]\n SELECT AVG(d.distance) AS average_distance, MIN(d.distance) AS minimum_distance, MAX(d.distance) AS maximum_distance FROM Direct_distance d;"
  },
  {
    "id": 816,
    "db_id": "address_1",
    "question": {
      "id": 816,
      "db_id": "address_1",
      "question": "Give the average, minimum, and maximum distances between two cities."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the average, minimum, and maximum distances between two cities.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the average, minimum, and maximum distances between two cities.[/QUESTION]\n[SQL]\n SELECT AVG(d.distance) AS average_distance, MIN(d.distance) AS minimum_distance, MAX(d.distance) AS maximum_distance FROM Direct_distance d;"
  },
  {
    "id": 817,
    "db_id": "address_1",
    "question": {
      "id": 817,
      "db_id": "address_1",
      "question": "Show me the city code of two cities with maximum distance."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show me the city code of two cities with maximum distance.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show me the city code of two cities with maximum distance.[/QUESTION]\n[SQL]\n SELECT d.city1_code, d.city2_code FROM Direct_distance d ORDER BY d.distance DESC LIMIT 2;"
  },
  {
    "id": 818,
    "db_id": "address_1",
    "question": {
      "id": 818,
      "db_id": "address_1",
      "question": "What are the city codes of the cities with the maximum distance?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the city codes of the cities with the maximum distance?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the city codes of the cities with the maximum distance?[/QUESTION]\n[SQL]\n SELECT d.city1_code, d.city2_code, d.distance FROM Direct_distance d ORDER BY d.distance DESC LIMIT 2;"
  },
  {
    "id": 819,
    "db_id": "address_1",
    "question": {
      "id": 819,
      "db_id": "address_1",
      "question": "Show me the city code of two cities with a distance greater than the average."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show me the city code of two cities with a distance greater than the average.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show me the city code of two cities with a distance greater than the average.[/QUESTION]\n[SQL]\n WITH avg_dist AS (SELECT AVG(distance) FROM Direct_distance) SELECT c.city_code, d.city_code, d.distance FROM Direct_distance d JOIN City c ON d.city1_code = c.city_code WHERE d.distance > (SELECT distance FROM avg_dist) LIMIT 2;"
  },
  {
    "id": 820,
    "db_id": "address_1",
    "question": {
      "id": 820,
      "db_id": "address_1",
      "question": "What are the city codes of cities with distance greater than average?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the city codes of cities with distance greater than average?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the city codes of cities with distance greater than average?[/QUESTION]\n[SQL]\n WITH avg_dist AS (SELECT AVG(distance) AS avg_distance FROM Direct_distance) SELECT d.city1_code, d.city2_code FROM Direct_distance d JOIN avg_dist a ON d.distance > a.avg_distance;"
  },
  {
    "id": 821,
    "db_id": "address_1",
    "question": {
      "id": 821,
      "db_id": "address_1",
      "question": "Show me the city code of two cities with a distance less than 1000."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show me the city code of two cities with a distance less than 1000.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show me the city code of two cities with a distance less than 1000.[/QUESTION]\n[SQL]\n SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance < 1000;"
  },
  {
    "id": 822,
    "db_id": "address_1",
    "question": {
      "id": 822,
      "db_id": "address_1",
      "question": "What are the city codes corresponding to cities with distances less than 1000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the city codes corresponding to cities with distances less than 1000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the city codes corresponding to cities with distances less than 1000?[/QUESTION]\n[SQL]\n SELECT d.city1_code FROM Direct_distance d WHERE d.distance < 1000;"
  },
  {
    "id": 823,
    "db_id": "address_1",
    "question": {
      "id": 823,
      "db_id": "address_1",
      "question": "What is the total distance between city BAL and all other cities."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total distance between city BAL and all other cities.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total distance between city BAL and all other cities.[/QUESTION]\n[SQL]\n SELECT SUM(d.distance) AS total_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%BAL%' JOIN City c2 ON d.city2_code = c2.city_code;"
  },
  {
    "id": 824,
    "db_id": "address_1",
    "question": {
      "id": 824,
      "db_id": "address_1",
      "question": "What is the sum of distances between BAL and other cities?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the sum of distances between BAL and other cities?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the sum of distances between BAL and other cities?[/QUESTION]\n[SQL]\n SELECT SUM(d.distance) AS total_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%Baltimore%' JOIN City c2 ON d.city2_code = c2.city_code;"
  },
  {
    "id": 825,
    "db_id": "address_1",
    "question": {
      "id": 825,
      "db_id": "address_1",
      "question": "What is the average distance between Boston and all other cities."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average distance between Boston and all other cities.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average distance between Boston and all other cities.[/QUESTION]\n[SQL]\n SELECT AVG(d.distance) AS average_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%Boston%' JOIN City c2 ON d.city2_code = c2.city_code;"
  },
  {
    "id": 826,
    "db_id": "address_1",
    "question": {
      "id": 826,
      "db_id": "address_1",
      "question": "Give the average distance between Boston and other cities."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the average distance between Boston and other cities.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the average distance between Boston and other cities.[/QUESTION]\n[SQL]\n SELECT AVG(d.distance) AS average_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%Boston%' JOIN City c2 ON d.city2_code = c2.city_code;"
  },
  {
    "id": 827,
    "db_id": "address_1",
    "question": {
      "id": 827,
      "db_id": "address_1",
      "question": "What is the name of the city closest to Chicago?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the city closest to Chicago?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the city closest to Chicago?[/QUESTION]\n[SQL]\n SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = 'CHI' ORDER BY d.distance ASC LIMIT 1;"
  },
  {
    "id": 828,
    "db_id": "address_1",
    "question": {
      "id": 828,
      "db_id": "address_1",
      "question": "Give the name of the nearest city to Chicago."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the name of the nearest city to Chicago.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the name of the nearest city to Chicago.[/QUESTION]\n[SQL]\n SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = 'CHI' ORDER BY d.distance ASC LIMIT 1;"
  },
  {
    "id": 829,
    "db_id": "address_1",
    "question": {
      "id": 829,
      "db_id": "address_1",
      "question": "What is the name of the city furthest to Boston?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the city furthest to Boston?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the city furthest to Boston?[/QUESTION]\n[SQL]\n SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = 'BOS' ORDER BY d.distance DESC LIMIT 1;"
  },
  {
    "id": 830,
    "db_id": "address_1",
    "question": {
      "id": 830,
      "db_id": "address_1",
      "question": "Give the city name of the city with greatest distance from Boston."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the city name of the city with greatest distance from Boston.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the city name of the city with greatest distance from Boston.[/QUESTION]\n[SQL]\n SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE c.city_code = 'BOS' ORDER BY d.distance DESC LIMIT 1;"
  },
  {
    "id": 831,
    "db_id": "address_1",
    "question": {
      "id": 831,
      "db_id": "address_1",
      "question": "Show all city codes and the total distance to all other cities."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all city codes and the total distance to all other cities.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all city codes and the total distance to all other cities.[/QUESTION]\n[SQL]\n SELECT c.city_code, SUM(d.distance) AS total_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_code ORDER BY total_distance DESC NULLS LAST;"
  },
  {
    "id": 832,
    "db_id": "address_1",
    "question": {
      "id": 832,
      "db_id": "address_1",
      "question": "For each city, what is the the city code and sum of distances from each?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each city, what is the the city code and sum of distances from each?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each city, what is the the city code and sum of distances from each?[/QUESTION]\n[SQL]\n WITH total_distances AS (SELECT city1_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city1_code) SELECT c.city_code, t.total_distance FROM City c JOIN total_distances t ON c.city_code = t.city1_code;"
  },
  {
    "id": 833,
    "db_id": "address_1",
    "question": {
      "id": 833,
      "db_id": "address_1",
      "question": "Show all city names and the average distance to all other cities."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all city names and the average distance to all other cities.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all city names and the average distance to all other cities.[/QUESTION]\n[SQL]\n WITH avg_dist AS (SELECT city1_code, AVG(distance) AS avg_distance FROM direct_distance GROUP BY city1_code) SELECT c.city_name, ad.avg_distance FROM city c JOIN avg_dist ad ON c.city_code = ad.city1_code;"
  },
  {
    "id": 834,
    "db_id": "address_1",
    "question": {
      "id": 834,
      "db_id": "address_1",
      "question": "What are the city name and average distances from each city?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the city name and average distances from each city?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the city name and average distances from each city?[/QUESTION]\n[SQL]\n WITH avg_dist AS (SELECT city1_code, AVG(distance) AS avg_distance FROM direct_distance GROUP BY city1_code) SELECT c.city_name, ad.avg_distance FROM city c JOIN avg_dist ad ON c.city_code = ad.city1_code;"
  },
  {
    "id": 835,
    "db_id": "address_1",
    "question": {
      "id": 835,
      "db_id": "address_1",
      "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?[/QUESTION]\n[SQL]\n SELECT d.distance FROM Student s1 JOIN Student s2 ON s1.city_code = s2.city_code JOIN Direct_distance d ON s1.city_code = d.city1_code AND s2.city_code = d.city2_code WHERE s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim';"
  },
  {
    "id": 836,
    "db_id": "address_1",
    "question": {
      "id": 836,
      "db_id": "address_1",
      "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the distance between the cities where Linda Smith and Tracy Kim live?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the distance between the cities where Linda Smith and Tracy Kim live?[/QUESTION]\n[SQL]\n SELECT d.distance FROM Student s1 JOIN Student s2 ON s1.city_code = s2.city_code JOIN Direct_distance d ON s1.city_code = d.city1_code AND s2.city_code = d.city2_code WHERE s1.fname = 'Linda' AND s2.fname = 'Tracy';"
  },
  {
    "id": 837,
    "db_id": "address_1",
    "question": {
      "id": 837,
      "db_id": "address_1",
      "question": "What is the first name and last name of the student living furthest to Linda Smith?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the first name and last name of the student living furthest to Linda Smith?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the first name and last name of the student living furthest to Linda Smith?[/QUESTION]\n[SQL]\n SELECT s.fname, s.lname FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code WHERE s.fname ilike '%Linda%' AND s.lname ilike '%Smith%' ORDER BY d.distance DESC LIMIT 1;"
  },
  {
    "id": 838,
    "db_id": "address_1",
    "question": {
      "id": 838,
      "db_id": "address_1",
      "question": "What is the full name of the student who lives furthest from Linda Smith?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the full name of the student who lives furthest from Linda Smith?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the full name of the student who lives furthest from Linda Smith?[/QUESTION]\n[SQL]\n SELECT s.fname, s.lname FROM Student s JOIN Direct_distance d ON s.city_code = d.city2_code WHERE s.fname = 'Linda' AND s.lname = 'Smith' ORDER BY d.distance DESC LIMIT 1;"
  },
  {
    "id": 839,
    "db_id": "address_1",
    "question": {
      "id": 839,
      "db_id": "address_1",
      "question": "Which state does the student whose first name is Linda live in?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which state does the student whose first name is Linda live in?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which state does the student whose first name is Linda live in?[/QUESTION]\n[SQL]\n SELECT s.state FROM Student s WHERE s.fname = 'Linda';"
  },
  {
    "id": 840,
    "db_id": "address_1",
    "question": {
      "id": 840,
      "db_id": "address_1",
      "question": "Give the state that the student with first name Linda lives in."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the state that the student with first name Linda lives in.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the state that the student with first name Linda lives in.[/QUESTION]\n[SQL]\n SELECT c.state FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.fname = 'Linda';"
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "question": {
      "id": 841,
      "db_id": "boat_1",
      "question": "Return all details of sailors who are older than 30."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return all details of sailors who are older than 30.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return all details of sailors who are older than 30.[/QUESTION]\n[SQL]\n SELECT s.sid, s.name, s.rating, s.age FROM Sailors s WHERE s.age > 30;"
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "question": {
      "id": 842,
      "db_id": "boat_1",
      "question": "What can you tell me about sailors who are older than age 30?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What can you tell me about sailors who are older than age 30?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What can you tell me about sailors who are older than age 30?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s WHERE s.age > 30;"
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "question": {
      "id": 843,
      "db_id": "boat_1",
      "question": "Return name and age for sailors who are younger than 30."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return name and age for sailors who are younger than 30.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return name and age for sailors who are younger than 30.[/QUESTION]\n[SQL]\n SELECT s.name, s.age FROM Sailors s WHERE s.age < 30;"
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "question": {
      "id": 844,
      "db_id": "boat_1",
      "question": "What is the name and age of every sailor who is younger than age 30?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name and age of every sailor who is younger than age 30?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name and age of every sailor who is younger than age 30?[/QUESTION]\n[SQL]\n SELECT s.name, s.age FROM Sailors s WHERE s.age < 30;"
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "question": {
      "id": 845,
      "db_id": "boat_1",
      "question": "Find boats reserved by Sailor with id 1."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find boats reserved by Sailor with id 1.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find boats reserved by Sailor with id 1.[/QUESTION]\n[SQL]\n SELECT b.name FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = 1;"
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "question": {
      "id": 846,
      "db_id": "boat_1",
      "question": "What are the different boat ids reserved by the sailor whose id is 1?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different boat ids reserved by the sailor whose id is 1?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different boat ids reserved by the sailor whose id is 1?[/QUESTION]\n[SQL]\n SELECT DISTINCT r.bid FROM Reserves r WHERE r.sid = 1;"
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "question": {
      "id": 847,
      "db_id": "boat_1",
      "question": "Who reserved boat 102?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who reserved boat 102?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who reserved boat 102?[/QUESTION]\n[SQL]\n SELECT s.name FROM Reserves r JOIN Sailors s ON r.sid = s.sid WHERE r.bid = 102;"
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "question": {
      "id": 848,
      "db_id": "boat_1",
      "question": "What is the name of the sailor who reserved boat 102?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the sailor who reserved boat 102?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the sailor who reserved boat 102?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102;"
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "question": {
      "id": 849,
      "db_id": "boat_1",
      "question": "Return the unique boat ids (bid) of all reserved boats."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the unique boat ids (bid) of all reserved boats.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the unique boat ids (bid) of all reserved boats.[/QUESTION]\n[SQL]\n SELECT DISTINCT r.bid FROM Reserves r;"
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "question": {
      "id": 850,
      "db_id": "boat_1",
      "question": "What are the ids of all boats that are reserved by someone?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of all boats that are reserved by someone?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of all boats that are reserved by someone?[/QUESTION]\n[SQL]\n SELECT DISTINCT r.bid FROM Reserves r;"
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "question": {
      "id": 851,
      "db_id": "boat_1",
      "question": "What is the name of sailors whose names contain letter e?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of sailors whose names contain letter e?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of sailors whose names contain letter e?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s WHERE s.name ilike '%e%';"
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "question": {
      "id": 852,
      "db_id": "boat_1",
      "question": "What is the name of every sailor whose name contains the letter e?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of every sailor whose name contains the letter e?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of every sailor whose name contains the letter e?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s WHERE s.name ilike '%e%';"
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "question": {
      "id": 853,
      "db_id": "boat_1",
      "question": "return the unique ids of sailors who are older than any sailors."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]return the unique ids of sailors who are older than any sailors.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]return the unique ids of sailors who are older than any sailors.[/QUESTION]\n[SQL]\n SELECT s.sid FROM Sailors s WHERE s.age > ANY (SELECT age FROM Sailors);"
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "question": {
      "id": 854,
      "db_id": "boat_1",
      "question": "What is the different id of every sailor who is not the youngest?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the different id of every sailor who is not the youngest?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the different id of every sailor who is not the youngest?[/QUESTION]\n[SQL]\n SELECT s.sid FROM Sailors s WHERE s.age != (SELECT MIN(age) FROM Sailors);"
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "question": {
      "id": 855,
      "db_id": "boat_1",
      "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the unique names of sailors who are older than any sailors whose rating is larger than 7.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the unique names of sailors who are older than any sailors whose rating is larger than 7.[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s WHERE s.age > (SELECT MAX(s2.age) FROM Sailors s2 WHERE s2.rating > 7);"
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "question": {
      "id": 856,
      "db_id": "boat_1",
      "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different names of sailors who are older than some other sailor with a rating larger than 7?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different names of sailors who are older than some other sailor with a rating larger than 7?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s WHERE s.age > (SELECT AVG(s2.age) FROM Sailors s2 WHERE s2.rating > 7);"
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "question": {
      "id": 857,
      "db_id": "boat_1",
      "question": "Find the name and id of the sailors who reserved at least one boat?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and id of the sailors who reserved at least one boat?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and id of the sailors who reserved at least one boat?[/QUESTION]\n[SQL]\n SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name, s.sid HAVING COUNT(r.bid) >= 1 ORDER BY s.name NULLS LAST;"
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "question": {
      "id": 858,
      "db_id": "boat_1",
      "question": "What is the name and id of every sailor who reserved one or more boats?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name and id of every sailor who reserved one or more boats?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name and id of every sailor who reserved one or more boats?[/QUESTION]\n[SQL]\n SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name, s.sid HAVING COUNT(r.bid) >= 1 ORDER BY s.name NULLS LAST;"
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "question": {
      "id": 859,
      "db_id": "boat_1",
      "question": "Find the id and name of the sailors who reserved more than one boat."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the id and name of the sailors who reserved more than one boat.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the id and name of the sailors who reserved more than one boat.[/QUESTION]\n[SQL]\n SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid, s.name HAVING COUNT(r.bid) > 1;"
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "question": {
      "id": 860,
      "db_id": "boat_1",
      "question": "What are the different names of sailors who reserved two or more boats ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different names of sailors who reserved two or more boats ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different names of sailors who reserved two or more boats ?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name HAVING COUNT(r.bid) >= 2;"
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "question": {
      "id": 861,
      "db_id": "boat_1",
      "question": "Find the id of Sailors (sid) that reserved red or blue boat."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the id of Sailors (sid) that reserved red or blue boat.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the id of Sailors (sid) that reserved red or blue boat.[/QUESTION]\n[SQL]\n SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%'"
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "question": {
      "id": 862,
      "db_id": "boat_1",
      "question": "What are the sids for sailors who reserved red or blue boats?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the sids for sailors who reserved red or blue boats?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the sids for sailors who reserved red or blue boats?[/QUESTION]\n[SQL]\n SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');"
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "question": {
      "id": 863,
      "db_id": "boat_1",
      "question": "Find the name and id of Sailors (sid) that reserved red or blue boat."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and id of Sailors (sid) that reserved red or blue boat.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and id of Sailors (sid) that reserved red or blue boat.[/QUESTION]\n[SQL]\n SELECT s.name, r.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%';"
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "question": {
      "id": 864,
      "db_id": "boat_1",
      "question": "What are the names and ids of sailors who reserved red or blue boats?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and ids of sailors who reserved red or blue boats?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and ids of sailors who reserved red or blue boats?[/QUESTION]\n[SQL]\n SELECT s.name, r.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%';"
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "question": {
      "id": 865,
      "db_id": "boat_1",
      "question": "Find the id of Sailors (sid) that reserved red and blue boat."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the id of Sailors (sid) that reserved red and blue boat.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the id of Sailors (sid) that reserved red and blue boat.[/QUESTION]\n[SQL]\n SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');"
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "question": {
      "id": 866,
      "db_id": "boat_1",
      "question": "What are the ids of sailors who reserved red and blue boats?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of sailors who reserved red and blue boats?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of sailors who reserved red and blue boats?[/QUESTION]\n[SQL]\n SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%'"
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "question": {
      "id": 867,
      "db_id": "boat_1",
      "question": "Find the name and id of Sailors (sid) that reserved red and blue boat."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and id of Sailors (sid) that reserved red and blue boat.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and id of Sailors (sid) that reserved red and blue boat.[/QUESTION]\n[SQL]\n SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%' ORDER BY s.name NULLS LAST;"
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "question": {
      "id": 868,
      "db_id": "boat_1",
      "question": "What are the names and ids of sailors who reserved red and blue boats?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and ids of sailors who reserved red and blue boats?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and ids of sailors who reserved red and blue boats?[/QUESTION]\n[SQL]\n SELECT s.name, r.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%'"
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "question": {
      "id": 869,
      "db_id": "boat_1",
      "question": "What is the ids of sailors that haven\u2019t reserved a boat?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the ids of sailors that haven\u2019t reserved a boat?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the ids of sailors that haven\u2019t reserved a boat?[/QUESTION]\n[SQL]\n SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;"
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "question": {
      "id": 870,
      "db_id": "boat_1",
      "question": "What are the ids of sailors who have not reserved a boat?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of sailors who have not reserved a boat?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of sailors who have not reserved a boat?[/QUESTION]\n[SQL]\n SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;"
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "question": {
      "id": 871,
      "db_id": "boat_1",
      "question": "what is the name and id of sailors who do not have a reservation of a boat?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]what is the name and id of sailors who do not have a reservation of a boat?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]what is the name and id of sailors who do not have a reservation of a boat?[/QUESTION]\n[SQL]\n SELECT s.name, s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;"
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "question": {
      "id": 872,
      "db_id": "boat_1",
      "question": "What are the names and ids of all sailors who do not have boat reservations?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and ids of all sailors who do not have boat reservations?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and ids of all sailors who do not have boat reservations?[/QUESTION]\n[SQL]\n SELECT s.name, s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;"
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "question": {
      "id": 873,
      "db_id": "boat_1",
      "question": "Find id for the sailors who do not have a reservation of a boat?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find id for the sailors who do not have a reservation of a boat?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find id for the sailors who do not have a reservation of a boat?[/QUESTION]\n[SQL]\n SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;"
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "question": {
      "id": 874,
      "db_id": "boat_1",
      "question": "What is id about sailors who do not have boat reservations?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is id about sailors who do not have boat reservations?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is id about sailors who do not have boat reservations?[/QUESTION]\n[SQL]\n SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;"
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "question": {
      "id": 875,
      "db_id": "boat_1",
      "question": "What is the name of the sailors who reserved boat with id 103?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the sailors who reserved boat with id 103?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the sailors who reserved boat with id 103?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;"
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "question": {
      "id": 876,
      "db_id": "boat_1",
      "question": "Find the name of the sailors who reserved boat with id 103."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the sailors who reserved boat with id 103.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the sailors who reserved boat with id 103.[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;"
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "question": {
      "id": 877,
      "db_id": "boat_1",
      "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of all sailors whose rating is higher than any sailor named Luis?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of all sailors whose rating is higher than any sailor named Luis?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name ILIKE '%Luis%');"
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "question": {
      "id": 878,
      "db_id": "boat_1",
      "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the sailors' names, the ones whose rating is higher than any sailor named Luis?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the sailors' names, the ones whose rating is higher than any sailor named Luis?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name ILIKE '%Luis%');"
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "question": {
      "id": 879,
      "db_id": "boat_1",
      "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of all sailors whose rating is higher than all sailors named Luis?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of all sailors whose rating is higher than all sailors named Luis?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s WHERE s.rating > ALL (SELECT s2.rating FROM Sailors s2 WHERE s2.name ILIKE '%Luis%');"
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "question": {
      "id": 880,
      "db_id": "boat_1",
      "question": "What are the names of all sailors with a higher rating than every sailor named Luis?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all sailors with a higher rating than every sailor named Luis?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all sailors with a higher rating than every sailor named Luis?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s WHERE s.name ilike '%Luis%' AND s.rating < (SELECT AVG(s2.rating) FROM Sailors s2 WHERE s2.name ilike '%Luis%');"
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "question": {
      "id": 881,
      "db_id": "boat_1",
      "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.[/QUESTION]\n[SQL]\n SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating > 2;"
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "question": {
      "id": 882,
      "db_id": "boat_1",
      "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?[/QUESTION]\n[SQL]\n SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating >= 3;"
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "question": {
      "id": 883,
      "db_id": "boat_1",
      "question": "Find the name and age of the oldest sailor."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and age of the oldest sailor.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and age of the oldest sailor.[/QUESTION]\n[SQL]\n SELECT s.name, s.age FROM Sailors s ORDER BY s.age ASC NULLS LAST LIMIT 1;"
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "question": {
      "id": 884,
      "db_id": "boat_1",
      "question": "What is the name and age of the sailor with maximum age?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name and age of the sailor with maximum age?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name and age of the sailor with maximum age?[/QUESTION]\n[SQL]\n SELECT s.name, s.age FROM Sailors s ORDER BY s.age DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "question": {
      "id": 885,
      "db_id": "boat_1",
      "question": "how many sailors in total?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]how many sailors in total?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]how many sailors in total?[/QUESTION]\n[SQL]\n SELECT COUNT(s.sid) AS total_sailors FROM Sailors s;"
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "question": {
      "id": 886,
      "db_id": "boat_1",
      "question": "How many sailors exist?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many sailors exist?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many sailors exist?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Sailors s;"
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "question": {
      "id": 887,
      "db_id": "boat_1",
      "question": "What is the average age of sailors whose rating is 7?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average age of sailors whose rating is 7?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average age of sailors whose rating is 7?[/QUESTION]\n[SQL]\n SELECT AVG(s.age) FROM Sailors s WHERE s.rating = 7;"
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "question": {
      "id": 888,
      "db_id": "boat_1",
      "question": "What is average age of all sailors who have a rating of 7?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is average age of all sailors who have a rating of 7?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is average age of all sailors who have a rating of 7?[/QUESTION]\n[SQL]\n SELECT AVG(s.age) FROM Sailors s WHERE s.rating = 7;"
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "question": {
      "id": 889,
      "db_id": "boat_1",
      "question": "How many sailors whose name starts with letter D exist ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many sailors whose name starts with letter D exist ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many sailors whose name starts with letter D exist ?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Sailors s WHERE s.name ilike 'D%';"
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "question": {
      "id": 890,
      "db_id": "boat_1",
      "question": "What is the count of the sailors whose name starts with letter D ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the count of the sailors whose name starts with letter D ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the count of the sailors whose name starts with letter D ?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Sailors s WHERE s.name ilike 'D%';"
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "question": {
      "id": 891,
      "db_id": "boat_1",
      "question": "What are the average rating and max age of all sailors?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average rating and max age of all sailors?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average rating and max age of all sailors?[/QUESTION]\n[SQL]\n SELECT AVG(s.rating) AS average_rating, MAX(s.age) AS maximum_age FROM Sailors s;"
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "question": {
      "id": 892,
      "db_id": "boat_1",
      "question": "Find the average rating and largest age for the sailors"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average rating and largest age for the sailors[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average rating and largest age for the sailors[/QUESTION]\n[SQL]\n SELECT AVG(s.rating) AS average_rating, MAX(s.age) AS maximum_age FROM Sailors s;"
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "question": {
      "id": 893,
      "db_id": "boat_1",
      "question": "Find the number of reservations for each boat."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of reservations for each boat.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of reservations for each boat.[/QUESTION]\n[SQL]\n SELECT b.name, COUNT(r.bid) AS number_of_reserves FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;"
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "question": {
      "id": 894,
      "db_id": "boat_1",
      "question": "How many reservations exist for each boat?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many reservations exist for each boat?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many reservations exist for each boat?[/QUESTION]\n[SQL]\n SELECT b.name, COUNT(r.sid) AS number_of_reserves FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;"
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "question": {
      "id": 895,
      "db_id": "boat_1",
      "question": "Find the number of reservations for each boat with id greater than 50."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of reservations for each boat with id greater than 50.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of reservations for each boat with id greater than 50.[/QUESTION]\n[SQL]\n SELECT b.name, COUNT(r.bid) AS number_of_reserves FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE b.bid > 50 GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;"
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "question": {
      "id": 896,
      "db_id": "boat_1",
      "question": "How many reservations exist for each boat with an id greater than 50?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many reservations exist for each boat with an id greater than 50?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many reservations exist for each boat with an id greater than 50?[/QUESTION]\n[SQL]\n SELECT b.name, COUNT(r.sid) AS number_of_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE b.bid > 50 GROUP BY b.name ORDER BY number_of_reservations DESC NULLS LAST;"
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "question": {
      "id": 897,
      "db_id": "boat_1",
      "question": "Find the number of reservations for each boat with more than 1 reservation."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of reservations for each boat with more than 1 reservation.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of reservations for each boat with more than 1 reservation.[/QUESTION]\n[SQL]\n SELECT b.name, COUNT(r.sid) AS number_of_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name HAVING COUNT(r.sid) > 1 ORDER BY number_of_reservations DESC NULLS LAST;"
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "question": {
      "id": 898,
      "db_id": "boat_1",
      "question": "How many reservations exist for each boat that has more than 1 reservation already?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many reservations exist for each boat that has more than 1 reservation already?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many reservations exist for each boat that has more than 1 reservation already?[/QUESTION]\n[SQL]\n SELECT b.name AS boat_name, COUNT(r.sid) AS number_of_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name HAVING COUNT(r.sid) > 1 ORDER BY number_of_reservations DESC NULLS LAST;"
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "question": {
      "id": 899,
      "db_id": "boat_1",
      "question": "Find the number of reservations by sailors with id greater than 1 for each boat."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of reservations by sailors with id greater than 1 for each boat.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of reservations by sailors with id greater than 1 for each boat.[/QUESTION]\n[SQL]\n SELECT b.name AS boat_name, COUNT(r.sid) AS number_of_reserves FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid > 1 GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;"
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "question": {
      "id": 900,
      "db_id": "boat_1",
      "question": "How many reservations for each boat did the sailors with an id greater than 1 make?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many reservations for each boat did the sailors with an id greater than 1 make?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many reservations for each boat did the sailors with an id greater than 1 make?[/QUESTION]\n[SQL]\n SELECT b.name AS boat_name, COUNT(*) AS number_of_reserves FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid > 1 GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;"
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "question": {
      "id": 901,
      "db_id": "boat_1",
      "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the rating and average age for sailors who have reserved red boat grouped by rating?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the rating and average age for sailors who have reserved red boat grouped by rating?[/QUESTION]\n[SQL]\n SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;"
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "question": {
      "id": 902,
      "db_id": "boat_1",
      "question": "What are the rating and average age for sailors who reserved red boats for each rating?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the rating and average age for sailors who reserved red boats for each rating?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the rating and average age for sailors who reserved red boats for each rating?[/QUESTION]\n[SQL]\n SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;"
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "question": {
      "id": 903,
      "db_id": "boat_1",
      "question": "Find the name, rating and age of all sailors ordered by rating and age."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name, rating and age of all sailors ordered by rating and age.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name, rating and age of all sailors ordered by rating and age.[/QUESTION]\n[SQL]\n SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating DESC, s.age ASC;"
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "question": {
      "id": 904,
      "db_id": "boat_1",
      "question": "What is the name, rating, and age for every sailor? And order them by rating and age."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name, rating, and age for every sailor? And order them by rating and age.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name, rating, and age for every sailor? And order them by rating and age.[/QUESTION]\n[SQL]\n SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating DESC, s.age ASC;"
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "question": {
      "id": 905,
      "db_id": "boat_1",
      "question": "Find the total number of boats."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the total number of boats.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the total number of boats.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Boats;"
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "question": {
      "id": 906,
      "db_id": "boat_1",
      "question": "How many boats are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many boats are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many boats are there?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Boats;"
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "question": {
      "id": 907,
      "db_id": "boat_1",
      "question": "How many boats are red?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many boats are red?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many boats are red?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Boats b WHERE b.color ilike '%red%';"
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "question": {
      "id": 908,
      "db_id": "boat_1",
      "question": "How many red boats exist?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many red boats exist?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many red boats exist?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Boats b WHERE b.color ilike '%red%';"
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "question": {
      "id": 909,
      "db_id": "boat_1",
      "question": "Find the names of boats booked by sailors whose age is between 20 and 30."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of boats booked by sailors whose age is between 20 and 30.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of boats booked by sailors whose age is between 20 and 30.[/QUESTION]\n[SQL]\n SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE r.sid IN (SELECT s.sid FROM Sailors s WHERE s.age BETWEEN 20 AND 30);"
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "question": {
      "id": 910,
      "db_id": "boat_1",
      "question": "What are the names of the boats booked by people between age 20 and 30?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the boats booked by people between age 20 and 30?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the boats booked by people between age 20 and 30?[/QUESTION]\n[SQL]\n SELECT b.name AS boat_name, s.name AS sailor_name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30;"
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "question": {
      "id": 911,
      "db_id": "boat_1",
      "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s WHERE s.rating > (SELECT AVG(s2.rating) FROM Sailors s2 JOIN Reserves r ON s2.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red');"
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "question": {
      "id": 912,
      "db_id": "boat_1",
      "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s WHERE s.rating > (SELECT AVG(s2.rating) FROM Sailors s2 JOIN Reserves r ON s2.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red');"
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "question": {
      "id": 913,
      "db_id": "boat_1",
      "question": "What is highest rating between sailors?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is highest rating between sailors?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is highest rating between sailors?[/QUESTION]\n[SQL]\n SELECT MAX(s.rating) AS maximum_rating FROM Sailors s;"
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "question": {
      "id": 914,
      "db_id": "boat_1",
      "question": "What is the maximum rating for sailors?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the maximum rating for sailors?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the maximum rating for sailors?[/QUESTION]\n[SQL]\n SELECT MAX(s.rating) AS max_rating FROM Sailors s;"
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "question": {
      "id": 915,
      "db_id": "boat_1",
      "question": "Find the names of sailors who reserved boat with the name Melon."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of sailors who reserved boat with the name Melon.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of sailors who reserved boat with the name Melon.[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name ilike '%Melon%'"
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "question": {
      "id": 916,
      "db_id": "boat_1",
      "question": "What are the names of sailors who reserved a boat with the name Melon?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of sailors who reserved a boat with the name Melon?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of sailors who reserved a boat with the name Melon?[/QUESTION]\n[SQL]\n SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name ilike '%Melon%'"
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "question": {
      "id": 917,
      "db_id": "boat_1",
      "question": "List the names and ages of all sailors sorted by rating in descending order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names and ages of all sailors sorted by rating in descending order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names and ages of all sailors sorted by rating in descending order.[/QUESTION]\n[SQL]\n SELECT s.name, s.age, s.rating FROM Sailors s ORDER BY s.rating DESC;"
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "question": {
      "id": 918,
      "db_id": "boat_1",
      "question": "What are the names and ages of all sailors sorted by decreasing rating?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and ages of all sailors sorted by decreasing rating?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and ages of all sailors sorted by decreasing rating?[/QUESTION]\n[SQL]\n SELECT s.name, s.age, s.rating FROM Sailors s ORDER BY s.rating DESC;"
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "question": {
      "id": 919,
      "db_id": "headphone_store",
      "question": "Find the model of the most expensive headphone."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the model of the most expensive headphone.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the model of the most expensive headphone.[/QUESTION]\n[SQL]\n SELECT h.model FROM headphone h ORDER BY h.price DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "question": {
      "id": 920,
      "db_id": "headphone_store",
      "question": "Which headphone model has the highest price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which headphone model has the highest price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which headphone model has the highest price?[/QUESTION]\n[SQL]\n SELECT h.model FROM headphone h ORDER BY h.price DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "question": {
      "id": 921,
      "db_id": "headphone_store",
      "question": "List all different headphone models in the alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all different headphone models in the alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all different headphone models in the alphabetical order.[/QUESTION]\n[SQL]\n SELECT DISTINCT h.model FROM headphone h ORDER BY h.model ASC;"
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "question": {
      "id": 922,
      "db_id": "headphone_store",
      "question": "Return the list of distinct headphone models ordered alphabetically."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the list of distinct headphone models ordered alphabetically.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the list of distinct headphone models ordered alphabetically.[/QUESTION]\n[SQL]\n SELECT DISTINCT h.model FROM headphone h ORDER BY h.model ASC;"
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "question": {
      "id": 923,
      "db_id": "headphone_store",
      "question": "Which headphone class is the most common one?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which headphone class is the most common one?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which headphone class is the most common one?[/QUESTION]\n[SQL]\n SELECT h.class, COUNT(h.class) AS frequency FROM headphone h GROUP BY h.class ORDER BY frequency DESC LIMIT 1;"
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "question": {
      "id": 924,
      "db_id": "headphone_store",
      "question": "Which headphone class contains the most headphones?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which headphone class contains the most headphones?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which headphone class contains the most headphones?[/QUESTION]\n[SQL]\n SELECT h.class, SUM(s.quantity) AS total_quantity FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.class ORDER BY total_quantity DESC LIMIT 1;"
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "question": {
      "id": 925,
      "db_id": "headphone_store",
      "question": "Which headphone class does have more than two headphones?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which headphone class does have more than two headphones?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which headphone class does have more than two headphones?[/QUESTION]\n[SQL]\n SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.headphone_id) > 2;"
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "question": {
      "id": 926,
      "db_id": "headphone_store",
      "question": "Find the headphone class that does not contain more than two headphones."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the headphone class that does not contain more than two headphones.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the headphone class that does not contain more than two headphones.[/QUESTION]\n[SQL]\n SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.headphone_id) <= 2;"
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "question": {
      "id": 927,
      "db_id": "headphone_store",
      "question": "Find the number of headphones with a price higher than 200 for each class."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of headphones with a price higher than 200 for each class.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of headphones with a price higher than 200 for each class.[/QUESTION]\n[SQL]\n SELECT h.class, COUNT(*) FROM headphone h WHERE h.price > 200 GROUP BY h.class ORDER BY COUNT(*) DESC NULLS LAST;"
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "question": {
      "id": 928,
      "db_id": "headphone_store",
      "question": "How many headphones cost more than 200 for each headphone class?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many headphones cost more than 200 for each headphone class?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many headphones cost more than 200 for each headphone class?[/QUESTION]\n[SQL]\n SELECT h.class, COUNT(*) FROM headphone h WHERE h.price > 200 GROUP BY h.class ORDER BY COUNT(*) DESC NULLS LAST;"
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "question": {
      "id": 929,
      "db_id": "headphone_store",
      "question": "how many different earpads are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]how many different earpads are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]how many different earpads are there?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT h.earpads) FROM headphone h;"
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "question": {
      "id": 930,
      "db_id": "headphone_store",
      "question": "Count the number of different earpads."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of different earpads.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of different earpads.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT h.earpads) FROM headphone h;"
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "question": {
      "id": 931,
      "db_id": "headphone_store",
      "question": "Find the top 2 earpads that are mostly used."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the top 2 earpads that are mostly used.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the top 2 earpads that are mostly used.[/QUESTION]\n[SQL]\n SELECT h.earpads, COUNT(h.earpads) AS COUNT FROM headphone h GROUP BY h.earpads ORDER BY COUNT DESC NULLS LAST LIMIT 2;"
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "question": {
      "id": 932,
      "db_id": "headphone_store",
      "question": "What are the top 2 earpads in terms of the number of headphones using them?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the top 2 earpads in terms of the number of headphones using them?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the top 2 earpads in terms of the number of headphones using them?[/QUESTION]\n[SQL]\n SELECT h.earpads, COUNT(h.earpads) AS count FROM headphone h GROUP BY h.earpads ORDER BY count DESC NULLS LAST LIMIT 2;"
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "question": {
      "id": 933,
      "db_id": "headphone_store",
      "question": "What are the model, class, and construction of the cheapest headphone?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the model, class, and construction of the cheapest headphone?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the model, class, and construction of the cheapest headphone?[/QUESTION]\n[SQL]\n SELECT h.model, h.class, h.construction FROM headphone h ORDER BY h.price ASC LIMIT 1;"
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "question": {
      "id": 934,
      "db_id": "headphone_store",
      "question": "Find the model, class, and construction of the headphone with the lowest price."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the model, class, and construction of the headphone with the lowest price.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the model, class, and construction of the headphone with the lowest price.[/QUESTION]\n[SQL]\n SELECT h.model, h.class, h.construction FROM headphone h ORDER BY h.price ASC LIMIT 1;"
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "question": {
      "id": 935,
      "db_id": "headphone_store",
      "question": "Find the average price for each headphone construction."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average price for each headphone construction.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average price for each headphone construction.[/QUESTION]\n[SQL]\n SELECT h.construction, AVG(h.price) AS average_price FROM headphone h GROUP BY h.construction ORDER BY average_price DESC NULLS LAST;"
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "question": {
      "id": 936,
      "db_id": "headphone_store",
      "question": "How much does headphones cost on average for each headphone construction?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How much does headphones cost on average for each headphone construction?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How much does headphones cost on average for each headphone construction?[/QUESTION]\n[SQL]\n SELECT h.construction, AVG(h.price) AS average_price FROM headphone h GROUP BY h.construction ORDER BY average_price DESC NULLS LAST;"
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "question": {
      "id": 937,
      "db_id": "headphone_store",
      "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?[/QUESTION]\n[SQL]\n SELECT h.class FROM headphone h WHERE h.earpads ilike '%Bowls%' AND h.earpads ilike '%Comfort%Pads%' GROUP BY h.class;"
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "question": {
      "id": 938,
      "db_id": "headphone_store",
      "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.[/QUESTION]\n[SQL]\n SELECT h.class FROM headphone h WHERE h.earpads ilike '%Bowls%' AND h.class IN (SELECT h2.class FROM headphone h2 WHERE h2.earpads ilike '%Comfort Pads%')"
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "question": {
      "id": 939,
      "db_id": "headphone_store",
      "question": "Which earpads never use plastic construction?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which earpads never use plastic construction?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which earpads never use plastic construction?[/QUESTION]\n[SQL]\n SELECT h.model FROM headphone h WHERE h.construction not ilike '%plastic%' AND h.earpads IS NOT NULL;"
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "question": {
      "id": 940,
      "db_id": "headphone_store",
      "question": "Find all earpads that do not use plastic construction."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all earpads that do not use plastic construction.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all earpads that do not use plastic construction.[/QUESTION]\n[SQL]\n SELECT h.model FROM headphone h WHERE h.construction not ilike '%plastic%' AND h.earpads IS NOT NULL;"
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "question": {
      "id": 941,
      "db_id": "headphone_store",
      "question": "Find the headphone models whose price is below the average price."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the headphone models whose price is below the average price.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the headphone models whose price is below the average price.[/QUESTION]\n[SQL]\n SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);"
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "question": {
      "id": 942,
      "db_id": "headphone_store",
      "question": "What are the headphone models that cost less than the average price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the headphone models that cost less than the average price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the headphone models that cost less than the average price?[/QUESTION]\n[SQL]\n SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);"
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "question": {
      "id": 943,
      "db_id": "headphone_store",
      "question": "Sort all store names by store open date."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Sort all store names by store open date.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Sort all store names by store open date.[/QUESTION]\n[SQL]\n SELECT s.name FROM store s ORDER BY s.date_opened NULLS LAST;"
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "question": {
      "id": 944,
      "db_id": "headphone_store",
      "question": "Give me a list of store names, sorted by store open date."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me a list of store names, sorted by store open date.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me a list of store names, sorted by store open date.[/QUESTION]\n[SQL]\n SELECT s.name FROM store s ORDER BY s.date_opened NULLS LAST;"
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "question": {
      "id": 945,
      "db_id": "headphone_store",
      "question": "List name and parking info for the stores in the Tarzana neighborhood."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List name and parking info for the stores in the Tarzana neighborhood.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List name and parking info for the stores in the Tarzana neighborhood.[/QUESTION]\n[SQL]\n SELECT s.name, s.parking FROM store s WHERE s.neighborhood ilike '%Tarzana%' ORDER BY s.name NULLS LAST;"
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "question": {
      "id": 946,
      "db_id": "headphone_store",
      "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.[/QUESTION]\n[SQL]\n SELECT s.name, s.parking FROM store s WHERE s.neighborhood ilike '%Tarzana%' ORDER BY s.name NULLS LAST;"
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "question": {
      "id": 947,
      "db_id": "headphone_store",
      "question": "How many different neighborhoods are there for all stores?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different neighborhoods are there for all stores?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different neighborhoods are there for all stores?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT s.neighborhood) AS number_of_neighborhoods FROM store s;"
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "question": {
      "id": 948,
      "db_id": "headphone_store",
      "question": "Count the number of distinct neighborhoods stores are located."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of distinct neighborhoods stores are located.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of distinct neighborhoods stores are located.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT s.neighborhood) FROM store s;"
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "question": {
      "id": 949,
      "db_id": "headphone_store",
      "question": "find the number of stores in each neighborhood."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]find the number of stores in each neighborhood.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]find the number of stores in each neighborhood.[/QUESTION]\n[SQL]\n SELECT s.neighborhood, COUNT(s.store_id) AS store_count FROM store s GROUP BY s.neighborhood ORDER BY store_count DESC NULLS LAST;"
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "question": {
      "id": 950,
      "db_id": "headphone_store",
      "question": "How many stores are there in each neighborhood?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many stores are there in each neighborhood?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many stores are there in each neighborhood?[/QUESTION]\n[SQL]\n SELECT s.neighborhood, COUNT(s.store_id) AS number_of_stores FROM store s GROUP BY s.neighborhood ORDER BY number_of_stores DESC NULLS LAST;"
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "question": {
      "id": 951,
      "db_id": "headphone_store",
      "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the store which has the most headphones in stock. List the number of headphones as well.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the store which has the most headphones in stock. List the number of headphones as well.[/QUESTION]\n[SQL]\n SELECT s.name, SUM(st.quantity) AS total_quantity FROM stock st JOIN store s ON st.store_id = s.store_id GROUP BY s.name ORDER BY total_quantity DESC LIMIT 1;"
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "question": {
      "id": 952,
      "db_id": "headphone_store",
      "question": "Which store has the headphones in stock? Give me the store name and the total quantity."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which store has the headphones in stock? Give me the store name and the total quantity.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which store has the headphones in stock? Give me the store name and the total quantity.[/QUESTION]\n[SQL]\n SELECT s.name AS store_name, SUM(s.quantity) AS total_quantity FROM stock s GROUP BY s.store_id, s.name ORDER BY total_quantity DESC NULLS LAST;"
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "question": {
      "id": 953,
      "db_id": "headphone_store",
      "question": "Find the name of stores which have no headphone in stock."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of stores which have no headphone in stock.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of stores which have no headphone in stock.[/QUESTION]\n[SQL]\n SELECT s.name FROM store s LEFT JOIN stock st ON s.store_id = st.store_id AND st.quantity > 0 WHERE st.store_id IS NULL;"
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "question": {
      "id": 954,
      "db_id": "headphone_store",
      "question": "Which stores do not have any headphones in stock? Give me the store names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which stores do not have any headphones in stock? Give me the store names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which stores do not have any headphones in stock? Give me the store names.[/QUESTION]\n[SQL]\n SELECT s.name FROM store s LEFT JOIN stock st ON s.store_id = st.store_id AND st.quantity > 0 WHERE st.store_id IS NULL ORDER BY s.name NULLS LAST;"
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "question": {
      "id": 955,
      "db_id": "headphone_store",
      "question": "Which headphone models do not have any stock in any store?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which headphone models do not have any stock in any store?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which headphone models do not have any stock in any store?[/QUESTION]\n[SQL]\n SELECT h.model FROM headphone h WHERE h.headphone_id NOT IN (SELECT s.headphone_id FROM stock s);"
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "question": {
      "id": 956,
      "db_id": "headphone_store",
      "question": "Find the headphone models that are not in stock in any store."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the headphone models that are not in stock in any store.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the headphone models that are not in stock in any store.[/QUESTION]\n[SQL]\n SELECT h.model FROM headphone h WHERE h.headphone_id NOT IN (SELECT s.headphone_id FROM stock s);"
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "question": {
      "id": 957,
      "db_id": "headphone_store",
      "question": "Which headphone model has the largest quantity of stock across all the stores?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which headphone model has the largest quantity of stock across all the stores?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which headphone model has the largest quantity of stock across all the stores?[/QUESTION]\n[SQL]\n SELECT h.model, SUM(s.quantity) AS total_quantity FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.model ORDER BY total_quantity DESC LIMIT 1;"
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "question": {
      "id": 958,
      "db_id": "headphone_store",
      "question": "Find the headphone model whose total quantity in stock is the largest."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the headphone model whose total quantity in stock is the largest.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the headphone model whose total quantity in stock is the largest.[/QUESTION]\n[SQL]\n SELECT h.model, SUM(s.quantity) AS total_quantity FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.model ORDER BY total_quantity DESC LIMIT 1;"
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "question": {
      "id": 959,
      "db_id": "headphone_store",
      "question": "How many headphones are stored in the Woodman store?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many headphones are stored in the Woodman store?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many headphones are stored in the Woodman store?[/QUESTION]\n[SQL]\n SELECT SUM(s.Quantity) AS total_quantity FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE st.Name = 'Woodman';"
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "question": {
      "id": 960,
      "db_id": "headphone_store",
      "question": "Find the total quantity of headphones stored in the Woodman store."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the total quantity of headphones stored in the Woodman store.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the total quantity of headphones stored in the Woodman store.[/QUESTION]\n[SQL]\n SELECT SUM(s.Quantity) AS total_quantity FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE st.Name = 'Woodman';"
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "question": {
      "id": 961,
      "db_id": "headphone_store",
      "question": "Which neighborhood does not have any headphone in stock?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which neighborhood does not have any headphone in stock?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which neighborhood does not have any headphone in stock?[/QUESTION]\n[SQL]\n SELECT s.neighborhood FROM store s LEFT JOIN stock st ON s.store_id = st.store_id AND st.quantity > 0 WHERE st.store_id IS NULL ORDER BY s.neighborhood NULLS LAST;"
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "question": {
      "id": 962,
      "db_id": "headphone_store",
      "question": "Find the neighborhood where no headphones are in stock."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the neighborhood where no headphones are in stock.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the neighborhood where no headphones are in stock.[/QUESTION]\n[SQL]\n SELECT s.neighborhood FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.store_id = s.store_id);"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": {
      "id": 963,
      "db_id": "aan_1",
      "question": "How many authors do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many authors do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many authors do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT a.author_id) AS number_of_authors FROM Author a;"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": {
      "id": 964,
      "db_id": "aan_1",
      "question": "Count the number of authors."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of authors.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of authors.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT a.author_id) AS total_authors FROM Author a;"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": {
      "id": 965,
      "db_id": "aan_1",
      "question": "How many papers do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many papers do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many papers do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(p.paper_id) FROM Paper p;"
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "question": {
      "id": 966,
      "db_id": "aan_1",
      "question": "Count the number of papers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of papers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of papers.[/QUESTION]\n[SQL]\n SELECT COUNT(p.paper_id) AS total_papers FROM Paper p;"
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "question": {
      "id": 967,
      "db_id": "aan_1",
      "question": "How many affiliations do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many affiliations do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many affiliations do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT a.affiliation_id) AS number_of_affiliations FROM Affiliation a;"
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "question": {
      "id": 968,
      "db_id": "aan_1",
      "question": "Count the number of affiliations."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of affiliations.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of affiliations.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT a.affiliation_id) AS total_affiliations FROM Affiliation a;"
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "question": {
      "id": 969,
      "db_id": "aan_1",
      "question": "How many papers do we have in NAACL 2000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many papers do we have in NAACL 2000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many papers do we have in NAACL 2000?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Paper p WHERE p.venue = 'NAACL 2000';"
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "question": {
      "id": 970,
      "db_id": "aan_1",
      "question": "Count the number of papers in NAACL 2000."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of papers in NAACL 2000.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of papers in NAACL 2000.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Paper p WHERE p.venue = 'NAACL 2000';"
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "question": {
      "id": 971,
      "db_id": "aan_1",
      "question": "How many papers are published in year 2009 by Columbia University?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many papers are published in year 2009 by Columbia University?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many papers are published in year 2009 by Columbia University?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.year = 2009 AND a.name = 'Columbia University';"
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "question": {
      "id": 972,
      "db_id": "aan_1",
      "question": "Count the number of papers published by Columbia University in 2009."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of papers published by Columbia University in 2009.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of papers published by Columbia University in 2009.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Columbia University%' AND p.year = 2009;"
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "question": {
      "id": 973,
      "db_id": "aan_1",
      "question": "List names and addresses for all affiliations."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List names and addresses for all affiliations.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List names and addresses for all affiliations.[/QUESTION]\n[SQL]\n SELECT a.name AS affiliation_name, a.address FROM Affiliation a ORDER BY a.name NULLS LAST;"
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "question": {
      "id": 974,
      "db_id": "aan_1",
      "question": "What are the names and addresses for all affiliations?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and addresses for all affiliations?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and addresses for all affiliations?[/QUESTION]\n[SQL]\n SELECT a.name, a.address FROM Affiliation a;"
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "question": {
      "id": 975,
      "db_id": "aan_1",
      "question": "List all venues and years for papers ordered by year."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all venues and years for papers ordered by year.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all venues and years for papers ordered by year.[/QUESTION]\n[SQL]\n SELECT p.venue, p.year FROM Paper p ORDER BY p.year NULLS LAST;"
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "question": {
      "id": 976,
      "db_id": "aan_1",
      "question": "What are the distinct venues for papers, ordered by year?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct venues for papers, ordered by year?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct venues for papers, ordered by year?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.venue, p.year FROM Paper p ORDER BY p.year;"
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "question": {
      "id": 977,
      "db_id": "aan_1",
      "question": "Find the titles and paper IDs for papers written by Harvard University."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the titles and paper IDs for papers written by Harvard University.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the titles and paper IDs for papers written by Harvard University.[/QUESTION]\n[SQL]\n SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Harvard%' ORDER BY p.title NULLS LAST;"
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "question": {
      "id": 978,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers written in affiliation with Harvard University?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles and paper ids for papers written in affiliation with Harvard University?[/QUESTION]\n[SQL]\n SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Harvard%University%'"
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "question": {
      "id": 979,
      "db_id": "aan_1",
      "question": "Find all papers with titles and paper IDs written by Mckeown."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all papers with titles and paper IDs written by Mckeown.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all papers with titles and paper IDs written by Mckeown.[/QUESTION]\n[SQL]\n SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name ilike '%Mckeown%');"
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "question": {
      "id": 980,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers written by Mckeown?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers written by Mckeown?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles and paper ids for papers written by Mckeown?[/QUESTION]\n[SQL]\n SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name ilike '%Mckeown%');"
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "question": {
      "id": 981,
      "db_id": "aan_1",
      "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.[/QUESTION]\n[SQL]\n SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name IN ('Stanford University', 'Columbia University')"
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "question": {
      "id": 982,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?[/QUESTION]\n[SQL]\n SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name IN ('Stanford University', 'Columbia University') GROUP BY p.title, p.paper_id HAVING COUNT(DISTINCT a.affiliation_id) >= 2;"
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "question": {
      "id": 983,
      "db_id": "aan_1",
      "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.[/QUESTION]\n[SQL]\n SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name IN ('Mckeown', 'Kathleen', 'Rambow', 'Owen')) ORDER BY p.title NULLS LAST;"
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "question": {
      "id": 984,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?[/QUESTION]\n[SQL]\n SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name ilike '%Mckeown%Kathleen%' OR a.name ilike '%Rambow%Owen%') GROUP BY p.title, p.paper_id;"
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "question": {
      "id": 985,
      "db_id": "aan_1",
      "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.[/QUESTION]\n[SQL]\n SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ILIKE '%Mckeown%' AND a.name NOT ILIKE '%Rambow%'"
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "question": {
      "id": 986,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles and paper ids which have Mckeown as an author, but not Rambow?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles and paper ids which have Mckeown as an author, but not Rambow?[/QUESTION]\n[SQL]\n SELECT p.title, a.paper_id FROM Author a JOIN Paper p ON a.paper_id = p.paper_id WHERE a.name = 'Mckeown' AND a.name != 'Rambow' ORDER BY p.title NULLS LAST;"
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "question": {
      "id": 987,
      "db_id": "aan_1",
      "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.[/QUESTION]\n[SQL]\n SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ilike '%Mckeown%' OR a.name ilike '%Kathleen%' OR a.name ilike '%Rambow%' OR a.name ilike '%Owen%' ORDER BY p.title NULLS LAST;"
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "question": {
      "id": 988,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?[/QUESTION]\n[SQL]\n SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ilike '%Mckeown%' OR a.name ilike '%Kathleen%' OR a.name ilike '%Rambow%' OR a.name ilike '%Owen%' ORDER BY p.title NULLS LAST;"
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "question": {
      "id": 989,
      "db_id": "aan_1",
      "question": "List the names of all authors and their number of papers in descending order by number of papers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of all authors and their number of papers in descending order by number of papers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of all authors and their number of papers in descending order by number of papers.[/QUESTION]\n[SQL]\n SELECT a.\"name\", COUNT(al.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.\"name\" ORDER BY paper_count DESC;"
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "question": {
      "id": 990,
      "db_id": "aan_1",
      "question": "How many papers did each author publish, ordered by number of papers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many papers did each author publish, ordered by number of papers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many papers did each author publish, ordered by number of papers?[/QUESTION]\n[SQL]\n SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.name ORDER BY paper_count DESC;"
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "question": {
      "id": 991,
      "db_id": "aan_1",
      "question": "List all affiliations with ascending ordered number of papers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all affiliations with ascending ordered number of papers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all affiliations with ascending ordered number of papers.[/QUESTION]\n[SQL]\n SELECT a.affiliation_id, a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id, a.name ORDER BY paper_count ASC;"
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "question": {
      "id": 992,
      "db_id": "aan_1",
      "question": "What are the names of all affiliations, ordered by number of papers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all affiliations, ordered by number of papers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all affiliations, ordered by number of papers?[/QUESTION]\n[SQL]\n SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.name ORDER BY paper_count DESC;"
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "question": {
      "id": 993,
      "db_id": "aan_1",
      "question": "List names of all authors who have more than 50 papers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List names of all authors who have more than 50 papers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List names of all authors who have more than 50 papers.[/QUESTION]\n[SQL]\n SELECT a.name FROM Author a JOIN (SELECT al.author_id FROM Author_list al GROUP BY al.author_id HAVING COUNT(al.paper_id) > 50) AS subquery ON a.author_id = subquery.author_id;"
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "question": {
      "id": 994,
      "db_id": "aan_1",
      "question": "What are the names of all authors who have more than 50 papers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all authors who have more than 50 papers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all authors who have more than 50 papers?[/QUESTION]\n[SQL]\n SELECT a.name FROM Author a JOIN (SELECT al.author_id FROM Author_list al GROUP BY al.author_id HAVING COUNT(al.paper_id) > 50) AS subquery ON a.author_id = subquery.author_id;"
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "question": {
      "id": 995,
      "db_id": "aan_1",
      "question": "List names of all authors who have only 1 paper."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List names of all authors who have only 1 paper.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List names of all authors who have only 1 paper.[/QUESTION]\n[SQL]\n SELECT a.\"name\" FROM Author a JOIN (SELECT al.author_id FROM Author_list al GROUP BY al.author_id HAVING COUNT(al.paper_id) = 1) AS subquery ON a.author_id = subquery.author_id;"
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "question": {
      "id": 996,
      "db_id": "aan_1",
      "question": "What are the names of authors who have exactly 1 paper?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of authors who have exactly 1 paper?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of authors who have exactly 1 paper?[/QUESTION]\n[SQL]\n SELECT a.\"name\" FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) = 1;"
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "question": {
      "id": 997,
      "db_id": "aan_1",
      "question": "What is the venue and year with the most number of publications?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the venue and year with the most number of publications?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the venue and year with the most number of publications?[/QUESTION]\n[SQL]\n SELECT p.venue, p.year, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue, p.year ORDER BY publication_count DESC LIMIT 1;"
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "question": {
      "id": 998,
      "db_id": "aan_1",
      "question": "What was the venue and year with the most publications?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What was the venue and year with the most publications?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What was the venue and year with the most publications?[/QUESTION]\n[SQL]\n SELECT p.venue, p.year, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue, p.year ORDER BY publication_count DESC LIMIT 1;"
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "question": {
      "id": 999,
      "db_id": "aan_1",
      "question": "What is the venue with the least number of publications?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the venue with the least number of publications?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the venue with the least number of publications?[/QUESTION]\n[SQL]\n SELECT p.venue, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue ORDER BY publication_count ASC LIMIT 1;"
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "question": {
      "id": 1000,
      "db_id": "aan_1",
      "question": "Which venue has the fewest publications?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which venue has the fewest publications?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which venue has the fewest publications?[/QUESTION]\n[SQL]\n SELECT p.venue, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue ORDER BY publication_count ASC LIMIT 1;"
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "question": {
      "id": 1001,
      "db_id": "aan_1",
      "question": "How many papers cite paper with id A00-1002?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many papers cite paper with id A00-1002?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many papers cite paper with id A00-1002?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.paper_id) AS number_of_papers FROM Citation c WHERE c.cited_paper_id = 'A00-1002';"
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "question": {
      "id": 1002,
      "db_id": "aan_1",
      "question": "Count the number of papers which cited a paper with id A00-1002."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of papers which cited a paper with id A00-1002.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of papers which cited a paper with id A00-1002.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.paper_id) AS num_papers FROM Citation c WHERE c.cited_paper_id = 'A00-1002';"
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "question": {
      "id": 1003,
      "db_id": "aan_1",
      "question": "How many reference papers does paper with id D12-1027 have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many reference papers does paper with id D12-1027 have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many reference papers does paper with id D12-1027 have?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.cited_paper_id) AS number_of_reference_papers FROM Citation c WHERE c.paper_id = 'D12-1027';"
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "question": {
      "id": 1004,
      "db_id": "aan_1",
      "question": "Count the number of references the paper with id D12-1027 has."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of references the paper with id D12-1027 has.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of references the paper with id D12-1027 has.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.cited_paper_id) AS reference_count FROM Citation c WHERE c.paper_id = 'D12-1027';"
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "question": {
      "id": 1005,
      "db_id": "aan_1",
      "question": "What is the id and the number of citations of the most cited paper?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the id and the number of citations of the most cited paper?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the id and the number of citations of the most cited paper?[/QUESTION]\n[SQL]\n SELECT p.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 1;"
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "question": {
      "id": 1006,
      "db_id": "aan_1",
      "question": "Give the id and the number of citations of the most cited paper."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the id and the number of citations of the most cited paper.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the id and the number of citations of the most cited paper.[/QUESTION]\n[SQL]\n SELECT p.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 1;"
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "question": {
      "id": 1007,
      "db_id": "aan_1",
      "question": "Give the title of the paper which cites most number of papers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the title of the paper which cites most number of papers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the title of the paper which cites most number of papers?[/QUESTION]\n[SQL]\n SELECT p.title FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.title ORDER BY COUNT(c.cited_paper_id) DESC LIMIT 1;"
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "question": {
      "id": 1008,
      "db_id": "aan_1",
      "question": "What is the title of the paper which cites the most other papers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the title of the paper which cites the most other papers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the title of the paper which cites the most other papers?[/QUESTION]\n[SQL]\n SELECT p.title FROM Paper p JOIN (SELECT c.cited_paper_id, COUNT(*) AS citation_count FROM Citation c GROUP BY c.cited_paper_id ORDER BY citation_count DESC LIMIT 1) AS mc ON p.paper_id = mc.cited_paper_id;"
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "question": {
      "id": 1009,
      "db_id": "aan_1",
      "question": "List top 10 most cited papers and their numbers of citations."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List top 10 most cited papers and their numbers of citations.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List top 10 most cited papers and their numbers of citations.[/QUESTION]\n[SQL]\n SELECT p.title, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.title ORDER BY citation_count DESC LIMIT 10;"
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "question": {
      "id": 1010,
      "db_id": "aan_1",
      "question": "What are the 10 most cited papers, and how many citations did each have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the 10 most cited papers, and how many citations did each have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the 10 most cited papers, and how many citations did each have?[/QUESTION]\n[SQL]\n SELECT p.title, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.title ORDER BY citation_count DESC LIMIT 10;"
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "question": {
      "id": 1011,
      "db_id": "aan_1",
      "question": "How many citations does Mckeown , Kathleen have ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many citations does Mckeown , Kathleen have ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many citations does Mckeown , Kathleen have ?[/QUESTION]\n[SQL]\n SELECT COUNT(*) AS number_of_citations FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown%Kathleen%');"
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "question": {
      "id": 1012,
      "db_id": "aan_1",
      "question": "Count the number of citations Mckeown , Kathleen has ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of citations Mckeown , Kathleen has .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of citations Mckeown , Kathleen has .[/QUESTION]\n[SQL]\n SELECT COUNT(*) AS citation_count FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown%Kathleen%');"
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "question": {
      "id": 1013,
      "db_id": "aan_1",
      "question": "How many papers does Mckeown , Kathleen cite ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many papers does Mckeown , Kathleen cite ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many papers does Mckeown , Kathleen cite ?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.cited_paper_id) AS number_of_papers FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id AND c.cited_paper_id = al.author_id JOIN Author a ON al.author_id = a.author_id WHERE a.\"name\" ILIKE '%Mckeown%Kathleen%'"
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "question": {
      "id": 1014,
      "db_id": "aan_1",
      "question": "Count the number of papers Mckeown , Kathleen has cited ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of papers Mckeown , Kathleen has cited .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of papers Mckeown , Kathleen has cited .[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.cited_paper_id) AS number_of_papers FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id AND c.cited_paper_id = al.author_id JOIN Author a ON al.author_id = a.author_id WHERE a.\"name\" ILIKE '%Mckeown%Kathleen%'"
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "question": {
      "id": 1015,
      "db_id": "aan_1",
      "question": "Find the name and number of citations of the author who has most citations among all authors?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and number of citations of the author who has most citations among all authors?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and number of citations of the author who has most citations among all authors?[/QUESTION]\n[SQL]\n SELECT a.\"name\", COUNT(c.paper_id) AS citation_count FROM Author a JOIN Citation c ON a.author_id = c.cited_paper_id GROUP BY a.\"name\" ORDER BY citation_count DESC LIMIT 1;"
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "question": {
      "id": 1016,
      "db_id": "aan_1",
      "question": "What is the name and number of citations of the author with the greatest number of citations among authors?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name and number of citations of the author with the greatest number of citations among authors?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name and number of citations of the author with the greatest number of citations among authors?[/QUESTION]\n[SQL]\n SELECT a.\"name\", COUNT(c.paper_id) AS citation_count FROM Author a JOIN Citation c ON a.author_id = c.cited_paper_id GROUP BY a.\"name\" ORDER BY citation_count DESC LIMIT 1;"
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "question": {
      "id": 1017,
      "db_id": "aan_1",
      "question": "What are the venues and years where Mckeown , Kathleen had papers ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the venues and years where Mckeown , Kathleen had papers ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the venues and years where Mckeown , Kathleen had papers ?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name ilike '%Mckeown%Kathleen%')"
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "question": {
      "id": 1018,
      "db_id": "aan_1",
      "question": "Which venues and years did Mckeown , Kathleen have papers ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which venues and years did Mckeown , Kathleen have papers ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which venues and years did Mckeown , Kathleen have papers ?[/QUESTION]\n[SQL]\n SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name ilike '%Mckeown%' OR a.name ilike '%Kathleen%')"
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "question": {
      "id": 1019,
      "db_id": "aan_1",
      "question": "What are the venues and years where Columbia University had papers ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the venues and years where Columbia University had papers ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the venues and years where Columbia University had papers ?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Columbia%University%'"
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "question": {
      "id": 1020,
      "db_id": "aan_1",
      "question": "Which venues and years did Columbia University have papers ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which venues and years did Columbia University have papers ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which venues and years did Columbia University have papers ?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University'"
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "question": {
      "id": 1021,
      "db_id": "aan_1",
      "question": "Which author had the most papers in the year 2009?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which author had the most papers in the year 2009?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which author had the most papers in the year 2009?[/QUESTION]\n[SQL]\n SELECT a.\"name\", COUNT(p.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.\"name\" ORDER BY paper_count DESC LIMIT 1;"
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "question": {
      "id": 1022,
      "db_id": "aan_1",
      "question": "What is the name of the author with the most papers in 2009?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the author with the most papers in 2009?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the author with the most papers in 2009?[/QUESTION]\n[SQL]\n SELECT a.\"name\", COUNT(p.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.\"name\" ORDER BY paper_count DESC LIMIT 1;"
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "question": {
      "id": 1023,
      "db_id": "aan_1",
      "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the top 3 affiliations that have the most papers in year 2009?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the top 3 affiliations that have the most papers in year 2009?[/QUESTION]\n[SQL]\n SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC NULLS LAST LIMIT 3;"
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "question": {
      "id": 1024,
      "db_id": "aan_1",
      "question": "Which 3 affiliations had the most papers in 2009?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which 3 affiliations had the most papers in 2009?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which 3 affiliations had the most papers in 2009?[/QUESTION]\n[SQL]\n SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC LIMIT 3;"
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "question": {
      "id": 1025,
      "db_id": "aan_1",
      "question": "How many papers does Columbia University have in or before 2009 ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many papers does Columbia University have in or before 2009 ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many papers does Columbia University have in or before 2009 ?[/QUESTION]\n[SQL]\n SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Columbia%' AND p.year <= 2009;"
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "question": {
      "id": 1026,
      "db_id": "aan_1",
      "question": "Count the number of papers Columbia University had during or prior to 2009 ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of papers Columbia University had during or prior to 2009 .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of papers Columbia University had during or prior to 2009 .[/QUESTION]\n[SQL]\n SELECT COUNT(p.paper_id) AS total_papers FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ILIKE '%Columbia University%' AND (p.year >= 2009 OR p.year IS NULL);"
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "question": {
      "id": 1027,
      "db_id": "aan_1",
      "question": "How many papers does Stanford University have between 2000 and 2009?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many papers does Stanford University have between 2000 and 2009?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many papers does Stanford University have between 2000 and 2009?[/QUESTION]\n[SQL]\n SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Stanford%' AND p.year BETWEEN 2000 AND 2009;"
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "question": {
      "id": 1028,
      "db_id": "aan_1",
      "question": "Count the number of papers Stanford University had between 2000 and 2009."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of papers Stanford University had between 2000 and 2009.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of papers Stanford University had between 2000 and 2009.[/QUESTION]\n[SQL]\n SELECT COUNT(p.paper_id) AS number_of_papers FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Stanford%' AND p.year BETWEEN 2000 AND 2009;"
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "question": {
      "id": 1029,
      "db_id": "aan_1",
      "question": "What is the title of the paper that has most number of authors?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the title of the paper that has most number of authors?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the title of the paper that has most number of authors?[/QUESTION]\n[SQL]\n SELECT p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id GROUP BY p.title ORDER BY COUNT(al.author_id) DESC LIMIT 1;"
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "question": {
      "id": 1030,
      "db_id": "aan_1",
      "question": "Give the title of the paper with the most authors."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the title of the paper with the most authors.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the title of the paper with the most authors.[/QUESTION]\n[SQL]\n SELECT p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id GROUP BY p.title ORDER BY COUNT(al.author_id) DESC LIMIT 1;"
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "question": {
      "id": 1031,
      "db_id": "aan_1",
      "question": "How many collaborators has Mckeown , Kathleen had ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many collaborators has Mckeown , Kathleen had ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many collaborators has Mckeown , Kathleen had ?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT a.author_id) AS number_of_collaborators FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%')"
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "question": {
      "id": 1032,
      "db_id": "aan_1",
      "question": "Count the number of collaborators that Mckeown , Kathleen has had ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of collaborators that Mckeown , Kathleen has had .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of collaborators that Mckeown , Kathleen has had .[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT a.author_id) AS total_collaborators FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%')"
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "question": {
      "id": 1033,
      "db_id": "aan_1",
      "question": "Who has the most papers co-authored with Mckeown , Kathleen ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who has the most papers co-authored with Mckeown , Kathleen ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who has the most papers co-authored with Mckeown , Kathleen ?[/QUESTION]\n[SQL]\n SELECT a.name AS author_name, COUNT(*) AS paper_count FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%')) GROUP BY a.name ORDER BY paper_count DESC LIMIT 1;"
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "question": {
      "id": 1034,
      "db_id": "aan_1",
      "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?[/QUESTION]\n[SQL]\n SELECT a.name AS co_author_name, COUNT(*) AS paper_count FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%' ) GROUP BY a.name ORDER BY paper_count DESC LIMIT 1;"
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "question": {
      "id": 1035,
      "db_id": "aan_1",
      "question": "Find the id of the papers whose title has the key word 'translation'."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the id of the papers whose title has the key word 'translation'.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the id of the papers whose title has the key word 'translation'.[/QUESTION]\n[SQL]\n SELECT p.paper_id FROM Paper p WHERE p.title ilike '%translation%';"
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "question": {
      "id": 1036,
      "db_id": "aan_1",
      "question": "What are the ids for papers with titles containing 'translation'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids for papers with titles containing 'translation'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids for papers with titles containing 'translation'?[/QUESTION]\n[SQL]\n SELECT p.paper_id FROM Paper p WHERE p.title ilike '%translation%';"
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "question": {
      "id": 1037,
      "db_id": "aan_1",
      "question": "Find the id and title of the papers that are never cited by others."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the id and title of the papers that are never cited by others.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the id and title of the papers that are never cited by others.[/QUESTION]\n[SQL]\n SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c);"
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "question": {
      "id": 1038,
      "db_id": "aan_1",
      "question": "What are the ids and titles for papers that have never been cited?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids and titles for papers that have never been cited?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids and titles for papers that have never been cited?[/QUESTION]\n[SQL]\n SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c);"
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "question": {
      "id": 1039,
      "db_id": "aan_1",
      "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.[/QUESTION]\n[SQL]\n SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name HAVING COUNT(al.paper_id) MAX;"
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "question": {
      "id": 1040,
      "db_id": "aan_1",
      "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.[/QUESTION]\n[SQL]\n SELECT a.name FROM Affiliation a WHERE a.address ilike '%China%' ORDER BY COUNT(p.paper_id) DESC LIMIT 1;"
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "question": {
      "id": 1041,
      "db_id": "aan_1",
      "question": "Find the number of papers published in different conferences each year."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of papers published in different conferences each year.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of papers published in different conferences each year.[/QUESTION]\n[SQL]\n SELECT p.year, COUNT(*) AS total_papers FROM Paper p GROUP BY p.year ORDER BY p.year"
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "question": {
      "id": 1042,
      "db_id": "aan_1",
      "question": "How many papers are published in each venue in each year?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many papers are published in each venue in each year?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many papers are published in each venue in each year?[/QUESTION]\n[SQL]\n SELECT p.venue, p.year, COUNT(p.paper_id) AS number_of_papers FROM Paper p GROUP BY p.venue, p.year ORDER BY p.venue, p.year"
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "question": {
      "id": 1043,
      "db_id": "aan_1",
      "question": "Find the total number of papers for each affiliation."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the total number of papers for each affiliation.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the total number of papers for each affiliation.[/QUESTION]\n[SQL]\n SELECT a.affiliation_id, COUNT(p.paper_id) AS total_papers FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id ORDER BY total_papers DESC NULLS LAST;"
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "question": {
      "id": 1044,
      "db_id": "aan_1",
      "question": "How many papers has each affiliation published?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many papers has each affiliation published?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many papers has each affiliation published?[/QUESTION]\n[SQL]\n SELECT a.affiliation_id, COUNT(p.paper_id) AS number_of_papers FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id ORDER BY number_of_papers DESC NULLS LAST;"
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "question": {
      "id": 1045,
      "db_id": "aan_1",
      "question": "Find the titles of papers that have more than 50 citations."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the titles of papers that have more than 50 citations.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the titles of papers that have more than 50 citations.[/QUESTION]\n[SQL]\n SELECT p.title FROM Paper p WHERE p.paper_id IN (SELECT c.cited_paper_id FROM Citation c GROUP BY c.cited_paper_id HAVING COUNT(c.cited_paper_id) > 50);"
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "question": {
      "id": 1046,
      "db_id": "aan_1",
      "question": "What are the titles for papers with more than 50 citations?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles for papers with more than 50 citations?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles for papers with more than 50 citations?[/QUESTION]\n[SQL]\n SELECT p.title FROM Paper p WHERE p.paper_id IN (SELECT c.cited_paper_id FROM Citation c GROUP BY c.cited_paper_id HAVING COUNT(c.cited_paper_id) > 50);"
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "question": {
      "id": 1047,
      "db_id": "aan_1",
      "question": "Find the number of authors who did not publish any paper that is cited more than 50 times."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of authors who did not publish any paper that is cited more than 50 times.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of authors who did not publish any paper that is cited more than 50 times.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT a.author_id) AS num_authors FROM Author a LEFT JOIN Paper p ON a.author_id = p.authors_id WHERE p.paper_id IS NULL OR (SELECT COUNT(*) FROM Citation c WHERE c.paper_id = p.paper_id) <= 50;"
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "question": {
      "id": 1048,
      "db_id": "aan_1",
      "question": "How many authors have not published a paper with more than 50 citations?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many authors have not published a paper with more than 50 citations?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many authors have not published a paper with more than 50 citations?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT a.author_id) AS number_of_authors FROM Author a LEFT JOIN (SELECT c.paper_id, COUNT(*) AS num_citations FROM Citation c GROUP BY c.paper_id HAVING COUNT(*) > 50) AS o ON a.author_id IN (SELECT author_id FROM Author_list WHERE paper_id = o.paper_id) WHERE o.paper_id IS NULL;"
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "question": {
      "id": 1049,
      "db_id": "aan_1",
      "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of authors who published some paper on NAACL and ACL in the year 2009.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of authors who published some paper on NAACL and ACL in the year 2009.[/QUESTION]\n[SQL]\n SELECT DISTINCT a.\"name\" FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 AND (p.venue ilike '%NAACL%' OR p.venue ilike '%ACL%')"
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "question": {
      "id": 1050,
      "db_id": "aan_1",
      "question": "What are the names of authors who published in both NAACL and ACL in 2009?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of authors who published in both NAACL and ACL in 2009?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of authors who published in both NAACL and ACL in 2009?[/QUESTION]\n[SQL]\n SELECT DISTINCT a.\"name\" FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 AND p.venue IN ('NAACL', 'ACL')"
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "question": {
      "id": 1051,
      "db_id": "aan_1",
      "question": "Find the name of authors who have never published a paper in ACL."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of authors who have never published a paper in ACL.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of authors who have never published a paper in ACL.[/QUESTION]\n[SQL]\n SELECT a.\"name\" FROM Author a LEFT JOIN Paper p ON a.author_id = p.authors WHERE p.venue != 'ACL' ORDER BY a.\"name\" NULLS LAST;"
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "question": {
      "id": 1052,
      "db_id": "aan_1",
      "question": "What are the names of authors who have not published a paper in ACL?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of authors who have not published a paper in ACL?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of authors who have not published a paper in ACL?[/QUESTION]\n[SQL]\n SELECT a.\"name\" FROM Author a LEFT JOIN Paper p ON a.author_id = p.authors WHERE p.venue != 'ACL' ORDER BY a.\"name\" NULLS LAST;"
  },
  {
    "id": 1053,
    "db_id": "conference",
    "question": {
      "id": 1053,
      "db_id": "conference",
      "question": "How many conferences are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many conferences are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many conferences are there?[/QUESTION]\n[SQL]\n SELECT COUNT(c.Conference_ID) FROM conference c;"
  },
  {
    "id": 1054,
    "db_id": "conference",
    "question": {
      "id": 1054,
      "db_id": "conference",
      "question": "What is the total number of conferences?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total number of conferences?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total number of conferences?[/QUESTION]\n[SQL]\n SELECT COUNT(c.Conference_ID) AS total_conferences FROM conference c;"
  },
  {
    "id": 1055,
    "db_id": "conference",
    "question": {
      "id": 1055,
      "db_id": "conference",
      "question": "List all distinct conference names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all distinct conference names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all distinct conference names.[/QUESTION]\n[SQL]\n SELECT DISTINCT c.conference_name FROM conference c;"
  },
  {
    "id": 1056,
    "db_id": "conference",
    "question": {
      "id": 1056,
      "db_id": "conference",
      "question": "What are the different conference names?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different conference names?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different conference names?[/QUESTION]\n[SQL]\n SELECT DISTINCT c.Conference_Name FROM conference c;"
  },
  {
    "id": 1057,
    "db_id": "conference",
    "question": {
      "id": 1057,
      "db_id": "conference",
      "question": "List all conference name, year, and location."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all conference name, year, and location.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all conference name, year, and location.[/QUESTION]\n[SQL]\n SELECT c.conference_name, c.year, c.location FROM conference c;"
  },
  {
    "id": 1058,
    "db_id": "conference",
    "question": {
      "id": 1058,
      "db_id": "conference",
      "question": "What are the names, years, and locations of all conferences?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names, years, and locations of all conferences?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names, years, and locations of all conferences?[/QUESTION]\n[SQL]\n SELECT c.conference_name, c.year, c.location FROM conference c;"
  },
  {
    "id": 1059,
    "db_id": "conference",
    "question": {
      "id": 1059,
      "db_id": "conference",
      "question": "Show all conference names and the number of times each conference has."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all conference names and the number of times each conference has.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all conference names and the number of times each conference has.[/QUESTION]\n[SQL]\n SELECT c.conference_name, COUNT(c.conference_id) AS number_of_conferences FROM conference c GROUP BY c.conference_name ORDER BY number_of_conferences DESC NULLS LAST;"
  },
  {
    "id": 1060,
    "db_id": "conference",
    "question": {
      "id": 1060,
      "db_id": "conference",
      "question": "For each conference name, how many times has it occurred?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each conference name, how many times has it occurred?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each conference name, how many times has it occurred?[/QUESTION]\n[SQL]\n SELECT c.conference_name, COUNT(c.conference_name) AS number_of_times FROM conference c GROUP BY c.conference_name ORDER BY number_of_times DESC NULLS LAST;"
  },
  {
    "id": 1061,
    "db_id": "conference",
    "question": {
      "id": 1061,
      "db_id": "conference",
      "question": "show all years and the number of conferences in each year."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]show all years and the number of conferences in each year.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]show all years and the number of conferences in each year.[/QUESTION]\n[SQL]\n SELECT c.year, COUNT(c.conference_id) AS number_of_conferences FROM conference c GROUP BY c.year ORDER BY c.year NULLS LAST;"
  },
  {
    "id": 1062,
    "db_id": "conference",
    "question": {
      "id": 1062,
      "db_id": "conference",
      "question": "How many conferences occur every year?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many conferences occur every year?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many conferences occur every year?[/QUESTION]\n[SQL]\n SELECT c.year, COUNT(c.conference_id) AS number_of_conferences FROM conference c GROUP BY c.year ORDER BY c.year;"
  },
  {
    "id": 1063,
    "db_id": "conference",
    "question": {
      "id": 1063,
      "db_id": "conference",
      "question": "which year has least number of conferences?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]which year has least number of conferences?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]which year has least number of conferences?[/QUESTION]\n[SQL]\n SELECT c.year FROM conference c GROUP BY c.year ORDER BY COUNT(c.conference_id) ASC LIMIT 1;"
  },
  {
    "id": 1064,
    "db_id": "conference",
    "question": {
      "id": 1064,
      "db_id": "conference",
      "question": "What year had the fewest conferences?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What year had the fewest conferences?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What year had the fewest conferences?[/QUESTION]\n[SQL]\n SELECT MIN(c.year) AS earliest_year FROM conference c;"
  },
  {
    "id": 1065,
    "db_id": "conference",
    "question": {
      "id": 1065,
      "db_id": "conference",
      "question": "Show all locations where at least two conferences are located."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all locations where at least two conferences are located.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all locations where at least two conferences are located.[/QUESTION]\n[SQL]\n SELECT c.location FROM conference c GROUP BY c.location HAVING COUNT(c.conference_id) >= 2;"
  },
  {
    "id": 1066,
    "db_id": "conference",
    "question": {
      "id": 1066,
      "db_id": "conference",
      "question": "What are all locations that have hosted at least two conferences?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all locations that have hosted at least two conferences?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all locations that have hosted at least two conferences?[/QUESTION]\n[SQL]\n SELECT c.location FROM conference c GROUP BY c.location HAVING COUNT(c.conference_id) >= 2;"
  },
  {
    "id": 1067,
    "db_id": "conference",
    "question": {
      "id": 1067,
      "db_id": "conference",
      "question": "Show the institution name, location and founded year of all institutions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the institution name, location and founded year of all institutions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the institution name, location and founded year of all institutions.[/QUESTION]\n[SQL]\n SELECT i.institution_name, i.location, i.founded FROM institution i;"
  },
  {
    "id": 1068,
    "db_id": "conference",
    "question": {
      "id": 1068,
      "db_id": "conference",
      "question": "What are the names, locations, and founding years for all institutions?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names, locations, and founding years for all institutions?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names, locations, and founding years for all institutions?[/QUESTION]\n[SQL]\n SELECT i.institution_name, i.location, i.founded FROM institution i;"
  },
  {
    "id": 1069,
    "db_id": "conference",
    "question": {
      "id": 1069,
      "db_id": "conference",
      "question": "How many institution are founded between 1850 and 1900?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many institution are founded between 1850 and 1900?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many institution are founded between 1850 and 1900?[/QUESTION]\n[SQL]\n SELECT COUNT(i.Institution_ID) FROM institution i WHERE i.Founded BETWEEN 1850 AND 1900;"
  },
  {
    "id": 1070,
    "db_id": "conference",
    "question": {
      "id": 1070,
      "db_id": "conference",
      "question": "How many institutions were founded between 1850 and 1900?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many institutions were founded between 1850 and 1900?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many institutions were founded between 1850 and 1900?[/QUESTION]\n[SQL]\n SELECT COUNT(i.institution_id) FROM institution i WHERE i.founded BETWEEN 1850 AND 1900;"
  },
  {
    "id": 1071,
    "db_id": "conference",
    "question": {
      "id": 1071,
      "db_id": "conference",
      "question": "Show the institution name and location of institution that is most recently founded."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the institution name and location of institution that is most recently founded.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the institution name and location of institution that is most recently founded.[/QUESTION]\n[SQL]\n SELECT i.institution_name, i.location FROM institution i ORDER BY i.founded DESC LIMIT 1;"
  },
  {
    "id": 1072,
    "db_id": "conference",
    "question": {
      "id": 1072,
      "db_id": "conference",
      "question": "What are the names and locations of the most recently-founded institution?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and locations of the most recently-founded institution?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and locations of the most recently-founded institution?[/QUESTION]\n[SQL]\n SELECT i.institution_name, i.location FROM institution i ORDER BY i.founded DESC LIMIT 1;"
  },
  {
    "id": 1073,
    "db_id": "conference",
    "question": {
      "id": 1073,
      "db_id": "conference",
      "question": "Show the institution name and the number of staff for each institution founded after 1800."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the institution name and the number of staff for each institution founded after 1800.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the institution name and the number of staff for each institution founded after 1800.[/QUESTION]\n[SQL]\n SELECT i.institution_name, COUNT(s.staff_id) AS total_staff FROM institution i JOIN staff s ON i.institution_id = s.institution_id WHERE i.founded > 1800 GROUP BY i.institution_name ORDER BY total_staff DESC NULLS LAST;"
  },
  {
    "id": 1074,
    "db_id": "conference",
    "question": {
      "id": 1074,
      "db_id": "conference",
      "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .[/QUESTION]\n[SQL]\n SELECT i.institution_id, COUNT(s.staff_id) AS number_of_staff, array_agg(s.name) AS staff_names FROM institution i JOIN staff s ON i.institution_id = s.institution_id WHERE i.founded > 1800 GROUP BY i.institution_id ORDER BY number_of_staff DESC NULLS LAST;"
  },
  {
    "id": 1075,
    "db_id": "conference",
    "question": {
      "id": 1075,
      "db_id": "conference",
      "question": "Show institution name which there is no staff in our record."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show institution name which there is no staff in our record.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show institution name which there is no staff in our record.[/QUESTION]\n[SQL]\n SELECT i.institution_name FROM institution i WHERE i.institution_id NOT IN (SELECT s.institution_id FROM staff s);"
  },
  {
    "id": 1076,
    "db_id": "conference",
    "question": {
      "id": 1076,
      "db_id": "conference",
      "question": "What is the name of the institution with no staff in the records?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the institution with no staff in the records?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the institution with no staff in the records?[/QUESTION]\n[SQL]\n SELECT i.institution_name FROM institution i WHERE i.institution_id NOT IN (SELECT s.institution_id FROM staff s);"
  },
  {
    "id": 1077,
    "db_id": "conference",
    "question": {
      "id": 1077,
      "db_id": "conference",
      "question": "Show all staff name who are above the average age."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all staff name who are above the average age.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all staff name who are above the average age.[/QUESTION]\n[SQL]\n SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(s2.age) FROM staff s2);"
  },
  {
    "id": 1078,
    "db_id": "conference",
    "question": {
      "id": 1078,
      "db_id": "conference",
      "question": "What are the names of all staff members who are older than average?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all staff members who are older than average?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all staff members who are older than average?[/QUESTION]\n[SQL]\n SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(s2.age) FROM staff s2);"
  },
  {
    "id": 1079,
    "db_id": "conference",
    "question": {
      "id": 1079,
      "db_id": "conference",
      "question": "What is the maximum and minimum age of all staff from the United States?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the maximum and minimum age of all staff from the United States?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the maximum and minimum age of all staff from the United States?[/QUESTION]\n[SQL]\n SELECT MAX(s.age) AS max_age, MIN(s.age) AS min_age FROM staff s WHERE s.nationality ILIKE '%United%States%'"
  },
  {
    "id": 1080,
    "db_id": "conference",
    "question": {
      "id": 1080,
      "db_id": "conference",
      "question": "What are the maximum and minimum ages for all staff?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum and minimum ages for all staff?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum and minimum ages for all staff?[/QUESTION]\n[SQL]\n SELECT MIN(s.age) AS min_age, MAX(s.age) AS max_age FROM staff s;"
  },
  {
    "id": 1081,
    "db_id": "conference",
    "question": {
      "id": 1081,
      "db_id": "conference",
      "question": "Show all conference names which the staff from Canada attends."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all conference names which the staff from Canada attends.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all conference names which the staff from Canada attends.[/QUESTION]\n[SQL]\n SELECT c.conference_name FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id JOIN staff s ON cp.staff_id = s.staff_id WHERE s.nationality ilike '%Canadian%' ORDER BY c.conference_name NULLS LAST;"
  },
  {
    "id": 1082,
    "db_id": "conference",
    "question": {
      "id": 1082,
      "db_id": "conference",
      "question": "What are the names of all the conferences that has staff from Canada attending?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all the conferences that has staff from Canada attending?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all the conferences that has staff from Canada attending?[/QUESTION]\n[SQL]\n SELECT DISTINCT c.conference_name FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id JOIN staff s ON cp.staff_id = s.staff_id WHERE s.nationality ILIKE '%Canadian%'"
  },
  {
    "id": 1083,
    "db_id": "conference",
    "question": {
      "id": 1083,
      "db_id": "conference",
      "question": "Show all staff names who have been both speaker and sponsor in some conference."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all staff names who have been both speaker and sponsor in some conference.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all staff names who have been both speaker and sponsor in some conference.[/QUESTION]\n[SQL]\n SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_id = cp1.staff_id JOIN conference_participation cp2 ON s.staff_id = cp2.staff_id WHERE cp1.role ilike '%speaker%' AND cp2.role ilike '%sponsor%';"
  },
  {
    "id": 1084,
    "db_id": "conference",
    "question": {
      "id": 1084,
      "db_id": "conference",
      "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the staff members who have been both a speaker and a sponsor at some conference?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the staff members who have been both a speaker and a sponsor at some conference?[/QUESTION]\n[SQL]\n SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_id = cp1.staff_id JOIN conference_participation cp2 ON s.staff_id = cp2.staff_id WHERE cp1.role ilike '%speaker%' AND cp2.role ilike '%sponsor%';"
  },
  {
    "id": 1085,
    "db_id": "conference",
    "question": {
      "id": 1085,
      "db_id": "conference",
      "question": "Show all names who have been in both ACL and Naccl."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all names who have been in both ACL and Naccl.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all names who have been in both ACL and Naccl.[/QUESTION]\n[SQL]\n SELECT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_id = cp1.staff_id AND cp1.role ilike '%ACL%' JOIN conference_participation cp2 ON s.staff_id = cp2.staff_id AND cp2.role ilike '%Naccl%';"
  },
  {
    "id": 1086,
    "db_id": "conference",
    "question": {
      "id": 1086,
      "db_id": "conference",
      "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of everbody who has participated in both the ACL and NACCL conferences?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of everbody who has participated in both the ACL and NACCL conferences?[/QUESTION]\n[SQL]\n SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_id = cp1.staff_id JOIN conference_participation cp2 ON s.staff_id = cp2.staff_id WHERE cp1.conference_id IN (SELECT conference_id FROM conference WHERE conference_name ilike '%ACL%') AND cp2.conference_id IN (SELECT conference_id FROM conference WHERE conference_name ilike '%NACCL%');"
  },
  {
    "id": 1087,
    "db_id": "conference",
    "question": {
      "id": 1087,
      "db_id": "conference",
      "question": "Show all staff names who attend a conference in 2003 or 2004."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all staff names who attend a conference in 2003 or 2004.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all staff names who attend a conference in 2003 or 2004.[/QUESTION]\n[SQL]\n SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year IN (2003, 2004);"
  },
  {
    "id": 1088,
    "db_id": "conference",
    "question": {
      "id": 1088,
      "db_id": "conference",
      "question": "What are the staff names who participated in conferences between 2003 or 2004?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the staff names who participated in conferences between 2003 or 2004?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the staff names who participated in conferences between 2003 or 2004?[/QUESTION]\n[SQL]\n SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year IN (2003, 2004) ORDER BY s.name NULLS LAST;"
  },
  {
    "id": 1089,
    "db_id": "conference",
    "question": {
      "id": 1089,
      "db_id": "conference",
      "question": "Show the conference name and year and the number of participants for each conference."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the conference name and year and the number of participants for each conference.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the conference name and year and the number of participants for each conference.[/QUESTION]\n[SQL]\n SELECT c.conference_name, c.year, COUNT(cp.staff_id) AS total_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name, c.year ORDER BY total_participants DESC NULLS LAST;"
  },
  {
    "id": 1090,
    "db_id": "conference",
    "question": {
      "id": 1090,
      "db_id": "conference",
      "question": "For each conference id, what are their names, year, and number of participants?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each conference id, what are their names, year, and number of participants?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each conference id, what are their names, year, and number of participants?[/QUESTION]\n[SQL]\n WITH total_participants AS (SELECT c.conference_id, COUNT(c.staff_id) AS num_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_id) SELECT c.conference_id, c.conference_name, c.year, tp.num_participants FROM conference c JOIN total_participants tp ON c.conference_id = tp.conference_id;"
  },
  {
    "id": 1091,
    "db_id": "conference",
    "question": {
      "id": 1091,
      "db_id": "conference",
      "question": "Find the name of the conferences that have the top 2 most number of attendants."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the conferences that have the top 2 most number of attendants.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the conferences that have the top 2 most number of attendants.[/QUESTION]\n[SQL]\n SELECT c.conference_name, COUNT(cp.staff_id) AS total_attendees FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name ORDER BY total_attendees DESC NULLS LAST LIMIT 2;"
  },
  {
    "id": 1092,
    "db_id": "conference",
    "question": {
      "id": 1092,
      "db_id": "conference",
      "question": "What are the names of the conferences that have the top 2 most people attending?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the conferences that have the top 2 most people attending?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the conferences that have the top 2 most people attending?[/QUESTION]\n[SQL]\n SELECT c.conference_name, COUNT(cp.staff_id) AS total_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name ORDER BY total_participants DESC NULLS LAST LIMIT 2;"
  },
  {
    "id": 1093,
    "db_id": "conference",
    "question": {
      "id": 1093,
      "db_id": "conference",
      "question": "Find the name and nationality of the people who did not participate in any ACL conference."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and nationality of the people who did not participate in any ACL conference.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and nationality of the people who did not participate in any ACL conference.[/QUESTION]\n[SQL]\n SELECT s.name, s.nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_id = cp.staff_id AND cp.conference_id = 757071 WHERE cp.staff_id IS NULL;"
  },
  {
    "id": 1094,
    "db_id": "conference",
    "question": {
      "id": 1094,
      "db_id": "conference",
      "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and nationalities of the people who did not participate in any ACL conferences?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and nationalities of the people who did not participate in any ACL conferences?[/QUESTION]\n[SQL]\n SELECT s.name, s.nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_id = cp.staff_id AND cp.conference_id = 757071 WHERE cp.staff_id IS NULL;"
  },
  {
    "id": 1095,
    "db_id": "conference",
    "question": {
      "id": 1095,
      "db_id": "conference",
      "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and location of the universities that did not have any staff participated in any conference in 2004.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and location of the universities that did not have any staff participated in any conference in 2004.[/QUESTION]\n[SQL]\n SELECT i.institution_name, i.location FROM institution i LEFT JOIN (SELECT s.institution_id FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id WHERE cp.conference_id IN (SELECT conference_id FROM conference WHERE YEAR = 2004)) AS subquery ON i.institution_id = subquery.institution_id AND subquery.institution_id IS NULL;"
  },
  {
    "id": 1096,
    "db_id": "conference",
    "question": {
      "id": 1096,
      "db_id": "conference",
      "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?[/QUESTION]\n[SQL]\n SELECT i.institution_name, i.location FROM institution i LEFT JOIN conference_participation cp ON i.institution_id = cp.staff_id AND cp.year = 2004 WHERE cp.staff_id IS NULL;"
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "question": {
      "id": 1097,
      "db_id": "pilot_1",
      "question": "What is the name of the oldest pilot?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the oldest pilot?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the oldest pilot?[/QUESTION]\n[SQL]\n SELECT ps.pilot_name FROM PilotSkills ps ORDER BY ps.age ASC LIMIT 1;"
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "question": {
      "id": 1098,
      "db_id": "pilot_1",
      "question": "Return the name of the oldest pilot."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the name of the oldest pilot.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the name of the oldest pilot.[/QUESTION]\n[SQL]\n SELECT ps.pilot_name FROM PilotSkills ps ORDER BY ps.age ASC LIMIT 1;"
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "question": {
      "id": 1099,
      "db_id": "pilot_1",
      "question": "What are the names of pilots whose age is below the average age, ordered by age?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of pilots whose age is below the average age, ordered by age?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of pilots whose age is below the average age, ordered by age?[/QUESTION]\n[SQL]\n SELECT p.pilot_name FROM PilotSkills p WHERE p.age < (SELECT AVG(p.age) FROM PilotSkills) ORDER BY p.age NULLS LAST;"
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "question": {
      "id": 1100,
      "db_id": "pilot_1",
      "question": "Return the names of pilots who are younger than average, ordered by age ascending."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names of pilots who are younger than average, ordered by age ascending.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names of pilots who are younger than average, ordered by age ascending.[/QUESTION]\n[SQL]\n SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age < (SELECT AVG(ps2.age) FROM PilotSkills ps2) ORDER BY ps.age ASC;"
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "question": {
      "id": 1101,
      "db_id": "pilot_1",
      "question": "Find all information of on pilots whose age is less than 30."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all information of on pilots whose age is less than 30.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all information of on pilots whose age is less than 30.[/QUESTION]\n[SQL]\n SELECT * FROM PilotSkills p WHERE p.age < 30;"
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "question": {
      "id": 1102,
      "db_id": "pilot_1",
      "question": "What is all the information about pilots who are younger than 30 ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is all the information about pilots who are younger than 30 ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is all the information about pilots who are younger than 30 ?[/QUESTION]\n[SQL]\n SELECT * FROM PilotSkills p WHERE p.age < 30;"
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "question": {
      "id": 1103,
      "db_id": "pilot_1",
      "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of all pilots who have a plane named Piper Cub and is under 35.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of all pilots who have a plane named Piper Cub and is under 35.[/QUESTION]\n[SQL]\n SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.age < 35;"
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "question": {
      "id": 1104,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of pilots who are younger than 35 and have a plane named Piper Cub?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of pilots who are younger than 35 and have a plane named Piper Cub?[/QUESTION]\n[SQL]\n SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age < 35 AND ps.plane_name = 'Piper Cub';"
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "question": {
      "id": 1105,
      "db_id": "pilot_1",
      "question": "Where is the plane F-14 Fighter located?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Where is the plane F-14 Fighter located?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Where is the plane F-14 Fighter located?[/QUESTION]\n[SQL]\n SELECT h.location FROM Hangar h WHERE h.plane_name = 'F-14 Fighter';"
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "question": {
      "id": 1106,
      "db_id": "pilot_1",
      "question": "Return the location of the hangar in which F-14 Fighter is located."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the location of the hangar in which F-14 Fighter is located.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the location of the hangar in which F-14 Fighter is located.[/QUESTION]\n[SQL]\n SELECT h.location FROM Hangar h WHERE h.plane_name = 'F-14 Fighter';"
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "question": {
      "id": 1107,
      "db_id": "pilot_1",
      "question": "How many different places have some plane?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different places have some plane?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different places have some plane?[/QUESTION]\n[SQL]\n SELECT h.location, COUNT(*) AS number_of_planes FROM Hangar h GROUP BY h.location"
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "question": {
      "id": 1108,
      "db_id": "pilot_1",
      "question": "Count the number of different locations of hangars."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of different locations of hangars.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of different locations of hangars.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT h.location) FROM Hangar h;"
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "question": {
      "id": 1109,
      "db_id": "pilot_1",
      "question": "Which plane does the pilot Jones with age 32 has?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which plane does the pilot Jones with age 32 has?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which plane does the pilot Jones with age 32 has?[/QUESTION]\n[SQL]\n SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name = 'Jones' AND ps.age = 32;"
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "question": {
      "id": 1110,
      "db_id": "pilot_1",
      "question": "What are the names of planes that the pilot Jones who is 32 has?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of planes that the pilot Jones who is 32 has?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of planes that the pilot Jones who is 32 has?[/QUESTION]\n[SQL]\n SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name ilike '%Jones%' AND ps.age = 32;"
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "question": {
      "id": 1111,
      "db_id": "pilot_1",
      "question": "How many pilots who are older than 40?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many pilots who are older than 40?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many pilots who are older than 40?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM PilotSkills WHERE age > 40;"
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "question": {
      "id": 1112,
      "db_id": "pilot_1",
      "question": "Count the number of pilots with age greater than 40."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of pilots with age greater than 40.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of pilots with age greater than 40.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM PilotSkills p WHERE p.age > 40;"
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "question": {
      "id": 1113,
      "db_id": "pilot_1",
      "question": "How many plane B-52 Bomber owned by the pilot who is under 35?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many plane B-52 Bomber owned by the pilot who is under 35?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many plane B-52 Bomber owned by the pilot who is under 35?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age < 35 AND ps.plane_name = 'B-52 Bomber';"
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "question": {
      "id": 1114,
      "db_id": "pilot_1",
      "question": "Count the number of B-52 Bombers owned by pilots under 35."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of B-52 Bombers owned by pilots under 35.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of B-52 Bombers owned by pilots under 35.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age < 35 AND h.location ILIKE '%B-52%Bomber%';"
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "question": {
      "id": 1115,
      "db_id": "pilot_1",
      "question": "Who is the youngest pilot to fly the plane Piper Cub?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who is the youngest pilot to fly the plane Piper Cub?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who is the youngest pilot to fly the plane Piper Cub?[/QUESTION]\n[SQL]\n SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1;"
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "question": {
      "id": 1116,
      "db_id": "pilot_1",
      "question": "Return the name of the youngest pilot to fly Piper Cub."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the name of the youngest pilot to fly Piper Cub.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the name of the youngest pilot to fly Piper Cub.[/QUESTION]\n[SQL]\n SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1;"
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "question": {
      "id": 1117,
      "db_id": "pilot_1",
      "question": "What is the name of the most popular plane?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the most popular plane?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the most popular plane?[/QUESTION]\n[SQL]\n SELECT h.plane_name FROM Hangar h GROUP BY h.plane_name ORDER BY COUNT(h.plane_name) DESC LIMIT 1;"
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "question": {
      "id": 1118,
      "db_id": "pilot_1",
      "question": "What is the name of the plane that is flown the most often?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the plane that is flown the most often?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the plane that is flown the most often?[/QUESTION]\n[SQL]\n SELECT ps.plane_name FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY COUNT(ps.plane_name) DESC LIMIT 1;"
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "question": {
      "id": 1119,
      "db_id": "pilot_1",
      "question": "What is the name of the least popular plane?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the least popular plane?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the least popular plane?[/QUESTION]\n[SQL]\n SELECT h.plane_name FROM Hangar h GROUP BY h.plane_name ORDER BY COUNT(h.plane_name) ASC LIMIT 1;"
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "question": {
      "id": 1120,
      "db_id": "pilot_1",
      "question": "What is the name of the plane that is flown the least often?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the plane that is flown the least often?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the plane that is flown the least often?[/QUESTION]\n[SQL]\n SELECT ps.plane_name FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY COUNT(ps.plane_name) ASC LIMIT 1;"
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "question": {
      "id": 1121,
      "db_id": "pilot_1",
      "question": "How many pilots whose planes are in Chicago?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many pilots whose planes are in Chicago?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many pilots whose planes are in Chicago?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Chicago%';"
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "question": {
      "id": 1122,
      "db_id": "pilot_1",
      "question": "Count the number of pilots who have planes in Chicago."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of pilots who have planes in Chicago.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of pilots who have planes in Chicago.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT ps.pilot_name) AS pilot_count FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Chicago%';"
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "question": {
      "id": 1123,
      "db_id": "pilot_1",
      "question": "What are the planes owned by pilot Smith with age 41?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the planes owned by pilot Smith with age 41?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the planes owned by pilot Smith with age 41?[/QUESTION]\n[SQL]\n SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name ilike '%Smith%' AND ps.age = 41;"
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "question": {
      "id": 1124,
      "db_id": "pilot_1",
      "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names of planes owned by the pilot whose name is Smith and is 41 years old.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names of planes owned by the pilot whose name is Smith and is 41 years old.[/QUESTION]\n[SQL]\n SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name ilike '%Smith%' AND ps.age = 41;"
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "question": {
      "id": 1125,
      "db_id": "pilot_1",
      "question": "How many distinct planes are owned across all pilots?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many distinct planes are owned across all pilots?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many distinct planes are owned across all pilots?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT ps.plane_name) AS total_distinct_planes FROM PilotSkills ps;"
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "question": {
      "id": 1126,
      "db_id": "pilot_1",
      "question": "Count the number of different plane names across all pilots."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of different plane names across all pilots.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of different plane names across all pilots.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT ps.plane_name) AS total_unique_planes FROM PilotSkills ps;"
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "question": {
      "id": 1127,
      "db_id": "pilot_1",
      "question": "How many planes are owned by the pilot whose name is Smith?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many planes are owned by the pilot whose name is Smith?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many planes are owned by the pilot whose name is Smith?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT ps.plane_name) AS number_of_planes FROM PilotSkills ps WHERE ps.pilot_name ILIKE '%Smith%';"
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "question": {
      "id": 1128,
      "db_id": "pilot_1",
      "question": "Count the number of planes Smith owns."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of planes Smith owns.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of planes Smith owns.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.pilot_name ILIKE '%Smith%'"
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "question": {
      "id": 1129,
      "db_id": "pilot_1",
      "question": "How many planes are controlled by the pilots whose age is older than 40?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many planes are controlled by the pilots whose age is older than 40?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many planes are controlled by the pilots whose age is older than 40?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT ps.plane_name) AS number_of_planes FROM PilotSkills ps WHERE ps.age > 40;"
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "question": {
      "id": 1130,
      "db_id": "pilot_1",
      "question": "Count the number of planes flown by pilots older than 40."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of planes flown by pilots older than 40.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of planes flown by pilots older than 40.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.age > 40;"
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "question": {
      "id": 1131,
      "db_id": "pilot_1",
      "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.[/QUESTION]\n[SQL]\n SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age BETWEEN 30 AND 40 ORDER BY ps.age ASC;"
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "question": {
      "id": 1132,
      "db_id": "pilot_1",
      "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of pilots between the ages of 30 and 40, ordered by age ascending?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of pilots between the ages of 30 and 40, ordered by age ascending?[/QUESTION]\n[SQL]\n SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age BETWEEN 30 AND 40 ORDER BY ps.age ASC;"
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "question": {
      "id": 1133,
      "db_id": "pilot_1",
      "question": "List all pilot names sorted by their ages in the descending order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all pilot names sorted by their ages in the descending order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all pilot names sorted by their ages in the descending order.[/QUESTION]\n[SQL]\n SELECT p.pilot_name FROM PilotSkills p ORDER BY p.age DESC;"
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "question": {
      "id": 1134,
      "db_id": "pilot_1",
      "question": "What are the names of pilots, ordered by age descending?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of pilots, ordered by age descending?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of pilots, ordered by age descending?[/QUESTION]\n[SQL]\n SELECT p.pilot_name FROM PilotSkills p ORDER BY p.age DESC;"
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "question": {
      "id": 1135,
      "db_id": "pilot_1",
      "question": "Find all locations of planes sorted by the plane name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all locations of planes sorted by the plane name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all locations of planes sorted by the plane name.[/QUESTION]\n[SQL]\n SELECT h.location, h.plane_name FROM Hangar h ORDER BY h.plane_name NULLS LAST;"
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "question": {
      "id": 1136,
      "db_id": "pilot_1",
      "question": "What are the locations of the different planes, ordered by plane name?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the locations of the different planes, ordered by plane name?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the locations of the different planes, ordered by plane name?[/QUESTION]\n[SQL]\n SELECT h.plane_name, h.location FROM Hangar h ORDER BY h.plane_name NULLS LAST;"
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "question": {
      "id": 1137,
      "db_id": "pilot_1",
      "question": "List all distinct types of planes owned by all pilots in alphabetic order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all distinct types of planes owned by all pilots in alphabetic order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all distinct types of planes owned by all pilots in alphabetic order?[/QUESTION]\n[SQL]\n SELECT DISTINCT ps.plane_name FROM PilotSkills ps ORDER BY ps.plane_name ASC;"
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "question": {
      "id": 1138,
      "db_id": "pilot_1",
      "question": "What are the different plane names, ordered alphabetically?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different plane names, ordered alphabetically?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different plane names, ordered alphabetically?[/QUESTION]\n[SQL]\n SELECT DISTINCT ps.plane_name FROM PilotSkills ps ORDER BY ps.plane_name ASC;"
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "question": {
      "id": 1139,
      "db_id": "pilot_1",
      "question": "How many pilots who are older than 40 or younger than 30?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many pilots who are older than 40 or younger than 30?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many pilots who are older than 40 or younger than 30?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM PilotSkills p WHERE (p.age > 40 OR p.age < 30);"
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "question": {
      "id": 1140,
      "db_id": "pilot_1",
      "question": "Count the number of pilots with age greater than 40 or less than 30."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of pilots with age greater than 40 or less than 30.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of pilots with age greater than 40 or less than 30.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM PilotSkills p WHERE p.age > 40 OR p.age < 30;"
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "question": {
      "id": 1141,
      "db_id": "pilot_1",
      "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?[/QUESTION]\n[SQL]\n SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE (ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30);"
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "question": {
      "id": 1142,
      "db_id": "pilot_1",
      "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.[/QUESTION]\n[SQL]\n SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE (ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30);"
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "question": {
      "id": 1143,
      "db_id": "pilot_1",
      "question": "Find pilots who own plane Piper Cub but not B-52 Bomber."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find pilots who own plane Piper Cub but not B-52 Bomber.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find pilots who own plane Piper Cub but not B-52 Bomber.[/QUESTION]\n[SQL]\n SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.pilot_name NOT IN (SELECT h.pilot_name FROM Hangar h WHERE h.plane_name = 'B-52 Bomber');"
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "question": {
      "id": 1144,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?[/QUESTION]\n[SQL]\n SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.pilot_name NOT IN (SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'B-52 Bomber');"
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "question": {
      "id": 1145,
      "db_id": "pilot_1",
      "question": "Find pilots who own planes Piper Cub and B-52 Bomber."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find pilots who own planes Piper Cub and B-52 Bomber.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find pilots who own planes Piper Cub and B-52 Bomber.[/QUESTION]\n[SQL]\n SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'B-52 Bomber');"
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "question": {
      "id": 1146,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of pilots who own both Piper Cub and the B-52 Bomber?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of pilots who own both Piper Cub and the B-52 Bomber?[/QUESTION]\n[SQL]\n SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT ps.plane_name) = 2;"
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "question": {
      "id": 1147,
      "db_id": "pilot_1",
      "question": "What are the average and smallest ages of all pilots?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average and smallest ages of all pilots?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average and smallest ages of all pilots?[/QUESTION]\n[SQL]\n SELECT AVG(ps.age) AS average_age, MIN(ps.age) AS minimum_age FROM PilotSkills ps;"
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "question": {
      "id": 1148,
      "db_id": "pilot_1",
      "question": "Return the average and minimum ages across all pilots."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the average and minimum ages across all pilots.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the average and minimum ages across all pilots.[/QUESTION]\n[SQL]\n SELECT AVG(ps.age) AS average_age, MIN(ps.age) AS minimum_age FROM PilotSkills ps;"
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "question": {
      "id": 1149,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who have planes in both Austin and Boston?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of pilots who have planes in both Austin and Boston?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of pilots who have planes in both Austin and Boston?[/QUESTION]\n[SQL]\n SELECT DISTINCT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' AND ps.plane_name IN (SELECT plane_name FROM Hangar WHERE location ilike '%Boston%')"
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "question": {
      "id": 1150,
      "db_id": "pilot_1",
      "question": "Give the names of pilots who have planes in Austin and Boston."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the names of pilots who have planes in Austin and Boston.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the names of pilots who have planes in Austin and Boston.[/QUESTION]\n[SQL]\n SELECT DISTINCT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' OR h.location ilike '%Boston%';"
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "question": {
      "id": 1151,
      "db_id": "pilot_1",
      "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the pilots who have either plane Piper Cub or plane F-14 Fighter.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the pilots who have either plane Piper Cub or plane F-14 Fighter.[/QUESTION]\n[SQL]\n SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'F-14 Fighter');"
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "question": {
      "id": 1152,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of pilots who have either the Piper Cub or the F-14 Fighter?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of pilots who have either the Piper Cub or the F-14 Fighter?[/QUESTION]\n[SQL]\n SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'F-14 Fighter');"
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "question": {
      "id": 1153,
      "db_id": "pilot_1",
      "question": "What is the average age of pilots for different types of planes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average age of pilots for different types of planes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average age of pilots for different types of planes?[/QUESTION]\n[SQL]\n SELECT ps.plane_name, AVG(ps.age) AS average_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY average_age DESC NULLS LAST;"
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "question": {
      "id": 1154,
      "db_id": "pilot_1",
      "question": "Return the average age of pilots for each plane name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the average age of pilots for each plane name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the average age of pilots for each plane name.[/QUESTION]\n[SQL]\n SELECT ps.plane_name, AVG(ps.age) AS average_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY average_age DESC NULLS LAST;"
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "question": {
      "id": 1155,
      "db_id": "pilot_1",
      "question": "Find the number of planes for each type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of planes for each type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of planes for each type.[/QUESTION]\n[SQL]\n SELECT h.location, COUNT(*) AS number_of_planes FROM Hangar h GROUP BY h.location;"
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "question": {
      "id": 1156,
      "db_id": "pilot_1",
      "question": "Count the number of entries for each plane name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of entries for each plane name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of entries for each plane name.[/QUESTION]\n[SQL]\n SELECT ps.plane_name, COUNT(*) AS COUNT FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY COUNT DESC;"
  },
  {
    "id": 1157,
    "db_id": "pilot_1",
    "question": {
      "id": 1157,
      "db_id": "pilot_1",
      "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the oldest pilot for each type of plane, and order the results by plane name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the oldest pilot for each type of plane, and order the results by plane name.[/QUESTION]\n[SQL]\n SELECT p.plane_name, MIN(p.age) AS min_age FROM PilotSkills p GROUP BY p.plane_name ORDER BY p.plane_name NULLS LAST;"
  },
  {
    "id": 1158,
    "db_id": "pilot_1",
    "question": {
      "id": 1158,
      "db_id": "pilot_1",
      "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?[/QUESTION]\n[SQL]\n SELECT p.plane_name, MIN(p.age) AS min_age FROM PilotSkills p GROUP BY p.plane_name ORDER BY p.plane_name NULLS LAST;"
  },
  {
    "id": 1159,
    "db_id": "pilot_1",
    "question": {
      "id": 1159,
      "db_id": "pilot_1",
      "question": "What are the names of oldest pilots for each type of plane?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of oldest pilots for each type of plane?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of oldest pilots for each type of plane?[/QUESTION]\n[SQL]\n SELECT ps.plane_name, MIN(ps.age) AS min_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY min_age ASC;"
  },
  {
    "id": 1160,
    "db_id": "pilot_1",
    "question": {
      "id": 1160,
      "db_id": "pilot_1",
      "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names of the different planes, as well as the names of the oldest pilots who flew each.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names of the different planes, as well as the names of the oldest pilots who flew each.[/QUESTION]\n[SQL]\n SELECT p.plane_name, ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name JOIN Plane p ON h.plane_name = p.plane_name ORDER BY p.plane_name NULLS LAST;"
  },
  {
    "id": 1161,
    "db_id": "pilot_1",
    "question": {
      "id": 1161,
      "db_id": "pilot_1",
      "question": "Find the max age for each group of pilots with the same name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the max age for each group of pilots with the same name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the max age for each group of pilots with the same name.[/QUESTION]\n[SQL]\n SELECT ps.pilot_name, MAX(ps.age) AS max_age FROM PilotSkills ps GROUP BY ps.pilot_name ORDER BY max_age DESC NULLS LAST;"
  },
  {
    "id": 1162,
    "db_id": "pilot_1",
    "question": {
      "id": 1162,
      "db_id": "pilot_1",
      "question": "What are the different pilot names, and what are the maximum ages of pilots for each?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different pilot names, and what are the maximum ages of pilots for each?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different pilot names, and what are the maximum ages of pilots for each?[/QUESTION]\n[SQL]\n SELECT p.pilot_name, MAX(p.age) AS max_age FROM PilotSkills p GROUP BY p.pilot_name ORDER BY max_age DESC;"
  },
  {
    "id": 1163,
    "db_id": "pilot_1",
    "question": {
      "id": 1163,
      "db_id": "pilot_1",
      "question": "For each city, find the number and average age of pilots who have a plane."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each city, find the number and average age of pilots who have a plane.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each city, find the number and average age of pilots who have a plane.[/QUESTION]\n[SQL]\n SELECT h.location AS city, COUNT(DISTINCT ps.pilot_name) AS total_pilots, AVG(ps.age) AS average_age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY h.location ORDER BY total_pilots DESC NULLS LAST;"
  },
  {
    "id": 1164,
    "db_id": "pilot_1",
    "question": {
      "id": 1164,
      "db_id": "pilot_1",
      "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?[/QUESTION]\n[SQL]\n SELECT h.location, COUNT(DISTINCT p.pilot_name) AS number_of_pilots, AVG(p.age) AS average_age FROM Hangar h JOIN PlaneSkills p ON h.plane_name = p.plane_name GROUP BY h.location ORDER BY number_of_pilots DESC NULLS LAST;"
  },
  {
    "id": 1165,
    "db_id": "pilot_1",
    "question": {
      "id": 1165,
      "db_id": "pilot_1",
      "question": "Find the number of pilots for the plane types with average pilot age below 35."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of pilots for the plane types with average pilot age below 35.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of pilots for the plane types with average pilot age below 35.[/QUESTION]\n[SQL]\n SELECT h.plane_name, COUNT(ps.pilot_name) AS number_of_pilots FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY h.plane_name HAVING AVG(ps.age) < 35 ORDER BY number_of_pilots DESC NULLS LAST;"
  },
  {
    "id": 1166,
    "db_id": "pilot_1",
    "question": {
      "id": 1166,
      "db_id": "pilot_1",
      "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?[/QUESTION]\n[SQL]\n SELECT ps.plane_name, COUNT(ps.pilot_name) AS number_of_pilots FROM PilotSkills ps GROUP BY ps.plane_name HAVING AVG(ps.age) < 35 ORDER BY number_of_pilots DESC NULLS LAST;"
  },
  {
    "id": 1167,
    "db_id": "pilot_1",
    "question": {
      "id": 1167,
      "db_id": "pilot_1",
      "question": "Find the location of the plane that is owned by the youngest pilot."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the location of the plane that is owned by the youngest pilot.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the location of the plane that is owned by the youngest pilot.[/QUESTION]\n[SQL]\n SELECT h.location FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name ORDER BY ps.age ASC LIMIT 1;"
  },
  {
    "id": 1168,
    "db_id": "pilot_1",
    "question": {
      "id": 1168,
      "db_id": "pilot_1",
      "question": "What is the location of the plane that was flown by the pilot with the lowest age?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the location of the plane that was flown by the pilot with the lowest age?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the location of the plane that was flown by the pilot with the lowest age?[/QUESTION]\n[SQL]\n SELECT h.location FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name ORDER BY ps.age ASC LIMIT 1;"
  },
  {
    "id": 1169,
    "db_id": "pilot_1",
    "question": {
      "id": 1169,
      "db_id": "pilot_1",
      "question": "Find the name and age of pilots who have a plane in Austin."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and age of pilots who have a plane in Austin.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and age of pilots who have a plane in Austin.[/QUESTION]\n[SQL]\n SELECT ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' ORDER BY ps.pilot_name NULLS LAST;"
  },
  {
    "id": 1170,
    "db_id": "pilot_1",
    "question": {
      "id": 1170,
      "db_id": "pilot_1",
      "question": "What are the names and ages of pilots who have planes located in Austin?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and ages of pilots who have planes located in Austin?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and ages of pilots who have planes located in Austin?[/QUESTION]\n[SQL]\n SELECT ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' ORDER BY ps.pilot_name NULLS LAST;"
  },
  {
    "id": 1171,
    "db_id": "pilot_1",
    "question": {
      "id": 1171,
      "db_id": "pilot_1",
      "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.[/QUESTION]\n[SQL]\n SELECT p.pilot_name FROM PilotSkills p WHERE p.age > (SELECT MAX(ps.age) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.plane_name = 'Piper Cub') ORDER BY p.pilot_name ASC;"
  },
  {
    "id": 1172,
    "db_id": "pilot_1",
    "question": {
      "id": 1172,
      "db_id": "pilot_1",
      "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.[/QUESTION]\n[SQL]\n SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age > (SELECT MAX(ps2.age) FROM PilotSkills ps2 JOIN Hangar h ON ps2.plane_name = h.plane_name WHERE h.plane_name = 'Piper Cub') ORDER BY ps.pilot_name ASC;"
  },
  {
    "id": 1173,
    "db_id": "pilot_1",
    "question": {
      "id": 1173,
      "db_id": "pilot_1",
      "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age < (SELECT MIN(ps2.age) FROM PilotSkills ps2 WHERE ps2.plane_name = 'F-14 Fighter');"
  },
  {
    "id": 1174,
    "db_id": "pilot_1",
    "question": {
      "id": 1174,
      "db_id": "pilot_1",
      "question": "How many pilots are younger than all pilots who own the F-14 Fighter?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many pilots are younger than all pilots who own the F-14 Fighter?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many pilots are younger than all pilots who own the F-14 Fighter?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age < (SELECT MIN(ps2.age) FROM PilotSkills ps2 JOIN Hangar h ON ps2.plane_name = h.plane_name WHERE h.plane_name = 'F-14 Fighter');"
  },
  {
    "id": 1175,
    "db_id": "pilot_1",
    "question": {
      "id": 1175,
      "db_id": "pilot_1",
      "question": "Find all different planes whose names contain substring 'Bomber'."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all different planes whose names contain substring 'Bomber'.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all different planes whose names contain substring 'Bomber'.[/QUESTION]\n[SQL]\n SELECT DISTINCT ps.plane_name FROM PilotSkills ps WHERE ps.plane_name ILIKE '%Bomber%';"
  },
  {
    "id": 1176,
    "db_id": "pilot_1",
    "question": {
      "id": 1176,
      "db_id": "pilot_1",
      "question": "What are the different plane names that contain the word Bomber?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different plane names that contain the word Bomber?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different plane names that contain the word Bomber?[/QUESTION]\n[SQL]\n SELECT DISTINCT ps.plane_name FROM PilotSkills ps WHERE ps.plane_name ILIKE '%Bomber%';"
  },
  {
    "id": 1177,
    "db_id": "pilot_1",
    "question": {
      "id": 1177,
      "db_id": "pilot_1",
      "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM PilotSkills ps1 JOIN PilotSkills ps2 ON ps1.age > ps2.age AND ps2.plane_name = 'Piper Cub';"
  },
  {
    "id": 1178,
    "db_id": "pilot_1",
    "question": {
      "id": 1178,
      "db_id": "pilot_1",
      "question": "How many pilots are older than the youngest pilot who has Piper Cub?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many pilots are older than the youngest pilot who has Piper Cub?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many pilots are older than the youngest pilot who has Piper Cub?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > (SELECT MIN(ps2.age) FROM PilotSkills ps2 JOIN Hangar h ON ps2.plane_name = h.plane_name WHERE h.plane_name = 'Piper Cub');"
  },
  {
    "id": 1179,
    "db_id": "district_spokesman",
    "question": {
      "id": 1179,
      "db_id": "district_spokesman",
      "question": "Find the name of the district which has the largest area."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the district which has the largest area.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the district which has the largest area.[/QUESTION]\n[SQL]\n SELECT d.name FROM district d ORDER BY d.area_km DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1180,
    "db_id": "district_spokesman",
    "question": {
      "id": 1180,
      "db_id": "district_spokesman",
      "question": "Select the area and government website of the district with the smallest population."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select the area and government website of the district with the smallest population.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select the area and government website of the district with the smallest population.[/QUESTION]\n[SQL]\n SELECT d.name, d.area_km, d.government_website FROM district d ORDER BY d.population ASC LIMIT 1;"
  },
  {
    "id": 1181,
    "db_id": "district_spokesman",
    "question": {
      "id": 1181,
      "db_id": "district_spokesman",
      "question": "Find the names and populations of the districts whose area is greater than the average area."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names and populations of the districts whose area is greater than the average area.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names and populations of the districts whose area is greater than the average area.[/QUESTION]\n[SQL]\n SELECT d.name, d.population FROM district d WHERE d.area_km > (SELECT AVG(d2.area_km) FROM district d2);"
  },
  {
    "id": 1182,
    "db_id": "district_spokesman",
    "question": {
      "id": 1182,
      "db_id": "district_spokesman",
      "question": "Give me the biggest and average areas of all districts."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me the biggest and average areas of all districts.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me the biggest and average areas of all districts.[/QUESTION]\n[SQL]\n SELECT d.name, MAX(d.area_km) AS max_area, AVG(d.area_km) AS avg_area FROM district d GROUP BY d.name ORDER BY max_area DESC NULLS LAST;"
  },
  {
    "id": 1183,
    "db_id": "district_spokesman",
    "question": {
      "id": 1183,
      "db_id": "district_spokesman",
      "question": "What is the total population of the districts whose areas are in the top 3?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total population of the districts whose areas are in the top 3?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total population of the districts whose areas are in the top 3?[/QUESTION]\n[SQL]\n SELECT SUM(d.Population) AS total_population FROM (SELECT d.Population FROM district d ORDER BY d.Area_km DESC NULLS LAST LIMIT 3) AS subquery;"
  },
  {
    "id": 1184,
    "db_id": "district_spokesman",
    "question": {
      "id": 1184,
      "db_id": "district_spokesman",
      "question": "List the ids, names, and government websites of all districts sorted by population."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the ids, names, and government websites of all districts sorted by population.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the ids, names, and government websites of all districts sorted by population.[/QUESTION]\n[SQL]\n SELECT d.district_id, d.name, d.government_website FROM district d ORDER BY d.population DESC NULLS LAST;"
  },
  {
    "id": 1185,
    "db_id": "district_spokesman",
    "question": {
      "id": 1185,
      "db_id": "district_spokesman",
      "question": "Find the names of districts whose government links use a 'gov' domain."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of districts whose government links use a 'gov' domain.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of districts whose government links use a 'gov' domain.[/QUESTION]\n[SQL]\n SELECT d.name FROM district d WHERE d.government_website like '%.gov';"
  },
  {
    "id": 1186,
    "db_id": "district_spokesman",
    "question": {
      "id": 1186,
      "db_id": "district_spokesman",
      "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.[/QUESTION]\n[SQL]\n SELECT d.district_id, d.name FROM district d WHERE (d.population > 4000 OR d.area_km > 3000);"
  },
  {
    "id": 1187,
    "db_id": "district_spokesman",
    "question": {
      "id": 1187,
      "db_id": "district_spokesman",
      "question": "Find all spokesman's names and speech titles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all spokesman's names and speech titles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all spokesman's names and speech titles.[/QUESTION]\n[SQL]\n SELECT s.name AS spokesman_name, s.speach_title FROM spokesman s;"
  },
  {
    "id": 1188,
    "db_id": "district_spokesman",
    "question": {
      "id": 1188,
      "db_id": "district_spokesman",
      "question": "Find the average points and average ages of all spokesmen whose rank position is 1."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average points and average ages of all spokesmen whose rank position is 1.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average points and average ages of all spokesmen whose rank position is 1.[/QUESTION]\n[SQL]\n SELECT AVG(s.points), AVG(s.age) FROM spokesman s WHERE s.rank_position = 1;"
  },
  {
    "id": 1189,
    "db_id": "district_spokesman",
    "question": {
      "id": 1189,
      "db_id": "district_spokesman",
      "question": "What are the names and points of spokesmen who are younger than 40?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and points of spokesmen who are younger than 40?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and points of spokesmen who are younger than 40?[/QUESTION]\n[SQL]\n SELECT s.name, s.points FROM spokesman s WHERE s.age < 40 ORDER BY s.points DESC NULLS LAST;"
  },
  {
    "id": 1190,
    "db_id": "district_spokesman",
    "question": {
      "id": 1190,
      "db_id": "district_spokesman",
      "question": "Who is the oldest spokesman?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who is the oldest spokesman?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who is the oldest spokesman?[/QUESTION]\n[SQL]\n SELECT s.name FROM spokesman s ORDER BY s.age ASC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1191,
    "db_id": "district_spokesman",
    "question": {
      "id": 1191,
      "db_id": "district_spokesman",
      "question": "Which spokesman has lower points than the average?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which spokesman has lower points than the average?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which spokesman has lower points than the average?[/QUESTION]\n[SQL]\n SELECT s.name FROM spokesman s WHERE s.points < (SELECT AVG(s2.points) FROM spokesman s2);"
  },
  {
    "id": 1192,
    "db_id": "district_spokesman",
    "question": {
      "id": 1192,
      "db_id": "district_spokesman",
      "question": "Find the name of the district which has greatest number of spokesmen."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the district which has greatest number of spokesmen.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the district which has greatest number of spokesmen.[/QUESTION]\n[SQL]\n SELECT d.name FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name ORDER BY COUNT(sd.spokesman_id) DESC LIMIT 1;"
  },
  {
    "id": 1193,
    "db_id": "district_spokesman",
    "question": {
      "id": 1193,
      "db_id": "district_spokesman",
      "question": "Find the names of spokesmen who have served some district before 2004."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of spokesmen who have served some district before 2004.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of spokesmen who have served some district before 2004.[/QUESTION]\n[SQL]\n SELECT s.name FROM spokesman s JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id WHERE sd.start_year < '2004' ORDER BY s.name NULLS LAST;"
  },
  {
    "id": 1194,
    "db_id": "district_spokesman",
    "question": {
      "id": 1194,
      "db_id": "district_spokesman",
      "question": "Find the number of spokesmen for each district, and the show district names as well."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of spokesmen for each district, and the show district names as well.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of spokesmen for each district, and the show district names as well.[/QUESTION]\n[SQL]\n SELECT d.name AS district_name, COUNT(s.spokesman_id) AS total_spokesmen FROM district d JOIN spokesman_district s ON d.district_id = s.district_id GROUP BY d.name ORDER BY total_spokesmen DESC NULLS LAST;"
  },
  {
    "id": 1195,
    "db_id": "district_spokesman",
    "question": {
      "id": 1195,
      "db_id": "district_spokesman",
      "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of the districts which have had both spokesman with rank position 1 and 2.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of the districts which have had both spokesman with rank position 1 and 2.[/QUESTION]\n[SQL]\n SELECT d.name FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE s.rank_position IN (1, 2) GROUP BY d.name HAVING COUNT(DISTINCT s.rank_position) = 2;"
  },
  {
    "id": 1196,
    "db_id": "district_spokesman",
    "question": {
      "id": 1196,
      "db_id": "district_spokesman",
      "question": "Find the names of districts which have more than one spokesman."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of districts which have more than one spokesman.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of districts which have more than one spokesman.[/QUESTION]\n[SQL]\n SELECT d.name FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name HAVING COUNT(sd.spokesman_id) > 1;"
  },
  {
    "id": 1197,
    "db_id": "district_spokesman",
    "question": {
      "id": 1197,
      "db_id": "district_spokesman",
      "question": "Find the number of districts which have no spokesmen."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of districts which have no spokesmen.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of districts which have no spokesmen.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT d.district_id) AS num_districts FROM district d LEFT JOIN spokesman_district sd ON d.district_id = sd.district_id WHERE sd.district_id IS NULL;"
  },
  {
    "id": 1198,
    "db_id": "district_spokesman",
    "question": {
      "id": 1198,
      "db_id": "district_spokesman",
      "question": "Find the name of spokesmen who do not speak for any district."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of spokesmen who do not speak for any district.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of spokesmen who do not speak for any district.[/QUESTION]\n[SQL]\n SELECT s.name FROM spokesman s LEFT JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id WHERE sd.spokesman_id IS NULL;"
  },
  {
    "id": 1199,
    "db_id": "district_spokesman",
    "question": {
      "id": 1199,
      "db_id": "district_spokesman",
      "question": "Find the total and average population of the districts which have some spokesman."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the total and average population of the districts which have some spokesman.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the total and average population of the districts which have some spokesman.[/QUESTION]\n[SQL]\n SELECT d.name, SUM(d.population) AS total_population, AVG(d.population) AS average_population FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name ORDER BY total_population DESC NULLS LAST;"
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "question": {
      "id": 1200,
      "db_id": "art_1",
      "question": "What is the title of the sculpture that was created in the most recent year ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the title of the sculpture that was created in the most recent year ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the title of the sculpture that was created in the most recent year ?[/QUESTION]\n[SQL]\n SELECT s.title FROM Sculptures s WHERE s.year = EXTRACT(YEAR FROM CURRENT_DATE) ORDER BY s.title NULLS LAST LIMIT 1;"
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "question": {
      "id": 1201,
      "db_id": "art_1",
      "question": "What is the name of the scuplture that was created most recently ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the scuplture that was created most recently ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the scuplture that was created most recently ?[/QUESTION]\n[SQL]\n SELECT s.title FROM Sculptures s ORDER BY s.year DESC LIMIT 1;"
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "question": {
      "id": 1202,
      "db_id": "art_1",
      "question": "What is the title and location of the oldest painting ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the title and location of the oldest painting ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the title and location of the oldest painting ?[/QUESTION]\n[SQL]\n SELECT p.title, p.location FROM Paintings p ORDER BY p.year ASC LIMIT 1;"
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "question": {
      "id": 1203,
      "db_id": "art_1",
      "question": "What is the name of the oldest painting and where is it located?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the oldest painting and where is it located?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the oldest painting and where is it located?[/QUESTION]\n[SQL]\n SELECT p.title, p.location FROM Paintings p ORDER BY p.year ASC LIMIT 1;"
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "question": {
      "id": 1204,
      "db_id": "art_1",
      "question": "Find the names of all sculptures located in gallery 226."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of all sculptures located in gallery 226.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of all sculptures located in gallery 226.[/QUESTION]\n[SQL]\n SELECT s.title FROM Sculptures s WHERE s.location = 'gallery 226';"
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "question": {
      "id": 1205,
      "db_id": "art_1",
      "question": "What are the names of all sculptures in gallery 226?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all sculptures in gallery 226?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all sculptures in gallery 226?[/QUESTION]\n[SQL]\n SELECT s.title FROM Sculptures s WHERE s.location = 'gallery 226';"
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "question": {
      "id": 1206,
      "db_id": "art_1",
      "question": "List the title and location of all paintings."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the title and location of all paintings.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the title and location of all paintings.[/QUESTION]\n[SQL]\n SELECT p.title, p.location FROM Paintings p;"
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "question": {
      "id": 1207,
      "db_id": "art_1",
      "question": "What are the paintings called and where are they located?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the paintings called and where are they located?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the paintings called and where are they located?[/QUESTION]\n[SQL]\n SELECT p.title, p.location FROM Paintings p;"
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "question": {
      "id": 1208,
      "db_id": "art_1",
      "question": "List the title and location of all sculptures."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the title and location of all sculptures.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the title and location of all sculptures.[/QUESTION]\n[SQL]\n SELECT s.title, s.location FROM Sculptures s;"
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "question": {
      "id": 1209,
      "db_id": "art_1",
      "question": "What are the sculptures called and where are they located?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the sculptures called and where are they located?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the sculptures called and where are they located?[/QUESTION]\n[SQL]\n SELECT s.title, s.location FROM Sculptures s;"
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "question": {
      "id": 1210,
      "db_id": "art_1",
      "question": "What are the medium types of the painting with id = 80"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the medium types of the painting with id = 80[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the medium types of the painting with id = 80[/QUESTION]\n[SQL]\n SELECT p.medium FROM Paintings p WHERE p.paintingID = 80;"
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "question": {
      "id": 1211,
      "db_id": "art_1",
      "question": "What mediums were used for the painting with id 80 ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What mediums were used for the painting with id 80 ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What mediums were used for the painting with id 80 ?[/QUESTION]\n[SQL]\n SELECT p.medium FROM Paintings p WHERE p.paintingID = 80;"
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "question": {
      "id": 1212,
      "db_id": "art_1",
      "question": "Find the first and last names of all artists who were born after 1850."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the first and last names of all artists who were born after 1850.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the first and last names of all artists who were born after 1850.[/QUESTION]\n[SQL]\n SELECT a.fname, a.lname FROM Artists a WHERE a.birthYear > 1850;"
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "question": {
      "id": 1213,
      "db_id": "art_1",
      "question": "What are the full names of artists born after 1850?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the full names of artists born after 1850?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the full names of artists born after 1850?[/QUESTION]\n[SQL]\n SELECT a.\"first name\", a.\"last name\" FROM artists a WHERE a.birthyear > 1850;"
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "question": {
      "id": 1214,
      "db_id": "art_1",
      "question": "Find the names and years of all sculptures that are not located in gallery 226."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names and years of all sculptures that are not located in gallery 226.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names and years of all sculptures that are not located in gallery 226.[/QUESTION]\n[SQL]\n SELECT s.title, s.year FROM Sculptures s WHERE s.location != 'gallery 226';"
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "question": {
      "id": 1215,
      "db_id": "art_1",
      "question": "What are the names and dates created for all sculptures not located in gallery 226?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and dates created for all sculptures not located in gallery 226?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and dates created for all sculptures not located in gallery 226?[/QUESTION]\n[SQL]\n SELECT s.title, TO_CHAR(TO_DATE(s.year::TEXT, 'YYYY'), 'YYYY') AS year_created FROM Sculptures s WHERE s.location NOT ILIKE '%gallery%226%' ORDER BY year_created NULLS LAST;"
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "question": {
      "id": 1216,
      "db_id": "art_1",
      "question": "What are the first and last names of all distinct artists who made sculptures before 1900?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first and last names of all distinct artists who made sculptures before 1900?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first and last names of all distinct artists who made sculptures before 1900?[/QUESTION]\n[SQL]\n SELECT DISTINCT a.\"first name\", a.\"last name\" FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.year < 1900;"
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "question": {
      "id": 1217,
      "db_id": "art_1",
      "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the first and last name of each distinct artists who made a sculpture before 1900?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the first and last name of each distinct artists who made a sculpture before 1900?[/QUESTION]\n[SQL]\n SELECT DISTINCT a.\"first name\", a.\"last name\" FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.year < 1900;"
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "question": {
      "id": 1218,
      "db_id": "art_1",
      "question": "Find the birth years of all distinct artists who made sculptures after 1920?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the birth years of all distinct artists who made sculptures after 1920?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the birth years of all distinct artists who made sculptures after 1920?[/QUESTION]\n[SQL]\n SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920;"
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "question": {
      "id": 1219,
      "db_id": "art_1",
      "question": "What is the birth year of each distinct artists who created sculptures after 1920?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the birth year of each distinct artists who created sculptures after 1920?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the birth year of each distinct artists who created sculptures after 1920?[/QUESTION]\n[SQL]\n SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920;"
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "question": {
      "id": 1220,
      "db_id": "art_1",
      "question": "What are the first and last names of the artist who lived the longest?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first and last names of the artist who lived the longest?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first and last names of the artist who lived the longest?[/QUESTION]\n[SQL]\n SELECT a.\"first name\", a.\"last name\" FROM artists a ORDER BY (a.deathyear - a.birthyear) DESC LIMIT 1;"
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "question": {
      "id": 1221,
      "db_id": "art_1",
      "question": "Give the full name of the artist who lived the longest."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the full name of the artist who lived the longest.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the full name of the artist who lived the longest.[/QUESTION]\n[SQL]\n SELECT a.\"first name\", a.\"last name\" FROM artists a ORDER BY (a.deathyear - a.birthyear) DESC LIMIT 1;"
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "question": {
      "id": 1222,
      "db_id": "art_1",
      "question": "What is the age of the artist who had the shortest life?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the age of the artist who had the shortest life?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the age of the artist who had the shortest life?[/QUESTION]\n[SQL]\n SELECT a.age FROM (SELECT artistID, EXTRACT(YEAR FROM CURRENT_DATE) - MIN(birthYear) AS age FROM artists GROUP BY artistID) AS a ORDER BY age ASC LIMIT 1;"
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "question": {
      "id": 1223,
      "db_id": "art_1",
      "question": "How old is the artist who lived the shortest life?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How old is the artist who lived the shortest life?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How old is the artist who lived the shortest life?[/QUESTION]\n[SQL]\n SELECT a.fname, a.lname, (a.deathYear - a.birthYear) AS age FROM Artists a ORDER BY age ASC LIMIT 1;"
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "question": {
      "id": 1224,
      "db_id": "art_1",
      "question": "What are the first name and age of the artist who had the longest life?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first name and age of the artist who had the longest life?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first name and age of the artist who had the longest life?[/QUESTION]\n[SQL]\n SELECT a.\"fname\", (a.deathyear - a.birthyear) AS age FROM artists a ORDER BY age DESC LIMIT 1;"
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "question": {
      "id": 1225,
      "db_id": "art_1",
      "question": "What is the first name and age of the artist who lived the longest?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the first name and age of the artist who lived the longest?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the first name and age of the artist who lived the longest?[/QUESTION]\n[SQL]\n SELECT a.\"fname\", EXTRACT(YEAR FROM CURRENT_DATE) - a.birthYear AS age FROM Artists a ORDER BY age DESC LIMIT 1;"
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "question": {
      "id": 1226,
      "db_id": "art_1",
      "question": "How many paintings are exhibited at gallery 240?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many paintings are exhibited at gallery 240?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many paintings are exhibited at gallery 240?[/QUESTION]\n[SQL]\n SELECT COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.location = 'gallery 240';"
  },
  {
    "id": 1227,
    "db_id": "art_1",
    "question": {
      "id": 1227,
      "db_id": "art_1",
      "question": "What is the total number of paintings exhibited in gallery 240?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total number of paintings exhibited in gallery 240?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total number of paintings exhibited in gallery 240?[/QUESTION]\n[SQL]\n SELECT COUNT(p.paintingID) AS total_paintings FROM Paintings p WHERE p.location = 'gallery 240';"
  },
  {
    "id": 1228,
    "db_id": "art_1",
    "question": {
      "id": 1228,
      "db_id": "art_1",
      "question": "How many paintings did the artist with the longest life make ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many paintings did the artist with the longest life make ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many paintings did the artist with the longest life make ?[/QUESTION]\n[SQL]\n SELECT COUNT(p.paintingID) AS number_of_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.\"deathYear\" - a.\"birthYear\" = (SELECT MAX(a2.\"deathYear\" - a2.\"birthYear\") FROM Artists a2);"
  },
  {
    "id": 1229,
    "db_id": "art_1",
    "question": {
      "id": 1229,
      "db_id": "art_1",
      "question": "What is the painting count of the artist with the longest life ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the painting count of the artist with the longest life ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the painting count of the artist with the longest life ?[/QUESTION]\n[SQL]\n SELECT a.\"lname\", COUNT(p.paintingID) AS number_of_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.\"lname\" ORDER BY number_of_paintings DESC LIMIT 1;"
  },
  {
    "id": 1230,
    "db_id": "art_1",
    "question": {
      "id": 1230,
      "db_id": "art_1",
      "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me a list of names and years of paintings that were created by the artist whose first name is Mary.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me a list of names and years of paintings that were created by the artist whose first name is Mary.[/QUESTION]\n[SQL]\n SELECT p.title, p.year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.\"fname\" ilike '%Mary%';"
  },
  {
    "id": 1231,
    "db_id": "art_1",
    "question": {
      "id": 1231,
      "db_id": "art_1",
      "question": "What is the name and year of each painting created by the artist whose first name is Mary?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name and year of each painting created by the artist whose first name is Mary?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name and year of each painting created by the artist whose first name is Mary?[/QUESTION]\n[SQL]\n SELECT p.title, p.year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.\"fname\" ilike '%Mary%';"
  },
  {
    "id": 1232,
    "db_id": "art_1",
    "question": {
      "id": 1232,
      "db_id": "art_1",
      "question": "What are the widths of the paintings that were created by the artist who was born before 1850?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the widths of the paintings that were created by the artist who was born before 1850?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the widths of the paintings that were created by the artist who was born before 1850?[/QUESTION]\n[SQL]\n SELECT p.width_mm FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850;"
  },
  {
    "id": 1233,
    "db_id": "art_1",
    "question": {
      "id": 1233,
      "db_id": "art_1",
      "question": "How wide were the paintings by the artist who was born prior to 1850?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How wide were the paintings by the artist who was born prior to 1850?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How wide were the paintings by the artist who was born prior to 1850?[/QUESTION]\n[SQL]\n SELECT AVG(p.width_mm) FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850;"
  },
  {
    "id": 1234,
    "db_id": "art_1",
    "question": {
      "id": 1234,
      "db_id": "art_1",
      "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the location and medium type of paintings that are created by the artist whose first name is Pablo?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the location and medium type of paintings that are created by the artist whose first name is Pablo?[/QUESTION]\n[SQL]\n SELECT p.location, p.medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.\"fname\" ilike '%Pablo%';"
  },
  {
    "id": 1235,
    "db_id": "art_1",
    "question": {
      "id": 1235,
      "db_id": "art_1",
      "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]In what locations and on what mediums are the paintings created by the artist with the first name Pablo?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]In what locations and on what mediums are the paintings created by the artist with the first name Pablo?[/QUESTION]\n[SQL]\n SELECT p.location, p.medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.\"fname\" ilike '%Pablo%';"
  },
  {
    "id": 1236,
    "db_id": "art_1",
    "question": {
      "id": 1236,
      "db_id": "art_1",
      "question": "Find the first and last names of the artists who have both works of paintings and sculptures?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the first and last names of the artists who have both works of paintings and sculptures?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the first and last names of the artists who have both works of paintings and sculptures?[/QUESTION]\n[SQL]\n SELECT a.\"first name\", a.\"last name\" FROM artists a JOIN paintings p ON a.artistid = p.painterid JOIN sculptures s ON a.artistid = s.sculptorid;"
  },
  {
    "id": 1237,
    "db_id": "art_1",
    "question": {
      "id": 1237,
      "db_id": "art_1",
      "question": "Give the full names of artists who have created paintings and sculptures."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the full names of artists who have created paintings and sculptures.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the full names of artists who have created paintings and sculptures.[/QUESTION]\n[SQL]\n SELECT a.\"first name\", a.\"last name\" FROM artists a JOIN paintings p ON a.artistid = p.painterid JOIN sculptures s ON a.artistid = s.sculptorid;"
  },
  {
    "id": 1238,
    "db_id": "art_1",
    "question": {
      "id": 1238,
      "db_id": "art_1",
      "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?[/QUESTION]\n[SQL]\n SELECT DISTINCT a.\"first name\", a.\"last name\" FROM artists a JOIN paintings p1 ON a.artistid = p1.painterid JOIN paintings p2 ON a.artistid = p2.painterid WHERE p1.medium = 'oil' AND p2.medium = 'lithographic';"
  },
  {
    "id": 1239,
    "db_id": "art_1",
    "question": {
      "id": 1239,
      "db_id": "art_1",
      "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first and last names of artists who have painted using both oil and lithographic mediums?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first and last names of artists who have painted using both oil and lithographic mediums?[/QUESTION]\n[SQL]\n SELECT a.\"first name\", a.\"last name\" FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' AND p.mediumon = 'lithography';"
  },
  {
    "id": 1240,
    "db_id": "art_1",
    "question": {
      "id": 1240,
      "db_id": "art_1",
      "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the birth year of the artist who created a painting in 1884 that is on canvas?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the birth year of the artist who created a painting in 1884 that is on canvas?[/QUESTION]\n[SQL]\n SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884 AND p.mediumOn = 'canvas';"
  },
  {
    "id": 1241,
    "db_id": "art_1",
    "question": {
      "id": 1241,
      "db_id": "art_1",
      "question": "In what year was the artist who created a painting in 1884 born?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]In what year was the artist who created a painting in 1884 born?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]In what year was the artist who created a painting in 1884 born?[/QUESTION]\n[SQL]\n SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884;"
  },
  {
    "id": 1242,
    "db_id": "art_1",
    "question": {
      "id": 1242,
      "db_id": "art_1",
      "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the unique first names of the artists who had medium oil paintings located in gallery 241?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the unique first names of the artists who had medium oil paintings located in gallery 241?[/QUESTION]\n[SQL]\n SELECT DISTINCT a.\"fname\" FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'gallery 241';"
  },
  {
    "id": 1243,
    "db_id": "art_1",
    "question": {
      "id": 1243,
      "db_id": "art_1",
      "question": "What are first names of the artists with oil paintings in gallery 241?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are first names of the artists with oil paintings in gallery 241?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are first names of the artists with oil paintings in gallery 241?[/QUESTION]\n[SQL]\n SELECT DISTINCT a.\"fname\" FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'gallery 241';"
  },
  {
    "id": 1244,
    "db_id": "art_1",
    "question": {
      "id": 1244,
      "db_id": "art_1",
      "question": "What are the numbers of works for different medium type?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the numbers of works for different medium type?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the numbers of works for different medium type?[/QUESTION]\n[SQL]\n SELECT p.medium, COUNT(p.paintingID) AS number_of_works FROM Paintings p GROUP BY p.medium ORDER BY number_of_works DESC NULLS LAST;"
  },
  {
    "id": 1245,
    "db_id": "art_1",
    "question": {
      "id": 1245,
      "db_id": "art_1",
      "question": "How many works are there in each medium?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many works are there in each medium?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many works are there in each medium?[/QUESTION]\n[SQL]\n SELECT p.medium, COUNT(p.paintingID) AS number_of_works FROM Paintings p GROUP BY p.medium ORDER BY number_of_works DESC NULLS LAST;"
  },
  {
    "id": 1246,
    "db_id": "art_1",
    "question": {
      "id": 1246,
      "db_id": "art_1",
      "question": "What are the average height of paintings for different medium types?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average height of paintings for different medium types?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average height of paintings for different medium types?[/QUESTION]\n[SQL]\n SELECT p.medium, AVG(p.height_mm) AS average_height FROM Paintings p GROUP BY p.medium ORDER BY average_height DESC NULLS LAST;"
  },
  {
    "id": 1247,
    "db_id": "art_1",
    "question": {
      "id": 1247,
      "db_id": "art_1",
      "question": "What is the average height of paintings for different medium types?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average height of paintings for different medium types?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average height of paintings for different medium types?[/QUESTION]\n[SQL]\n SELECT p.medium, AVG(p.height_mm) AS average_height FROM Paintings p GROUP BY p.medium ORDER BY average_height DESC NULLS LAST;"
  },
  {
    "id": 1248,
    "db_id": "art_1",
    "question": {
      "id": 1248,
      "db_id": "art_1",
      "question": "What are the numbers of paintings created before 1900 in different places?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the numbers of paintings created before 1900 in different places?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the numbers of paintings created before 1900 in different places?[/QUESTION]\n[SQL]\n SELECT p.location, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY p.location ORDER BY number_of_paintings DESC NULLS LAST;"
  },
  {
    "id": 1249,
    "db_id": "art_1",
    "question": {
      "id": 1249,
      "db_id": "art_1",
      "question": "How many paintings were created before 1900 in different locations?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many paintings were created before 1900 in different locations?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many paintings were created before 1900 in different locations?[/QUESTION]\n[SQL]\n SELECT p.location, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY p.location ORDER BY number_of_paintings DESC NULLS LAST;"
  },
  {
    "id": 1250,
    "db_id": "art_1",
    "question": {
      "id": 1250,
      "db_id": "art_1",
      "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of paintings that are created after 1910 and whose medium is oil?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of paintings that are created after 1910 and whose medium is oil?[/QUESTION]\n[SQL]\n SELECT p.title FROM Paintings p WHERE p.year > 1910 AND p.medium = 'oil';"
  },
  {
    "id": 1251,
    "db_id": "art_1",
    "question": {
      "id": 1251,
      "db_id": "art_1",
      "question": "Give the names of all oil paintings created after 1910."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the names of all oil paintings created after 1910.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the names of all oil paintings created after 1910.[/QUESTION]\n[SQL]\n SELECT p.title FROM Paintings p WHERE p.year > 1910 AND p.medium = 'oil';"
  },
  {
    "id": 1252,
    "db_id": "art_1",
    "question": {
      "id": 1252,
      "db_id": "art_1",
      "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.painterID FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 240';"
  },
  {
    "id": 1253,
    "db_id": "art_1",
    "question": {
      "id": 1253,
      "db_id": "art_1",
      "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the unique id of every painter who had a medium oil painting displayed at gallery 240?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the unique id of every painter who had a medium oil painting displayed at gallery 240?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.painterID FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 240';"
  },
  {
    "id": 1254,
    "db_id": "art_1",
    "question": {
      "id": 1254,
      "db_id": "art_1",
      "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the distinct titles of all the paintings that have a longer height than some painting on canvas?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the distinct titles of all the paintings that have a longer height than some painting on canvas?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.title FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2);"
  },
  {
    "id": 1255,
    "db_id": "art_1",
    "question": {
      "id": 1255,
      "db_id": "art_1",
      "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct titles of every painting that has a greater height than some painting on canvas?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct titles of every painting that has a greater height than some painting on canvas?[/QUESTION]\n[SQL]\n SELECT p.title FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2);"
  },
  {
    "id": 1256,
    "db_id": "art_1",
    "question": {
      "id": 1256,
      "db_id": "art_1",
      "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the distinct ids of all paintings that are older than some painting at location gallery 240.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the distinct ids of all paintings that are older than some painting at location gallery 240.[/QUESTION]\n[SQL]\n SELECT DISTINCT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p.year) FROM Paintings WHERE p.location = 'gallery 240');"
  },
  {
    "id": 1257,
    "db_id": "art_1",
    "question": {
      "id": 1257,
      "db_id": "art_1",
      "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct ids of every painting that is older than some painting in gallery 240?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct ids of every painting that is older than some painting in gallery 240?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.paintingID FROM Paintings p JOIN Paintings p2 ON p.year < p2.year AND p2.location = 'gallery 240';"
  },
  {
    "id": 1258,
    "db_id": "art_1",
    "question": {
      "id": 1258,
      "db_id": "art_1",
      "question": "Find the id of the oldest painting."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the id of the oldest painting.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the id of the oldest painting.[/QUESTION]\n[SQL]\n SELECT p.paintingID FROM Paintings p ORDER BY p.year ASC LIMIT 1;"
  },
  {
    "id": 1259,
    "db_id": "art_1",
    "question": {
      "id": 1259,
      "db_id": "art_1",
      "question": "What is the id of the oldest painting?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the id of the oldest painting?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the id of the oldest painting?[/QUESTION]\n[SQL]\n SELECT MIN(p.paintingID) AS min_painting_id FROM Paintings p;"
  },
  {
    "id": 1260,
    "db_id": "art_1",
    "question": {
      "id": 1260,
      "db_id": "art_1",
      "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?[/QUESTION]\n[SQL]\n SELECT a.\"first name\", a.\"last name\" FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.title ilike '%female%'"
  },
  {
    "id": 1261,
    "db_id": "art_1",
    "question": {
      "id": 1261,
      "db_id": "art_1",
      "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the full name of the artist with a sculpture whose title includes the word \"female\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the full name of the artist with a sculpture whose title includes the word \"female\"?[/QUESTION]\n[SQL]\n SELECT a.\"first name\", a.\"last name\" FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.title ilike '%female%'"
  },
  {
    "id": 1262,
    "db_id": "art_1",
    "question": {
      "id": 1262,
      "db_id": "art_1",
      "question": "List the names of all distinct paintings in alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of all distinct paintings in alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of all distinct paintings in alphabetical order.[/QUESTION]\n[SQL]\n SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC;"
  },
  {
    "id": 1263,
    "db_id": "art_1",
    "question": {
      "id": 1263,
      "db_id": "art_1",
      "question": "What is the name of every distinct painting in alphabetical order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of every distinct painting in alphabetical order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of every distinct painting in alphabetical order?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC;"
  },
  {
    "id": 1264,
    "db_id": "art_1",
    "question": {
      "id": 1264,
      "db_id": "art_1",
      "question": "List the names of all distinct paintings ordered by length."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of all distinct paintings ordered by length.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of all distinct paintings ordered by length.[/QUESTION]\n[SQL]\n SELECT p.title FROM Paintings p ORDER BY LENGTH(p.title) DESC NULLS LAST;"
  },
  {
    "id": 1265,
    "db_id": "art_1",
    "question": {
      "id": 1265,
      "db_id": "art_1",
      "question": "List the names of all distinct paintings from shortest to longest in height."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of all distinct paintings from shortest to longest in height.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of all distinct paintings from shortest to longest in height.[/QUESTION]\n[SQL]\n SELECT p.title FROM Paintings p ORDER BY p.height_mm ASC NULLS LAST;"
  },
  {
    "id": 1266,
    "db_id": "art_1",
    "question": {
      "id": 1266,
      "db_id": "art_1",
      "question": "What are the names of both paintings and sculptures created between 1900 and 1950?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of both paintings and sculptures created between 1900 and 1950?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of both paintings and sculptures created between 1900 and 1950?[/QUESTION]\n[SQL]\n SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON p.year = s.year WHERE p.year BETWEEN 1900 AND 1950;"
  },
  {
    "id": 1267,
    "db_id": "art_1",
    "question": {
      "id": 1267,
      "db_id": "art_1",
      "question": "What are the names of  paintings and scupltures created between 1900 and 1950?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of  paintings and scupltures created between 1900 and 1950?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of  paintings and scupltures created between 1900 and 1950?[/QUESTION]\n[SQL]\n SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON p.year = s.year WHERE p.year BETWEEN 1900 AND 1950;"
  },
  {
    "id": 1268,
    "db_id": "art_1",
    "question": {
      "id": 1268,
      "db_id": "art_1",
      "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the titles of paintings and sculpture works made by the artist whose id is 222?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the titles of paintings and sculpture works made by the artist whose id is 222?[/QUESTION]\n[SQL]\n SELECT p.title AS painting_title, s.title AS sculpture_title FROM Artists ar JOIN Paintings p ON ar.artistID = p.painterID JOIN Sculptures s ON ar.artistID = s.sculptorID WHERE ar.artistID = 222;"
  },
  {
    "id": 1269,
    "db_id": "art_1",
    "question": {
      "id": 1269,
      "db_id": "art_1",
      "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of all paintings and sculpture works made by the artist whose id is 222?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of all paintings and sculpture works made by the artist whose id is 222?[/QUESTION]\n[SQL]\n SELECT p.title AS painting_title, s.title AS sculpture_title FROM Artists ar JOIN Paintings p ON ar.artistID = p.painterID JOIN Sculptures s ON ar.artistID = s.sculptorID WHERE ar.artistID = 222;"
  },
  {
    "id": 1270,
    "db_id": "art_1",
    "question": {
      "id": 1270,
      "db_id": "art_1",
      "question": "What is the id of the artist who has the highest number of painting works before 1900?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the id of the artist who has the highest number of painting works before 1900?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the id of the artist who has the highest number of painting works before 1900?[/QUESTION]\n[SQL]\n SELECT a.artistID FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year < 1900 GROUP BY a.artistID ORDER BY COUNT(p.paintingID) DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1271,
    "db_id": "art_1",
    "question": {
      "id": 1271,
      "db_id": "art_1",
      "question": "What is the id of the artist with the most paintings before 1900?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the id of the artist with the most paintings before 1900?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the id of the artist with the most paintings before 1900?[/QUESTION]\n[SQL]\n SELECT a.artistID FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year < 1900 GROUP BY a.artistID ORDER BY COUNT(p.paintingID) DESC LIMIT 1;"
  },
  {
    "id": 1272,
    "db_id": "art_1",
    "question": {
      "id": 1272,
      "db_id": "art_1",
      "question": "What is the first name of the artist who has the highest number of sculptures?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the first name of the artist who has the highest number of sculptures?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the first name of the artist who has the highest number of sculptures?[/QUESTION]\n[SQL]\n SELECT a.\"fname\", COUNT(s.sculptureID) AS num_sculptures FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID GROUP BY a.\"fname\" ORDER BY num_sculptures DESC LIMIT 1;"
  },
  {
    "id": 1273,
    "db_id": "art_1",
    "question": {
      "id": 1273,
      "db_id": "art_1",
      "question": "What is the first name of the sculptor with the greatest number of works?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the first name of the sculptor with the greatest number of works?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the first name of the sculptor with the greatest number of works?[/QUESTION]\n[SQL]\n SELECT a.\"fname\", COUNT(s.sculptureID) AS num_works FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID GROUP BY a.\"fname\" ORDER BY num_works DESC LIMIT 1;"
  },
  {
    "id": 1274,
    "db_id": "art_1",
    "question": {
      "id": 1274,
      "db_id": "art_1",
      "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of paintings whose width is less than 600 or height is larger than 800?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of paintings whose width is less than 600 or height is larger than 800?[/QUESTION]\n[SQL]\n SELECT p.title FROM Paintings p WHERE (p.width_mm < 600 OR p.height_mm > 800);"
  },
  {
    "id": 1275,
    "db_id": "art_1",
    "question": {
      "id": 1275,
      "db_id": "art_1",
      "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of paintings that have a width less than 600 or a height taller taller than 800?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of paintings that have a width less than 600 or a height taller taller than 800?[/QUESTION]\n[SQL]\n SELECT p.title FROM Paintings p WHERE (p.width_mm < 600 OR p.height_mm > 800);"
  },
  {
    "id": 1276,
    "db_id": "art_1",
    "question": {
      "id": 1276,
      "db_id": "art_1",
      "question": "Which locations have paintings created before 1885 or after 1930?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which locations have paintings created before 1885 or after 1930?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which locations have paintings created before 1885 or after 1930?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;"
  },
  {
    "id": 1277,
    "db_id": "art_1",
    "question": {
      "id": 1277,
      "db_id": "art_1",
      "question": "What locations have works painted before 1885 or after 1930?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What locations have works painted before 1885 or after 1930?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What locations have works painted before 1885 or after 1930?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;"
  },
  {
    "id": 1278,
    "db_id": "art_1",
    "question": {
      "id": 1278,
      "db_id": "art_1",
      "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the ids of paintings whose height is bigger than 500 and less than 2000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the ids of paintings whose height is bigger than 500 and less than 2000?[/QUESTION]\n[SQL]\n SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.height_mm < 2000;"
  },
  {
    "id": 1279,
    "db_id": "art_1",
    "question": {
      "id": 1279,
      "db_id": "art_1",
      "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of paintings that are taller than 500 and shorter than 2000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of paintings that are taller than 500 and shorter than 2000?[/QUESTION]\n[SQL]\n SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.width_mm < 2000;"
  },
  {
    "id": 1280,
    "db_id": "art_1",
    "question": {
      "id": 1280,
      "db_id": "art_1",
      "question": "Which locations have paintings in the mediums of on panel and on canvas?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which locations have paintings in the mediums of on panel and on canvas?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which locations have paintings in the mediums of on panel and on canvas?[/QUESTION]\n[SQL]\n SELECT p.location FROM Paintings p WHERE p.medium = 'panel' AND p.mediumOn = 'canvas';"
  },
  {
    "id": 1281,
    "db_id": "art_1",
    "question": {
      "id": 1281,
      "db_id": "art_1",
      "question": "What are the locations that have paintings in the mediums of on panels and on canvas?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the locations that have paintings in the mediums of on panels and on canvas?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the locations that have paintings in the mediums of on panels and on canvas?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.location FROM Paintings p WHERE p.medium = 'panel' OR p.medium = 'canvas';"
  },
  {
    "id": 1282,
    "db_id": "art_1",
    "question": {
      "id": 1282,
      "db_id": "art_1",
      "question": "Find the locations that have paintings created before 1885 and after 1930?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the locations that have paintings created before 1885 and after 1930?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the locations that have paintings created before 1885 and after 1930?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.year > 1930;"
  },
  {
    "id": 1283,
    "db_id": "art_1",
    "question": {
      "id": 1283,
      "db_id": "art_1",
      "question": "What are the locations that have works painted before 1885 and after 1930?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the locations that have works painted before 1885 and after 1930?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the locations that have works painted before 1885 and after 1930?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;"
  },
  {
    "id": 1284,
    "db_id": "art_1",
    "question": {
      "id": 1284,
      "db_id": "art_1",
      "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average height and width of paintings that are oil medium in the place of gallery 241?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average height and width of paintings that are oil medium in the place of gallery 241?[/QUESTION]\n[SQL]\n SELECT AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 241';"
  },
  {
    "id": 1285,
    "db_id": "art_1",
    "question": {
      "id": 1285,
      "db_id": "art_1",
      "question": "What is the average height and width of paintings that are oil medium in gallery 241?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average height and width of paintings that are oil medium in gallery 241?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average height and width of paintings that are oil medium in gallery 241?[/QUESTION]\n[SQL]\n SELECT AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 241';"
  },
  {
    "id": 1286,
    "db_id": "art_1",
    "question": {
      "id": 1286,
      "db_id": "art_1",
      "question": "What are the maximum height and id of paintings painted before 1900?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum height and id of paintings painted before 1900?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum height and id of paintings painted before 1900?[/QUESTION]\n[SQL]\n SELECT MAX(p.height_mm) AS max_height, MAX(p.paintingID) AS max_id FROM Paintings p WHERE p.year < 1900;"
  },
  {
    "id": 1287,
    "db_id": "art_1",
    "question": {
      "id": 1287,
      "db_id": "art_1",
      "question": "What is the height and id of the tallest painting created before 1900?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the height and id of the tallest painting created before 1900?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the height and id of the tallest painting created before 1900?[/QUESTION]\n[SQL]\n SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.year < 1900 ORDER BY p.height_mm DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1288,
    "db_id": "art_1",
    "question": {
      "id": 1288,
      "db_id": "art_1",
      "question": "What are the maximum height and width of paintings for each year?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum height and width of paintings for each year?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum height and width of paintings for each year?[/QUESTION]\n[SQL]\n SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year ORDER BY p.year NULLS LAST;"
  },
  {
    "id": 1289,
    "db_id": "art_1",
    "question": {
      "id": 1289,
      "db_id": "art_1",
      "question": "What are largest height and width dimensions for paintings in each year?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are largest height and width dimensions for paintings in each year?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are largest height and width dimensions for paintings in each year?[/QUESTION]\n[SQL]\n SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year ORDER BY p.year NULLS LAST;"
  },
  {
    "id": 1290,
    "db_id": "art_1",
    "question": {
      "id": 1290,
      "db_id": "art_1",
      "question": "What are the average height and width of paintings grouped by painters and ordered by name?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average height and width of paintings grouped by painters and ordered by name?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average height and width of paintings grouped by painters and ordered by name?[/QUESTION]\n[SQL]\n SELECT AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width, a.\"lname\", a.\"fname\" FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY a.\"lname\", a.\"fname\" ORDER BY a.\"lname\" ASC, a.\"fname\" ASC;"
  },
  {
    "id": 1291,
    "db_id": "art_1",
    "question": {
      "id": 1291,
      "db_id": "art_1",
      "question": "Find the average height and width of paintings grouped by painters and ordered by name"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average height and width of paintings grouped by painters and ordered by name[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average height and width of paintings grouped by painters and ordered by name[/QUESTION]\n[SQL]\n SELECT AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width, a.\"lname\", a.\"fname\" FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY a.\"lname\", a.\"fname\" ORDER BY a.\"lname\" ASC, a.\"fname\" ASC;"
  },
  {
    "id": 1292,
    "db_id": "art_1",
    "question": {
      "id": 1292,
      "db_id": "art_1",
      "question": "Find the first names and number of works of all artists who have at least two paintings?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the first names and number of works of all artists who have at least two paintings?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the first names and number of works of all artists who have at least two paintings?[/QUESTION]\n[SQL]\n WITH artwork AS (SELECT p.painterID FROM Paintings p GROUP BY p.painterID HAVING COUNT(p.paintingID) >= 2) SELECT a.\"first name\", COUNT(aw.painterID) AS num_artworks FROM Artists a JOIN artwork aw ON a.artistID = aw.painterID GROUP BY a.\"first name\";"
  },
  {
    "id": 1293,
    "db_id": "art_1",
    "question": {
      "id": 1293,
      "db_id": "art_1",
      "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first names of all artists who have at least two paintings, and how many works did each create?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first names of all artists who have at least two paintings, and how many works did each create?[/QUESTION]\n[SQL]\n WITH artwork_nums AS (SELECT p.painterID, COUNT(p.paintingID) AS artwork_num FROM Paintings p GROUP BY p.painterID) SELECT a.\"first name\", an.artwork_num FROM Artists a JOIN artwork_nums an ON a.artistID = an.painterID WHERE an.artwork_num >= 2;"
  },
  {
    "id": 1294,
    "db_id": "art_1",
    "question": {
      "id": 1294,
      "db_id": "art_1",
      "question": "Find the death year of all artists who have at most 3 paintings?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the death year of all artists who have at most 3 paintings?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the death year of all artists who have at most 3 paintings?[/QUESTION]\n[SQL]\n SELECT a.deathYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID, a.deathYear HAVING COUNT(p.paintingID) <= 3;"
  },
  {
    "id": 1295,
    "db_id": "art_1",
    "question": {
      "id": 1295,
      "db_id": "art_1",
      "question": "When did each artist who created less than 4 paintings die ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]When did each artist who created less than 4 paintings die ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]When did each artist who created less than 4 paintings die ?[/QUESTION]\n[SQL]\n SELECT a.lname, a.fname, MIN(a.deathYear) AS earliest_year_of_death FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.lname, a.fname HAVING COUNT(p.paintingID) < 4 ORDER BY earliest_year_of_death NULLS LAST;"
  },
  {
    "id": 1296,
    "db_id": "art_1",
    "question": {
      "id": 1296,
      "db_id": "art_1",
      "question": "Find the death year of the artist who made the least number of sculptures?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the death year of the artist who made the least number of sculptures?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the death year of the artist who made the least number of sculptures?[/QUESTION]\n[SQL]\n SELECT a.\"death year\" FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid GROUP BY a.artistid, a.\"death year\" ORDER BY COUNT(s.sculptureid) ASC LIMIT 1;"
  },
  {
    "id": 1297,
    "db_id": "art_1",
    "question": {
      "id": 1297,
      "db_id": "art_1",
      "question": "When did the artist who made the fewest sculptures die?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]When did the artist who made the fewest sculptures die?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]When did the artist who made the fewest sculptures die?[/QUESTION]\n[SQL]\n SELECT a.lname, a.fname, MIN(a.deathYear) AS earliest_death_year FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.lname, a.fname ORDER BY earliest_death_year NULLS LAST LIMIT 1;"
  },
  {
    "id": 1298,
    "db_id": "art_1",
    "question": {
      "id": 1298,
      "db_id": "art_1",
      "question": "What are the id and height of the painting with the longest width in gallery 240?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the id and height of the painting with the longest width in gallery 240?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the id and height of the painting with the longest width in gallery 240?[/QUESTION]\n[SQL]\n SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240');"
  },
  {
    "id": 1299,
    "db_id": "art_1",
    "question": {
      "id": 1299,
      "db_id": "art_1",
      "question": "Tell me the height and id number of the widest painting in gallery 240."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Tell me the height and id number of the widest painting in gallery 240.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Tell me the height and id number of the widest painting in gallery 240.[/QUESTION]\n[SQL]\n SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.width_mm = (SELECT MAX(width_mm) FROM Paintings);"
  },
  {
    "id": 1300,
    "db_id": "art_1",
    "question": {
      "id": 1300,
      "db_id": "art_1",
      "question": "What are the ids of the paintings created before all of the paintings in gallery 240?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of the paintings created before all of the paintings in gallery 240?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of the paintings created before all of the paintings in gallery 240?[/QUESTION]\n[SQL]\n SELECT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p.year) FROM Paintings WHERE gallery = 240);"
  },
  {
    "id": 1301,
    "db_id": "art_1",
    "question": {
      "id": 1301,
      "db_id": "art_1",
      "question": "What is the id of every painting created before the oldest painting in gallery 240?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the id of every painting created before the oldest painting in gallery 240?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the id of every painting created before the oldest painting in gallery 240?[/QUESTION]\n[SQL]\n SELECT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p.year) FROM Paintings WHERE location = 'gallery 240');"
  },
  {
    "id": 1302,
    "db_id": "art_1",
    "question": {
      "id": 1302,
      "db_id": "art_1",
      "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?[/QUESTION]\n[SQL]\n SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.year > 1900);"
  },
  {
    "id": 1303,
    "db_id": "art_1",
    "question": {
      "id": 1303,
      "db_id": "art_1",
      "question": "List the ids of all paintings that are taller than the longest painting created after 1900."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the ids of all paintings that are taller than the longest painting created after 1900.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the ids of all paintings that are taller than the longest painting created after 1900.[/QUESTION]\n[SQL]\n SELECT p.paintingID FROM Paintings p WHERE p.year > 1900 AND p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.year > 1900);"
  },
  {
    "id": 1304,
    "db_id": "art_1",
    "question": {
      "id": 1304,
      "db_id": "art_1",
      "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the top 3 artists who have the biggest number of painting works whose medium is oil?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the top 3 artists who have the biggest number of painting works whose medium is oil?[/QUESTION]\n[SQL]\n SELECT a.\"lname\", a.\"fname\", COUNT(p.paintingID) AS number_of_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.medium = 'oil' GROUP BY a.\"lname\", a.\"fname\" ORDER BY number_of_paintings DESC NULLS LAST LIMIT 3;"
  },
  {
    "id": 1305,
    "db_id": "art_1",
    "question": {
      "id": 1305,
      "db_id": "art_1",
      "question": "Which artists have the most paintings in oil?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which artists have the most paintings in oil?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which artists have the most paintings in oil?[/QUESTION]\n[SQL]\n SELECT a.\"lname\", a.\"fname\", COUNT(p.paintingID) AS number_of_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.medium = 'oil' GROUP BY a.\"lname\", a.\"fname\" ORDER BY number_of_paintings DESC;"
  },
  {
    "id": 1306,
    "db_id": "art_1",
    "question": {
      "id": 1306,
      "db_id": "art_1",
      "question": "List the painting id, location and title of the medium oil paintings ordered by year."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the painting id, location and title of the medium oil paintings ordered by year.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the painting id, location and title of the medium oil paintings ordered by year.[/QUESTION]\n[SQL]\n SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE p.medium = 'oil' ORDER BY p.year NULLS LAST;"
  },
  {
    "id": 1307,
    "db_id": "art_1",
    "question": {
      "id": 1307,
      "db_id": "art_1",
      "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Order all of the oil paintings by date of creation and list their ids, locations, and titles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Order all of the oil paintings by date of creation and list their ids, locations, and titles.[/QUESTION]\n[SQL]\n SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE p.medium = 'oil' ORDER BY p.year ASC;"
  },
  {
    "id": 1308,
    "db_id": "art_1",
    "question": {
      "id": 1308,
      "db_id": "art_1",
      "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the year, location and title of paintings whose height is longer than 1000 ordered by title.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the year, location and title of paintings whose height is longer than 1000 ordered by title.[/QUESTION]\n[SQL]\n SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title NULLS LAST;"
  },
  {
    "id": 1309,
    "db_id": "art_1",
    "question": {
      "id": 1309,
      "db_id": "art_1",
      "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.[/QUESTION]\n[SQL]\n SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.year NULLS LAST, p.location NULLS LAST, p.title NULLS LAST;"
  },
  {
    "id": 1310,
    "db_id": "art_1",
    "question": {
      "id": 1310,
      "db_id": "art_1",
      "question": "Find the first and last name of artists who have painting but no sculpture work."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the first and last name of artists who have painting but no sculpture work.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the first and last name of artists who have painting but no sculpture work.[/QUESTION]\n[SQL]\n SELECT a.\"first name\", a.\"last name\" FROM artists a LEFT JOIN paintings p ON a.artistid = p.painterid AND p.painterid IS NULL LEFT JOIN sculptures s ON a.artistid = s.sculptorid AND s.sculptorid IS NULL WHERE p.painterid IS NOT NULL;"
  },
  {
    "id": 1311,
    "db_id": "art_1",
    "question": {
      "id": 1311,
      "db_id": "art_1",
      "question": "What are the first and last names of the artists who did not sculpt but could paint."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first and last names of the artists who did not sculpt but could paint.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first and last names of the artists who did not sculpt but could paint.[/QUESTION]\n[SQL]\n SELECT a.\"first name\", a.\"last name\" FROM artists a LEFT JOIN Sculptures s ON a.artistid = s.sculptorid LEFT JOIN Paintings p ON a.artistid = p.painterid WHERE s.sculptorid IS NULL AND p.painterid IS NOT NULL;"
  },
  {
    "id": 1312,
    "db_id": "art_1",
    "question": {
      "id": 1312,
      "db_id": "art_1",
      "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the locations that have paintings before 1885 and no work with medium on canvas?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the locations that have paintings before 1885 and no work with medium on canvas?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.mediumOn IS NULL;"
  },
  {
    "id": 1313,
    "db_id": "art_1",
    "question": {
      "id": 1313,
      "db_id": "art_1",
      "question": "Where do you have paintings that were created before 1885 that are not on canvas?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Where do you have paintings that were created before 1885 that are not on canvas?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Where do you have paintings that were created before 1885 that are not on canvas?[/QUESTION]\n[SQL]\n SELECT p.title FROM Paintings p WHERE p.year < 1885 AND p.mediumOn IS NOT NULL;"
  },
  {
    "id": 1314,
    "db_id": "car_road_race",
    "question": {
      "id": 1314,
      "db_id": "car_road_race",
      "question": "How many races are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many races are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many races are there?[/QUESTION]\n[SQL]\n SELECT COUNT(r.Road) AS number_of_races FROM race r;"
  },
  {
    "id": 1315,
    "db_id": "car_road_race",
    "question": {
      "id": 1315,
      "db_id": "car_road_race",
      "question": "Count the number of races."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of races.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of races.[/QUESTION]\n[SQL]\n SELECT COUNT(r.Road) AS total_races FROM race r;"
  },
  {
    "id": 1316,
    "db_id": "car_road_race",
    "question": {
      "id": 1316,
      "db_id": "car_road_race",
      "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the winning drivers and winning teams of races in ascending alphabetical order of winning team.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the winning drivers and winning teams of races in ascending alphabetical order of winning team.[/QUESTION]\n[SQL]\n SELECT d.Driver_name, r.Winning_team FROM driver d JOIN race r ON d.Driver_id = r.Driver_id ORDER BY r.Winning_team ASC;"
  },
  {
    "id": 1317,
    "db_id": "car_road_race",
    "question": {
      "id": 1317,
      "db_id": "car_road_race",
      "question": "What are the winning drivers and teams of races, ordered alphabetically by team?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the winning drivers and teams of races, ordered alphabetically by team?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the winning drivers and teams of races, ordered alphabetically by team?[/QUESTION]\n[SQL]\n SELECT d.Driver_name, r.Winning_team FROM driver d JOIN race r ON d.Driver_id = r.Driver_id ORDER BY r.Winning_team ASC;"
  },
  {
    "id": 1318,
    "db_id": "car_road_race",
    "question": {
      "id": 1318,
      "db_id": "car_road_race",
      "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which winning drivers of races had pole position that is not \"Junior Strous\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which winning drivers of races had pole position that is not \"Junior Strous\"?[/QUESTION]\n[SQL]\n SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position != 'Junior Strous' AND r.Winning_driver = d.Driver_Name;"
  },
  {
    "id": 1319,
    "db_id": "car_road_race",
    "question": {
      "id": 1319,
      "db_id": "car_road_race",
      "question": "Return the winning drivers of races who did not have the pole position of Junior Strous."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the winning drivers of races who did not have the pole position of Junior Strous.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the winning drivers of races who did not have the pole position of Junior Strous.[/QUESTION]\n[SQL]\n SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Winning_driver = d.Driver_Name AND r.Pole_Position != 'Junior Strous' ORDER BY d.Driver_Name NULLS LAST;"
  },
  {
    "id": 1320,
    "db_id": "car_road_race",
    "question": {
      "id": 1320,
      "db_id": "car_road_race",
      "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who are the constructors of drivers sorted by drivers' age in ascending order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who are the constructors of drivers sorted by drivers' age in ascending order?[/QUESTION]\n[SQL]\n SELECT d.constructor FROM driver d ORDER BY d.age ASC;"
  },
  {
    "id": 1321,
    "db_id": "car_road_race",
    "question": {
      "id": 1321,
      "db_id": "car_road_race",
      "question": "Return the different constructors of drivers, ordered by age ascending."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the different constructors of drivers, ordered by age ascending.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the different constructors of drivers, ordered by age ascending.[/QUESTION]\n[SQL]\n SELECT d.constructor FROM driver d ORDER BY d.age ASC;"
  },
  {
    "id": 1322,
    "db_id": "car_road_race",
    "question": {
      "id": 1322,
      "db_id": "car_road_race",
      "question": "What are the distinct entrant types of drivers aged 20 or older?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct entrant types of drivers aged 20 or older?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct entrant types of drivers aged 20 or older?[/QUESTION]\n[SQL]\n SELECT d.entrant FROM driver d WHERE d.age >= 20 ORDER BY d.entrant NULLS LAST;"
  },
  {
    "id": 1323,
    "db_id": "car_road_race",
    "question": {
      "id": 1323,
      "db_id": "car_road_race",
      "question": "Give the different entrant types for drivers at least 20 years old."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the different entrant types for drivers at least 20 years old.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the different entrant types for drivers at least 20 years old.[/QUESTION]\n[SQL]\n SELECT d.entrant FROM driver d WHERE d.age >= 20 ORDER BY d.entrant NULLS LAST;"
  },
  {
    "id": 1324,
    "db_id": "car_road_race",
    "question": {
      "id": 1324,
      "db_id": "car_road_race",
      "question": "What are the maximum and minimum age of driver?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum and minimum age of driver?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum and minimum age of driver?[/QUESTION]\n[SQL]\n SELECT MAX(d.age) AS max_age, MIN(d.age) AS min_age FROM driver d;"
  },
  {
    "id": 1325,
    "db_id": "car_road_race",
    "question": {
      "id": 1325,
      "db_id": "car_road_race",
      "question": "Return the maximum and minimum age across drivers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the maximum and minimum age across drivers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the maximum and minimum age across drivers.[/QUESTION]\n[SQL]\n SELECT MAX(d.age) AS max_age, MIN(d.age) AS min_age FROM driver d;"
  },
  {
    "id": 1326,
    "db_id": "car_road_race",
    "question": {
      "id": 1326,
      "db_id": "car_road_race",
      "question": "How many different engines are used by drivers with age older than 30 or younger than 20?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different engines are used by drivers with age older than 30 or younger than 20?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different engines are used by drivers with age older than 30 or younger than 20?[/QUESTION]\n[SQL]\n SELECT d.engine FROM driver d WHERE d.age > 30 OR d.age < 20 GROUP BY d.engine ORDER BY COUNT(d.engine) DESC NULLS LAST;"
  },
  {
    "id": 1327,
    "db_id": "car_road_race",
    "question": {
      "id": 1327,
      "db_id": "car_road_race",
      "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of different engines used by drivers who had an age either over 30 or under 20.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of different engines used by drivers who had an age either over 30 or under 20.[/QUESTION]\n[SQL]\n SELECT d.engine, COUNT(d.engine) FROM driver d WHERE (d.age > 30 OR d.age < 20) GROUP BY d.engine ORDER BY COUNT(d.engine) DESC NULLS LAST;"
  },
  {
    "id": 1328,
    "db_id": "car_road_race",
    "question": {
      "id": 1328,
      "db_id": "car_road_race",
      "question": "List all names of drivers in descending alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all names of drivers in descending alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all names of drivers in descending alphabetical order.[/QUESTION]\n[SQL]\n SELECT d.driver_name FROM driver d ORDER BY d.driver_name DESC;"
  },
  {
    "id": 1329,
    "db_id": "car_road_race",
    "question": {
      "id": 1329,
      "db_id": "car_road_race",
      "question": "What are the names of drivers, ordered descending alphabetically?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of drivers, ordered descending alphabetically?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of drivers, ordered descending alphabetically?[/QUESTION]\n[SQL]\n SELECT d.driver_name FROM driver d ORDER BY d.driver_name DESC;"
  },
  {
    "id": 1330,
    "db_id": "car_road_race",
    "question": {
      "id": 1330,
      "db_id": "car_road_race",
      "question": "Please show the names of drivers and the names of races they participate in."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the names of drivers and the names of races they participate in.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the names of drivers and the names of races they participate in.[/QUESTION]\n[SQL]\n SELECT d.driver_name, r.race_name FROM driver d JOIN race r ON d.driver_id = r.driver_id;"
  },
  {
    "id": 1331,
    "db_id": "car_road_race",
    "question": {
      "id": 1331,
      "db_id": "car_road_race",
      "question": "What are the names of drivers and the names of the races they took part in?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of drivers and the names of the races they took part in?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of drivers and the names of the races they took part in?[/QUESTION]\n[SQL]\n SELECT d.driver_name, r.race_name FROM driver d JOIN race r ON d.driver_id = r.driver_id;"
  },
  {
    "id": 1332,
    "db_id": "car_road_race",
    "question": {
      "id": 1332,
      "db_id": "car_road_race",
      "question": "Please show the names of drivers and the number of races they participate in."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the names of drivers and the number of races they participate in.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the names of drivers and the number of races they participate in.[/QUESTION]\n[SQL]\n SELECT d.Driver_Name, COUNT(r.Road) AS race_count FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name ORDER BY race_count DESC NULLS LAST;"
  },
  {
    "id": 1333,
    "db_id": "car_road_race",
    "question": {
      "id": 1333,
      "db_id": "car_road_race",
      "question": "How many races did each driver participate in?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many races did each driver participate in?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many races did each driver participate in?[/QUESTION]\n[SQL]\n SELECT d.Driver_Name, COUNT(r.Road) AS race_count FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name ORDER BY race_count DESC NULLS LAST;"
  },
  {
    "id": 1334,
    "db_id": "car_road_race",
    "question": {
      "id": 1334,
      "db_id": "car_road_race",
      "question": "Please show the age of the driver who participated in the most number of races."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the age of the driver who participated in the most number of races.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the age of the driver who participated in the most number of races.[/QUESTION]\n[SQL]\n SELECT d.age FROM driver d JOIN race r ON d.driver_id = r.driver_id GROUP BY d.age ORDER BY COUNT(r.road) DESC LIMIT 1;"
  },
  {
    "id": 1335,
    "db_id": "car_road_race",
    "question": {
      "id": 1335,
      "db_id": "car_road_race",
      "question": "What is the age of the driver who raced in the most races?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the age of the driver who raced in the most races?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the age of the driver who raced in the most races?[/QUESTION]\n[SQL]\n SELECT d.age FROM driver d JOIN (SELECT r.Driver_ID, COUNT(r.Road) AS race_count FROM race r GROUP BY r.Driver_ID ORDER BY race_count DESC LIMIT 1) AS mr ON d.Driver_ID = mr.Driver_ID;"
  },
  {
    "id": 1336,
    "db_id": "car_road_race",
    "question": {
      "id": 1336,
      "db_id": "car_road_race",
      "question": "Please show the names and ages of the drivers who participated in at least two races."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the names and ages of the drivers who participated in at least two races.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the names and ages of the drivers who participated in at least two races.[/QUESTION]\n[SQL]\n SELECT d.Driver_Name, d.Age FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name, d.Age HAVING COUNT(r.Road) >= 2;"
  },
  {
    "id": 1337,
    "db_id": "car_road_race",
    "question": {
      "id": 1337,
      "db_id": "car_road_race",
      "question": "What are the names and ages of drivers who raced in two or more races?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and ages of drivers who raced in two or more races?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and ages of drivers who raced in two or more races?[/QUESTION]\n[SQL]\n SELECT d.Driver_Name, d.Age FROM driver d JOIN race r1 ON d.Driver_ID = r1.Driver_ID JOIN race r2 ON d.Driver_ID = r2.Driver_ID WHERE r1.Road != r2.Road GROUP BY d.Driver_Name, d.Age HAVING COUNT(r1.Road) >= 2;"
  },
  {
    "id": 1338,
    "db_id": "car_road_race",
    "question": {
      "id": 1338,
      "db_id": "car_road_race",
      "question": "Please list the names of races with drivers aged 26 or older participating."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please list the names of races with drivers aged 26 or older participating.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please list the names of races with drivers aged 26 or older participating.[/QUESTION]\n[SQL]\n SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26;"
  },
  {
    "id": 1339,
    "db_id": "car_road_race",
    "question": {
      "id": 1339,
      "db_id": "car_road_race",
      "question": "What are the names of races in which drivers 26 or older took part?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of races in which drivers 26 or older took part?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of races in which drivers 26 or older took part?[/QUESTION]\n[SQL]\n SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26;"
  },
  {
    "id": 1340,
    "db_id": "car_road_race",
    "question": {
      "id": 1340,
      "db_id": "car_road_race",
      "question": "List the names of drivers whose constructor is not \"Bugatti\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of drivers whose constructor is not \"Bugatti\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of drivers whose constructor is not \"Bugatti\".[/QUESTION]\n[SQL]\n SELECT d.Driver_Name FROM driver d WHERE d.Constructor NOT ILIKE '%Bugatti%';"
  },
  {
    "id": 1341,
    "db_id": "car_road_race",
    "question": {
      "id": 1341,
      "db_id": "car_road_race",
      "question": "What are the names od drivers who did not have the constructor Bugatti?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names od drivers who did not have the constructor Bugatti?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names od drivers who did not have the constructor Bugatti?[/QUESTION]\n[SQL]\n SELECT d.Driver_Name FROM driver d WHERE d.Constructor NOT ILIKE '%Bugatti%';"
  },
  {
    "id": 1342,
    "db_id": "car_road_race",
    "question": {
      "id": 1342,
      "db_id": "car_road_race",
      "question": "List different constructors and the number of drivers that use each constructor."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List different constructors and the number of drivers that use each constructor.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List different constructors and the number of drivers that use each constructor.[/QUESTION]\n[SQL]\n SELECT d.constructor, COUNT(d.driver_id) AS total_drivers FROM driver d GROUP BY d.constructor ORDER BY total_drivers DESC NULLS LAST;"
  },
  {
    "id": 1343,
    "db_id": "car_road_race",
    "question": {
      "id": 1343,
      "db_id": "car_road_race",
      "question": "How many drivers use each constructor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many drivers use each constructor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many drivers use each constructor?[/QUESTION]\n[SQL]\n SELECT d.constructor, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.constructor ORDER BY number_of_drivers DESC NULLS LAST;"
  },
  {
    "id": 1344,
    "db_id": "car_road_race",
    "question": {
      "id": 1344,
      "db_id": "car_road_race",
      "question": "List the most common type of engine used by drivers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the most common type of engine used by drivers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the most common type of engine used by drivers.[/QUESTION]\n[SQL]\n SELECT d.engine FROM driver d GROUP BY d.engine ORDER BY COUNT(d.engine) DESC LIMIT 1;"
  },
  {
    "id": 1345,
    "db_id": "car_road_race",
    "question": {
      "id": 1345,
      "db_id": "car_road_race",
      "question": "What is the most common type of engine?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the most common type of engine?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the most common type of engine?[/QUESTION]\n[SQL]\n SELECT d.engine FROM driver d GROUP BY d.engine ORDER BY COUNT(d.engine) DESC LIMIT 1;"
  },
  {
    "id": 1346,
    "db_id": "car_road_race",
    "question": {
      "id": 1346,
      "db_id": "car_road_race",
      "question": "List the types of engines that are used by at least two drivers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the types of engines that are used by at least two drivers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the types of engines that are used by at least two drivers.[/QUESTION]\n[SQL]\n SELECT d.engine FROM driver d GROUP BY d.engine HAVING COUNT(d.driver_id) >= 2;"
  },
  {
    "id": 1347,
    "db_id": "car_road_race",
    "question": {
      "id": 1347,
      "db_id": "car_road_race",
      "question": "What are the engine types that are used by two or more drivers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the engine types that are used by two or more drivers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the engine types that are used by two or more drivers?[/QUESTION]\n[SQL]\n SELECT d.engine FROM driver d GROUP BY d.engine HAVING COUNT(d.driver_id) >= 2;"
  },
  {
    "id": 1348,
    "db_id": "car_road_race",
    "question": {
      "id": 1348,
      "db_id": "car_road_race",
      "question": "List the names of drivers that do not participate in any race."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of drivers that do not participate in any race.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of drivers that do not participate in any race.[/QUESTION]\n[SQL]\n SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r);"
  },
  {
    "id": 1349,
    "db_id": "car_road_race",
    "question": {
      "id": 1349,
      "db_id": "car_road_race",
      "question": "What are names of drivers who did not take part in a race?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are names of drivers who did not take part in a race?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are names of drivers who did not take part in a race?[/QUESTION]\n[SQL]\n SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r);"
  },
  {
    "id": 1350,
    "db_id": "car_road_race",
    "question": {
      "id": 1350,
      "db_id": "car_road_race",
      "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.[/QUESTION]\n[SQL]\n SELECT d.constructor FROM driver d WHERE d.age < 20 AND d.age > 30 GROUP BY d.constructor;"
  },
  {
    "id": 1351,
    "db_id": "car_road_race",
    "question": {
      "id": 1351,
      "db_id": "car_road_race",
      "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?[/QUESTION]\n[SQL]\n SELECT d.constructor FROM driver d WHERE d.age < 20 AND d.age > 30 GROUP BY d.constructor HAVING COUNT(d.driver_id) >= 2;"
  },
  {
    "id": 1352,
    "db_id": "car_road_race",
    "question": {
      "id": 1352,
      "db_id": "car_road_race",
      "question": "Find the teams that won more than once."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the teams that won more than once.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the teams that won more than once.[/QUESTION]\n[SQL]\n SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Road) > 1 ORDER BY COUNT(r.Road) DESC NULLS LAST;"
  },
  {
    "id": 1353,
    "db_id": "car_road_race",
    "question": {
      "id": 1353,
      "db_id": "car_road_race",
      "question": "Which teams won more than 1 race?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which teams won more than 1 race?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which teams won more than 1 race?[/QUESTION]\n[SQL]\n SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Road) > 1;"
  },
  {
    "id": 1354,
    "db_id": "car_road_race",
    "question": {
      "id": 1354,
      "db_id": "car_road_race",
      "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.[/QUESTION]\n[SQL]\n SELECT d.driver_name FROM driver d JOIN race r1 ON d.driver_id = r1.driver_id AND r1.pole_position ilike '%James%Hinchcliffe%' JOIN race r2 ON d.driver_id = r2.driver_id AND r2.pole_position ilike '%Carl%Skerlong%' WHERE d.driver_name NOT IN ('James Hinchcliffe', 'Carl Skerlong');"
  },
  {
    "id": 1355,
    "db_id": "car_road_race",
    "question": {
      "id": 1355,
      "db_id": "car_road_race",
      "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?[/QUESTION]\n[SQL]\n SELECT d.driver_name FROM driver d JOIN race r1 ON d.driver_id = r1.driver_id AND r1.pole_position ilike '%James%Hinchcliffe%' JOIN race r2 ON d.driver_id = r2.driver_id AND r2.pole_position ilike '%Carl%Skerlong%';"
  },
  {
    "id": 1356,
    "db_id": "car_road_race",
    "question": {
      "id": 1356,
      "db_id": "car_road_race",
      "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]find the name of drivers who were never in \"James Hinchcliffe\" pole position before.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]find the name of drivers who were never in \"James Hinchcliffe\" pole position before.[/QUESTION]\n[SQL]\n SELECT d.Driver_Name FROM driver d WHERE d.Driver_Name NOT IN (SELECT r.Pole_Position FROM race r WHERE r.Pole_Position ilike '%James%Hinchcliffe%');"
  },
  {
    "id": 1357,
    "db_id": "car_road_race",
    "question": {
      "id": 1357,
      "db_id": "car_road_race",
      "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of drivers except for those who had the pole position James Hinchcliffe?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of drivers except for those who had the pole position James Hinchcliffe?[/QUESTION]\n[SQL]\n SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position not ilike '%James%Hinchcliffe%' ORDER BY d.Driver_Name NULLS LAST;"
  },
  {
    "id": 1358,
    "db_id": "country_language",
    "question": {
      "id": 1358,
      "db_id": "country_language",
      "question": "How many languages are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many languages are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many languages are there?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT l.id) AS number_of_languages FROM languages l;"
  },
  {
    "id": 1359,
    "db_id": "country_language",
    "question": {
      "id": 1359,
      "db_id": "country_language",
      "question": "Count the number of languages."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of languages.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of languages.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT l.id) AS language_count FROM \"languages\" l;"
  },
  {
    "id": 1360,
    "db_id": "country_language",
    "question": {
      "id": 1360,
      "db_id": "country_language",
      "question": "List the name of languages in ascending alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the name of languages in ascending alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the name of languages in ascending alphabetical order.[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l ORDER BY l.name ASC;"
  },
  {
    "id": 1361,
    "db_id": "country_language",
    "question": {
      "id": 1361,
      "db_id": "country_language",
      "question": "What are the names of languages, in alphabetical order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of languages, in alphabetical order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of languages, in alphabetical order?[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l ORDER BY l.name ASC;"
  },
  {
    "id": 1362,
    "db_id": "country_language",
    "question": {
      "id": 1362,
      "db_id": "country_language",
      "question": "What are the names of languages that contain the word \"ish\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of languages that contain the word \"ish\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of languages that contain the word \"ish\"?[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l WHERE l.name ilike '%ish%' ORDER BY l.name NULLS LAST;"
  },
  {
    "id": 1363,
    "db_id": "country_language",
    "question": {
      "id": 1363,
      "db_id": "country_language",
      "question": "Return the names of langauges that contain the substring \"ish\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names of langauges that contain the substring \"ish\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names of langauges that contain the substring \"ish\".[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l WHERE l.name ilike '%ish%' ORDER BY l.name NULLS LAST;"
  },
  {
    "id": 1364,
    "db_id": "country_language",
    "question": {
      "id": 1364,
      "db_id": "country_language",
      "question": "Show the names of countries in descending order of overall scores."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of countries in descending order of overall scores.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of countries in descending order of overall scores.[/QUESTION]\n[SQL]\n SELECT c.name FROM countries c ORDER BY c.overall_score DESC;"
  },
  {
    "id": 1365,
    "db_id": "country_language",
    "question": {
      "id": 1365,
      "db_id": "country_language",
      "question": "What are the names of the countries, ordered descending by overall score?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the countries, ordered descending by overall score?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the countries, ordered descending by overall score?[/QUESTION]\n[SQL]\n SELECT c.name FROM countries c ORDER BY c.overall_score DESC;"
  },
  {
    "id": 1366,
    "db_id": "country_language",
    "question": {
      "id": 1366,
      "db_id": "country_language",
      "question": "What is the average justice scores among countries?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average justice scores among countries?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average justice scores among countries?[/QUESTION]\n[SQL]\n SELECT AVG(c.justice_score) AS average_justice_score FROM countries c;"
  },
  {
    "id": 1367,
    "db_id": "country_language",
    "question": {
      "id": 1367,
      "db_id": "country_language",
      "question": "Give the average justice scores across all countries."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the average justice scores across all countries.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the average justice scores across all countries.[/QUESTION]\n[SQL]\n SELECT AVG(c.justice_score) AS average_justice_score FROM countries c;"
  },
  {
    "id": 1368,
    "db_id": "country_language",
    "question": {
      "id": 1368,
      "db_id": "country_language",
      "question": "What are the maximum and minimum health scores among countries that are not \"Norway\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum and minimum health scores among countries that are not \"Norway\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum and minimum health scores among countries that are not \"Norway\".[/QUESTION]\n[SQL]\n SELECT MIN(c.health_score) AS min_health_score, MAX(c.health_score) AS max_health_score FROM countries c WHERE c.name != 'Norway';"
  },
  {
    "id": 1369,
    "db_id": "country_language",
    "question": {
      "id": 1369,
      "db_id": "country_language",
      "question": "Return the maximum and minimum health scores across all countries other than Norway."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the maximum and minimum health scores across all countries other than Norway.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the maximum and minimum health scores across all countries other than Norway.[/QUESTION]\n[SQL]\n SELECT MIN(c.health_score) AS min_health_score, MAX(c.health_score) AS max_health_score FROM countries c WHERE c.name != 'Norway';"
  },
  {
    "id": 1370,
    "db_id": "country_language",
    "question": {
      "id": 1370,
      "db_id": "country_language",
      "question": "How many different official languages are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different official languages are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different official languages are there?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT l.id) AS number_of_languages FROM languages l JOIN official_languages ol ON l.id = ol.language_id;"
  },
  {
    "id": 1371,
    "db_id": "country_language",
    "question": {
      "id": 1371,
      "db_id": "country_language",
      "question": "Count the number of different official languages."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of different official languages.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of different official languages.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT l.id) AS number_of_languages FROM languages l JOIN official_languages ol ON l.id = ol.language_id;"
  },
  {
    "id": 1372,
    "db_id": "country_language",
    "question": {
      "id": 1372,
      "db_id": "country_language",
      "question": "List names of countries in descending order of education_score."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List names of countries in descending order of education_score.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List names of countries in descending order of education_score.[/QUESTION]\n[SQL]\n SELECT c.name FROM countries c ORDER BY c.education_score DESC;"
  },
  {
    "id": 1373,
    "db_id": "country_language",
    "question": {
      "id": 1373,
      "db_id": "country_language",
      "question": "What are the names of the countries, ordered descending by education score?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the countries, ordered descending by education score?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the countries, ordered descending by education score?[/QUESTION]\n[SQL]\n SELECT c.name FROM countries c ORDER BY c.education_score DESC;"
  },
  {
    "id": 1374,
    "db_id": "country_language",
    "question": {
      "id": 1374,
      "db_id": "country_language",
      "question": "List the name of the country with the biggest score in politics."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the name of the country with the biggest score in politics.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the name of the country with the biggest score in politics.[/QUESTION]\n[SQL]\n SELECT c.name FROM countries c ORDER BY c.politics_score DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1375,
    "db_id": "country_language",
    "question": {
      "id": 1375,
      "db_id": "country_language",
      "question": "What is the name of the country with the highest politics score?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the country with the highest politics score?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the country with the highest politics score?[/QUESTION]\n[SQL]\n SELECT c.name FROM countries c ORDER BY c.politics_score DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1376,
    "db_id": "country_language",
    "question": {
      "id": 1376,
      "db_id": "country_language",
      "question": "Show the names of countries and their official languages."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of countries and their official languages.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of countries and their official languages.[/QUESTION]\n[SQL]\n WITH country_languages AS (SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id) SELECT cl.country_name, cl.language_name FROM country_languages cl;"
  },
  {
    "id": 1377,
    "db_id": "country_language",
    "question": {
      "id": 1377,
      "db_id": "country_language",
      "question": "What are the names of the countries, as well as the names of their official langauges?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the countries, as well as the names of their official langauges?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the countries, as well as the names of their official langauges?[/QUESTION]\n[SQL]\n WITH country_languages AS (SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id) SELECT cl.country_name, cl.language_name FROM country_languages cl;"
  },
  {
    "id": 1378,
    "db_id": "country_language",
    "question": {
      "id": 1378,
      "db_id": "country_language",
      "question": "Show the official languages and the number of countries speaking each language."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the official languages and the number of countries speaking each language.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the official languages and the number of countries speaking each language.[/QUESTION]\n[SQL]\n SELECT l.name AS language_name, COUNT(DISTINCT o.country_id) AS country_count FROM \"languages\" l JOIN \"official_languages\" o ON l.id = o.language_id GROUP BY l.name ORDER BY country_count DESC NULLS LAST;"
  },
  {
    "id": 1379,
    "db_id": "country_language",
    "question": {
      "id": 1379,
      "db_id": "country_language",
      "question": "What are the names of the different official languages, as well as the number of countries that speak each?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the different official languages, as well as the number of countries that speak each?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the different official languages, as well as the number of countries that speak each?[/QUESTION]\n[SQL]\n SELECT l.name AS language_name, COUNT(DISTINCT o.country_id) AS country_count FROM \"languages\" l JOIN \"official_languages\" o ON l.id = o.language_id GROUP BY l.name ORDER BY country_count DESC NULLS LAST;"
  },
  {
    "id": 1380,
    "db_id": "country_language",
    "question": {
      "id": 1380,
      "db_id": "country_language",
      "question": "Show the official language spoken by the most number of countries."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the official language spoken by the most number of countries.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the official language spoken by the most number of countries.[/QUESTION]\n[SQL]\n SELECT l.name, COUNT(o.country_id) AS country_count FROM \"languages\" l JOIN \"official_languages\" o ON l.id = o.language_id GROUP BY l.name ORDER BY country_count DESC LIMIT 1;"
  },
  {
    "id": 1381,
    "db_id": "country_language",
    "question": {
      "id": 1381,
      "db_id": "country_language",
      "question": "What is the official language that is most common?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the official language that is most common?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the official language that is most common?[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l JOIN (SELECT ol.language_id, COUNT(*) AS frequency FROM official_languages ol GROUP BY ol.language_id ORDER BY frequency DESC LIMIT 1) AS ml ON l.id = ml.language_id;"
  },
  {
    "id": 1382,
    "db_id": "country_language",
    "question": {
      "id": 1382,
      "db_id": "country_language",
      "question": "Show the official languages spoken by at least two countries."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the official languages spoken by at least two countries.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the official languages spoken by at least two countries.[/QUESTION]\n[SQL]\n SELECT l.name FROM \"languages\" l JOIN (SELECT ol.language_id FROM \"official_languages\" ol GROUP BY ol.language_id HAVING COUNT(DISTINCT ol.country_id) >= 2) AS subquery ON l.id = subquery.language_id;"
  },
  {
    "id": 1383,
    "db_id": "country_language",
    "question": {
      "id": 1383,
      "db_id": "country_language",
      "question": "Which official languages are spoken in two or more countries?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which official languages are spoken in two or more countries?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which official languages are spoken in two or more countries?[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l JOIN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2) AS subquery ON l.id = subquery.language_id;"
  },
  {
    "id": 1384,
    "db_id": "country_language",
    "question": {
      "id": 1384,
      "db_id": "country_language",
      "question": "Show the average overall scores of countries whose official language is \"English\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the average overall scores of countries whose official language is \"English\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the average overall scores of countries whose official language is \"English\".[/QUESTION]\n[SQL]\n SELECT AVG(c.overall_score) AS average_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id WHERE l.name = 'English';"
  },
  {
    "id": 1385,
    "db_id": "country_language",
    "question": {
      "id": 1385,
      "db_id": "country_language",
      "question": "What is the average overall score across countries with English as their official language?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average overall score across countries with English as their official language?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average overall score across countries with English as their official language?[/QUESTION]\n[SQL]\n SELECT AVG(c.overall_score) AS average_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IN (SELECT id FROM languages WHERE name ilike '%English%');"
  },
  {
    "id": 1386,
    "db_id": "country_language",
    "question": {
      "id": 1386,
      "db_id": "country_language",
      "question": "Show the three official languages that are most commonly spoken."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the three official languages that are most commonly spoken.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the three official languages that are most commonly spoken.[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l JOIN (SELECT language_id, COUNT(*) AS frequency FROM official_languages GROUP BY language_id ORDER BY frequency DESC LIMIT 3) AS subquery ON l.id = subquery.language_id;"
  },
  {
    "id": 1387,
    "db_id": "country_language",
    "question": {
      "id": 1387,
      "db_id": "country_language",
      "question": "What are the names of the three official languages spoken in the most countries?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the three official languages spoken in the most countries?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the three official languages spoken in the most countries?[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l JOIN (SELECT language_id, COUNT(*) AS country_count FROM official_languages GROUP BY language_id ORDER BY country_count DESC LIMIT 3) AS subquery ON l.id = subquery.language_id;"
  },
  {
    "id": 1388,
    "db_id": "country_language",
    "question": {
      "id": 1388,
      "db_id": "country_language",
      "question": "Show the official languages sorted in descending order by the average overall scores among countries speaking them."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the official languages sorted in descending order by the average overall scores among countries speaking them.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the official languages sorted in descending order by the average overall scores among countries speaking them.[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY c.overall_score DESC;"
  },
  {
    "id": 1389,
    "db_id": "country_language",
    "question": {
      "id": 1389,
      "db_id": "country_language",
      "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?[/QUESTION]\n[SQL]\n SELECT l.name AS language_name, AVG(c.overall_score) AS average_score FROM \"languages\" l JOIN \"official_languages\" o ON l.id = o.language_id JOIN \"countries\" c ON o.country_id = c.id GROUP BY l.name ORDER BY average_score DESC;"
  },
  {
    "id": 1390,
    "db_id": "country_language",
    "question": {
      "id": 1390,
      "db_id": "country_language",
      "question": "Show the name of the country that has the greatest number of official languages."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the name of the country that has the greatest number of official languages.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the name of the country that has the greatest number of official languages.[/QUESTION]\n[SQL]\n SELECT c.name FROM countries c JOIN (SELECT ol.country_id, COUNT(ol.language_id) AS language_count FROM official_languages ol GROUP BY ol.country_id ORDER BY language_count DESC LIMIT 1) AS mc ON c.id = mc.country_id;"
  },
  {
    "id": 1391,
    "db_id": "country_language",
    "question": {
      "id": 1391,
      "db_id": "country_language",
      "question": "Which country has the greatest number of official languages?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which country has the greatest number of official languages?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which country has the greatest number of official languages?[/QUESTION]\n[SQL]\n SELECT c.name FROM countries c JOIN (SELECT language_id, COUNT(*) AS language_count FROM official_languages GROUP BY language_id) lc ON c.id = lc.language_id ORDER BY lc.language_count DESC LIMIT 1;"
  },
  {
    "id": 1392,
    "db_id": "country_language",
    "question": {
      "id": 1392,
      "db_id": "country_language",
      "question": "List the names of languages that are not the official language of any countries."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of languages that are not the official language of any countries.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of languages that are not the official language of any countries.[/QUESTION]\n[SQL]\n SELECT l.name FROM \"languages\" l LEFT JOIN \"official_languages\" o ON l.id = o.language_id WHERE o.language_id IS NULL;"
  },
  {
    "id": 1393,
    "db_id": "country_language",
    "question": {
      "id": 1393,
      "db_id": "country_language",
      "question": "What are the names of languages that are not the official language of any country?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of languages that are not the official language of any country?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of languages that are not the official language of any country?[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l WHERE l.id NOT IN (SELECT o.language_id FROM official_languages o);"
  },
  {
    "id": 1394,
    "db_id": "country_language",
    "question": {
      "id": 1394,
      "db_id": "country_language",
      "question": "List the names of countries that do not have any official language."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of countries that do not have any official language.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of countries that do not have any official language.[/QUESTION]\n[SQL]\n SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT o.country_id FROM official_languages o);"
  },
  {
    "id": 1395,
    "db_id": "country_language",
    "question": {
      "id": 1395,
      "db_id": "country_language",
      "question": "What are the names of countries that do not have an official language?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of countries that do not have an official language?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of countries that do not have an official language?[/QUESTION]\n[SQL]\n SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT o.country_id FROM official_languages o);"
  },
  {
    "id": 1396,
    "db_id": "country_language",
    "question": {
      "id": 1396,
      "db_id": "country_language",
      "question": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE (c.overall_score > 95 AND c.overall_score < 100) OR (c.overall_score < 90 AND c.overall_score >= 0) GROUP BY l.name;"
  },
  {
    "id": 1397,
    "db_id": "country_language",
    "question": {
      "id": 1397,
      "db_id": "country_language",
      "question": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?[/QUESTION]\n[SQL]\n SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95 OR c.overall_score < 90 ORDER BY l.name NULLS LAST;"
  },
  {
    "id": 1398,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1398,
      "db_id": "real_estate_rentals",
      "question": "Which countries and cities are included in addresses?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which countries and cities are included in addresses?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which countries and cities are included in addresses?[/QUESTION]\n[SQL]\n SELECT DISTINCT a.country, a.town_city FROM Addresses a;"
  },
  {
    "id": 1399,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1399,
      "db_id": "real_estate_rentals",
      "question": "What are the countries and cities for each address?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the countries and cities for each address?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the countries and cities for each address?[/QUESTION]\n[SQL]\n SELECT a.country, a.town_city FROM Addresses a;"
  },
  {
    "id": 1400,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1400,
      "db_id": "real_estate_rentals",
      "question": "In which states are each of the the properties located?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]In which states are each of the the properties located?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]In which states are each of the the properties located?[/QUESTION]\n[SQL]\n SELECT p.property_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id;"
  },
  {
    "id": 1401,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1401,
      "db_id": "real_estate_rentals",
      "question": "Give the states or provinces corresponding to each property."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the states or provinces corresponding to each property.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the states or provinces corresponding to each property.[/QUESTION]\n[SQL]\n SELECT p.property_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id;"
  },
  {
    "id": 1402,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1402,
      "db_id": "real_estate_rentals",
      "question": "How is the feature rooftop described?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How is the feature rooftop described?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How is the feature rooftop described?[/QUESTION]\n[SQL]\n SELECT f.feature_description FROM Features f WHERE f.feature_name = 'rooftop';"
  },
  {
    "id": 1403,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1403,
      "db_id": "real_estate_rentals",
      "question": "Return the description of the feature 'rooftop'."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the description of the feature 'rooftop'.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the description of the feature 'rooftop'.[/QUESTION]\n[SQL]\n SELECT f.feature_description FROM Features f WHERE f.feature_name = 'rooftop';"
  },
  {
    "id": 1404,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1404,
      "db_id": "real_estate_rentals",
      "question": "What are the feature name and description of the most commonly seen feature across properties?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the feature name and description of the most commonly seen feature across properties?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the feature name and description of the most commonly seen feature across properties?[/QUESTION]\n[SQL]\n SELECT f.feature_name, f.feature_description FROM Features f JOIN (SELECT pf.feature_id, COUNT(*) AS feature_count FROM Property_Features pf GROUP BY pf.feature_id ORDER BY feature_count DESC LIMIT 1) AS mf ON f.feature_id = mf.feature_id;"
  },
  {
    "id": 1405,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1405,
      "db_id": "real_estate_rentals",
      "question": "Give the feature name and description for the most common feature across all properties."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the feature name and description for the most common feature across all properties.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the feature name and description for the most common feature across all properties.[/QUESTION]\n[SQL]\n SELECT f.feature_name, f.feature_description FROM Features f JOIN Property_Features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_name, f.feature_description ORDER BY COUNT(pf.feature_id) DESC LIMIT 1;"
  },
  {
    "id": 1406,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1406,
      "db_id": "real_estate_rentals",
      "question": "What is the minimum number of rooms in a property?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the minimum number of rooms in a property?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the minimum number of rooms in a property?[/QUESTION]\n[SQL]\n SELECT MIN(p.room_count) AS min_rooms FROM Properties p;"
  },
  {
    "id": 1407,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1407,
      "db_id": "real_estate_rentals",
      "question": "What is the lowest room count across all the properties?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the lowest room count across all the properties?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the lowest room count across all the properties?[/QUESTION]\n[SQL]\n SELECT MIN(p.room_count) AS min_room_count FROM Properties p;"
  },
  {
    "id": 1408,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1408,
      "db_id": "real_estate_rentals",
      "question": "How many properties have 1 parking lot or 1 garage?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many properties have 1 parking lot or 1 garage?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many properties have 1 parking lot or 1 garage?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Properties p WHERE (p.parking_lots = '1' OR p.garage_yn = 'Y')"
  },
  {
    "id": 1409,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1409,
      "db_id": "real_estate_rentals",
      "question": "Count the number of properties that have 1 parking lot or 1 garage."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of properties that have 1 parking lot or 1 garage.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of properties that have 1 parking lot or 1 garage.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Properties p WHERE (p.parking_lots = '1' OR p.garage_yn = 'Y')"
  },
  {
    "id": 1410,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1410,
      "db_id": "real_estate_rentals",
      "question": "For users whose description contain the string 'Mother', which age categories are they in?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For users whose description contain the string 'Mother', which age categories are they in?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For users whose description contain the string 'Mother', which age categories are they in?[/QUESTION]\n[SQL]\n SELECT u.age_category_code FROM Users u WHERE u.other_user_details ilike '%Mother%'"
  },
  {
    "id": 1411,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1411,
      "db_id": "real_estate_rentals",
      "question": "What are the age categories for users whose description contains the string Mother?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the age categories for users whose description contains the string Mother?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the age categories for users whose description contains the string Mother?[/QUESTION]\n[SQL]\n SELECT DISTINCT u.age_category_code FROM Users u WHERE u.other_user_details ilike '%Mother%';"
  },
  {
    "id": 1412,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1412,
      "db_id": "real_estate_rentals",
      "question": "What is the first name of the user who owns the greatest number of properties?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the first name of the user who owns the greatest number of properties?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the first name of the user who owns the greatest number of properties?[/QUESTION]\n[SQL]\n SELECT u.first_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.first_name ORDER BY COUNT(p.property_id) DESC LIMIT 1;"
  },
  {
    "id": 1413,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1413,
      "db_id": "real_estate_rentals",
      "question": "Return the first name of the user who owns the most properties."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the first name of the user who owns the most properties.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the first name of the user who owns the most properties.[/QUESTION]\n[SQL]\n SELECT u.first_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.first_name ORDER BY COUNT(p.property_id) DESC LIMIT 1;"
  },
  {
    "id": 1414,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1414,
      "db_id": "real_estate_rentals",
      "question": "List the average room count of the properties with gardens."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the average room count of the properties with gardens.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the average room count of the properties with gardens.[/QUESTION]\n[SQL]\n SELECT AVG(cast(p.room_count AS FLOAT)) FROM Properties p WHERE p.garage_yn = 'Y';"
  },
  {
    "id": 1415,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1415,
      "db_id": "real_estate_rentals",
      "question": "On average, how many rooms do properties with garden features have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]On average, how many rooms do properties with garden features have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]On average, how many rooms do properties with garden features have?[/QUESTION]\n[SQL]\n SELECT AVG(CAST(p.room_count AS FLOAT)) FROM Properties p JOIN Property_Features f ON p.property_id = f.property_id WHERE f.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'garden');"
  },
  {
    "id": 1416,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1416,
      "db_id": "real_estate_rentals",
      "question": "In which cities are there any properties equipped with a swimming pool?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]In which cities are there any properties equipped with a swimming pool?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]In which cities are there any properties equipped with a swimming pool?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.property_address_id AS address_id, a.town_city FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id WHERE EXISTS (SELECT 1 FROM Property_Features f WHERE f.property_id = p.property_id AND f.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool'));"
  },
  {
    "id": 1417,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1417,
      "db_id": "real_estate_rentals",
      "question": "Return the cities in which there exist properties that have swimming pools."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the cities in which there exist properties that have swimming pools.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the cities in which there exist properties that have swimming pools.[/QUESTION]\n[SQL]\n SELECT DISTINCT a.town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features f ON p.property_id = f.property_id WHERE f.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool')"
  },
  {
    "id": 1418,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1418,
      "db_id": "real_estate_rentals",
      "question": "Which property had the lowest price requested by the vendor? List the id and the price."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which property had the lowest price requested by the vendor? List the id and the price.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which property had the lowest price requested by the vendor? List the id and the price.[/QUESTION]\n[SQL]\n SELECT p.property_id, p.vendor_requested_price FROM Properties p ORDER BY p.vendor_requested_price ASC LIMIT 1;"
  },
  {
    "id": 1419,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1419,
      "db_id": "real_estate_rentals",
      "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the id of the property that had the lowest requested price from the vendor, and what was that price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the id of the property that had the lowest requested price from the vendor, and what was that price?[/QUESTION]\n[SQL]\n SELECT p.property_id, p.vendor_requested_price FROM Properties p ORDER BY p.vendor_requested_price ASC LIMIT 1;"
  },
  {
    "id": 1420,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1420,
      "db_id": "real_estate_rentals",
      "question": "On average, how many rooms does a property have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]On average, how many rooms does a property have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]On average, how many rooms does a property have?[/QUESTION]\n[SQL]\n SELECT AVG(cast(p.room_count AS FLOAT)) FROM Properties p;"
  },
  {
    "id": 1421,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1421,
      "db_id": "real_estate_rentals",
      "question": "What is the average number of rooms in a property?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average number of rooms in a property?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average number of rooms in a property?[/QUESTION]\n[SQL]\n SELECT AVG(cast(p.room_count AS FLOAT)) AS average_rooms FROM Properties p;"
  },
  {
    "id": 1422,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1422,
      "db_id": "real_estate_rentals",
      "question": "How many kinds of room sizes are listed?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many kinds of room sizes are listed?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many kinds of room sizes are listed?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT r.room_size) AS number_of_room_sizes FROM Rooms r;"
  },
  {
    "id": 1423,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1423,
      "db_id": "real_estate_rentals",
      "question": "Return the number of different room sizes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the number of different room sizes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the number of different room sizes.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT r.room_size) AS number_of_different_room_sizes FROM Rooms r;"
  },
  {
    "id": 1424,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1424,
      "db_id": "real_estate_rentals",
      "question": "What are the ids of users who have searched at least twice, and what did they search?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of users who have searched at least twice, and what did they search?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of users who have searched at least twice, and what did they search?[/QUESTION]\n[SQL]\n SELECT u.user_id, s.search_string FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id, s.search_string HAVING COUNT(s.search_seq) >= 2;"
  },
  {
    "id": 1425,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1425,
      "db_id": "real_estate_rentals",
      "question": "Return the ids of users who have performed two or more searches, as well as their search sequence."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the ids of users who have performed two or more searches, as well as their search sequence.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the ids of users who have performed two or more searches, as well as their search sequence.[/QUESTION]\n[SQL]\n SELECT u.user_id, s.search_seq FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id, s.search_seq HAVING COUNT(s.search_id) >= 2 ORDER BY u.user_id, s.search_seq NULLS LAST;"
  },
  {
    "id": 1426,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1426,
      "db_id": "real_estate_rentals",
      "question": "When was the time of the latest search by a user?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]When was the time of the latest search by a user?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]When was the time of the latest search by a user?[/QUESTION]\n[SQL]\n SELECT u.user_id, MAX(us.search_datetime) AS last_search_time FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id;"
  },
  {
    "id": 1427,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1427,
      "db_id": "real_estate_rentals",
      "question": "What was the time of the most recent search?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What was the time of the most recent search?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What was the time of the most recent search?[/QUESTION]\n[SQL]\n SELECT MAX(u.search_datetime) AS latest_search_time FROM User_Searches u;"
  },
  {
    "id": 1428,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1428,
      "db_id": "real_estate_rentals",
      "question": "What are all the user searches time and content? Sort the result descending by content."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the user searches time and content? Sort the result descending by content.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the user searches time and content? Sort the result descending by content.[/QUESTION]\n[SQL]\n SELECT u.user_id, s.search_string, row_number() OVER(PARTITION BY u.user_id ORDER BY s.search_string DESC) AS recent_search_rank FROM Users u JOIN User_Searches s ON u.user_id = s.user_id;"
  },
  {
    "id": 1429,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1429,
      "db_id": "real_estate_rentals",
      "question": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.[/QUESTION]\n[SQL]\n SELECT u.user_id, s.search_string, s.search_datetime FROM Users u JOIN User_Searches s ON u.user_id = s.user_id ORDER BY s.search_string DESC;"
  },
  {
    "id": 1430,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1430,
      "db_id": "real_estate_rentals",
      "question": "What are the zip codes of properties which do not belong to users who own at most 2 properties?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the zip codes of properties which do not belong to users who own at most 2 properties?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the zip codes of properties which do not belong to users who own at most 2 properties?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.zip_postcode FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE (SELECT COUNT(*) FROM Properties pr WHERE pr.owner_user_id = u.user_id) > 2;"
  },
  {
    "id": 1431,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1431,
      "db_id": "real_estate_rentals",
      "question": "Return the zip codes for properties not belonging to users who own two or fewer properties."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the zip codes for properties not belonging to users who own two or fewer properties.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the zip codes for properties not belonging to users who own two or fewer properties.[/QUESTION]\n[SQL]\n SELECT DISTINCT p.zip_postcode FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE (SELECT COUNT(*) FROM Properties pr WHERE pr.owner_user_id = u.user_id) <= 2"
  },
  {
    "id": 1432,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1432,
      "db_id": "real_estate_rentals",
      "question": "What are the users making only one search? List both category and user id."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the users making only one search? List both category and user id.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the users making only one search? List both category and user id.[/QUESTION]\n[SQL]\n SELECT u.user_category_code, u.user_id FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_category_code, u.user_id HAVING COUNT(s.search_seq) = 1;"
  },
  {
    "id": 1433,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1433,
      "db_id": "real_estate_rentals",
      "question": "What are the ids of users who have only made one search, and what are their category codes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of users who have only made one search, and what are their category codes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of users who have only made one search, and what are their category codes?[/QUESTION]\n[SQL]\n SELECT u.user_id, u.age_category_code FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id, u.age_category_code HAVING COUNT(s.search_seq) = 1;"
  },
  {
    "id": 1434,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1434,
      "db_id": "real_estate_rentals",
      "question": "What is the age range category of the user who made the first search?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the age range category of the user who made the first search?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the age range category of the user who made the first search?[/QUESTION]\n[SQL]\n SELECT u.age_category_code FROM Users u JOIN User_Searches s ON u.user_id = s.user_id ORDER BY s.search_seq ASC LIMIT 1;"
  },
  {
    "id": 1435,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1435,
      "db_id": "real_estate_rentals",
      "question": "Return the age category for the user who made the earliest search."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the age category for the user who made the earliest search.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the age category for the user who made the earliest search.[/QUESTION]\n[SQL]\n SELECT u.age_category_code FROM Users u JOIN User_Searches s ON u.user_id = s.user_id ORDER BY s.search_datetime ASC LIMIT 1;"
  },
  {
    "id": 1436,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1436,
      "db_id": "real_estate_rentals",
      "question": "Find the login names of all senior citizen users ordered by their first names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the login names of all senior citizen users ordered by their first names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the login names of all senior citizen users ordered by their first names.[/QUESTION]\n[SQL]\n SELECT u.login_name, u.first_name FROM Users u WHERE u.age_category_code = 'SENIOR' ORDER BY u.first_name ASC;"
  },
  {
    "id": 1437,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1437,
      "db_id": "real_estate_rentals",
      "question": "What are the login names of all senior citizens, sorted by first name?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the login names of all senior citizens, sorted by first name?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the login names of all senior citizens, sorted by first name?[/QUESTION]\n[SQL]\n SELECT u.login_name FROM Users u WHERE u.age_category_code = 'Senior Citizen' ORDER BY u.first_name ASC;"
  },
  {
    "id": 1438,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1438,
      "db_id": "real_estate_rentals",
      "question": "How many searches do buyers make in total?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many searches do buyers make in total?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many searches do buyers make in total?[/QUESTION]\n[SQL]\n SELECT SUM(u.search_count) AS total_searches FROM (SELECT u.user_id, COUNT(*) AS search_count FROM Users u WHERE u.is_buyer = 'Y' GROUP BY u.user_id) AS u;"
  },
  {
    "id": 1439,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1439,
      "db_id": "real_estate_rentals",
      "question": "Count the number of searches made by buyers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of searches made by buyers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of searches made by buyers.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM User_Searches u WHERE u.is_buyer = 'Y';"
  },
  {
    "id": 1440,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1440,
      "db_id": "real_estate_rentals",
      "question": "When did the user with login name ratione register?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]When did the user with login name ratione register?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]When did the user with login name ratione register?[/QUESTION]\n[SQL]\n SELECT u.date_registered FROM Users u WHERE u.login_name = 'ratione';"
  },
  {
    "id": 1441,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1441,
      "db_id": "real_estate_rentals",
      "question": "What was the registration date for the user whose login name is ratione?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What was the registration date for the user whose login name is ratione?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What was the registration date for the user whose login name is ratione?[/QUESTION]\n[SQL]\n SELECT u.date_registered FROM Users u WHERE u.login_name = 'ratione';"
  },
  {
    "id": 1442,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1442,
      "db_id": "real_estate_rentals",
      "question": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.[/QUESTION]\n[SQL]\n SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM Users u WHERE u.is_seller = '1';"
  },
  {
    "id": 1443,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1443,
      "db_id": "real_estate_rentals",
      "question": "What are the first, middle, last, and login names for all users who are sellers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first, middle, last, and login names for all users who are sellers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first, middle, last, and login names for all users who are sellers?[/QUESTION]\n[SQL]\n SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM Users u WHERE u.is_seller = 'Y';"
  },
  {
    "id": 1444,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1444,
      "db_id": "real_estate_rentals",
      "question": "Where do the Senior Citizens live? List building, street, and the city."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Where do the Senior Citizens live? List building, street, and the city.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Where do the Senior Citizens live? List building, street, and the city.[/QUESTION]\n[SQL]\n SELECT u.first_name, u.last_name, a.line_1_number_building, a.line_2_number_street, a.town_city FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE u.age_category_code = 'Senior Citizen';"
  },
  {
    "id": 1445,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1445,
      "db_id": "real_estate_rentals",
      "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the buildings, streets, and cities corresponding to the addresses of senior citizens?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the buildings, streets, and cities corresponding to the addresses of senior citizens?[/QUESTION]\n[SQL]\n SELECT a.line_1_number_building, a.line_2_number_street, a.line_3_area_locality FROM Addresses a JOIN Users u ON a.address_id = u.user_address_id WHERE u.age_category_code = 'Senior Citizen';"
  },
  {
    "id": 1446,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1446,
      "db_id": "real_estate_rentals",
      "question": "How many properties are there with at least 2 features?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many properties are there with at least 2 features?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many properties are there with at least 2 features?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(pf.feature_id) >= 2;"
  },
  {
    "id": 1447,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1447,
      "db_id": "real_estate_rentals",
      "question": "Count the number of properties with at least two features."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of properties with at least two features.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of properties with at least two features.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(pf.feature_id) >= 2;"
  },
  {
    "id": 1448,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1448,
      "db_id": "real_estate_rentals",
      "question": "How many photos does each property have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many photos does each property have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many photos does each property have?[/QUESTION]\n[SQL]\n SELECT p.property_id, COUNT(pp.photo_id) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id ORDER BY photo_count DESC NULLS LAST;"
  },
  {
    "id": 1449,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1449,
      "db_id": "real_estate_rentals",
      "question": "Count the number of property photos each property has by id."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of property photos each property has by id.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of property photos each property has by id.[/QUESTION]\n[SQL]\n SELECT p.property_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id ORDER BY photo_count DESC NULLS LAST;"
  },
  {
    "id": 1450,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1450,
      "db_id": "real_estate_rentals",
      "question": "How many photos does each owner has of his or her properties? List user id and number of photos."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many photos does each owner has of his or her properties? List user id and number of photos.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many photos does each owner has of his or her properties? List user id and number of photos.[/QUESTION]\n[SQL]\n SELECT u.user_id, COUNT(pp.photo_id) AS total_photos FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY u.user_id ORDER BY total_photos DESC NULLS LAST;"
  },
  {
    "id": 1451,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1451,
      "db_id": "real_estate_rentals",
      "question": "What are the user ids of property owners who have property photos, and how many do each of them have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the user ids of property owners who have property photos, and how many do each of them have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the user ids of property owners who have property photos, and how many do each of them have?[/QUESTION]\n[SQL]\n SELECT p.owner_user_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id ORDER BY photo_count DESC NULLS LAST;"
  },
  {
    "id": 1452,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1452,
      "db_id": "real_estate_rentals",
      "question": "What is the total max price of the properties owned by single mothers or students?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total max price of the properties owned by single mothers or students?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total max price of the properties owned by single mothers or students?[/QUESTION]\n[SQL]\n SELECT SUM(p.price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.age_category_code IN ('S', 'M') AND u.user_category_code IN ('SM', 'SO');"
  },
  {
    "id": 1453,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1453,
      "db_id": "real_estate_rentals",
      "question": "Give the total max price corresponding to any properties owned by single mothers or students."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the total max price corresponding to any properties owned by single mothers or students.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the total max price corresponding to any properties owned by single mothers or students.[/QUESTION]\n[SQL]\n SELECT SUM(p.price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.age_category_code IN ('S', 'M') AND u.user_category_code IN ('U', 'S');"
  },
  {
    "id": 1454,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1454,
      "db_id": "real_estate_rentals",
      "question": "What are the date stamps and property names for each item of property history, ordered by date stamp?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the date stamps and property names for each item of property history, ordered by date stamp?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the date stamps and property names for each item of property history, ordered by date stamp?[/QUESTION]\n[SQL]\n SELECT u.user_id, p.property_name, row_number() OVER(PARTITION BY u.user_id ORDER BY h.datestamp DESC) AS recent_history_rank FROM User_Property_History h JOIN Properties p ON h.property_id = p.property_id JOIN Users u ON h.user_id = u.user_id;"
  },
  {
    "id": 1455,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1455,
      "db_id": "real_estate_rentals",
      "question": "Return the date stamp and property name for each property history event, sorted by date stamp."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the date stamp and property name for each property history event, sorted by date stamp.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the date stamp and property name for each property history event, sorted by date stamp.[/QUESTION]\n[SQL]\n SELECT u.user_id, p.property_name, row_number() OVER(PARTITION BY u.user_id ORDER BY ph.datestamp DESC) AS recent_event_rank FROM User_Property_History ph JOIN Properties p ON ph.property_id = p.property_id JOIN Users u ON ph.user_id = u.user_id;"
  },
  {
    "id": 1456,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1456,
      "db_id": "real_estate_rentals",
      "question": "What is the description of the most common property type? List the description and code."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the description of the most common property type? List the description and code.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the description of the most common property type? List the description and code.[/QUESTION]\n[SQL]\n SELECT r.property_type_description, r.property_type_code FROM Ref_Property_Types r GROUP BY r.property_type_description, r.property_type_code ORDER BY COUNT(*) DESC LIMIT 1;"
  },
  {
    "id": 1457,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1457,
      "db_id": "real_estate_rentals",
      "question": "What is the most common property type, and what is its description."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the most common property type, and what is its description.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the most common property type, and what is its description.[/QUESTION]\n[SQL]\n SELECT r.property_type_code, r.property_type_description FROM Ref_Property_Types r GROUP BY r.property_type_code, r.property_type_description ORDER BY COUNT(*) DESC LIMIT 1;"
  },
  {
    "id": 1458,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1458,
      "db_id": "real_estate_rentals",
      "question": "What is the detailed description of the age category code 'Over 60'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the detailed description of the age category code 'Over 60'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the detailed description of the age category code 'Over 60'?[/QUESTION]\n[SQL]\n SELECT r.age_category_description FROM Ref_Age_Categories r WHERE r.age_category_code = 'Over 60';"
  },
  {
    "id": 1459,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1459,
      "db_id": "real_estate_rentals",
      "question": "Give the category description of the age category 'Over 60'."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the category description of the age category 'Over 60'.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the category description of the age category 'Over 60'.[/QUESTION]\n[SQL]\n SELECT r.age_category_description FROM Ref_Age_Categories r WHERE r.age_category_code = 'Over 60';"
  },
  {
    "id": 1460,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1460,
      "db_id": "real_estate_rentals",
      "question": "What are the different room sizes, and how many of each are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different room sizes, and how many of each are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different room sizes, and how many of each are there?[/QUESTION]\n[SQL]\n SELECT r.room_size, COUNT(*) AS COUNT FROM Rooms r GROUP BY r.room_size ORDER BY COUNT DESC;"
  },
  {
    "id": 1461,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1461,
      "db_id": "real_estate_rentals",
      "question": "Return the number of rooms with each different room size."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the number of rooms with each different room size.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the number of rooms with each different room size.[/QUESTION]\n[SQL]\n SELECT r.room_size, COUNT(*) AS room_count FROM Rooms r GROUP BY r.room_size ORDER BY r.room_size NULLS LAST;"
  },
  {
    "id": 1462,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1462,
      "db_id": "real_estate_rentals",
      "question": "In which country does the user with first name Robbie live?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]In which country does the user with first name Robbie live?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]In which country does the user with first name Robbie live?[/QUESTION]\n[SQL]\n SELECT u.country FROM Users u WHERE u.first_name = 'Robbie';"
  },
  {
    "id": 1463,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1463,
      "db_id": "real_estate_rentals",
      "question": "Return the country in which the user with first name Robbie lives."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the country in which the user with first name Robbie lives.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the country in which the user with first name Robbie lives.[/QUESTION]\n[SQL]\n SELECT u.country FROM Users u WHERE u.first_name ilike '%Robbie%';"
  },
  {
    "id": 1464,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1464,
      "db_id": "real_estate_rentals",
      "question": "What are the first, middle and last names of users who own the property they live in?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the first, middle and last names of users who own the property they live in?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the first, middle and last names of users who own the property they live in?[/QUESTION]\n[SQL]\n SELECT u.first_name, u.middle_name, u.last_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_id = p.owner_user_id;"
  },
  {
    "id": 1465,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1465,
      "db_id": "real_estate_rentals",
      "question": "Return the full names of users who live in properties that they own."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the full names of users who live in properties that they own.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the full names of users who live in properties that they own.[/QUESTION]\n[SQL]\n SELECT u.first_name || ' ' || u.last_name AS user_full_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id;"
  },
  {
    "id": 1466,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1466,
      "db_id": "real_estate_rentals",
      "question": "List the search content of the users who do not own a single property."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the search content of the users who do not own a single property.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the search content of the users who do not own a single property.[/QUESTION]\n[SQL]\n SELECT u.user_id, u.first_name, u.last_name, s.search_string FROM Users AS u LEFT JOIN Properties AS p ON u.user_id = p.owner_user_id LEFT JOIN User_Searches AS s ON u.user_id = s.user_id WHERE p.owner_user_id IS NULL;"
  },
  {
    "id": 1467,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1467,
      "db_id": "real_estate_rentals",
      "question": "What search strings were entered by users who do not own any properties?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What search strings were entered by users who do not own any properties?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What search strings were entered by users who do not own any properties?[/QUESTION]\n[SQL]\n SELECT u.user_id, u.first_name, u.last_name, s.search_string FROM Users AS u LEFT JOIN Properties AS p ON u.user_id = p.owner_user_id LEFT JOIN User_Searches AS s ON u.user_id = s.user_id WHERE p.owner_user_id IS NULL;"
  },
  {
    "id": 1468,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1468,
      "db_id": "real_estate_rentals",
      "question": "List the last names and ids of users who have at least 2 properties and searched at most twice."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the last names and ids of users who have at least 2 properties and searched at most twice.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the last names and ids of users who have at least 2 properties and searched at most twice.[/QUESTION]\n[SQL]\n SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE EXISTS (SELECT 1 FROM User_Property_History h WHERE h.user_id = u.user_id GROUP BY h.user_id HAVING COUNT(h.property_id) >= 2) AND EXISTS (SELECT 1 FROM User_Searches s WHERE s.user_id = u.user_id GROUP BY s.user_id HAVING COUNT(s.search_seq) <= 2);"
  },
  {
    "id": 1469,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1469,
      "db_id": "real_estate_rentals",
      "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the last names and ids of users who have searched two or fewer times, and own two or more properties?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the last names and ids of users who have searched two or fewer times, and own two or more properties?[/QUESTION]\n[SQL]\n SELECT u.user_id, u.last_name FROM Users u JOIN User_Searches s ON u.user_id = s.user_id WHERE s.search_seq <= 2 AND u.user_id IN (SELECT p.owner_user_id FROM Properties p GROUP BY p.owner_user_id HAVING COUNT(p.property_id) >= 2);"
  },
  {
    "id": 1470,
    "db_id": "bike_racing",
    "question": {
      "id": 1470,
      "db_id": "bike_racing",
      "question": "How many bikes are heavier than 780 grams?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many bikes are heavier than 780 grams?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many bikes are heavier than 780 grams?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM bike WHERE weight > 780;"
  },
  {
    "id": 1471,
    "db_id": "bike_racing",
    "question": {
      "id": 1471,
      "db_id": "bike_racing",
      "question": "List the product names and weights of the bikes in ascending order of price."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the product names and weights of the bikes in ascending order of price.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the product names and weights of the bikes in ascending order of price.[/QUESTION]\n[SQL]\n SELECT b.product_name, b.weight FROM bike b ORDER BY b.price ASC;"
  },
  {
    "id": 1472,
    "db_id": "bike_racing",
    "question": {
      "id": 1472,
      "db_id": "bike_racing",
      "question": "List the heat, name, and nation for all the cyclists."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the heat, name, and nation for all the cyclists.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the heat, name, and nation for all the cyclists.[/QUESTION]\n[SQL]\n SELECT c.heat, c.name, c.nation FROM cyclist c ORDER BY c.heat NULLS LAST;"
  },
  {
    "id": 1473,
    "db_id": "bike_racing",
    "question": {
      "id": 1473,
      "db_id": "bike_racing",
      "question": "What are the maximum and minimum weight of all bikes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum and minimum weight of all bikes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum and minimum weight of all bikes?[/QUESTION]\n[SQL]\n SELECT MAX(b.weight) AS max_weight, MIN(b.weight) AS min_weight FROM bike b;"
  },
  {
    "id": 1474,
    "db_id": "bike_racing",
    "question": {
      "id": 1474,
      "db_id": "bike_racing",
      "question": "What is the average price of the bikes made of material 'Carbon CC'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average price of the bikes made of material 'Carbon CC'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average price of the bikes made of material 'Carbon CC'?[/QUESTION]\n[SQL]\n SELECT AVG(b.price) FROM bike b WHERE b.material ilike '%Carbon%CC%';"
  },
  {
    "id": 1475,
    "db_id": "bike_racing",
    "question": {
      "id": 1475,
      "db_id": "bike_racing",
      "question": "What are the name and result of the cyclists not from 'Russia' ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the name and result of the cyclists not from 'Russia' ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the name and result of the cyclists not from 'Russia' ?[/QUESTION]\n[SQL]\n SELECT c.name, c.result FROM cyclist c WHERE c.nation != 'Russian';"
  },
  {
    "id": 1476,
    "db_id": "bike_racing",
    "question": {
      "id": 1476,
      "db_id": "bike_racing",
      "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct ids and product names of the bikes that are purchased after year 2015?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct ids and product names of the bikes that are purchased after year 2015?[/QUESTION]\n[SQL]\n SELECT DISTINCT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes c ON b.id = c.bike_id WHERE c.purchase_year > 2015;"
  },
  {
    "id": 1477,
    "db_id": "bike_racing",
    "question": {
      "id": 1477,
      "db_id": "bike_racing",
      "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids and names of racing bikes that are purchased by at least 4 cyclists?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids and names of racing bikes that are purchased by at least 4 cyclists?[/QUESTION]\n[SQL]\n SELECT b.id AS bike_id, b.product_name FROM bike b JOIN (SELECT c.bike_id FROM cyclists_own_bikes c GROUP BY c.bike_id HAVING COUNT(c.cyclist_id) >= 4) AS subquery ON b.id = subquery.bike_id WHERE b.product_name ilike '%racing%';"
  },
  {
    "id": 1478,
    "db_id": "bike_racing",
    "question": {
      "id": 1478,
      "db_id": "bike_racing",
      "question": "What are the id and name of the cyclist who owns the most bikes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the id and name of the cyclist who owns the most bikes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the id and name of the cyclist who owns the most bikes?[/QUESTION]\n[SQL]\n SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes co ON c.id = co.cyclist_id GROUP BY c.id, c.name ORDER BY COUNT(co.bike_id) DESC LIMIT 1;"
  },
  {
    "id": 1479,
    "db_id": "bike_racing",
    "question": {
      "id": 1479,
      "db_id": "bike_racing",
      "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?[/QUESTION]\n[SQL]\n SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes c ON b.id = c.bike_id JOIN cyclist cy ON c.cyclist_id = cy.id WHERE cy.nation IN ('Russian', 'British')"
  },
  {
    "id": 1480,
    "db_id": "bike_racing",
    "question": {
      "id": 1480,
      "db_id": "bike_racing",
      "question": "How many different levels of heat are there for the cyclists?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different levels of heat are there for the cyclists?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different levels of heat are there for the cyclists?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.heat) FROM cyclist c;"
  },
  {
    "id": 1481,
    "db_id": "bike_racing",
    "question": {
      "id": 1481,
      "db_id": "bike_racing",
      "question": "How many cyclists did not purchase any bike after year 2015?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many cyclists did not purchase any bike after year 2015?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many cyclists did not purchase any bike after year 2015?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.id) FROM cyclist c LEFT JOIN cyclists_own_bikes cb ON c.id = cb.cyclist_id AND cb.purchase_year > 2015 WHERE cb.cyclist_id IS NULL;"
  },
  {
    "id": 1482,
    "db_id": "bike_racing",
    "question": {
      "id": 1482,
      "db_id": "bike_racing",
      "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?[/QUESTION]\n[SQL]\n SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result > 4.21558 AND b.category = 'racing';"
  },
  {
    "id": 1483,
    "db_id": "bike_racing",
    "question": {
      "id": 1483,
      "db_id": "bike_racing",
      "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.[/QUESTION]\n[SQL]\n SELECT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes cob1 ON b.id = cob1.bike_id JOIN cyclists_own_bikes cob2 ON cob1.cyclist_id = cob2.cyclist_id WHERE cob1.cyclist_id IN (SELECT id FROM cyclist WHERE name ilike '%Bradley%Wiggins%') AND cob2.cyclist_id IN (SELECT id FROM cyclist WHERE name ilike '%Antonio%Tauler%');"
  },
  {
    "id": 1484,
    "db_id": "bike_racing",
    "question": {
      "id": 1484,
      "db_id": "bike_racing",
      "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the name, nation and result for the cyclists who did not purchase any racing bike.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the name, nation and result for the cyclists who did not purchase any racing bike.[/QUESTION]\n[SQL]\n SELECT c.name, c.nation, c.result FROM cyclist c LEFT JOIN cyclists_own_bikes co ON c.id = co.cyclist_id AND co.purchase_year IS NOT NULL WHERE co.cyclist_id IS NULL;"
  },
  {
    "id": 1485,
    "db_id": "bike_racing",
    "question": {
      "id": 1485,
      "db_id": "bike_racing",
      "question": "What are the names of the bikes that have substring 'fiber' in their material?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the bikes that have substring 'fiber' in their material?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the bikes that have substring 'fiber' in their material?[/QUESTION]\n[SQL]\n SELECT b.product_name FROM bike b WHERE b.material ilike '%fiber%';"
  },
  {
    "id": 1486,
    "db_id": "bike_racing",
    "question": {
      "id": 1486,
      "db_id": "bike_racing",
      "question": "How many bikes does each cyclist own? Order by cyclist id."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many bikes does each cyclist own? Order by cyclist id.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many bikes does each cyclist own? Order by cyclist id.[/QUESTION]\n[SQL]\n SELECT c.id AS cyclist_id, COUNT(bo.bike_id) AS number_of_bikes FROM cyclist c JOIN cyclists_own_bikes bo ON c.id = bo.cyclist_id GROUP BY c.id ORDER BY c.id NULLS LAST;"
  },
  {
    "id": 1487,
    "db_id": "bakery_1",
    "question": {
      "id": 1487,
      "db_id": "bakery_1",
      "question": "What is the most expensive cake and its flavor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the most expensive cake and its flavor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the most expensive cake and its flavor?[/QUESTION]\n[SQL]\n SELECT g.flavor, g.price FROM goods g ORDER BY g.price DESC LIMIT 1;"
  },
  {
    "id": 1488,
    "db_id": "bakery_1",
    "question": {
      "id": 1488,
      "db_id": "bakery_1",
      "question": "Give the id and flavor of the most expensive cake."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the id and flavor of the most expensive cake.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the id and flavor of the most expensive cake.[/QUESTION]\n[SQL]\n SELECT g.id, g.flavor FROM goods g ORDER BY g.price DESC LIMIT 1;"
  },
  {
    "id": 1489,
    "db_id": "bakery_1",
    "question": {
      "id": 1489,
      "db_id": "bakery_1",
      "question": "What is the cheapest cookie and its flavor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the cheapest cookie and its flavor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the cheapest cookie and its flavor?[/QUESTION]\n[SQL]\n SELECT g.flavor FROM goods g ORDER BY g.price ASC LIMIT 1;"
  },
  {
    "id": 1490,
    "db_id": "bakery_1",
    "question": {
      "id": 1490,
      "db_id": "bakery_1",
      "question": "What is the id and flavor of the cheapest cookie?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the id and flavor of the cheapest cookie?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the id and flavor of the cheapest cookie?[/QUESTION]\n[SQL]\n SELECT g.id, g.flavor FROM goods g ORDER BY g.price ASC LIMIT 1;"
  },
  {
    "id": 1491,
    "db_id": "bakery_1",
    "question": {
      "id": 1491,
      "db_id": "bakery_1",
      "question": "Find the ids of goods that have apple flavor."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the ids of goods that have apple flavor.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the ids of goods that have apple flavor.[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.flavor ilike '%apple%';"
  },
  {
    "id": 1492,
    "db_id": "bakery_1",
    "question": {
      "id": 1492,
      "db_id": "bakery_1",
      "question": "What are the ids with apple flavor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids with apple flavor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids with apple flavor?[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.flavor ilike '%apple%';"
  },
  {
    "id": 1493,
    "db_id": "bakery_1",
    "question": {
      "id": 1493,
      "db_id": "bakery_1",
      "question": "What are the ids of goods that cost less than 3 dollars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of goods that cost less than 3 dollars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of goods that cost less than 3 dollars?[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.price < 3;"
  },
  {
    "id": 1494,
    "db_id": "bakery_1",
    "question": {
      "id": 1494,
      "db_id": "bakery_1",
      "question": "Give the ids of goods that cost less than 3 dollars."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the ids of goods that cost less than 3 dollars.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the ids of goods that cost less than 3 dollars.[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.price < 3;"
  },
  {
    "id": 1495,
    "db_id": "bakery_1",
    "question": {
      "id": 1495,
      "db_id": "bakery_1",
      "question": "List the distinct ids of all customers who bought a cake with lemon flavor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the distinct ids of all customers who bought a cake with lemon flavor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the distinct ids of all customers who bought a cake with lemon flavor?[/QUESTION]\n[SQL]\n SELECT DISTINCT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receipt = i.receipt WHERE i.item = 'lemon';"
  },
  {
    "id": 1496,
    "db_id": "bakery_1",
    "question": {
      "id": 1496,
      "db_id": "bakery_1",
      "question": "What are the distinct ids of customers who bought lemon flavored cake?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct ids of customers who bought lemon flavored cake?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct ids of customers who bought lemon flavored cake?[/QUESTION]\n[SQL]\n SELECT DISTINCT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receipt = i.receipt WHERE i.item = 'lemon';"
  },
  {
    "id": 1497,
    "db_id": "bakery_1",
    "question": {
      "id": 1497,
      "db_id": "bakery_1",
      "question": "For each type of food, tell me how many customers have ever bought it."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each type of food, tell me how many customers have ever bought it.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each type of food, tell me how many customers have ever bought it.[/QUESTION]\n[SQL]\n SELECT g.food, COUNT(DISTINCT c.id) AS number_of_customers FROM goods g JOIN items i ON g.id = i.item JOIN receipts r ON i.receipt = r.receiptnumber JOIN customers c ON r.customerid = c.id GROUP BY g.food ORDER BY number_of_customers DESC NULLS LAST;"
  },
  {
    "id": 1498,
    "db_id": "bakery_1",
    "question": {
      "id": 1498,
      "db_id": "bakery_1",
      "question": "How many customers have bought each food?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many customers have bought each food?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many customers have bought each food?[/QUESTION]\n[SQL]\n SELECT g.food, COUNT(DISTINCT r.customerid) AS number_of_customers FROM goods g JOIN items i ON g.id = i.item JOIN receipts r ON i.receipt = r.receiptnumber GROUP BY g.food ORDER BY number_of_customers DESC NULLS LAST;"
  },
  {
    "id": 1499,
    "db_id": "bakery_1",
    "question": {
      "id": 1499,
      "db_id": "bakery_1",
      "question": "Find the id of customers who shopped at the bakery at least 15 times."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the id of customers who shopped at the bakery at least 15 times.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the id of customers who shopped at the bakery at least 15 times.[/QUESTION]\n[SQL]\n SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customer_id GROUP BY c.id HAVING COUNT(r.receipt_number) >= 15;"
  },
  {
    "id": 1500,
    "db_id": "bakery_1",
    "question": {
      "id": 1500,
      "db_id": "bakery_1",
      "question": "What are the customer ids of customers who have at least 15 receipts?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the customer ids of customers who have at least 15 receipts?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the customer ids of customers who have at least 15 receipts?[/QUESTION]\n[SQL]\n SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customerid GROUP BY c.id HAVING COUNT(r.receiptnumber) >= 15;"
  },
  {
    "id": 1501,
    "db_id": "bakery_1",
    "question": {
      "id": 1501,
      "db_id": "bakery_1",
      "question": "What is the last name of the customers who shopped at the bakery more than 10 times?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the last name of the customers who shopped at the bakery more than 10 times?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the last name of the customers who shopped at the bakery more than 10 times?[/QUESTION]\n[SQL]\n SELECT c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id GROUP BY c.last_name HAVING COUNT(r.receipt_number) > 10;"
  },
  {
    "id": 1502,
    "db_id": "bakery_1",
    "question": {
      "id": 1502,
      "db_id": "bakery_1",
      "question": "Give the last names of customers who have been to the bakery more than 10 times?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the last names of customers who have been to the bakery more than 10 times?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the last names of customers who have been to the bakery more than 10 times?[/QUESTION]\n[SQL]\n SELECT c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id GROUP BY c.last_name HAVING COUNT(r.receipt_number) > 10;"
  },
  {
    "id": 1503,
    "db_id": "bakery_1",
    "question": {
      "id": 1503,
      "db_id": "bakery_1",
      "question": "How many types of Cake does this bakery sell?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many types of Cake does this bakery sell?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many types of Cake does this bakery sell?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT g.Food) AS number_of_cake_types FROM goods g WHERE g.Food ILIKE '%Cake%';"
  },
  {
    "id": 1504,
    "db_id": "bakery_1",
    "question": {
      "id": 1504,
      "db_id": "bakery_1",
      "question": "Count the number of types of cake this bakery sells."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of types of cake this bakery sells.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of types of cake this bakery sells.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT g.Food) AS number_of_cake_types FROM goods g;"
  },
  {
    "id": 1505,
    "db_id": "bakery_1",
    "question": {
      "id": 1505,
      "db_id": "bakery_1",
      "question": "List all the flavors of Croissant available in this bakery."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all the flavors of Croissant available in this bakery.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all the flavors of Croissant available in this bakery.[/QUESTION]\n[SQL]\n SELECT DISTINCT g.flavor FROM goods g WHERE g.food = 'Croissant';"
  },
  {
    "id": 1506,
    "db_id": "bakery_1",
    "question": {
      "id": 1506,
      "db_id": "bakery_1",
      "question": "What are all the flavors of croissant?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the flavors of croissant?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the flavors of croissant?[/QUESTION]\n[SQL]\n SELECT DISTINCT g.flavor FROM goods g WHERE g.food ILIKE '%croissant%' ORDER BY g.flavor NULLS LAST;"
  },
  {
    "id": 1507,
    "db_id": "bakery_1",
    "question": {
      "id": 1507,
      "db_id": "bakery_1",
      "question": "Give me a list of all the distinct items bought by the customer number 15."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me a list of all the distinct items bought by the customer number 15.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me a list of all the distinct items bought by the customer number 15.[/QUESTION]\n[SQL]\n SELECT DISTINCT i.item FROM items i JOIN receipts r ON i.receipt = r.receiptnumber WHERE r.customerid = 15;"
  },
  {
    "id": 1508,
    "db_id": "bakery_1",
    "question": {
      "id": 1508,
      "db_id": "bakery_1",
      "question": "What are all the distinct items bought by customer 15?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the distinct items bought by customer 15?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the distinct items bought by customer 15?[/QUESTION]\n[SQL]\n SELECT DISTINCT i.item FROM items i JOIN receipts r ON i.receipt = r.receiptnumber WHERE r.customerid = 15;"
  },
  {
    "id": 1509,
    "db_id": "bakery_1",
    "question": {
      "id": 1509,
      "db_id": "bakery_1",
      "question": "For each type of food, what are the average, maximum and minimum price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each type of food, what are the average, maximum and minimum price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each type of food, what are the average, maximum and minimum price?[/QUESTION]\n[SQL]\n SELECT g.food, AVG(g.price) AS average_price, MAX(g.price) AS max_price, MIN(g.price) AS min_price FROM goods g GROUP BY g.food;"
  },
  {
    "id": 1510,
    "db_id": "bakery_1",
    "question": {
      "id": 1510,
      "db_id": "bakery_1",
      "question": "What are the average, minimum and maximum prices for each food?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average, minimum and maximum prices for each food?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average, minimum and maximum prices for each food?[/QUESTION]\n[SQL]\n SELECT g.food, AVG(g.price) AS average_price, MIN(g.price) AS minimum_price, MAX(g.price) AS maximum_price FROM goods g GROUP BY g.food;"
  },
  {
    "id": 1511,
    "db_id": "bakery_1",
    "question": {
      "id": 1511,
      "db_id": "bakery_1",
      "question": "Find the receipt numbers where both Cake and Cookie were bought."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the receipt numbers where both Cake and Cookie were bought.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the receipt numbers where both Cake and Cookie were bought.[/QUESTION]\n[SQL]\n SELECT DISTINCT r.ReceiptNumber FROM items i1 JOIN items i2 ON i1.Receipt = i2.Receipt AND i1.Ordinal + 1 = i2.Ordinal JOIN goods g1 ON i1.Item = g1.Id JOIN goods g2 ON i2.Item = g2.Id JOIN receipts r ON i1.Receipt = r.ReceiptNumber WHERE g1.Food = 'Cake' AND g2.Food = 'Cookie';"
  },
  {
    "id": 1512,
    "db_id": "bakery_1",
    "question": {
      "id": 1512,
      "db_id": "bakery_1",
      "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the receipt numbers for instances where both cakes and cookies were purchased?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the receipt numbers for instances where both cakes and cookies were purchased?[/QUESTION]\n[SQL]\n SELECT DISTINCT r.ReceiptNumber FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE i.Item ilike '%cake%' AND i.Item ilike '%cookie%';"
  },
  {
    "id": 1513,
    "db_id": "bakery_1",
    "question": {
      "id": 1513,
      "db_id": "bakery_1",
      "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.[/QUESTION]\n[SQL]\n SELECT r.ReceiptNumber FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName ilike '%LOGAN%' AND g.Food ilike '%Croissant%';"
  },
  {
    "id": 1514,
    "db_id": "bakery_1",
    "question": {
      "id": 1514,
      "db_id": "bakery_1",
      "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the receipt numbers for a customer with the last name Logan who purchased a croissant?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the receipt numbers for a customer with the last name Logan who purchased a croissant?[/QUESTION]\n[SQL]\n SELECT r.ReceiptNumber FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName ilike '%Logan%' AND g.Food ilike '%croissant%';"
  },
  {
    "id": 1515,
    "db_id": "bakery_1",
    "question": {
      "id": 1515,
      "db_id": "bakery_1",
      "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the receipt number and date of the receipt in which the most expensive item was bought?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the receipt number and date of the receipt in which the most expensive item was bought?[/QUESTION]\n[SQL]\n SELECT r.ReceiptNumber, r.Date, g.Flavor, g.Food, g.Price FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1;"
  },
  {
    "id": 1516,
    "db_id": "bakery_1",
    "question": {
      "id": 1516,
      "db_id": "bakery_1",
      "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?[/QUESTION]\n[SQL]\n SELECT r.ReceiptNumber, r.Date, g.Flavor, g.Food, g.Price FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1;"
  },
  {
    "id": 1517,
    "db_id": "bakery_1",
    "question": {
      "id": 1517,
      "db_id": "bakery_1",
      "question": "What is the item that was bought the least number of times?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the item that was bought the least number of times?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the item that was bought the least number of times?[/QUESTION]\n[SQL]\n SELECT i.item FROM items i GROUP BY i.item ORDER BY COUNT(i.item) ASC LIMIT 1;"
  },
  {
    "id": 1518,
    "db_id": "bakery_1",
    "question": {
      "id": 1518,
      "db_id": "bakery_1",
      "question": "Which item was bought the fewest times?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which item was bought the fewest times?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which item was bought the fewest times?[/QUESTION]\n[SQL]\n SELECT i.item FROM items i GROUP BY i.item ORDER BY COUNT(i.item) ASC LIMIT 1;"
  },
  {
    "id": 1519,
    "db_id": "bakery_1",
    "question": {
      "id": 1519,
      "db_id": "bakery_1",
      "question": "How many goods are available for each food type?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many goods are available for each food type?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many goods are available for each food type?[/QUESTION]\n[SQL]\n SELECT g.food, COUNT(g.id) AS number_of_goods FROM goods g GROUP BY g.food ORDER BY number_of_goods DESC NULLS LAST;"
  },
  {
    "id": 1520,
    "db_id": "bakery_1",
    "question": {
      "id": 1520,
      "db_id": "bakery_1",
      "question": "Count the number of goods for each food type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of goods for each food type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of goods for each food type.[/QUESTION]\n[SQL]\n SELECT g.food, COUNT(g.id) AS COUNT FROM goods g GROUP BY g.food ORDER BY COUNT DESC NULLS LAST;"
  },
  {
    "id": 1521,
    "db_id": "bakery_1",
    "question": {
      "id": 1521,
      "db_id": "bakery_1",
      "question": "What is the average price for each food type?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average price for each food type?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average price for each food type?[/QUESTION]\n[SQL]\n SELECT g.food, AVG(g.price) AS average_price FROM goods g GROUP BY g.food ORDER BY average_price DESC NULLS LAST;"
  },
  {
    "id": 1522,
    "db_id": "bakery_1",
    "question": {
      "id": 1522,
      "db_id": "bakery_1",
      "question": "Give the average price for each food type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the average price for each food type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the average price for each food type.[/QUESTION]\n[SQL]\n SELECT g.food, AVG(g.price) AS average_price FROM goods g GROUP BY g.food ORDER BY average_price DESC NULLS LAST;"
  },
  {
    "id": 1523,
    "db_id": "bakery_1",
    "question": {
      "id": 1523,
      "db_id": "bakery_1",
      "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.flavor ilike '%Apricot%' AND g.price < 5;"
  },
  {
    "id": 1524,
    "db_id": "bakery_1",
    "question": {
      "id": 1524,
      "db_id": "bakery_1",
      "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.flavor ilike '%Apricot%' AND g.price < 5;"
  },
  {
    "id": 1525,
    "db_id": "bakery_1",
    "question": {
      "id": 1525,
      "db_id": "bakery_1",
      "question": "Find flavor of cakes that cost more than 10 dollars."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find flavor of cakes that cost more than 10 dollars.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find flavor of cakes that cost more than 10 dollars.[/QUESTION]\n[SQL]\n SELECT g.flavor FROM goods g WHERE g.price > 10;"
  },
  {
    "id": 1526,
    "db_id": "bakery_1",
    "question": {
      "id": 1526,
      "db_id": "bakery_1",
      "question": "What are the flavors of cakes that cost more than 10 dollars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the flavors of cakes that cost more than 10 dollars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the flavors of cakes that cost more than 10 dollars?[/QUESTION]\n[SQL]\n SELECT g.flavor FROM goods g WHERE g.price > 10;"
  },
  {
    "id": 1527,
    "db_id": "bakery_1",
    "question": {
      "id": 1527,
      "db_id": "bakery_1",
      "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me the distinct id and price for all goods whose price is below the average of all goods?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me the distinct id and price for all goods whose price is below the average of all goods?[/QUESTION]\n[SQL]\n SELECT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(g2.price) FROM goods g2);"
  },
  {
    "id": 1528,
    "db_id": "bakery_1",
    "question": {
      "id": 1528,
      "db_id": "bakery_1",
      "question": "What are the distinct ids and prices for goods that cost less than the average good?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct ids and prices for goods that cost less than the average good?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct ids and prices for goods that cost less than the average good?[/QUESTION]\n[SQL]\n SELECT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(g2.price) FROM goods g2);"
  },
  {
    "id": 1529,
    "db_id": "bakery_1",
    "question": {
      "id": 1529,
      "db_id": "bakery_1",
      "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct ids of all goods that are cheaper than some goods of type Tart?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct ids of all goods that are cheaper than some goods of type Tart?[/QUESTION]\n[SQL]\n SELECT DISTINCT g.id FROM goods g WHERE g.price < (SELECT MIN(g2.price) FROM goods g2 WHERE g2.flavor = 'Tart');"
  },
  {
    "id": 1530,
    "db_id": "bakery_1",
    "question": {
      "id": 1530,
      "db_id": "bakery_1",
      "question": "Give the distinct ids for goods that cost less than any Tart."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the distinct ids for goods that cost less than any Tart.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the distinct ids for goods that cost less than any Tart.[/QUESTION]\n[SQL]\n SELECT DISTINCT g.id FROM goods g WHERE g.price < (SELECT MIN(g2.price) FROM goods g2 WHERE g2.flavor ILIKE '%Tart%');"
  },
  {
    "id": 1531,
    "db_id": "bakery_1",
    "question": {
      "id": 1531,
      "db_id": "bakery_1",
      "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.[/QUESTION]\n[SQL]\n SELECT DISTINCT r.ReceiptNumber FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber JOIN goods g ON i.Item = g.Id WHERE g.Price > 13;"
  },
  {
    "id": 1532,
    "db_id": "bakery_1",
    "question": {
      "id": 1532,
      "db_id": "bakery_1",
      "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?[/QUESTION]\n[SQL]\n SELECT DISTINCT r.ReceiptNumber FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber JOIN goods g ON i.Item = g.Id WHERE g.Price > 13;"
  },
  {
    "id": 1533,
    "db_id": "bakery_1",
    "question": {
      "id": 1533,
      "db_id": "bakery_1",
      "question": "On which date did some customer buy a good that costs more than 15 dollars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]On which date did some customer buy a good that costs more than 15 dollars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]On which date did some customer buy a good that costs more than 15 dollars?[/QUESTION]\n[SQL]\n SELECT r.Date FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15;"
  },
  {
    "id": 1534,
    "db_id": "bakery_1",
    "question": {
      "id": 1534,
      "db_id": "bakery_1",
      "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which date corresponds to when a customer purchased a good costing over 15 dollars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which date corresponds to when a customer purchased a good costing over 15 dollars?[/QUESTION]\n[SQL]\n SELECT r.date FROM receipts r JOIN items i ON r.receiptnumber = i.receipt WHERE i.item::real > 15;"
  },
  {
    "id": 1535,
    "db_id": "bakery_1",
    "question": {
      "id": 1535,
      "db_id": "bakery_1",
      "question": "Give me the list of ids of all goods whose id has \"APP\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me the list of ids of all goods whose id has \"APP\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me the list of ids of all goods whose id has \"APP\".[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.id ilike '%APP%';"
  },
  {
    "id": 1536,
    "db_id": "bakery_1",
    "question": {
      "id": 1536,
      "db_id": "bakery_1",
      "question": "What are all the ids of goods with an id which contains \"APP\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the ids of goods with an id which contains \"APP\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the ids of goods with an id which contains \"APP\"?[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.id ilike '%APP%';"
  },
  {
    "id": 1537,
    "db_id": "bakery_1",
    "question": {
      "id": 1537,
      "db_id": "bakery_1",
      "question": "Which good has \"70\" in its id? And what is its price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which good has \"70\" in its id? And what is its price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which good has \"70\" in its id? And what is its price?[/QUESTION]\n[SQL]\n SELECT g.price FROM goods g WHERE g.id ilike '%70%';"
  },
  {
    "id": 1538,
    "db_id": "bakery_1",
    "question": {
      "id": 1538,
      "db_id": "bakery_1",
      "question": "What are the id and price for the good with \"70\" in its id?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the id and price for the good with \"70\" in its id?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the id and price for the good with \"70\" in its id?[/QUESTION]\n[SQL]\n SELECT g.id, g.price FROM goods g WHERE g.id ilike '%70%';"
  },
  {
    "id": 1539,
    "db_id": "bakery_1",
    "question": {
      "id": 1539,
      "db_id": "bakery_1",
      "question": "List the last names of all customers in an alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the last names of all customers in an alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the last names of all customers in an alphabetical order.[/QUESTION]\n[SQL]\n SELECT c.last_name FROM customers c ORDER BY c.last_name ASC;"
  },
  {
    "id": 1540,
    "db_id": "bakery_1",
    "question": {
      "id": 1540,
      "db_id": "bakery_1",
      "question": "What are the last names of the customers in alphabetical order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the last names of the customers in alphabetical order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the last names of the customers in alphabetical order?[/QUESTION]\n[SQL]\n SELECT c.last_name FROM customers c ORDER BY c.last_name ASC;"
  },
  {
    "id": 1541,
    "db_id": "bakery_1",
    "question": {
      "id": 1541,
      "db_id": "bakery_1",
      "question": "Return the ordered list of all good ids."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the ordered list of all good ids.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the ordered list of all good ids.[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g ORDER BY g.id NULLS LAST;"
  },
  {
    "id": 1542,
    "db_id": "bakery_1",
    "question": {
      "id": 1542,
      "db_id": "bakery_1",
      "question": "Order the distinct good ids."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Order the distinct good ids.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Order the distinct good ids.[/QUESTION]\n[SQL]\n SELECT DISTINCT g.id FROM goods g ORDER BY g.id NULLS LAST;"
  },
  {
    "id": 1543,
    "db_id": "bakery_1",
    "question": {
      "id": 1543,
      "db_id": "bakery_1",
      "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.[/QUESTION]\n[SQL]\n SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE (g.Flavor ilike '%apple%' AND g.Food ilike '%pie%') OR (r.CustomerId = 12);"
  },
  {
    "id": 1544,
    "db_id": "bakery_1",
    "question": {
      "id": 1544,
      "db_id": "bakery_1",
      "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?[/QUESTION]\n[SQL]\n SELECT DISTINCT r.ReceiptNumber FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE i.Item IN (SELECT g.Id FROM goods g WHERE g.Flavor ilike '%apple%pie%') OR r.CustomerId = 12;"
  },
  {
    "id": 1545,
    "db_id": "bakery_1",
    "question": {
      "id": 1545,
      "db_id": "bakery_1",
      "question": "Find all receipts which has the latest date. Also tell me that date."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all receipts which has the latest date. Also tell me that date.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all receipts which has the latest date. Also tell me that date.[/QUESTION]\n[SQL]\n SELECT r.ReceiptNumber, r.Date FROM receipts r ORDER BY r.Date DESC LIMIT 1;"
  },
  {
    "id": 1546,
    "db_id": "bakery_1",
    "question": {
      "id": 1546,
      "db_id": "bakery_1",
      "question": "What is the receipt number with the latest date, and what is that date?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the receipt number with the latest date, and what is that date?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the receipt number with the latest date, and what is that date?[/QUESTION]\n[SQL]\n SELECT r.ReceiptNumber, TO_DATE(r.Date, 'YYYY-MM-DD') AS Date FROM receipts r ORDER BY TO_DATE(r.Date, 'YYYY-MM-DD') DESC LIMIT 1;"
  },
  {
    "id": 1547,
    "db_id": "bakery_1",
    "question": {
      "id": 1547,
      "db_id": "bakery_1",
      "question": "Find all receipts which either has the earliest date or has a good with price above 10."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all receipts which either has the earliest date or has a good with price above 10.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all receipts which either has the earliest date or has a good with price above 10.[/QUESTION]\n[SQL]\n SELECT r.ReceiptNumber, r.Date, c.LastName, c.FirstName FROM receipts r JOIN customers c ON r.CustomerId = c.Id WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND (g.Price > 10 OR g.Price IS NULL)) ORDER BY r.Date ASC;"
  },
  {
    "id": 1548,
    "db_id": "bakery_1",
    "question": {
      "id": 1548,
      "db_id": "bakery_1",
      "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the receipt numbers that have a good with a price above 10 or have the earliest date?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the receipt numbers that have a good with a price above 10 or have the earliest date?[/QUESTION]\n[SQL]\n SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 10 OR r.Date = (SELECT MIN(r2.Date) FROM receipts r2) ORDER BY r.ReceiptNumber NULLS LAST;"
  },
  {
    "id": 1549,
    "db_id": "bakery_1",
    "question": {
      "id": 1549,
      "db_id": "bakery_1",
      "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of Cookie and Cake that cost between 3 and 7 dollars.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of Cookie and Cake that cost between 3 and 7 dollars.[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.price BETWEEN 3 AND 7 AND g.food IN ('Cookie', 'Cake');"
  },
  {
    "id": 1550,
    "db_id": "bakery_1",
    "question": {
      "id": 1550,
      "db_id": "bakery_1",
      "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.price BETWEEN 3 AND 7;"
  },
  {
    "id": 1551,
    "db_id": "bakery_1",
    "question": {
      "id": 1551,
      "db_id": "bakery_1",
      "question": "Find the first name and last name of a customer who visited on the earliest date."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the first name and last name of a customer who visited on the earliest date.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the first name and last name of a customer who visited on the earliest date.[/QUESTION]\n[SQL]\n SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id ORDER BY r.date ASC LIMIT 1;"
  },
  {
    "id": 1552,
    "db_id": "bakery_1",
    "question": {
      "id": 1552,
      "db_id": "bakery_1",
      "question": "What is the full name of the customer who visited on the earliest date?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the full name of the customer who visited on the earliest date?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the full name of the customer who visited on the earliest date?[/QUESTION]\n[SQL]\n SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id ORDER BY r.date ASC LIMIT 1;"
  },
  {
    "id": 1553,
    "db_id": "bakery_1",
    "question": {
      "id": 1553,
      "db_id": "bakery_1",
      "question": "What is average price of goods whose flavor is blackberry or blueberry?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is average price of goods whose flavor is blackberry or blueberry?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is average price of goods whose flavor is blackberry or blueberry?[/QUESTION]\n[SQL]\n SELECT AVG(g.price) FROM goods g WHERE g.flavor ilike '%blackberry%' OR g.flavor ilike '%blueberry%';"
  },
  {
    "id": 1554,
    "db_id": "bakery_1",
    "question": {
      "id": 1554,
      "db_id": "bakery_1",
      "question": "What are the average prices of goods with blackberry or blueberry flavor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average prices of goods with blackberry or blueberry flavor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average prices of goods with blackberry or blueberry flavor?[/QUESTION]\n[SQL]\n SELECT AVG(g.price) FROM goods g WHERE g.flavor ilike '%blackberry%' OR g.flavor ilike '%blueberry%';"
  },
  {
    "id": 1555,
    "db_id": "bakery_1",
    "question": {
      "id": 1555,
      "db_id": "bakery_1",
      "question": "Return the cheapest price for goods with cheese flavor."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the cheapest price for goods with cheese flavor.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the cheapest price for goods with cheese flavor.[/QUESTION]\n[SQL]\n SELECT MIN(g.price) AS min_price FROM goods g WHERE g.flavor ilike '%cheese%';"
  },
  {
    "id": 1556,
    "db_id": "bakery_1",
    "question": {
      "id": 1556,
      "db_id": "bakery_1",
      "question": "What is the cheapest good with cheese flavor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the cheapest good with cheese flavor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the cheapest good with cheese flavor?[/QUESTION]\n[SQL]\n SELECT g.id, g.flavor, g.food, g.price FROM goods g WHERE g.flavor ilike '%cheese%' ORDER BY g.price ASC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1557,
    "db_id": "bakery_1",
    "question": {
      "id": 1557,
      "db_id": "bakery_1",
      "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are highest, lowest, and average prices of goods, grouped and ordered by flavor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are highest, lowest, and average prices of goods, grouped and ordered by flavor?[/QUESTION]\n[SQL]\n SELECT g.flavor, MAX(g.price) AS max_price, MIN(g.price) AS min_price, AVG(g.price) AS avg_price FROM goods g GROUP BY g.flavor ORDER BY g.flavor NULLS LAST;"
  },
  {
    "id": 1558,
    "db_id": "bakery_1",
    "question": {
      "id": 1558,
      "db_id": "bakery_1",
      "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?[/QUESTION]\n[SQL]\n SELECT g.flavor, MAX(g.price) AS max_price, MIN(g.price) AS min_price, AVG(g.price) AS avg_price FROM goods g GROUP BY g.flavor ORDER BY g.flavor NULLS LAST;"
  },
  {
    "id": 1559,
    "db_id": "bakery_1",
    "question": {
      "id": 1559,
      "db_id": "bakery_1",
      "question": "Return the lowest and highest prices of goods grouped and ordered by food type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the lowest and highest prices of goods grouped and ordered by food type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the lowest and highest prices of goods grouped and ordered by food type.[/QUESTION]\n[SQL]\n SELECT g.food, MIN(g.price) AS min_price, MAX(g.price) AS max_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;"
  },
  {
    "id": 1560,
    "db_id": "bakery_1",
    "question": {
      "id": 1560,
      "db_id": "bakery_1",
      "question": "What are the minimum and maximum prices of food goods, ordered by food?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the minimum and maximum prices of food goods, ordered by food?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the minimum and maximum prices of food goods, ordered by food?[/QUESTION]\n[SQL]\n SELECT g.Food, MIN(g.Price) AS min_price, MAX(g.Price) AS max_price FROM goods g GROUP BY g.Food ORDER BY min_price NULLS LAST;"
  },
  {
    "id": 1561,
    "db_id": "bakery_1",
    "question": {
      "id": 1561,
      "db_id": "bakery_1",
      "question": "Find the top three dates with the most receipts."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the top three dates with the most receipts.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the top three dates with the most receipts.[/QUESTION]\n[SQL]\n SELECT r.date, COUNT(r.receiptnumber) AS number_of_receipts FROM receipts r GROUP BY r.date ORDER BY number_of_receipts DESC NULLS LAST LIMIT 3;"
  },
  {
    "id": 1562,
    "db_id": "bakery_1",
    "question": {
      "id": 1562,
      "db_id": "bakery_1",
      "question": "What are the three dates for which the most receipts were given?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the three dates for which the most receipts were given?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the three dates for which the most receipts were given?[/QUESTION]\n[SQL]\n SELECT r.date, COUNT(r.receiptnumber) AS number_of_receipts FROM receipts r GROUP BY r.date ORDER BY number_of_receipts DESC NULLS LAST LIMIT 3;"
  },
  {
    "id": 1563,
    "db_id": "bakery_1",
    "question": {
      "id": 1563,
      "db_id": "bakery_1",
      "question": "Which customer shopped most often? How many times?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which customer shopped most often? How many times?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which customer shopped most often? How many times?[/QUESTION]\n[SQL]\n SELECT c.firstname, c.lastname, COUNT(*) AS total_purchases FROM receipts r JOIN customers c ON r.customerid = c.id GROUP BY c.firstname, c.lastname ORDER BY total_purchases DESC LIMIT 1;"
  },
  {
    "id": 1564,
    "db_id": "bakery_1",
    "question": {
      "id": 1564,
      "db_id": "bakery_1",
      "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the customer id of the customer that made the most purchases, as well as the number of purchases made.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the customer id of the customer that made the most purchases, as well as the number of purchases made.[/QUESTION]\n[SQL]\n SELECT c.id, COUNT(r.customerid) AS purchase_count FROM customers c JOIN receipts r ON c.id = r.customerid GROUP BY c.id ORDER BY purchase_count DESC LIMIT 1;"
  },
  {
    "id": 1565,
    "db_id": "bakery_1",
    "question": {
      "id": 1565,
      "db_id": "bakery_1",
      "question": "For each date, return how many distinct customers visited on that day."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each date, return how many distinct customers visited on that day.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each date, return how many distinct customers visited on that day.[/QUESTION]\n[SQL]\n SELECT r.date, COUNT(DISTINCT c.id) AS unique_customer_count FROM receipts r JOIN customers c ON r.customerid = c.id GROUP BY r.date ORDER BY r.date NULLS LAST;"
  },
  {
    "id": 1566,
    "db_id": "bakery_1",
    "question": {
      "id": 1566,
      "db_id": "bakery_1",
      "question": "How many cusomters visited on each date?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many cusomters visited on each date?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many cusomters visited on each date?[/QUESTION]\n[SQL]\n SELECT r.date, COUNT(DISTINCT r.customerid) AS number_of_customers FROM receipts r GROUP BY r.date ORDER BY r.date NULLS LAST;"
  },
  {
    "id": 1567,
    "db_id": "bakery_1",
    "question": {
      "id": 1567,
      "db_id": "bakery_1",
      "question": "Give me the first name and last name of customers who have bought apple flavor Tart."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me the first name and last name of customers who have bought apple flavor Tart.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me the first name and last name of customers who have bought apple flavor Tart.[/QUESTION]\n[SQL]\n SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receipt = i.receipt WHERE i.item = 'Tart' AND i.ordinal = 1;"
  },
  {
    "id": 1568,
    "db_id": "bakery_1",
    "question": {
      "id": 1568,
      "db_id": "bakery_1",
      "question": "What are the full names of customers who bought apple flavored Tarts?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the full names of customers who bought apple flavored Tarts?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the full names of customers who bought apple flavored Tarts?[/QUESTION]\n[SQL]\n SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receipt = i.receipt WHERE i.item = 'Tarts' AND i.ordinal = 1 AND i.item = 'Apple';"
  },
  {
    "id": 1569,
    "db_id": "bakery_1",
    "question": {
      "id": 1569,
      "db_id": "bakery_1",
      "question": "What are the ids of Cookies whose price is lower than any Croissant?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of Cookies whose price is lower than any Croissant?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of Cookies whose price is lower than any Croissant?[/QUESTION]\n[SQL]\n SELECT c.id FROM cookies c JOIN croissants cr ON c.price < cr.price;"
  },
  {
    "id": 1570,
    "db_id": "bakery_1",
    "question": {
      "id": 1570,
      "db_id": "bakery_1",
      "question": "Give the ids of cookes that are cheaper than any croissant."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the ids of cookes that are cheaper than any croissant.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the ids of cookes that are cheaper than any croissant.[/QUESTION]\n[SQL]\n SELECT c.id FROM customers c JOIN items i ON c.id = i.item WHERE i.item = 'croissant' ORDER BY c.price ASC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1571,
    "db_id": "bakery_1",
    "question": {
      "id": 1571,
      "db_id": "bakery_1",
      "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give me the ids of Cakes whose price is at least as much as the average price of Tart?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give me the ids of Cakes whose price is at least as much as the average price of Tart?[/QUESTION]\n[SQL]\n SELECT c.id FROM goods c WHERE c.price >= (SELECT AVG(g.price) FROM goods g WHERE g.food = 'Tart');"
  },
  {
    "id": 1572,
    "db_id": "bakery_1",
    "question": {
      "id": 1572,
      "db_id": "bakery_1",
      "question": "What are the ids of cakes that are at least as expensive as the average Tart?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of cakes that are at least as expensive as the average Tart?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of cakes that are at least as expensive as the average Tart?[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.price >= (SELECT AVG(g2.price) FROM goods g2 WHERE g2.food = 'Tart');"
  },
  {
    "id": 1573,
    "db_id": "bakery_1",
    "question": {
      "id": 1573,
      "db_id": "bakery_1",
      "question": "What are the ids of goods whose price is above twice the average price of all goods?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of goods whose price is above twice the average price of all goods?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of goods whose price is above twice the average price of all goods?[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.price > (SELECT AVG(g2.price) * 2 FROM goods g2);"
  },
  {
    "id": 1574,
    "db_id": "bakery_1",
    "question": {
      "id": 1574,
      "db_id": "bakery_1",
      "question": "Give the ids of goods that are more than twice as expensive as the average good."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the ids of goods that are more than twice as expensive as the average good.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the ids of goods that are more than twice as expensive as the average good.[/QUESTION]\n[SQL]\n SELECT g.id FROM goods g WHERE g.price > 2 * (SELECT AVG(g2.price) FROM goods g2);"
  },
  {
    "id": 1575,
    "db_id": "bakery_1",
    "question": {
      "id": 1575,
      "db_id": "bakery_1",
      "question": "List the id, flavor and type of food of goods ordered by price."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the id, flavor and type of food of goods ordered by price.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the id, flavor and type of food of goods ordered by price.[/QUESTION]\n[SQL]\n SELECT g.id, g.flavor, g.food FROM goods g ORDER BY g.price NULLS LAST;"
  },
  {
    "id": 1576,
    "db_id": "bakery_1",
    "question": {
      "id": 1576,
      "db_id": "bakery_1",
      "question": "What are the ids, flavors, and food types of goods, ordered by price?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids, flavors, and food types of goods, ordered by price?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids, flavors, and food types of goods, ordered by price?[/QUESTION]\n[SQL]\n SELECT g.id, g.flavor, g.food, g.price FROM goods g ORDER BY g.price NULLS LAST;"
  },
  {
    "id": 1577,
    "db_id": "bakery_1",
    "question": {
      "id": 1577,
      "db_id": "bakery_1",
      "question": "Return a list of the id and flavor for Cakes ordered by flavor."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return a list of the id and flavor for Cakes ordered by flavor.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return a list of the id and flavor for Cakes ordered by flavor.[/QUESTION]\n[SQL]\n SELECT g.id, g.flavor FROM goods g ORDER BY g.flavor NULLS LAST;"
  },
  {
    "id": 1578,
    "db_id": "bakery_1",
    "question": {
      "id": 1578,
      "db_id": "bakery_1",
      "question": "What are the ids and flavors of cakes, ordered by flavor?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids and flavors of cakes, ordered by flavor?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids and flavors of cakes, ordered by flavor?[/QUESTION]\n[SQL]\n SELECT g.id, g.flavor FROM goods g ORDER BY g.flavor NULLS LAST;"
  },
  {
    "id": 1579,
    "db_id": "bakery_1",
    "question": {
      "id": 1579,
      "db_id": "bakery_1",
      "question": "Find all the items that have chocolate flavor but were not bought more than 10 times."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all the items that have chocolate flavor but were not bought more than 10 times.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all the items that have chocolate flavor but were not bought more than 10 times.[/QUESTION]\n[SQL]\n SELECT i.item FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor ilike '%chocolate%' GROUP BY i.item HAVING COUNT(i.receipt) <= 10;"
  },
  {
    "id": 1580,
    "db_id": "bakery_1",
    "question": {
      "id": 1580,
      "db_id": "bakery_1",
      "question": "What are the items with chocolate flavor that were purchased at most 10 times."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the items with chocolate flavor that were purchased at most 10 times.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the items with chocolate flavor that were purchased at most 10 times.[/QUESTION]\n[SQL]\n SELECT i.item FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor ilike '%chocolate%' GROUP BY i.item HAVING COUNT(i.receipt) <= 10;"
  },
  {
    "id": 1581,
    "db_id": "bakery_1",
    "question": {
      "id": 1581,
      "db_id": "bakery_1",
      "question": "What are the flavors available for Cake but not for Tart?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the flavors available for Cake but not for Tart?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the flavors available for Cake but not for Tart?[/QUESTION]\n[SQL]\n SELECT DISTINCT c.flavor FROM goods c JOIN items i ON c.id = i.item WHERE c.food = 'Cake' AND NOT EXISTS (SELECT 1 FROM items i2 WHERE i2.item = c.id AND i2.item != i.item AND i2.item LIKE '%Tart%') ORDER BY c.flavor NULLS LAST;"
  },
  {
    "id": 1582,
    "db_id": "bakery_1",
    "question": {
      "id": 1582,
      "db_id": "bakery_1",
      "question": "Give the flavors of Cakes that are not available for Tart."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the flavors of Cakes that are not available for Tart.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the flavors of Cakes that are not available for Tart.[/QUESTION]\n[SQL]\n SELECT DISTINCT g.flavor FROM goods g WHERE g.food != 'Tart' ORDER BY g.flavor NULLS LAST;"
  },
  {
    "id": 1583,
    "db_id": "bakery_1",
    "question": {
      "id": 1583,
      "db_id": "bakery_1",
      "question": "What is the three most popular goods in this bakery?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the three most popular goods in this bakery?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the three most popular goods in this bakery?[/QUESTION]\n[SQL]\n SELECT g.Food, COUNT(i.Item) AS Count FROM items i JOIN goods g ON i.Item = g.Id GROUP BY g.Food ORDER BY COUNT DESC LIMIT 3;"
  },
  {
    "id": 1584,
    "db_id": "bakery_1",
    "question": {
      "id": 1584,
      "db_id": "bakery_1",
      "question": "Give the three most purchased items at this bakery."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the three most purchased items at this bakery.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the three most purchased items at this bakery.[/QUESTION]\n[SQL]\n SELECT i.item, COUNT(*) AS frequency FROM items i GROUP BY i.item ORDER BY frequency DESC LIMIT 3;"
  },
  {
    "id": 1585,
    "db_id": "bakery_1",
    "question": {
      "id": 1585,
      "db_id": "bakery_1",
      "question": "Find the ids of customers who have spent more than 150 dollars in total."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the ids of customers who have spent more than 150 dollars in total.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the ids of customers who have spent more than 150 dollars in total.[/QUESTION]\n[SQL]\n SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customer_id WHERE SUM(g.price) > 150 GROUP BY c.id;"
  },
  {
    "id": 1586,
    "db_id": "bakery_1",
    "question": {
      "id": 1586,
      "db_id": "bakery_1",
      "question": "What are the ids of customers who have spent over 150 dollars in total?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of customers who have spent over 150 dollars in total?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of customers who have spent over 150 dollars in total?[/QUESTION]\n[SQL]\n SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customer_id WHERE SUM(g.price) > 150 GROUP BY c.id;"
  },
  {
    "id": 1587,
    "db_id": "bakery_1",
    "question": {
      "id": 1587,
      "db_id": "bakery_1",
      "question": "Find the ids of customers whose average spending for each good is above 5."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the ids of customers whose average spending for each good is above 5.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the ids of customers whose average spending for each good is above 5.[/QUESTION]\n[SQL]\n WITH customer_spend AS (SELECT c.id AS customer_id, g.id AS good_id, SUM(i.price) AS total_spend FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id GROUP BY c.id, g.id), avg_spend_per_good AS (SELECT cs.good_id, AVG(cs.total_spend) AS avg_spend FROM customer_spend cs GROUP BY cs.good_id) SELECT cs.customer_id, ag.good_id, ag.avg_spend FROM customer_spend cs JOIN avg_spend_per_good ag ON cs.good_id = ag.good_id WHERE ag.avg_spend > 5;"
  },
  {
    "id": 1588,
    "db_id": "bakery_1",
    "question": {
      "id": 1588,
      "db_id": "bakery_1",
      "question": "What are the ids of customers who spend more than 5 on average for each good?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of customers who spend more than 5 on average for each good?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of customers who spend more than 5 on average for each good?[/QUESTION]\n[SQL]\n WITH customer_spend AS (SELECT c.id AS customer_id, g.id AS good_id, SUM(g.price) AS total_spend FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receipt = i.receipt JOIN goods g ON i.item = g.id GROUP BY c.id, g.id), avg_spend_per_good AS (SELECT g.id, AVG(total_spend) AS avg_spend FROM customer_spend cs JOIN goods g ON cs.good_id = g.id GROUP BY g.id) SELECT cs.customer_id, g.id AS good_id FROM customer_spend cs JOIN avg_spend_per_good ag ON cs.total_spend > ag.avg_spend WHERE ag.avg_spend > 5;"
  },
  {
    "id": 1589,
    "db_id": "bakery_1",
    "question": {
      "id": 1589,
      "db_id": "bakery_1",
      "question": "On which day did the bakery sell more than 100 dollars in total."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]On which day did the bakery sell more than 100 dollars in total.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]On which day did the bakery sell more than 100 dollars in total.[/QUESTION]\n[SQL]\n SELECT r.date FROM receipts r WHERE SUM(g.price) > 100 GROUP BY r.date ORDER BY COUNT(*) DESC LIMIT 1;"
  },
  {
    "id": 1590,
    "db_id": "bakery_1",
    "question": {
      "id": 1590,
      "db_id": "bakery_1",
      "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]On what dates did the bakery sell more than 100 dollars worth of goods in total?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]On what dates did the bakery sell more than 100 dollars worth of goods in total?[/QUESTION]\n[SQL]\n SELECT r.date FROM receipts r JOIN items i ON r.receiptnumber = i.receipt WHERE SUM(g.price) > 100 GROUP BY r.date HAVING COUNT(*) > 1;"
  },
  {
    "id": 1591,
    "db_id": "car_racing",
    "question": {
      "id": 1591,
      "db_id": "car_racing",
      "question": "How many drivers are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many drivers are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many drivers are there?[/QUESTION]\n[SQL]\n SELECT COUNT(d.Driver_ID) FROM driver d;"
  },
  {
    "id": 1592,
    "db_id": "car_racing",
    "question": {
      "id": 1592,
      "db_id": "car_racing",
      "question": "Find the total number of drivers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the total number of drivers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the total number of drivers.[/QUESTION]\n[SQL]\n SELECT COUNT(d.Driver_ID) AS total_drivers FROM driver d;"
  },
  {
    "id": 1593,
    "db_id": "car_racing",
    "question": {
      "id": 1593,
      "db_id": "car_racing",
      "question": "Find the number of drivers whose points are greater than 150 for each make."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of drivers whose points are greater than 150 for each make.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of drivers whose points are greater than 150 for each make.[/QUESTION]\n[SQL]\n SELECT t.make, COUNT(d.driver_id) AS num_drivers FROM driver d JOIN team_driver td ON d.driver_id = td.driver_id JOIN team t ON td.team_id = t.team_id WHERE CAST(d.points AS INT) > 150 GROUP BY t.make ORDER BY num_drivers DESC NULLS LAST;"
  },
  {
    "id": 1594,
    "db_id": "car_racing",
    "question": {
      "id": 1594,
      "db_id": "car_racing",
      "question": "How many drivers receive points greater than 150 for each make? Show the make and the count."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many drivers receive points greater than 150 for each make? Show the make and the count.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many drivers receive points greater than 150 for each make? Show the make and the count.[/QUESTION]\n[SQL]\n SELECT t.make, COUNT(d.driver_id) AS driver_count FROM team t JOIN team_driver td ON t.team_id = td.team_id JOIN driver d ON td.driver_id = d.driver_id WHERE CAST(d.points AS INT) > 150 GROUP BY t.make ORDER BY driver_count DESC NULLS LAST;"
  },
  {
    "id": 1595,
    "db_id": "car_racing",
    "question": {
      "id": 1595,
      "db_id": "car_racing",
      "question": "Find the average age of drivers for each make."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average age of drivers for each make.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average age of drivers for each make.[/QUESTION]\n[SQL]\n SELECT t.make, AVG(d.age) AS average_age FROM driver d JOIN team_driver td ON d.driver_id = td.driver_id JOIN team t ON td.team_id = t.team_id GROUP BY t.make ORDER BY average_age DESC NULLS LAST;"
  },
  {
    "id": 1596,
    "db_id": "car_racing",
    "question": {
      "id": 1596,
      "db_id": "car_racing",
      "question": "What is the average age of drivers for each make? Return the average age and make."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average age of drivers for each make? Return the average age and make.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average age of drivers for each make? Return the average age and make.[/QUESTION]\n[SQL]\n SELECT d.make, AVG(d.age) AS average_age FROM driver d GROUP BY d.make ORDER BY average_age DESC NULLS LAST;"
  },
  {
    "id": 1597,
    "db_id": "car_racing",
    "question": {
      "id": 1597,
      "db_id": "car_racing",
      "question": "What are the average laps of all the drivers who are younger than 20?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average laps of all the drivers who are younger than 20?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average laps of all the drivers who are younger than 20?[/QUESTION]\n[SQL]\n SELECT AVG(d.laps) FROM driver d WHERE d.age < 20;"
  },
  {
    "id": 1598,
    "db_id": "car_racing",
    "question": {
      "id": 1598,
      "db_id": "car_racing",
      "question": "Compute the average laps of drivers under the age of 20."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Compute the average laps of drivers under the age of 20.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Compute the average laps of drivers under the age of 20.[/QUESTION]\n[SQL]\n SELECT AVG(d.laps) FROM driver d WHERE d.age < 20;"
  },
  {
    "id": 1599,
    "db_id": "car_racing",
    "question": {
      "id": 1599,
      "db_id": "car_racing",
      "question": "What are the managers and sponsors of teams? Sort the results by Car Owners."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the managers and sponsors of teams? Sort the results by Car Owners.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the managers and sponsors of teams? Sort the results by Car Owners.[/QUESTION]\n[SQL]\n SELECT t.manager, t.sponsor, t.car_owner FROM team t ORDER BY t.car_owner NULLS LAST;"
  },
  {
    "id": 1600,
    "db_id": "car_racing",
    "question": {
      "id": 1600,
      "db_id": "car_racing",
      "question": "Find the manager and sponsor for each team and order them by the car owner."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the manager and sponsor for each team and order them by the car owner.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the manager and sponsor for each team and order them by the car owner.[/QUESTION]\n[SQL]\n SELECT t.team, t.manager, t.sponsor, t.car_owner FROM team t ORDER BY t.car_owner NULLS LAST;"
  },
  {
    "id": 1601,
    "db_id": "car_racing",
    "question": {
      "id": 1601,
      "db_id": "car_racing",
      "question": "Find the make that has more than one team."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the make that has more than one team.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the make that has more than one team.[/QUESTION]\n[SQL]\n SELECT t.make FROM team t GROUP BY t.make HAVING COUNT(t.team_id) > 1;"
  },
  {
    "id": 1602,
    "db_id": "car_racing",
    "question": {
      "id": 1602,
      "db_id": "car_racing",
      "question": "Which make has more than one team?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which make has more than one team?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which make has more than one team?[/QUESTION]\n[SQL]\n SELECT t.make FROM team t GROUP BY t.make HAVING COUNT(t.team_id) > 1;"
  },
  {
    "id": 1603,
    "db_id": "car_racing",
    "question": {
      "id": 1603,
      "db_id": "car_racing",
      "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the makes of the teams with car owner \"Buddy Arrington\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the makes of the teams with car owner \"Buddy Arrington\"?[/QUESTION]\n[SQL]\n SELECT t.make FROM team t WHERE t.car_owner ilike '%Buddy%Arrington%'"
  },
  {
    "id": 1604,
    "db_id": "car_racing",
    "question": {
      "id": 1604,
      "db_id": "car_racing",
      "question": "Find the make of the team whose car owner is \"Buddy Arrington\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the make of the team whose car owner is \"Buddy Arrington\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the make of the team whose car owner is \"Buddy Arrington\".[/QUESTION]\n[SQL]\n SELECT t.make FROM team t WHERE t.car_owner ilike '%Buddy%Arrington%'"
  },
  {
    "id": 1605,
    "db_id": "car_racing",
    "question": {
      "id": 1605,
      "db_id": "car_racing",
      "question": "What are the maximum and minimum points of drivers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum and minimum points of drivers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum and minimum points of drivers.[/QUESTION]\n[SQL]\n SELECT MAX(d.points) AS max_points, MIN(d.points) AS min_points FROM driver d;"
  },
  {
    "id": 1606,
    "db_id": "car_racing",
    "question": {
      "id": 1606,
      "db_id": "car_racing",
      "question": "Find the highest and lowest points of drivers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the highest and lowest points of drivers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the highest and lowest points of drivers.[/QUESTION]\n[SQL]\n SELECT MAX(d.Points) AS Maximum_points, MIN(d.Points) AS Minimum_points FROM driver d;"
  },
  {
    "id": 1607,
    "db_id": "car_racing",
    "question": {
      "id": 1607,
      "db_id": "car_racing",
      "question": "How many drivers have points smaller than 150?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many drivers have points smaller than 150?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many drivers have points smaller than 150?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM driver d WHERE CAST(d.points AS integer) < 150;"
  },
  {
    "id": 1608,
    "db_id": "car_racing",
    "question": {
      "id": 1608,
      "db_id": "car_racing",
      "question": "Count the number of drivers whose points are below 150."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of drivers whose points are below 150.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of drivers whose points are below 150.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM driver d WHERE CAST(d.points AS INT) < 150;"
  },
  {
    "id": 1609,
    "db_id": "car_racing",
    "question": {
      "id": 1609,
      "db_id": "car_racing",
      "question": "List all the driver names in ascending order of age."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all the driver names in ascending order of age.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all the driver names in ascending order of age.[/QUESTION]\n[SQL]\n SELECT d.driver FROM driver d ORDER BY d.age ASC;"
  },
  {
    "id": 1610,
    "db_id": "car_racing",
    "question": {
      "id": 1610,
      "db_id": "car_racing",
      "question": "Sort the driver names by age in ascending order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Sort the driver names by age in ascending order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Sort the driver names by age in ascending order.[/QUESTION]\n[SQL]\n SELECT d.driver FROM driver d ORDER BY d.age ASC;"
  },
  {
    "id": 1611,
    "db_id": "car_racing",
    "question": {
      "id": 1611,
      "db_id": "car_racing",
      "question": "List all the driver names in descending order of points."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all the driver names in descending order of points.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all the driver names in descending order of points.[/QUESTION]\n[SQL]\n SELECT d.driver FROM driver d ORDER BY d.points DESC;"
  },
  {
    "id": 1612,
    "db_id": "car_racing",
    "question": {
      "id": 1612,
      "db_id": "car_racing",
      "question": "What is the list of drivers ordered by points in descending order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the list of drivers ordered by points in descending order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the list of drivers ordered by points in descending order?[/QUESTION]\n[SQL]\n SELECT d.driver, d.points FROM driver d ORDER BY d.points DESC;"
  },
  {
    "id": 1613,
    "db_id": "car_racing",
    "question": {
      "id": 1613,
      "db_id": "car_racing",
      "question": "Please show the names of drivers, and countries they are from."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the names of drivers, and countries they are from.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the names of drivers, and countries they are from.[/QUESTION]\n[SQL]\n SELECT d.driver, c.country FROM driver d JOIN country c ON d.country = c.country_id;"
  },
  {
    "id": 1614,
    "db_id": "car_racing",
    "question": {
      "id": 1614,
      "db_id": "car_racing",
      "question": "For each driver, return his or her name and country."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each driver, return his or her name and country.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each driver, return his or her name and country.[/QUESTION]\n[SQL]\n SELECT d.driver, c.country FROM driver d JOIN country c ON d.country = c.country_id;"
  },
  {
    "id": 1615,
    "db_id": "car_racing",
    "question": {
      "id": 1615,
      "db_id": "car_racing",
      "question": "Show the maximum points of the drivers from countries with capital \"Dublin\""
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the maximum points of the drivers from countries with capital \"Dublin\"[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the maximum points of the drivers from countries with capital \"Dublin\"[/QUESTION]\n[SQL]\n SELECT MAX(d.points::int) AS max_points FROM driver d JOIN country c ON d.country = c.country_id WHERE c.capital ilike '%Dublin%';"
  },
  {
    "id": 1616,
    "db_id": "car_racing",
    "question": {
      "id": 1616,
      "db_id": "car_racing",
      "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the maximum points of the drivers from a country whose capital is \"Dublin\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the maximum points of the drivers from a country whose capital is \"Dublin\"?[/QUESTION]\n[SQL]\n SELECT MAX(d.points) FROM driver d JOIN country c ON d.country = c.country_id WHERE c.capital ilike '%Dublin%';"
  },
  {
    "id": 1617,
    "db_id": "car_racing",
    "question": {
      "id": 1617,
      "db_id": "car_racing",
      "question": "What is the average age of drivers from countries with official native language \"English\""
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average age of drivers from countries with official native language \"English\"[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average age of drivers from countries with official native language \"English\"[/QUESTION]\n[SQL]\n SELECT AVG(d.age) FROM driver d JOIN country c ON d.country = c.country_id WHERE c.official_native_language ilike '%English%';"
  },
  {
    "id": 1618,
    "db_id": "car_racing",
    "question": {
      "id": 1618,
      "db_id": "car_racing",
      "question": "Find the average age of the drivers from the countries that use \"English\" as official native language."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average age of the drivers from the countries that use \"English\" as official native language.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average age of the drivers from the countries that use \"English\" as official native language.[/QUESTION]\n[SQL]\n SELECT AVG(d.age) FROM driver d JOIN country c ON d.country = c.country_id WHERE c.official_native_language ilike '%English%';"
  },
  {
    "id": 1619,
    "db_id": "car_racing",
    "question": {
      "id": 1619,
      "db_id": "car_racing",
      "question": "What are the countries that have drivers with points larger than 150?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the countries that have drivers with points larger than 150?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the countries that have drivers with points larger than 150?[/QUESTION]\n[SQL]\n SELECT c.country FROM country c JOIN driver d ON c.country_id = d.country WHERE CAST(d.points AS integer) > 150;"
  },
  {
    "id": 1620,
    "db_id": "car_racing",
    "question": {
      "id": 1620,
      "db_id": "car_racing",
      "question": "Find all the countries where some drivers have points above 150."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all the countries where some drivers have points above 150.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all the countries where some drivers have points above 150.[/QUESTION]\n[SQL]\n SELECT c.country FROM country c JOIN driver d ON c.country_id = d.country WHERE CAST(d.points AS integer) > 150 GROUP BY c.country;"
  },
  {
    "id": 1621,
    "db_id": "car_racing",
    "question": {
      "id": 1621,
      "db_id": "car_racing",
      "question": "What is the capital of the country where the driver with the most points is from?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the capital of the country where the driver with the most points is from?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the capital of the country where the driver with the most points is from?[/QUESTION]\n[SQL]\n SELECT c.capital FROM country c JOIN driver d ON c.country_id = d.country WHERE d.points = (SELECT MAX(points) FROM driver);"
  },
  {
    "id": 1622,
    "db_id": "car_racing",
    "question": {
      "id": 1622,
      "db_id": "car_racing",
      "question": "Which country is the driver with the highest points from? Give me the capital of the country."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which country is the driver with the highest points from? Give me the capital of the country.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which country is the driver with the highest points from? Give me the capital of the country.[/QUESTION]\n[SQL]\n SELECT c.capital FROM driver d JOIN country c ON d.country = c.country_id ORDER BY d.points DESC LIMIT 1;"
  },
  {
    "id": 1623,
    "db_id": "car_racing",
    "question": {
      "id": 1623,
      "db_id": "car_racing",
      "question": "List each make with the number of drivers with that make."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List each make with the number of drivers with that make.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List each make with the number of drivers with that make.[/QUESTION]\n[SQL]\n SELECT t.make, COUNT(DISTINCT d.driver_id) AS number_of_drivers FROM team t JOIN team_driver td ON t.team_id = td.team_id JOIN driver d ON td.driver_id = d.driver_id GROUP BY t.make ORDER BY number_of_drivers DESC NULLS LAST;"
  },
  {
    "id": 1624,
    "db_id": "car_racing",
    "question": {
      "id": 1624,
      "db_id": "car_racing",
      "question": "For each make, return the make and the count of drivers with that make."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each make, return the make and the count of drivers with that make.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each make, return the make and the count of drivers with that make.[/QUESTION]\n[SQL]\n SELECT d.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.make ORDER BY number_of_drivers DESC NULLS LAST;"
  },
  {
    "id": 1625,
    "db_id": "car_racing",
    "question": {
      "id": 1625,
      "db_id": "car_racing",
      "question": "List the make that are associated with most drivers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the make that are associated with most drivers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the make that are associated with most drivers.[/QUESTION]\n[SQL]\n SELECT t.make, COUNT(td.driver_id) AS driver_count FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.make ORDER BY driver_count DESC LIMIT 1;"
  },
  {
    "id": 1626,
    "db_id": "car_racing",
    "question": {
      "id": 1626,
      "db_id": "car_racing",
      "question": "Which make does the most drivers have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which make does the most drivers have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which make does the most drivers have?[/QUESTION]\n[SQL]\n SELECT t.make, COUNT(DISTINCT d.driver_id) AS driver_count FROM team t JOIN team_driver td ON t.team_id = td.team_id JOIN driver d ON td.driver_id = d.driver_id GROUP BY t.make ORDER BY driver_count DESC LIMIT 1;"
  },
  {
    "id": 1627,
    "db_id": "car_racing",
    "question": {
      "id": 1627,
      "db_id": "car_racing",
      "question": "List the driver makes that are associated with at least three drivers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the driver makes that are associated with at least three drivers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the driver makes that are associated with at least three drivers.[/QUESTION]\n[SQL]\n SELECT d.make FROM driver d JOIN team_driver t ON d.driver_id = t.driver_id GROUP BY d.make HAVING COUNT(DISTINCT t.driver_id) >= 3;"
  },
  {
    "id": 1628,
    "db_id": "car_racing",
    "question": {
      "id": 1628,
      "db_id": "car_racing",
      "question": "Which make is associated with 3 or more drivers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which make is associated with 3 or more drivers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which make is associated with 3 or more drivers?[/QUESTION]\n[SQL]\n SELECT t.make FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.make HAVING COUNT(td.driver_id) >= 3;"
  },
  {
    "id": 1629,
    "db_id": "car_racing",
    "question": {
      "id": 1629,
      "db_id": "car_racing",
      "question": "List the names of teams that do not have any drivers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of teams that do not have any drivers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of teams that do not have any drivers.[/QUESTION]\n[SQL]\n SELECT t.team FROM team t WHERE t.team NOT IN (SELECT d.team FROM driver d);"
  },
  {
    "id": 1630,
    "db_id": "car_racing",
    "question": {
      "id": 1630,
      "db_id": "car_racing",
      "question": "Which team does not have drivers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which team does not have drivers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which team does not have drivers?[/QUESTION]\n[SQL]\n SELECT t.team FROM team t WHERE t.team NOT IN (SELECT d.team FROM driver d);"
  },
  {
    "id": 1631,
    "db_id": "car_racing",
    "question": {
      "id": 1631,
      "db_id": "car_racing",
      "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?[/QUESTION]\n[SQL]\n SELECT c.country FROM country c JOIN driver d1 ON c.country_id = d1.country JOIN driver d2 ON c.country_id = d2.country WHERE d1.make ilike '%Dodge%' AND d2.make ilike '%Chevrolet%' GROUP BY c.country;"
  },
  {
    "id": 1632,
    "db_id": "car_racing",
    "question": {
      "id": 1632,
      "db_id": "car_racing",
      "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".[/QUESTION]\n[SQL]\n SELECT c.country FROM country c JOIN driver d1 ON c.country_id = d1.country WHERE d1.make ilike '%Dodge%' AND EXISTS (SELECT 1 FROM driver d2 WHERE d2.country = c.country_id AND d2.make ilike '%Chevrolet%') ORDER BY c.country NULLS LAST;"
  },
  {
    "id": 1633,
    "db_id": "car_racing",
    "question": {
      "id": 1633,
      "db_id": "car_racing",
      "question": "Show total and average points of all drivers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show total and average points of all drivers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show total and average points of all drivers.[/QUESTION]\n[SQL]\n SELECT SUM(d.points::int) AS total_points, AVG(d.points::int) AS average_points FROM driver d;"
  },
  {
    "id": 1634,
    "db_id": "car_racing",
    "question": {
      "id": 1634,
      "db_id": "car_racing",
      "question": "What are the total and average points of drivers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the total and average points of drivers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the total and average points of drivers?[/QUESTION]\n[SQL]\n SELECT d.driver, SUM(d.points::int) AS total_points, AVG(d.points::int) AS average_points FROM driver d GROUP BY d.driver;"
  },
  {
    "id": 1635,
    "db_id": "car_racing",
    "question": {
      "id": 1635,
      "db_id": "car_racing",
      "question": "Find the countries where no driver come from."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the countries where no driver come from.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the countries where no driver come from.[/QUESTION]\n[SQL]\n SELECT c.country FROM country c WHERE c.country NOT IN (SELECT d.country FROM driver d) ORDER BY c.country NULLS LAST;"
  },
  {
    "id": 1636,
    "db_id": "car_racing",
    "question": {
      "id": 1636,
      "db_id": "car_racing",
      "question": "Which countries do not have any drivers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which countries do not have any drivers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which countries do not have any drivers?[/QUESTION]\n[SQL]\n SELECT c.country FROM country c WHERE c.country NOT IN (SELECT d.country FROM driver d) ORDER BY c.country NULLS LAST;"
  },
  {
    "id": 1637,
    "db_id": "car_racing",
    "question": {
      "id": 1637,
      "db_id": "car_racing",
      "question": "What are the manager and sponsor of the team that has the most drivers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the manager and sponsor of the team that has the most drivers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the manager and sponsor of the team that has the most drivers?[/QUESTION]\n[SQL]\n SELECT t.manager, t.sponsor FROM team t JOIN (SELECT td.team_id, COUNT(td.driver_id) AS driver_count FROM team_driver td GROUP BY td.team_id ORDER BY driver_count DESC LIMIT 1) AS mt ON t.team_id = mt.team_id;"
  },
  {
    "id": 1638,
    "db_id": "car_racing",
    "question": {
      "id": 1638,
      "db_id": "car_racing",
      "question": "Find the manager and sponsor of the team that has the most drivers."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the manager and sponsor of the team that has the most drivers.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the manager and sponsor of the team that has the most drivers.[/QUESTION]\n[SQL]\n SELECT t.manager, t.sponsor FROM team t JOIN (SELECT td.team_id, COUNT(td.driver_id) AS num_drivers FROM team_driver td GROUP BY td.team_id ORDER BY num_drivers DESC LIMIT 1) AS m ON t.team_id = m.team_id;"
  },
  {
    "id": 1639,
    "db_id": "car_racing",
    "question": {
      "id": 1639,
      "db_id": "car_racing",
      "question": "What are the manager and car owner of the team that has at least 2 drivers?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the manager and car owner of the team that has at least 2 drivers?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the manager and car owner of the team that has at least 2 drivers?[/QUESTION]\n[SQL]\n SELECT t.manager, t.car_owner FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.manager, t.car_owner HAVING COUNT(td.driver_id) >= 2;"
  },
  {
    "id": 1640,
    "db_id": "car_racing",
    "question": {
      "id": 1640,
      "db_id": "car_racing",
      "question": "Find the team with two or more drivers and return the the manager and car owner of the team."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the team with two or more drivers and return the the manager and car owner of the team.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the team with two or more drivers and return the the manager and car owner of the team.[/QUESTION]\n[SQL]\n SELECT t.manager, t.car_owner FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.manager, t.car_owner HAVING COUNT(td.driver_id) >= 2;"
  },
  {
    "id": 1641,
    "db_id": "institution_sports",
    "question": {
      "id": 1641,
      "db_id": "institution_sports",
      "question": "How many institutions are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many institutions are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many institutions are there?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT i.institution_id) FROM institution i;"
  },
  {
    "id": 1642,
    "db_id": "institution_sports",
    "question": {
      "id": 1642,
      "db_id": "institution_sports",
      "question": "Count the number of institutions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of institutions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of institutions.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT i.institution_id) FROM institution i;"
  },
  {
    "id": 1643,
    "db_id": "institution_sports",
    "question": {
      "id": 1643,
      "db_id": "institution_sports",
      "question": "List the names of institutions in ascending alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of institutions in ascending alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of institutions in ascending alphabetical order.[/QUESTION]\n[SQL]\n SELECT i.name FROM institution i ORDER BY i.name ASC;"
  },
  {
    "id": 1644,
    "db_id": "institution_sports",
    "question": {
      "id": 1644,
      "db_id": "institution_sports",
      "question": "What are the names of institutions, ordered alphabetically?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of institutions, ordered alphabetically?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of institutions, ordered alphabetically?[/QUESTION]\n[SQL]\n SELECT i.name FROM institution i ORDER BY i.name ASC;"
  },
  {
    "id": 1645,
    "db_id": "institution_sports",
    "question": {
      "id": 1645,
      "db_id": "institution_sports",
      "question": "List the names of institutions in ascending order of founded year."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of institutions in ascending order of founded year.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of institutions in ascending order of founded year.[/QUESTION]\n[SQL]\n SELECT i.name FROM institution i ORDER BY i.founded ASC;"
  },
  {
    "id": 1646,
    "db_id": "institution_sports",
    "question": {
      "id": 1646,
      "db_id": "institution_sports",
      "question": "What are the names of institutions, ordered by the years in which they were founded?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of institutions, ordered by the years in which they were founded?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of institutions, ordered by the years in which they were founded?[/QUESTION]\n[SQL]\n SELECT i.name FROM institution i ORDER BY i.founded NULLS LAST;"
  },
  {
    "id": 1647,
    "db_id": "institution_sports",
    "question": {
      "id": 1647,
      "db_id": "institution_sports",
      "question": "What are the cities and provinces of institutions?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the cities and provinces of institutions?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the cities and provinces of institutions?[/QUESTION]\n[SQL]\n SELECT i.city, i.province FROM institution i;"
  },
  {
    "id": 1648,
    "db_id": "institution_sports",
    "question": {
      "id": 1648,
      "db_id": "institution_sports",
      "question": "Return the cities and provinces of institutions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the cities and provinces of institutions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the cities and provinces of institutions.[/QUESTION]\n[SQL]\n SELECT i.city, i.province FROM institution i;"
  },
  {
    "id": 1649,
    "db_id": "institution_sports",
    "question": {
      "id": 1649,
      "db_id": "institution_sports",
      "question": "What are the maximum and minimum enrollment of all institutions?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum and minimum enrollment of all institutions?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum and minimum enrollment of all institutions?[/QUESTION]\n[SQL]\n SELECT MIN(i.enrollment) AS min_enrollment, MAX(i.enrollment) AS max_enrollment FROM institution i;"
  },
  {
    "id": 1650,
    "db_id": "institution_sports",
    "question": {
      "id": 1650,
      "db_id": "institution_sports",
      "question": "Return the maximum and minimum enrollment across all institutions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the maximum and minimum enrollment across all institutions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the maximum and minimum enrollment across all institutions.[/QUESTION]\n[SQL]\n SELECT MIN(i.enrollment) AS min_enrollment, MAX(i.enrollment) AS max_enrollment FROM institution i;"
  },
  {
    "id": 1651,
    "db_id": "institution_sports",
    "question": {
      "id": 1651,
      "db_id": "institution_sports",
      "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the affiliations of institutions that are not in city \"Vancouver\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the affiliations of institutions that are not in city \"Vancouver\"?[/QUESTION]\n[SQL]\n SELECT i.affiliation FROM institution i WHERE i.city != 'Vancouver';"
  },
  {
    "id": 1652,
    "db_id": "institution_sports",
    "question": {
      "id": 1652,
      "db_id": "institution_sports",
      "question": "Return the affiliations of instituions that are not in the city of Vancouver."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the affiliations of instituions that are not in the city of Vancouver.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the affiliations of instituions that are not in the city of Vancouver.[/QUESTION]\n[SQL]\n SELECT DISTINCT i.affiliation FROM institution i WHERE i.city NOT ILIKE '%Vancouver%'"
  },
  {
    "id": 1653,
    "db_id": "institution_sports",
    "question": {
      "id": 1653,
      "db_id": "institution_sports",
      "question": "What are the stadiums of institutions in descending order of the capacity."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the stadiums of institutions in descending order of the capacity.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the stadiums of institutions in descending order of the capacity.[/QUESTION]\n[SQL]\n SELECT i.Stadium FROM institution i ORDER BY i.Capacity DESC;"
  },
  {
    "id": 1654,
    "db_id": "institution_sports",
    "question": {
      "id": 1654,
      "db_id": "institution_sports",
      "question": "Return the stadiums of institutions, ordered by capacity descending."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the stadiums of institutions, ordered by capacity descending.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the stadiums of institutions, ordered by capacity descending.[/QUESTION]\n[SQL]\n SELECT i.stadium FROM institution i ORDER BY i.capacity DESC;"
  },
  {
    "id": 1655,
    "db_id": "institution_sports",
    "question": {
      "id": 1655,
      "db_id": "institution_sports",
      "question": "What is the stadium of the institution with the largest enrollment?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the stadium of the institution with the largest enrollment?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the stadium of the institution with the largest enrollment?[/QUESTION]\n[SQL]\n SELECT i.stadium FROM institution i ORDER BY i.enrollment DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1656,
    "db_id": "institution_sports",
    "question": {
      "id": 1656,
      "db_id": "institution_sports",
      "question": "Give the stadium of the institution which is the greatest enrollment."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the stadium of the institution which is the greatest enrollment.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the stadium of the institution which is the greatest enrollment.[/QUESTION]\n[SQL]\n SELECT i.stadium FROM institution i WHERE i.enrollment = (SELECT MAX(enrollment) FROM institution);"
  },
  {
    "id": 1657,
    "db_id": "institution_sports",
    "question": {
      "id": 1657,
      "db_id": "institution_sports",
      "question": "What are the names and nicknames of institutions?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and nicknames of institutions?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and nicknames of institutions?[/QUESTION]\n[SQL]\n SELECT i.name, c.nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id;"
  },
  {
    "id": 1658,
    "db_id": "institution_sports",
    "question": {
      "id": 1658,
      "db_id": "institution_sports",
      "question": "Return the names of institutions, as well as their nicknames."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names of institutions, as well as their nicknames.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names of institutions, as well as their nicknames.[/QUESTION]\n[SQL]\n SELECT i.name, c.nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id;"
  },
  {
    "id": 1659,
    "db_id": "institution_sports",
    "question": {
      "id": 1659,
      "db_id": "institution_sports",
      "question": "What is the nickname of the institution with the smallest enrollment?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the nickname of the institution with the smallest enrollment?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the nickname of the institution with the smallest enrollment?[/QUESTION]\n[SQL]\n SELECT i.Nickname FROM Institution i ORDER BY i.Enrollment ASC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1660,
    "db_id": "institution_sports",
    "question": {
      "id": 1660,
      "db_id": "institution_sports",
      "question": "Return the nickname of the institution with the lowest enrollment."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the nickname of the institution with the lowest enrollment.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the nickname of the institution with the lowest enrollment.[/QUESTION]\n[SQL]\n SELECT c.Nickname FROM Championship c ORDER BY c.Enrollment ASC LIMIT 1;"
  },
  {
    "id": 1661,
    "db_id": "institution_sports",
    "question": {
      "id": 1661,
      "db_id": "institution_sports",
      "question": "List the names of institutions in descending order of the number of championships."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of institutions in descending order of the number of championships.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of institutions in descending order of the number of championships.[/QUESTION]\n[SQL]\n SELECT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC;"
  },
  {
    "id": 1662,
    "db_id": "institution_sports",
    "question": {
      "id": 1662,
      "db_id": "institution_sports",
      "question": "What are the names of institutions, ordered descending by their number of championships?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of institutions, ordered descending by their number of championships?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of institutions, ordered descending by their number of championships?[/QUESTION]\n[SQL]\n SELECT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC;"
  },
  {
    "id": 1663,
    "db_id": "institution_sports",
    "question": {
      "id": 1663,
      "db_id": "institution_sports",
      "question": "List the names of institutions with at least one championship."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of institutions with at least one championship.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of institutions with at least one championship.[/QUESTION]\n[SQL]\n SELECT DISTINCT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id;"
  },
  {
    "id": 1664,
    "db_id": "institution_sports",
    "question": {
      "id": 1664,
      "db_id": "institution_sports",
      "question": "What are the names of institutions that have 1 or more championships?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of institutions that have 1 or more championships?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of institutions that have 1 or more championships?[/QUESTION]\n[SQL]\n SELECT DISTINCT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id WHERE c.number_of_championships >= 1 ORDER BY i.name NULLS LAST;"
  },
  {
    "id": 1665,
    "db_id": "institution_sports",
    "question": {
      "id": 1665,
      "db_id": "institution_sports",
      "question": "What is the total number of championship of institution with public affiliation?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total number of championship of institution with public affiliation?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total number of championship of institution with public affiliation?[/QUESTION]\n[SQL]\n SELECT SUM(c.number_of_championships) AS total_championships FROM championship c JOIN institution i ON c.institution_id = i.institution_id WHERE i.affiliation ilike '%public%';"
  },
  {
    "id": 1666,
    "db_id": "institution_sports",
    "question": {
      "id": 1666,
      "db_id": "institution_sports",
      "question": "Return the total number of championships of institutions that have a Public affiliation."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the total number of championships of institutions that have a Public affiliation.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the total number of championships of institutions that have a Public affiliation.[/QUESTION]\n[SQL]\n SELECT SUM(c.Number_of_Championships) AS total_championships FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation ilike '%Public%';"
  },
  {
    "id": 1667,
    "db_id": "institution_sports",
    "question": {
      "id": 1667,
      "db_id": "institution_sports",
      "question": "What are different types of affiliations of institutions and the corresponding number of institutions?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are different types of affiliations of institutions and the corresponding number of institutions?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are different types of affiliations of institutions and the corresponding number of institutions?[/QUESTION]\n[SQL]\n SELECT i.affiliation, COUNT(i.affiliation) AS number_of_institutions FROM institution i GROUP BY i.affiliation ORDER BY number_of_institutions DESC NULLS LAST;"
  },
  {
    "id": 1668,
    "db_id": "institution_sports",
    "question": {
      "id": 1668,
      "db_id": "institution_sports",
      "question": "How many institutions are there for each type of affiliation?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many institutions are there for each type of affiliation?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many institutions are there for each type of affiliation?[/QUESTION]\n[SQL]\n SELECT i.affiliation, COUNT(i.institution_id) AS number_of_institutions FROM institution i GROUP BY i.affiliation ORDER BY number_of_institutions DESC NULLS LAST;"
  },
  {
    "id": 1669,
    "db_id": "institution_sports",
    "question": {
      "id": 1669,
      "db_id": "institution_sports",
      "question": "What is the most common type of affiliation for institutions?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the most common type of affiliation for institutions?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the most common type of affiliation for institutions?[/QUESTION]\n[SQL]\n SELECT i.affiliation FROM institution i GROUP BY i.affiliation ORDER BY COUNT(i.affiliation) DESC LIMIT 1;"
  },
  {
    "id": 1670,
    "db_id": "institution_sports",
    "question": {
      "id": 1670,
      "db_id": "institution_sports",
      "question": "Return the most common type of affiliation across all institutions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the most common type of affiliation across all institutions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the most common type of affiliation across all institutions.[/QUESTION]\n[SQL]\n SELECT i.affiliation FROM institution i GROUP BY i.affiliation ORDER BY COUNT(i.affiliation) DESC LIMIT 1;"
  },
  {
    "id": 1671,
    "db_id": "institution_sports",
    "question": {
      "id": 1671,
      "db_id": "institution_sports",
      "question": "In which years were more than one institution founded?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]In which years were more than one institution founded?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]In which years were more than one institution founded?[/QUESTION]\n[SQL]\n SELECT EXTRACT(YEAR FROM TO_DATE(i.founded::text, 'YYYY')) AS YEAR, COUNT(*) AS number_of_institutions FROM institution i GROUP BY YEAR HAVING COUNT(*) > 1 ORDER BY YEAR NULLS LAST;"
  },
  {
    "id": 1672,
    "db_id": "institution_sports",
    "question": {
      "id": 1672,
      "db_id": "institution_sports",
      "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.[/QUESTION]\n[SQL]\n SELECT EXTRACT(YEAR FROM TO_DATE(i.founded, 'YYYY')) AS YEAR, COUNT(*) AS institutions_founded FROM institution i GROUP BY YEAR HAVING COUNT(*) > 1 ORDER BY YEAR NULLS LAST;"
  },
  {
    "id": 1673,
    "db_id": "institution_sports",
    "question": {
      "id": 1673,
      "db_id": "institution_sports",
      "question": "List the nicknames of institutions in descending order of capacity."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the nicknames of institutions in descending order of capacity.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the nicknames of institutions in descending order of capacity.[/QUESTION]\n[SQL]\n SELECT c.Nickname FROM Championship c ORDER BY c.Capacity DESC;"
  },
  {
    "id": 1674,
    "db_id": "institution_sports",
    "question": {
      "id": 1674,
      "db_id": "institution_sports",
      "question": "What are the nicknames of institutions, ordered descending by their capacities?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the nicknames of institutions, ordered descending by their capacities?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the nicknames of institutions, ordered descending by their capacities?[/QUESTION]\n[SQL]\n SELECT i.name, c.nickname, i.capacity FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY i.capacity DESC;"
  },
  {
    "id": 1675,
    "db_id": "institution_sports",
    "question": {
      "id": 1675,
      "db_id": "institution_sports",
      "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?[/QUESTION]\n[SQL]\n SELECT SUM(i.enrollment) AS total_enrollment FROM institution i WHERE i.city IN ('Vancouver', 'Calgary');"
  },
  {
    "id": 1676,
    "db_id": "institution_sports",
    "question": {
      "id": 1676,
      "db_id": "institution_sports",
      "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .[/QUESTION]\n[SQL]\n SELECT i.enrollment FROM institution i WHERE i.city IN ('Vancouver', 'Calgary');"
  },
  {
    "id": 1677,
    "db_id": "institution_sports",
    "question": {
      "id": 1677,
      "db_id": "institution_sports",
      "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.[/QUESTION]\n[SQL]\n SELECT DISTINCT i.province FROM institution i WHERE i.founded < 1920 AND i.founded > 1950;"
  },
  {
    "id": 1678,
    "db_id": "institution_sports",
    "question": {
      "id": 1678,
      "db_id": "institution_sports",
      "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?[/QUESTION]\n[SQL]\n SELECT DISTINCT i.province FROM institution i WHERE i.founded < 1920 AND i.founded > 1950 ORDER BY i.province NULLS LAST;"
  },
  {
    "id": 1679,
    "db_id": "institution_sports",
    "question": {
      "id": 1679,
      "db_id": "institution_sports",
      "question": "How many distinct provinces are the institutions in?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many distinct provinces are the institutions in?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many distinct provinces are the institutions in?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT i.province) FROM institution i;"
  },
  {
    "id": 1680,
    "db_id": "institution_sports",
    "question": {
      "id": 1680,
      "db_id": "institution_sports",
      "question": "Count the number of different provinces that have institutions."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of different provinces that have institutions.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of different provinces that have institutions.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT i.province) FROM institution i;"
  },
  {
    "id": 1681,
    "db_id": "warehouse_1",
    "question": {
      "id": 1681,
      "db_id": "warehouse_1",
      "question": "Select all details of all warehouses."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select all details of all warehouses.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select all details of all warehouses.[/QUESTION]\n[SQL]\n SELECT * FROM Warehouses w;"
  },
  {
    "id": 1682,
    "db_id": "warehouse_1",
    "question": {
      "id": 1682,
      "db_id": "warehouse_1",
      "question": "What is all the information about the warehouses?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is all the information about the warehouses?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is all the information about the warehouses?[/QUESTION]\n[SQL]\n SELECT * FROM Warehouses w;"
  },
  {
    "id": 1683,
    "db_id": "warehouse_1",
    "question": {
      "id": 1683,
      "db_id": "warehouse_1",
      "question": "Find all different contents stored in New York."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all different contents stored in New York.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all different contents stored in New York.[/QUESTION]\n[SQL]\n SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location ilike '%New York%'"
  },
  {
    "id": 1684,
    "db_id": "warehouse_1",
    "question": {
      "id": 1684,
      "db_id": "warehouse_1",
      "question": "What are all the different contents stored in boxes in New York?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the different contents stored in boxes in New York?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the different contents stored in boxes in New York?[/QUESTION]\n[SQL]\n SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location ilike '%New York%' ORDER BY b.Contents NULLS LAST;"
  },
  {
    "id": 1685,
    "db_id": "warehouse_1",
    "question": {
      "id": 1685,
      "db_id": "warehouse_1",
      "question": "Select contents of all boxes with a value larger than $150."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select contents of all boxes with a value larger than $150.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select contents of all boxes with a value larger than $150.[/QUESTION]\n[SQL]\n SELECT b.Contents FROM Boxes b WHERE b.Value > 150;"
  },
  {
    "id": 1686,
    "db_id": "warehouse_1",
    "question": {
      "id": 1686,
      "db_id": "warehouse_1",
      "question": "What are the contents of boxes with value greater than 150?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the contents of boxes with value greater than 150?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the contents of boxes with value greater than 150?[/QUESTION]\n[SQL]\n SELECT b.Contents FROM Boxes b WHERE b.Value > 150;"
  },
  {
    "id": 1687,
    "db_id": "warehouse_1",
    "question": {
      "id": 1687,
      "db_id": "warehouse_1",
      "question": "Select the warehouse code and the average value of the boxes in each warehouse."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select the warehouse code and the average value of the boxes in each warehouse.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select the warehouse code and the average value of the boxes in each warehouse.[/QUESTION]\n[SQL]\n SELECT b.warehouse, AVG(b.value) AS average_value FROM boxes b GROUP BY b.warehouse ORDER BY average_value DESC NULLS LAST;"
  },
  {
    "id": 1688,
    "db_id": "warehouse_1",
    "question": {
      "id": 1688,
      "db_id": "warehouse_1",
      "question": "What is the average value of boxes for each warehouse?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average value of boxes for each warehouse?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average value of boxes for each warehouse?[/QUESTION]\n[SQL]\n SELECT b.warehouse, AVG(b.value) AS average_value FROM boxes b GROUP BY b.warehouse ORDER BY average_value DESC NULLS LAST;"
  },
  {
    "id": 1689,
    "db_id": "warehouse_1",
    "question": {
      "id": 1689,
      "db_id": "warehouse_1",
      "question": "Find the average and total values of all boxes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average and total values of all boxes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average and total values of all boxes.[/QUESTION]\n[SQL]\n SELECT AVG(b.Value) AS Average_value, SUM(b.Value) AS Total_value FROM Boxes b;"
  },
  {
    "id": 1690,
    "db_id": "warehouse_1",
    "question": {
      "id": 1690,
      "db_id": "warehouse_1",
      "question": "What are the average and total values across all boxes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average and total values across all boxes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average and total values across all boxes?[/QUESTION]\n[SQL]\n SELECT AVG(b.Value) AS Average_value, SUM(b.Value) AS Total_value FROM Boxes b;"
  },
  {
    "id": 1691,
    "db_id": "warehouse_1",
    "question": {
      "id": 1691,
      "db_id": "warehouse_1",
      "question": "Find the average and total capacity of all warehouses."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average and total capacity of all warehouses.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average and total capacity of all warehouses.[/QUESTION]\n[SQL]\n SELECT AVG(w.capacity) AS average_capacity, SUM(w.capacity) AS total_capacity FROM warehouses w;"
  },
  {
    "id": 1692,
    "db_id": "warehouse_1",
    "question": {
      "id": 1692,
      "db_id": "warehouse_1",
      "question": "What are the average and total capacities across all warehouses?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average and total capacities across all warehouses?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average and total capacities across all warehouses?[/QUESTION]\n[SQL]\n SELECT AVG(w.capacity) AS average_capacity, SUM(w.capacity) AS total_capacity FROM warehouses w;"
  },
  {
    "id": 1693,
    "db_id": "warehouse_1",
    "question": {
      "id": 1693,
      "db_id": "warehouse_1",
      "question": "Find the average and maximum value for each different content."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average and maximum value for each different content.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average and maximum value for each different content.[/QUESTION]\n[SQL]\n SELECT b.contents, AVG(b.value) AS average_value, MAX(b.value) AS max_value FROM boxes b GROUP BY b.contents;"
  },
  {
    "id": 1694,
    "db_id": "warehouse_1",
    "question": {
      "id": 1694,
      "db_id": "warehouse_1",
      "question": "What are the average and maximum values for each type of content in boxes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average and maximum values for each type of content in boxes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average and maximum values for each type of content in boxes?[/QUESTION]\n[SQL]\n SELECT b.contents, AVG(b.value) AS average_value, MAX(b.value) AS max_value FROM Boxes b GROUP BY b.contents;"
  },
  {
    "id": 1695,
    "db_id": "warehouse_1",
    "question": {
      "id": 1695,
      "db_id": "warehouse_1",
      "question": "Find the content that has the highest total values in all boxes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the content that has the highest total values in all boxes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the content that has the highest total values in all boxes.[/QUESTION]\n[SQL]\n SELECT b.Contents, SUM(b.Value) AS Total_Value FROM Boxes b GROUP BY b.Contents ORDER BY Total_Value DESC LIMIT 1;"
  },
  {
    "id": 1696,
    "db_id": "warehouse_1",
    "question": {
      "id": 1696,
      "db_id": "warehouse_1",
      "question": "What is the content with the greatest value across all boxes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the content with the greatest value across all boxes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the content with the greatest value across all boxes?[/QUESTION]\n[SQL]\n SELECT b.Contents, b.Value FROM Boxes b ORDER BY b.Value DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1697,
    "db_id": "warehouse_1",
    "question": {
      "id": 1697,
      "db_id": "warehouse_1",
      "question": "Select the average value of all the boxes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select the average value of all the boxes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select the average value of all the boxes.[/QUESTION]\n[SQL]\n SELECT AVG(b.Value) AS Average_Value FROM Boxes b;"
  },
  {
    "id": 1698,
    "db_id": "warehouse_1",
    "question": {
      "id": 1698,
      "db_id": "warehouse_1",
      "question": "What is the average value of boxes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average value of boxes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average value of boxes?[/QUESTION]\n[SQL]\n SELECT AVG(b.Value) FROM Boxes b;"
  },
  {
    "id": 1699,
    "db_id": "warehouse_1",
    "question": {
      "id": 1699,
      "db_id": "warehouse_1",
      "question": "Select all distinct contents in all the boxes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select all distinct contents in all the boxes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select all distinct contents in all the boxes.[/QUESTION]\n[SQL]\n SELECT DISTINCT b.Contents FROM Boxes b;"
  },
  {
    "id": 1700,
    "db_id": "warehouse_1",
    "question": {
      "id": 1700,
      "db_id": "warehouse_1",
      "question": "What are the different contents in boxes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different contents in boxes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different contents in boxes?[/QUESTION]\n[SQL]\n SELECT b.contents FROM boxes b GROUP BY b.contents ORDER BY COUNT(b.contents) DESC;"
  },
  {
    "id": 1701,
    "db_id": "warehouse_1",
    "question": {
      "id": 1701,
      "db_id": "warehouse_1",
      "question": "Find the number of all distinct contents in all the boxes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of all distinct contents in all the boxes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of all distinct contents in all the boxes.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT b.Contents) AS total_distinct_contents FROM Boxes b;"
  },
  {
    "id": 1702,
    "db_id": "warehouse_1",
    "question": {
      "id": 1702,
      "db_id": "warehouse_1",
      "question": "How many different contents are stored in boxes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different contents are stored in boxes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different contents are stored in boxes?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT b.Contents) AS number_of_distinct_contents FROM Boxes b;"
  },
  {
    "id": 1703,
    "db_id": "warehouse_1",
    "question": {
      "id": 1703,
      "db_id": "warehouse_1",
      "question": "Find all distinct locations of warehouses."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all distinct locations of warehouses.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all distinct locations of warehouses.[/QUESTION]\n[SQL]\n SELECT DISTINCT w.location FROM Warehouses w;"
  },
  {
    "id": 1704,
    "db_id": "warehouse_1",
    "question": {
      "id": 1704,
      "db_id": "warehouse_1",
      "question": "What are the different locations of warehouses?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different locations of warehouses?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different locations of warehouses?[/QUESTION]\n[SQL]\n SELECT DISTINCT w.location FROM Warehouses w;"
  },
  {
    "id": 1705,
    "db_id": "warehouse_1",
    "question": {
      "id": 1705,
      "db_id": "warehouse_1",
      "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the code of boxes that are stored at the warehouses located at Chicago or New York.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the code of boxes that are stored at the warehouses located at Chicago or New York.[/QUESTION]\n[SQL]\n SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%' OR w.location ilike '%New York%';"
  },
  {
    "id": 1706,
    "db_id": "warehouse_1",
    "question": {
      "id": 1706,
      "db_id": "warehouse_1",
      "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the codes of boxes stored in warehouses in either Chicago or New York?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the codes of boxes stored in warehouses in either Chicago or New York?[/QUESTION]\n[SQL]\n SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%' OR w.location ilike '%New York%';"
  },
  {
    "id": 1707,
    "db_id": "warehouse_1",
    "question": {
      "id": 1707,
      "db_id": "warehouse_1",
      "question": "Find the total value of boxes in the warehouses located at Chicago or New York."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the total value of boxes in the warehouses located at Chicago or New York.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the total value of boxes in the warehouses located at Chicago or New York.[/QUESTION]\n[SQL]\n SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York');"
  },
  {
    "id": 1708,
    "db_id": "warehouse_1",
    "question": {
      "id": 1708,
      "db_id": "warehouse_1",
      "question": "What is the total value of boxes located in Chicago or New York?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total value of boxes located in Chicago or New York?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total value of boxes located in Chicago or New York?[/QUESTION]\n[SQL]\n SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York');"
  },
  {
    "id": 1709,
    "db_id": "warehouse_1",
    "question": {
      "id": 1709,
      "db_id": "warehouse_1",
      "question": "Find all contents present in warehouses located in Chicago and those located in New York."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find all contents present in warehouses located in Chicago and those located in New York.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find all contents present in warehouses located in Chicago and those located in New York.[/QUESTION]\n[SQL]\n SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location ilike '%Chicago%' OR w.Location ilike '%New York%';"
  },
  {
    "id": 1710,
    "db_id": "warehouse_1",
    "question": {
      "id": 1710,
      "db_id": "warehouse_1",
      "question": "Find the contents that are stored in both Chicago and New York."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the contents that are stored in both Chicago and New York.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the contents that are stored in both Chicago and New York.[/QUESTION]\n[SQL]\n SELECT b.contents FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%' AND w.location ilike '%New York%';"
  },
  {
    "id": 1711,
    "db_id": "warehouse_1",
    "question": {
      "id": 1711,
      "db_id": "warehouse_1",
      "question": "Find the type of contents that are not in the warehouses located at New York."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the type of contents that are not in the warehouses located at New York.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the type of contents that are not in the warehouses located at New York.[/QUESTION]\n[SQL]\n SELECT b.contents FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location != 'New York' ORDER BY b.contents NULLS LAST;"
  },
  {
    "id": 1712,
    "db_id": "warehouse_1",
    "question": {
      "id": 1712,
      "db_id": "warehouse_1",
      "question": "What types of contents cannot be found in warehouses in New York?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What types of contents cannot be found in warehouses in New York?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What types of contents cannot be found in warehouses in New York?[/QUESTION]\n[SQL]\n SELECT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location not ilike '%New York%'"
  },
  {
    "id": 1713,
    "db_id": "warehouse_1",
    "question": {
      "id": 1713,
      "db_id": "warehouse_1",
      "question": "Find the location of the warehouses which have contents Rocks but not Scissors."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the location of the warehouses which have contents Rocks but not Scissors.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the location of the warehouses which have contents Rocks but not Scissors.[/QUESTION]\n[SQL]\n SELECT w.location FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse WHERE b.contents ilike '%Rocks%' AND b.contents not ilike '%Scissors%' ORDER BY w.location NULLS LAST;"
  },
  {
    "id": 1714,
    "db_id": "warehouse_1",
    "question": {
      "id": 1714,
      "db_id": "warehouse_1",
      "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the locations of warehouses that have boxes containing Rocks but not Scissors?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the locations of warehouses that have boxes containing Rocks but not Scissors?[/QUESTION]\n[SQL]\n SELECT DISTINCT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents ilike '%Rock%' AND b.Contents not ilike '%Scissors%';"
  },
  {
    "id": 1715,
    "db_id": "warehouse_1",
    "question": {
      "id": 1715,
      "db_id": "warehouse_1",
      "question": "Find the warehouses which store contents Rocks or Scissors."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the warehouses which store contents Rocks or Scissors.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the warehouses which store contents Rocks or Scissors.[/QUESTION]\n[SQL]\n SELECT DISTINCT w.code, w.location FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE b.contents ilike '%Rocks%' OR b.contents ilike '%Scissors%';"
  },
  {
    "id": 1716,
    "db_id": "warehouse_1",
    "question": {
      "id": 1716,
      "db_id": "warehouse_1",
      "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct warehouses that have boxes with Rocks or Scissors as contents?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct warehouses that have boxes with Rocks or Scissors as contents?[/QUESTION]\n[SQL]\n SELECT DISTINCT b.warehouse FROM boxes b WHERE b.contents ilike '%Rocks%' OR b.contents ilike '%Scissors%';"
  },
  {
    "id": 1717,
    "db_id": "warehouse_1",
    "question": {
      "id": 1717,
      "db_id": "warehouse_1",
      "question": "Find the location of the warehouses which store contents Rocks and Scissors."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the location of the warehouses which store contents Rocks and Scissors.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the location of the warehouses which store contents Rocks and Scissors.[/QUESTION]\n[SQL]\n SELECT DISTINCT w.location FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code WHERE b.contents ilike '%Rocks%' OR b.contents ilike '%Scissors%';"
  },
  {
    "id": 1718,
    "db_id": "warehouse_1",
    "question": {
      "id": 1718,
      "db_id": "warehouse_1",
      "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?[/QUESTION]\n[SQL]\n SELECT DISTINCT w.location FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code WHERE b.contents ilike '%Rocks%Scissors%'"
  },
  {
    "id": 1719,
    "db_id": "warehouse_1",
    "question": {
      "id": 1719,
      "db_id": "warehouse_1",
      "question": "List the code and contents of all boxes sorted by their values."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the code and contents of all boxes sorted by their values.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the code and contents of all boxes sorted by their values.[/QUESTION]\n[SQL]\n SELECT b.code, b.contents, b.value FROM boxes b ORDER BY b.value DESC;"
  },
  {
    "id": 1720,
    "db_id": "warehouse_1",
    "question": {
      "id": 1720,
      "db_id": "warehouse_1",
      "question": "What are the codes and corresponding contents of all the boxes, ordered by their values?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the codes and corresponding contents of all the boxes, ordered by their values?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the codes and corresponding contents of all the boxes, ordered by their values?[/QUESTION]\n[SQL]\n SELECT b.code, b.contents, b.value FROM boxes b ORDER BY b.value DESC;"
  },
  {
    "id": 1721,
    "db_id": "warehouse_1",
    "question": {
      "id": 1721,
      "db_id": "warehouse_1",
      "question": "Find the code and contents of the box with the lowest value."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the code and contents of the box with the lowest value.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the code and contents of the box with the lowest value.[/QUESTION]\n[SQL]\n SELECT b.code, b.contents FROM boxes b ORDER BY b.value ASC LIMIT 1;"
  },
  {
    "id": 1722,
    "db_id": "warehouse_1",
    "question": {
      "id": 1722,
      "db_id": "warehouse_1",
      "question": "What is the code and contents for the box that has the smallest value?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the code and contents for the box that has the smallest value?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the code and contents for the box that has the smallest value?[/QUESTION]\n[SQL]\n SELECT b.code, b.contents FROM boxes b ORDER BY b.value ASC LIMIT 1;"
  },
  {
    "id": 1723,
    "db_id": "warehouse_1",
    "question": {
      "id": 1723,
      "db_id": "warehouse_1",
      "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the unique contents of all boxes whose value is higher than the average value of all boxes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the unique contents of all boxes whose value is higher than the average value of all boxes.[/QUESTION]\n[SQL]\n SELECT b.contents FROM boxes b WHERE b.value > (SELECT AVG(b2.value) FROM boxes b2);"
  },
  {
    "id": 1724,
    "db_id": "warehouse_1",
    "question": {
      "id": 1724,
      "db_id": "warehouse_1",
      "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different contents of boxes for which the value is higher than the average value across all boxes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different contents of boxes for which the value is higher than the average value across all boxes?[/QUESTION]\n[SQL]\n SELECT b.contents FROM Boxes b WHERE b.value > (SELECT AVG(b2.value) FROM Boxes b2);"
  },
  {
    "id": 1725,
    "db_id": "warehouse_1",
    "question": {
      "id": 1725,
      "db_id": "warehouse_1",
      "question": "List all different types of contents ordered by contents."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all different types of contents ordered by contents.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all different types of contents ordered by contents.[/QUESTION]\n[SQL]\n SELECT b.contents FROM boxes b GROUP BY b.contents ORDER BY b.contents NULLS LAST;"
  },
  {
    "id": 1726,
    "db_id": "warehouse_1",
    "question": {
      "id": 1726,
      "db_id": "warehouse_1",
      "question": "What are the different contents of boxes, ordered alphabetically?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different contents of boxes, ordered alphabetically?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different contents of boxes, ordered alphabetically?[/QUESTION]\n[SQL]\n SELECT b.contents FROM boxes b ORDER BY b.contents ASC;"
  },
  {
    "id": 1727,
    "db_id": "warehouse_1",
    "question": {
      "id": 1727,
      "db_id": "warehouse_1",
      "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.[/QUESTION]\n[SQL]\n SELECT b.code FROM boxes b WHERE b.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Rocks');"
  },
  {
    "id": 1728,
    "db_id": "warehouse_1",
    "question": {
      "id": 1728,
      "db_id": "warehouse_1",
      "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?[/QUESTION]\n[SQL]\n SELECT b.code FROM Boxes b WHERE b.value > (SELECT MAX(b2.value) FROM Boxes b2 WHERE b2.contents ilike '%Rocks%');"
  },
  {
    "id": 1729,
    "db_id": "warehouse_1",
    "question": {
      "id": 1729,
      "db_id": "warehouse_1",
      "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.[/QUESTION]\n[SQL]\n SELECT b.code, b.contents, b.value FROM boxes b WHERE b.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Scissors');"
  },
  {
    "id": 1730,
    "db_id": "warehouse_1",
    "question": {
      "id": 1730,
      "db_id": "warehouse_1",
      "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?[/QUESTION]\n[SQL]\n SELECT b.code, b.contents, b.value FROM Boxes b WHERE b.value > (SELECT MAX(b2.value) FROM Boxes b2 WHERE b2.contents ilike '%Scissors%');"
  },
  {
    "id": 1731,
    "db_id": "warehouse_1",
    "question": {
      "id": 1731,
      "db_id": "warehouse_1",
      "question": "Find the total value of boxes stored in the warehouse with the largest capacity."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the total value of boxes stored in the warehouse with the largest capacity.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the total value of boxes stored in the warehouse with the largest capacity.[/QUESTION]\n[SQL]\n SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Capacity = (SELECT MAX(w.Capacity) FROM Warehouses);"
  },
  {
    "id": 1732,
    "db_id": "warehouse_1",
    "question": {
      "id": 1732,
      "db_id": "warehouse_1",
      "question": "What is the total value of boxes kept in the warehouse with the greatest capacity?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total value of boxes kept in the warehouse with the greatest capacity?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total value of boxes kept in the warehouse with the greatest capacity?[/QUESTION]\n[SQL]\n SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Capacity = (SELECT MAX(w.Capacity) FROM Warehouses);"
  },
  {
    "id": 1733,
    "db_id": "warehouse_1",
    "question": {
      "id": 1733,
      "db_id": "warehouse_1",
      "question": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.[/QUESTION]\n[SQL]\n SELECT w.code, AVG(b.value) AS average_value FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code HAVING AVG(b.value) > 150 ORDER BY average_value DESC NULLS LAST;"
  },
  {
    "id": 1734,
    "db_id": "warehouse_1",
    "question": {
      "id": 1734,
      "db_id": "warehouse_1",
      "question": "What are the average values of boxes for each warehouse than has an average value greater than 150?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the average values of boxes for each warehouse than has an average value greater than 150?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the average values of boxes for each warehouse than has an average value greater than 150?[/QUESTION]\n[SQL]\n SELECT AVG(b.Value) AS Average_Box_Value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE b.Value > 150 GROUP BY w.Code;"
  },
  {
    "id": 1735,
    "db_id": "warehouse_1",
    "question": {
      "id": 1735,
      "db_id": "warehouse_1",
      "question": "Find the total value and number of boxes for each content type."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the total value and number of boxes for each content type.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the total value and number of boxes for each content type.[/QUESTION]\n[SQL]\n SELECT b.contents, SUM(b.value) AS total_value, COUNT(b.code) AS total_boxes FROM boxes b GROUP BY b.contents ORDER BY total_value DESC;"
  },
  {
    "id": 1736,
    "db_id": "warehouse_1",
    "question": {
      "id": 1736,
      "db_id": "warehouse_1",
      "question": "For each content, what is the total value and number of boxes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each content, what is the total value and number of boxes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each content, what is the total value and number of boxes?[/QUESTION]\n[SQL]\n SELECT b.contents, SUM(b.value) AS total_value, COUNT(b.code) AS total_boxes FROM boxes b GROUP BY b.contents ORDER BY total_value DESC;"
  },
  {
    "id": 1737,
    "db_id": "warehouse_1",
    "question": {
      "id": 1737,
      "db_id": "warehouse_1",
      "question": "Find the total, average, and maximum capacity for different locations."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the total, average, and maximum capacity for different locations.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the total, average, and maximum capacity for different locations.[/QUESTION]\n[SQL]\n SELECT w.location, SUM(w.capacity) AS total_capacity, AVG(w.capacity) AS average_capacity, MAX(w.capacity) AS max_capacity FROM Warehouses w GROUP BY w.location;"
  },
  {
    "id": 1738,
    "db_id": "warehouse_1",
    "question": {
      "id": 1738,
      "db_id": "warehouse_1",
      "question": "For each location, what are the total, average, and maximum capacities of warehouses?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each location, what are the total, average, and maximum capacities of warehouses?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each location, what are the total, average, and maximum capacities of warehouses?[/QUESTION]\n[SQL]\n SELECT w.location, SUM(w.capacity) AS total_capacity, AVG(w.capacity) AS average_capacity, MAX(w.capacity) AS max_capacity FROM Warehouses w GROUP BY w.location;"
  },
  {
    "id": 1739,
    "db_id": "warehouse_1",
    "question": {
      "id": 1739,
      "db_id": "warehouse_1",
      "question": "Find the total capacity of all warehouse locations."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the total capacity of all warehouse locations.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the total capacity of all warehouse locations.[/QUESTION]\n[SQL]\n SELECT SUM(w.Capacity) AS Total_Capacity FROM Warehouses w;"
  },
  {
    "id": 1740,
    "db_id": "warehouse_1",
    "question": {
      "id": 1740,
      "db_id": "warehouse_1",
      "question": "What is the total capacity of all warehouses?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total capacity of all warehouses?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total capacity of all warehouses?[/QUESTION]\n[SQL]\n SELECT SUM(w.Capacity) AS total_capacity FROM Warehouses w;"
  },
  {
    "id": 1741,
    "db_id": "warehouse_1",
    "question": {
      "id": 1741,
      "db_id": "warehouse_1",
      "question": "Find the value of the most expensive boxes saved in each warehouse location."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the value of the most expensive boxes saved in each warehouse location.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the value of the most expensive boxes saved in each warehouse location.[/QUESTION]\n[SQL]\n SELECT w.location, MAX(b.value) AS max_value FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code GROUP BY w.location ORDER BY max_value DESC;"
  },
  {
    "id": 1742,
    "db_id": "warehouse_1",
    "question": {
      "id": 1742,
      "db_id": "warehouse_1",
      "question": "For each warehouse location, what is the value of the most expensive box?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each warehouse location, what is the value of the most expensive box?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each warehouse location, what is the value of the most expensive box?[/QUESTION]\n[SQL]\n SELECT w.location, MAX(b.value) AS max_value FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code GROUP BY w.location ORDER BY max_value DESC NULLS LAST;"
  },
  {
    "id": 1743,
    "db_id": "warehouse_1",
    "question": {
      "id": 1743,
      "db_id": "warehouse_1",
      "question": "Select the warehouse codes along with the number of boxes in each warehouse."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select the warehouse codes along with the number of boxes in each warehouse.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select the warehouse codes along with the number of boxes in each warehouse.[/QUESTION]\n[SQL]\n SELECT w.code, COUNT(b.code) AS number_of_boxes FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code ORDER BY number_of_boxes DESC NULLS LAST;"
  },
  {
    "id": 1744,
    "db_id": "warehouse_1",
    "question": {
      "id": 1744,
      "db_id": "warehouse_1",
      "question": "How many boxes are there with each warehouse ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many boxes are there with each warehouse ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many boxes are there with each warehouse ?[/QUESTION]\n[SQL]\n SELECT b.warehouse, COUNT(*) AS number_of_boxes FROM boxes b GROUP BY b.warehouse ORDER BY number_of_boxes DESC NULLS LAST;"
  },
  {
    "id": 1745,
    "db_id": "warehouse_1",
    "question": {
      "id": 1745,
      "db_id": "warehouse_1",
      "question": "Find the number of different locations where Rocks are stored."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of different locations where Rocks are stored.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of different locations where Rocks are stored.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT w.location) FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse WHERE b.contents ilike '%Rock%';"
  },
  {
    "id": 1746,
    "db_id": "warehouse_1",
    "question": {
      "id": 1746,
      "db_id": "warehouse_1",
      "question": "In how many different warehouses are Rocks stored within boxes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]In how many different warehouses are Rocks stored within boxes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]In how many different warehouses are Rocks stored within boxes?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT b.warehouse) FROM boxes b WHERE b.contents ilike '%Rock%';"
  },
  {
    "id": 1747,
    "db_id": "warehouse_1",
    "question": {
      "id": 1747,
      "db_id": "warehouse_1",
      "question": "Select the code of each box, along with the name of the city the box is located in."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select the code of each box, along with the name of the city the box is located in.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select the code of each box, along with the name of the city the box is located in.[/QUESTION]\n[SQL]\n SELECT b.code, w.location FROM boxes b JOIN warehouses w ON b.warehouse = w.code;"
  },
  {
    "id": 1748,
    "db_id": "warehouse_1",
    "question": {
      "id": 1748,
      "db_id": "warehouse_1",
      "question": "What are the codes of all boxes, as well as the locations of the warehouses they are in?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the codes of all boxes, as well as the locations of the warehouses they are in?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the codes of all boxes, as well as the locations of the warehouses they are in?[/QUESTION]\n[SQL]\n SELECT b.code, w.location FROM boxes b JOIN warehouses w ON b.warehouse = w.code;"
  },
  {
    "id": 1749,
    "db_id": "warehouse_1",
    "question": {
      "id": 1749,
      "db_id": "warehouse_1",
      "question": "Select the codes of all the boxes located in Chicago."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select the codes of all the boxes located in Chicago.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select the codes of all the boxes located in Chicago.[/QUESTION]\n[SQL]\n SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%'"
  },
  {
    "id": 1750,
    "db_id": "warehouse_1",
    "question": {
      "id": 1750,
      "db_id": "warehouse_1",
      "question": "What are the codes of boxes stored in warehouses in Chicago?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the codes of boxes stored in warehouses in Chicago?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the codes of boxes stored in warehouses in Chicago?[/QUESTION]\n[SQL]\n SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%'"
  },
  {
    "id": 1751,
    "db_id": "warehouse_1",
    "question": {
      "id": 1751,
      "db_id": "warehouse_1",
      "question": "Find the number of boxes saved in each warehouse."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of boxes saved in each warehouse.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of boxes saved in each warehouse.[/QUESTION]\n[SQL]\n SELECT b.warehouse, COUNT(*) AS total_boxes FROM boxes b GROUP BY b.warehouse ORDER BY total_boxes DESC NULLS LAST;"
  },
  {
    "id": 1752,
    "db_id": "warehouse_1",
    "question": {
      "id": 1752,
      "db_id": "warehouse_1",
      "question": "How many boxes are stored in each warehouse?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many boxes are stored in each warehouse?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many boxes are stored in each warehouse?[/QUESTION]\n[SQL]\n SELECT b.warehouse, COUNT(*) AS number_of_boxes FROM boxes b GROUP BY b.warehouse ORDER BY number_of_boxes DESC NULLS LAST;"
  },
  {
    "id": 1753,
    "db_id": "warehouse_1",
    "question": {
      "id": 1753,
      "db_id": "warehouse_1",
      "question": "Find the number of distinct types of contents in each warehouse."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of distinct types of contents in each warehouse.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of distinct types of contents in each warehouse.[/QUESTION]\n[SQL]\n SELECT b.warehouse, COUNT(DISTINCT b.contents) AS num_distinct_types FROM boxes b GROUP BY b.warehouse ORDER BY num_distinct_types DESC NULLS LAST;"
  },
  {
    "id": 1754,
    "db_id": "warehouse_1",
    "question": {
      "id": 1754,
      "db_id": "warehouse_1",
      "question": "How many different types of contents are stored in each warehouse?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different types of contents are stored in each warehouse?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different types of contents are stored in each warehouse?[/QUESTION]\n[SQL]\n SELECT b.warehouse, COUNT(DISTINCT b.contents) AS number_of_distinct_contents FROM boxes b GROUP BY b.warehouse ORDER BY number_of_distinct_contents DESC NULLS LAST;"
  },
  {
    "id": 1755,
    "db_id": "warehouse_1",
    "question": {
      "id": 1755,
      "db_id": "warehouse_1",
      "question": "Select the codes of all warehouses that are above capacity."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select the codes of all warehouses that are above capacity.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select the codes of all warehouses that are above capacity.[/QUESTION]\n[SQL]\n SELECT w.code FROM Warehouses w WHERE w.capacity < (SELECT COUNT(*) FROM Boxes b WHERE b.warehouse = w.code);"
  },
  {
    "id": 1756,
    "db_id": "warehouse_1",
    "question": {
      "id": 1756,
      "db_id": "warehouse_1",
      "question": "What are the codes of warehouses that have more boxes than their capacity?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the codes of warehouses that have more boxes than their capacity?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the codes of warehouses that have more boxes than their capacity?[/QUESTION]\n[SQL]\n SELECT w.code FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code HAVING COUNT(b.code) > w.capacity;"
  },
  {
    "id": 1757,
    "db_id": "warehouse_1",
    "question": {
      "id": 1757,
      "db_id": "warehouse_1",
      "question": "Find the total values of boxes that are not in the warehouses located at Chicago."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the total values of boxes that are not in the warehouses located at Chicago.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the total values of boxes that are not in the warehouses located at Chicago.[/QUESTION]\n[SQL]\n SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location != 'Chicago';"
  },
  {
    "id": 1758,
    "db_id": "warehouse_1",
    "question": {
      "id": 1758,
      "db_id": "warehouse_1",
      "question": "What is the total value of boxes contained in any location but Chicago?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total value of boxes contained in any location but Chicago?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total value of boxes contained in any location but Chicago?[/QUESTION]\n[SQL]\n SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location != 'Chicago';"
  },
  {
    "id": 1759,
    "db_id": "university_rank",
    "question": {
      "id": 1759,
      "db_id": "university_rank",
      "question": "Show name, city, and state for all universities in  alphabetical order of university name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show name, city, and state for all universities in  alphabetical order of university name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show name, city, and state for all universities in  alphabetical order of university name.[/QUESTION]\n[SQL]\n SELECT u.university_name, u.city, u.state FROM university u ORDER BY u.university_name NULLS LAST;"
  },
  {
    "id": 1760,
    "db_id": "university_rank",
    "question": {
      "id": 1760,
      "db_id": "university_rank",
      "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university)."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names, cities, and states of all universities in alphabetical order (by name of the university).[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names, cities, and states of all universities in alphabetical order (by name of the university).[/QUESTION]\n[SQL]\n SELECT u.university_name, u.city, u.state FROM university u ORDER BY u.university_name ASC;"
  },
  {
    "id": 1761,
    "db_id": "university_rank",
    "question": {
      "id": 1761,
      "db_id": "university_rank",
      "question": "How many universities are in Illinois or Ohio?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many universities are in Illinois or Ohio?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many universities are in Illinois or Ohio?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM university u WHERE u.state IN ('Illinois', 'Ohio');"
  },
  {
    "id": 1762,
    "db_id": "university_rank",
    "question": {
      "id": 1762,
      "db_id": "university_rank",
      "question": "What is the total number of universities located in Illinois or Ohio?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total number of universities located in Illinois or Ohio?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total number of universities located in Illinois or Ohio?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT u.University_ID) FROM university u WHERE u.State IN ('Illinois', 'Ohio');"
  },
  {
    "id": 1763,
    "db_id": "university_rank",
    "question": {
      "id": 1763,
      "db_id": "university_rank",
      "question": "What is the maximum, average, and minimum enrollment for universities?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the maximum, average, and minimum enrollment for universities?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the maximum, average, and minimum enrollment for universities?[/QUESTION]\n[SQL]\n SELECT MAX(u.enrollment) AS max_enrollment, AVG(u.enrollment) AS avg_enrollment, MIN(u.enrollment) AS min_enrollment FROM university u;"
  },
  {
    "id": 1764,
    "db_id": "university_rank",
    "question": {
      "id": 1764,
      "db_id": "university_rank",
      "question": "What is the maximum, average, and minimum enrollment for all universities?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the maximum, average, and minimum enrollment for all universities?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the maximum, average, and minimum enrollment for all universities?[/QUESTION]\n[SQL]\n SELECT MAX(u.enrollment) AS max_enrollment, AVG(u.enrollment) AS avg_enrollment, MIN(u.enrollment) AS min_enrollment FROM university u;"
  },
  {
    "id": 1765,
    "db_id": "university_rank",
    "question": {
      "id": 1765,
      "db_id": "university_rank",
      "question": "List team name for all universities with enrollments above the average."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List team name for all universities with enrollments above the average.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List team name for all universities with enrollments above the average.[/QUESTION]\n[SQL]\n SELECT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(enrollment) FROM university);"
  },
  {
    "id": 1766,
    "db_id": "university_rank",
    "question": {
      "id": 1766,
      "db_id": "university_rank",
      "question": "What are the names of all teams from universities that have more people enrolled than average ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all teams from universities that have more people enrolled than average ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all teams from universities that have more people enrolled than average ?[/QUESTION]\n[SQL]\n SELECT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(u2.enrollment) FROM university u2);"
  },
  {
    "id": 1767,
    "db_id": "university_rank",
    "question": {
      "id": 1767,
      "db_id": "university_rank",
      "question": "Show all home conferences."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all home conferences.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all home conferences.[/QUESTION]\n[SQL]\n SELECT DISTINCT u.home_conference FROM university u;"
  },
  {
    "id": 1768,
    "db_id": "university_rank",
    "question": {
      "id": 1768,
      "db_id": "university_rank",
      "question": "What are the different home conferences from the university table?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different home conferences from the university table?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different home conferences from the university table?[/QUESTION]\n[SQL]\n SELECT DISTINCT u.home_conference FROM university u;"
  },
  {
    "id": 1769,
    "db_id": "university_rank",
    "question": {
      "id": 1769,
      "db_id": "university_rank",
      "question": "Show all home conferences and the number of universities in each conference."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all home conferences and the number of universities in each conference.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all home conferences and the number of universities in each conference.[/QUESTION]\n[SQL]\n SELECT u.home_conference, COUNT(u.university_id) AS university_count FROM university u GROUP BY u.home_conference ORDER BY university_count DESC NULLS LAST;"
  },
  {
    "id": 1770,
    "db_id": "university_rank",
    "question": {
      "id": 1770,
      "db_id": "university_rank",
      "question": "For every home conference, how many universities attended that conference?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For every home conference, how many universities attended that conference?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For every home conference, how many universities attended that conference?[/QUESTION]\n[SQL]\n SELECT u.home_conference, COUNT(u.university_id) AS number_of_universities FROM university u GROUP BY u.home_conference ORDER BY number_of_universities DESC NULLS LAST;"
  },
  {
    "id": 1771,
    "db_id": "university_rank",
    "question": {
      "id": 1771,
      "db_id": "university_rank",
      "question": "Which state has most number of universities?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which state has most number of universities?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which state has most number of universities?[/QUESTION]\n[SQL]\n SELECT u.state, COUNT(u.university_id) AS university_count FROM university u GROUP BY u.state ORDER BY university_count DESC LIMIT 1;"
  },
  {
    "id": 1772,
    "db_id": "university_rank",
    "question": {
      "id": 1772,
      "db_id": "university_rank",
      "question": "What is the state with the most universities?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the state with the most universities?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the state with the most universities?[/QUESTION]\n[SQL]\n SELECT u.state, COUNT(u.university_id) AS university_count FROM university u GROUP BY u.state ORDER BY university_count DESC LIMIT 1;"
  },
  {
    "id": 1773,
    "db_id": "university_rank",
    "question": {
      "id": 1773,
      "db_id": "university_rank",
      "question": "Show all home conferences with average enrollment of universities above 2000."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all home conferences with average enrollment of universities above 2000.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all home conferences with average enrollment of universities above 2000.[/QUESTION]\n[SQL]\n SELECT u.home_conference FROM university u WHERE AVG(u.enrollment) > 2000 GROUP BY u.home_conference ORDER BY COUNT(u.enrollment) DESC NULLS LAST;"
  },
  {
    "id": 1774,
    "db_id": "university_rank",
    "question": {
      "id": 1774,
      "db_id": "university_rank",
      "question": "What are the home conferences that have an average university enrollment above 2000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the home conferences that have an average university enrollment above 2000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the home conferences that have an average university enrollment above 2000?[/QUESTION]\n[SQL]\n SELECT u.home_conference FROM university u WHERE AVG(u.enrollment) > 2000 GROUP BY u.home_conference;"
  },
  {
    "id": 1775,
    "db_id": "university_rank",
    "question": {
      "id": 1775,
      "db_id": "university_rank",
      "question": "Which conference has the least number of total enrollment?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which conference has the least number of total enrollment?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which conference has the least number of total enrollment?[/QUESTION]\n[SQL]\n SELECT u.home_conference, SUM(u.enrollment) AS total_enrollment FROM university u GROUP BY u.home_conference ORDER BY total_enrollment ASC LIMIT 1;"
  },
  {
    "id": 1776,
    "db_id": "university_rank",
    "question": {
      "id": 1776,
      "db_id": "university_rank",
      "question": "What are the home conferences with the fewest number of people enrolled?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the home conferences with the fewest number of people enrolled?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the home conferences with the fewest number of people enrolled?[/QUESTION]\n[SQL]\n SELECT u.home_conference, MIN(u.enrollment) AS min_enrollment FROM university u GROUP BY u.home_conference ORDER BY min_enrollment ASC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1777,
    "db_id": "university_rank",
    "question": {
      "id": 1777,
      "db_id": "university_rank",
      "question": "List all major name and major code in the order of their major code"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all major name and major code in the order of their major code[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all major name and major code in the order of their major code[/QUESTION]\n[SQL]\n SELECT m.major_name, m.major_code FROM major m ORDER BY m.major_code NULLS LAST;"
  },
  {
    "id": 1778,
    "db_id": "university_rank",
    "question": {
      "id": 1778,
      "db_id": "university_rank",
      "question": "What are the names and codes for all majors ordered by their code?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and codes for all majors ordered by their code?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and codes for all majors ordered by their code?[/QUESTION]\n[SQL]\n SELECT m.major_name, m.major_code FROM major m ORDER BY m.major_code NULLS LAST;"
  },
  {
    "id": 1779,
    "db_id": "university_rank",
    "question": {
      "id": 1779,
      "db_id": "university_rank",
      "question": "Show all majors and major ranks for the university with name Augustana College."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all majors and major ranks for the university with name Augustana College.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all majors and major ranks for the university with name Augustana College.[/QUESTION]\n[SQL]\n SELECT m.major_name, r.rank FROM major m JOIN major_ranking r ON m.major_id = r.major_id WHERE m.university_name ilike '%Augustana%College%' ORDER BY r.rank NULLS LAST;"
  },
  {
    "id": 1780,
    "db_id": "university_rank",
    "question": {
      "id": 1780,
      "db_id": "university_rank",
      "question": "What are the ranks and names of all majors at Augustana College?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ranks and names of all majors at Augustana College?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ranks and names of all majors at Augustana College?[/QUESTION]\n[SQL]\n SELECT m.major_name, r.rank FROM major m JOIN major_ranking r ON m.major_id = r.major_id WHERE r.university_id = 1055973;"
  },
  {
    "id": 1781,
    "db_id": "university_rank",
    "question": {
      "id": 1781,
      "db_id": "university_rank",
      "question": "What is the name, city, state of the university with a rank 1 on Accounting major?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name, city, state of the university with a rank 1 on Accounting major?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name, city, state of the university with a rank 1 on Accounting major?[/QUESTION]\n[SQL]\n SELECT u.University_Name, u.City, u.State FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') ORDER BY mr.Rank ASC LIMIT 1;"
  },
  {
    "id": 1782,
    "db_id": "university_rank",
    "question": {
      "id": 1782,
      "db_id": "university_rank",
      "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name, city, and state of the university with number 1 ranked Accounting major?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name, city, and state of the university with number 1 ranked Accounting major?[/QUESTION]\n[SQL]\n SELECT u.University_Name, u.City, u.State FROM university u JOIN major m ON u.University_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' ORDER BY rank NULLS LAST LIMIT 1;"
  },
  {
    "id": 1783,
    "db_id": "university_rank",
    "question": {
      "id": 1783,
      "db_id": "university_rank",
      "question": "What is the name of the university that has most number of majors with rank 1?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the university that has most number of majors with rank 1?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the university that has most number of majors with rank 1?[/QUESTION]\n[SQL]\n SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Rank = 1 GROUP BY u.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;"
  },
  {
    "id": 1784,
    "db_id": "university_rank",
    "question": {
      "id": 1784,
      "db_id": "university_rank",
      "question": "What is the name of the university with the most majors ranked number 1?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the university with the most majors ranked number 1?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the university with the most majors ranked number 1?[/QUESTION]\n[SQL]\n SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Rank = 1 GROUP BY u.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;"
  },
  {
    "id": 1785,
    "db_id": "university_rank",
    "question": {
      "id": 1785,
      "db_id": "university_rank",
      "question": "Show all university names without a major with rank 1?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all university names without a major with rank 1?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all university names without a major with rank 1?[/QUESTION]\n[SQL]\n SELECT u.University_Name FROM university u LEFT JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Rank IS NULL OR mr.Rank != 1 ORDER BY u.University_Name NULLS LAST;"
  },
  {
    "id": 1786,
    "db_id": "university_rank",
    "question": {
      "id": 1786,
      "db_id": "university_rank",
      "question": "What are the names of all universities without any majors ranked number 1?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all universities without any majors ranked number 1?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all universities without any majors ranked number 1?[/QUESTION]\n[SQL]\n SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Rank = 1);"
  },
  {
    "id": 1787,
    "db_id": "university_rank",
    "question": {
      "id": 1787,
      "db_id": "university_rank",
      "question": "Show all university names with both major Accounting and major Urban Education."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all university names with both major Accounting and major Urban Education.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all university names with both major Accounting and major Urban Education.[/QUESTION]\n[SQL]\n SELECT DISTINCT u.University_Name FROM university u JOIN major_ranking mr1 ON u.University_ID = mr1.University_ID JOIN major_ranking mr2 ON u.University_ID = mr2.University_ID WHERE mr1.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND mr2.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education');"
  },
  {
    "id": 1788,
    "db_id": "university_rank",
    "question": {
      "id": 1788,
      "db_id": "university_rank",
      "question": "What are the names of all universities that have both Accounting and Urban Education majors?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all universities that have both Accounting and Urban Education majors?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all universities that have both Accounting and Urban Education majors?[/QUESTION]\n[SQL]\n SELECT DISTINCT u.University_Name FROM university u JOIN major_ranking mr1 ON u.University_ID = mr1.University_ID JOIN major_ranking mr2 ON u.University_ID = mr2.University_ID WHERE mr1.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND mr2.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education');"
  },
  {
    "id": 1789,
    "db_id": "university_rank",
    "question": {
      "id": 1789,
      "db_id": "university_rank",
      "question": "What is the name and overall ranking of universities in Wisconsin state?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name and overall ranking of universities in Wisconsin state?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name and overall ranking of universities in Wisconsin state?[/QUESTION]\n[SQL]\n SELECT u.university_name, o.rank FROM university u JOIN overall_ranking o ON u.university_id = o.university_id WHERE u.state = 'Wisconsin' ORDER BY o.rank NULLS LAST;"
  },
  {
    "id": 1790,
    "db_id": "university_rank",
    "question": {
      "id": 1790,
      "db_id": "university_rank",
      "question": "What is the name and rank of every university in Wisconsin?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name and rank of every university in Wisconsin?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name and rank of every university in Wisconsin?[/QUESTION]\n[SQL]\n SELECT u.university_name, o.rank FROM university u JOIN overall_ranking o ON u.university_id = o.university_id WHERE u.state = 'Wisconsin' ORDER BY o.rank NULLS LAST;"
  },
  {
    "id": 1791,
    "db_id": "university_rank",
    "question": {
      "id": 1791,
      "db_id": "university_rank",
      "question": "What is the university name with highest research point?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the university name with highest research point?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the university name with highest research point?[/QUESTION]\n[SQL]\n SELECT u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Research_point DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1792,
    "db_id": "university_rank",
    "question": {
      "id": 1792,
      "db_id": "university_rank",
      "question": "What is the name of the university with the most research points?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the university with the most research points?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the university with the most research points?[/QUESTION]\n[SQL]\n SELECT u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Research_point DESC LIMIT 1;"
  },
  {
    "id": 1793,
    "db_id": "university_rank",
    "question": {
      "id": 1793,
      "db_id": "university_rank",
      "question": "List all university names in ascending order of their reputation points."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all university names in ascending order of their reputation points.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all university names in ascending order of their reputation points.[/QUESTION]\n[SQL]\n SELECT u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Reputation_point ASC;"
  },
  {
    "id": 1794,
    "db_id": "university_rank",
    "question": {
      "id": 1794,
      "db_id": "university_rank",
      "question": "What are the names of all universities in ascending order of reputation points?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all universities in ascending order of reputation points?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all universities in ascending order of reputation points?[/QUESTION]\n[SQL]\n SELECT u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Reputation_point ASC;"
  },
  {
    "id": 1795,
    "db_id": "university_rank",
    "question": {
      "id": 1795,
      "db_id": "university_rank",
      "question": "What is the name of university with major Accounting ranked 3 or above?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of university with major Accounting ranked 3 or above?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of university with major Accounting ranked 3 or above?[/QUESTION]\n[SQL]\n SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND mr.Rank >= 3;"
  },
  {
    "id": 1796,
    "db_id": "university_rank",
    "question": {
      "id": 1796,
      "db_id": "university_rank",
      "question": "What are the names of the university with an Accounting major ranked 3 or higher?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the university with an Accounting major ranked 3 or higher?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the university with an Accounting major ranked 3 or higher?[/QUESTION]\n[SQL]\n SELECT u.University_Name FROM university u JOIN major m ON u.University_ID = m.Major_ID JOIN major_ranking r ON m.Major_ID = r.Major_ID WHERE m.Major_Name = 'Accounting' AND r.Rank >= 3 ORDER BY r.Rank NULLS LAST;"
  },
  {
    "id": 1797,
    "db_id": "university_rank",
    "question": {
      "id": 1797,
      "db_id": "university_rank",
      "question": "What is the total enrollment of universities with a overall rank 5 or below?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total enrollment of universities with a overall rank 5 or below?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total enrollment of universities with a overall rank 5 or below?[/QUESTION]\n[SQL]\n SELECT SUM(u.enrollment) AS total_enrollment FROM university u JOIN overall_ranking r ON u.university_id = r.university_id WHERE r.rank <= 5;"
  },
  {
    "id": 1798,
    "db_id": "university_rank",
    "question": {
      "id": 1798,
      "db_id": "university_rank",
      "question": "What is the total number of students enrolled in an university with a rank of 5 or below?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total number of students enrolled in an university with a rank of 5 or below?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total number of students enrolled in an university with a rank of 5 or below?[/QUESTION]\n[SQL]\n SELECT SUM(u.enrollment) AS total_students FROM overall_ranking r JOIN university u ON r.university_id = u.university_id WHERE r.rank <= 5;"
  },
  {
    "id": 1799,
    "db_id": "university_rank",
    "question": {
      "id": 1799,
      "db_id": "university_rank",
      "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and Citation point of the universities whose reputation points are top 3 and above.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and Citation point of the universities whose reputation points are top 3 and above.[/QUESTION]\n[SQL]\n SELECT u.University_Name, o.Citation_point FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID WHERE o.Reputation_point >= 10 ORDER BY o.Reputation_point DESC NULLS LAST LIMIT 3;"
  },
  {
    "id": 1800,
    "db_id": "university_rank",
    "question": {
      "id": 1800,
      "db_id": "university_rank",
      "question": "What is the name and citation point of the unversities with the top 3 reputation points?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name and citation point of the unversities with the top 3 reputation points?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name and citation point of the unversities with the top 3 reputation points?[/QUESTION]\n[SQL]\n SELECT u.university_name, o.citation_point FROM overall_ranking o JOIN university u ON o.university_id = u.university_id ORDER BY o.reputation_point DESC NULLS LAST LIMIT 3;"
  },
  {
    "id": 1801,
    "db_id": "university_rank",
    "question": {
      "id": 1801,
      "db_id": "university_rank",
      "question": "which states do have more than two universities with enrollment smaller than 3000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]which states do have more than two universities with enrollment smaller than 3000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]which states do have more than two universities with enrollment smaller than 3000?[/QUESTION]\n[SQL]\n SELECT u.state FROM university u WHERE u.enrollment < 3000 GROUP BY u.state HAVING COUNT(u.university_id) > 2;"
  },
  {
    "id": 1802,
    "db_id": "university_rank",
    "question": {
      "id": 1802,
      "db_id": "university_rank",
      "question": "What are the states that have more than 2 universities with an enrollment less than 3000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the states that have more than 2 universities with an enrollment less than 3000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the states that have more than 2 universities with an enrollment less than 3000?[/QUESTION]\n[SQL]\n SELECT u.state FROM university u WHERE u.enrollment < 3000 GROUP BY u.state HAVING COUNT(u.university_id) > 2;"
  },
  {
    "id": 1803,
    "db_id": "movie_2",
    "question": {
      "id": 1803,
      "db_id": "movie_2",
      "question": "Find the titles of movies that don\u2019t have any rating."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the titles of movies that don\u2019t have any rating.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the titles of movies that don\u2019t have any rating.[/QUESTION]\n[SQL]\n SELECT m.title FROM Movies m WHERE m.rating IS NULL"
  },
  {
    "id": 1804,
    "db_id": "movie_2",
    "question": {
      "id": 1804,
      "db_id": "movie_2",
      "question": "What are the names of movies that do not have any ratings?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of movies that do not have any ratings?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of movies that do not have any ratings?[/QUESTION]\n[SQL]\n SELECT m.Title FROM Movies m WHERE m.Rating IS NULL"
  },
  {
    "id": 1805,
    "db_id": "movie_2",
    "question": {
      "id": 1805,
      "db_id": "movie_2",
      "question": "Find the names of movies whose rating is \u2018G\u2019."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of movies whose rating is \u2018G\u2019.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of movies whose rating is \u2018G\u2019.[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m WHERE m.rating ilike '%G%';"
  },
  {
    "id": 1806,
    "db_id": "movie_2",
    "question": {
      "id": 1806,
      "db_id": "movie_2",
      "question": "What are names of movies that have a 'G' ratings?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are names of movies that have a 'G' ratings?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are names of movies that have a 'G' ratings?[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m WHERE m.rating ilike '%G%';"
  },
  {
    "id": 1807,
    "db_id": "movie_2",
    "question": {
      "id": 1807,
      "db_id": "movie_2",
      "question": "Find the title of the movie that is played in the Odeon theater."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the title of the movie that is played in the Odeon theater.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the title of the movie that is played in the Odeon theater.[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE mt.name = 'Odeon';"
  },
  {
    "id": 1808,
    "db_id": "movie_2",
    "question": {
      "id": 1808,
      "db_id": "movie_2",
      "question": "What are the movie titles for ones that are played in the Odeon theater?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the movie titles for ones that are played in the Odeon theater?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the movie titles for ones that are played in the Odeon theater?[/QUESTION]\n[SQL]\n SELECT m.title FROM Movies m JOIN MovieTheaters t ON m.code = t.movie WHERE t.name ilike '%Odeon%' ORDER BY m.title NULLS LAST;"
  },
  {
    "id": 1809,
    "db_id": "movie_2",
    "question": {
      "id": 1809,
      "db_id": "movie_2",
      "question": "Find the names of movies that are played in any theater and the name of the corresponding theater."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of movies that are played in any theater and the name of the corresponding theater.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of movies that are played in any theater and the name of the corresponding theater.[/QUESTION]\n[SQL]\n SELECT m.title AS movie_name, t.name AS theater_name FROM Movies m JOIN MovieTheaters t ON m.code = t.movie;"
  },
  {
    "id": 1810,
    "db_id": "movie_2",
    "question": {
      "id": 1810,
      "db_id": "movie_2",
      "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the movies that are played in any theater and the name of the corresponding theater?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the movies that are played in any theater and the name of the corresponding theater?[/QUESTION]\n[SQL]\n SELECT m.title AS movie_name, t.name AS theater_name FROM Movies m JOIN MovieTheaters t ON m.code = t.movie;"
  },
  {
    "id": 1811,
    "db_id": "movie_2",
    "question": {
      "id": 1811,
      "db_id": "movie_2",
      "question": "Find the number of movies whose rating is \u2018G\u2019."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of movies whose rating is \u2018G\u2019.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of movies whose rating is \u2018G\u2019.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Movies m WHERE m.Rating ilike '%G%';"
  },
  {
    "id": 1812,
    "db_id": "movie_2",
    "question": {
      "id": 1812,
      "db_id": "movie_2",
      "question": "How many movies had a 'G' rating?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many movies had a 'G' rating?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many movies had a 'G' rating?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Movies m WHERE m.Rating ilike '%G%';"
  },
  {
    "id": 1813,
    "db_id": "movie_2",
    "question": {
      "id": 1813,
      "db_id": "movie_2",
      "question": "How many movies are playing across all theaters?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many movies are playing across all theaters?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many movies are playing across all theaters?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT mt.movie) AS total_movies FROM movie_theaters mt;"
  },
  {
    "id": 1814,
    "db_id": "movie_2",
    "question": {
      "id": 1814,
      "db_id": "movie_2",
      "question": "How many movies are playing in theaters?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many movies are playing in theaters?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many movies are playing in theaters?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT mt.Movie) AS number_of_movies FROM MovieTheaters mt;"
  },
  {
    "id": 1815,
    "db_id": "movie_2",
    "question": {
      "id": 1815,
      "db_id": "movie_2",
      "question": "How many distinct movies are on in theaters?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many distinct movies are on in theaters?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many distinct movies are on in theaters?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT m.code) AS number_of_movies FROM MovieTheaters m;"
  },
  {
    "id": 1816,
    "db_id": "movie_2",
    "question": {
      "id": 1816,
      "db_id": "movie_2",
      "question": "How many different movies are playing?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different movies are playing?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different movies are playing?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT m.code) AS number_of_movies FROM MovieTheaters mt JOIN Movies m ON mt.movie = m.code;"
  },
  {
    "id": 1817,
    "db_id": "movie_2",
    "question": {
      "id": 1817,
      "db_id": "movie_2",
      "question": "How many distinct movie theaters are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many distinct movie theaters are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many distinct movie theaters are there?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT mt.Name) FROM MovieTheaters mt;"
  },
  {
    "id": 1818,
    "db_id": "movie_2",
    "question": {
      "id": 1818,
      "db_id": "movie_2",
      "question": "How many different movie theaters exist?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different movie theaters exist?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different movie theaters exist?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT mt.Name) FROM MovieTheaters mt;"
  },
  {
    "id": 1819,
    "db_id": "movie_2",
    "question": {
      "id": 1819,
      "db_id": "movie_2",
      "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the rating of the movie whose name includes the word \u2018Citizen\u2019.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the rating of the movie whose name includes the word \u2018Citizen\u2019.[/QUESTION]\n[SQL]\n SELECT m.Rating FROM Movies m WHERE m.Title ilike '%Citizen%';"
  },
  {
    "id": 1820,
    "db_id": "movie_2",
    "question": {
      "id": 1820,
      "db_id": "movie_2",
      "question": "What is the rating of the movie what has a name including a word like 'Citizen'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the rating of the movie what has a name including a word like 'Citizen'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the rating of the movie what has a name including a word like 'Citizen'?[/QUESTION]\n[SQL]\n SELECT m.Rating FROM Movies m WHERE m.Title ilike '%Citizen%';"
  },
  {
    "id": 1821,
    "db_id": "movie_2",
    "question": {
      "id": 1821,
      "db_id": "movie_2",
      "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.[/QUESTION]\n[SQL]\n SELECT mt.name FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE m.rating ilike '%G%' OR m.rating ilike '%PG%';"
  },
  {
    "id": 1822,
    "db_id": "movie_2",
    "question": {
      "id": 1822,
      "db_id": "movie_2",
      "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?[/QUESTION]\n[SQL]\n SELECT mt.name FROM movietheaters mt JOIN movies m ON mt.movie = m.code WHERE m.rating ilike '%G%' OR m.rating ilike '%PG%';"
  },
  {
    "id": 1823,
    "db_id": "movie_2",
    "question": {
      "id": 1823,
      "db_id": "movie_2",
      "question": "Find the name of the movies that are played in either cinema Odeon or Imperial."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the movies that are played in either cinema Odeon or Imperial.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the movies that are played in either cinema Odeon or Imperial.[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m JOIN movie_theaters t ON m.code = t.movie WHERE t.name IN ('Odeon', 'Imperial')"
  },
  {
    "id": 1824,
    "db_id": "movie_2",
    "question": {
      "id": 1824,
      "db_id": "movie_2",
      "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of all the movies that played at the Odeon or Imperial theater?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of all the movies that played at the Odeon or Imperial theater?[/QUESTION]\n[SQL]\n SELECT m.title FROM Movies m JOIN MovieTheaters t ON m.code = t.movie WHERE t.name IN ('Odeon', 'Imperial')"
  },
  {
    "id": 1825,
    "db_id": "movie_2",
    "question": {
      "id": 1825,
      "db_id": "movie_2",
      "question": "Find the name of the movie that is on in both Odeon and Imperial theaters."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the movie that is on in both Odeon and Imperial theaters.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the movie that is on in both Odeon and Imperial theaters.[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m JOIN movie_theaters o ON m.code = o.movie WHERE o.name ilike '%Odeon%' AND EXISTS (SELECT 1 FROM movie_theaters i WHERE i.movie = m.code AND i.name ilike '%Imperial%') ORDER BY m.title NULLS LAST;"
  },
  {
    "id": 1826,
    "db_id": "movie_2",
    "question": {
      "id": 1826,
      "db_id": "movie_2",
      "question": "What movie is playing at both the Odeon and Imperial theater?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What movie is playing at both the Odeon and Imperial theater?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What movie is playing at both the Odeon and Imperial theater?[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m JOIN movie_theaters mt1 ON m.code = mt1.movie JOIN movie_theaters mt2 ON m.code = mt2.movie WHERE mt1.name = 'Odeon' AND mt2.name = 'Imperial';"
  },
  {
    "id": 1827,
    "db_id": "movie_2",
    "question": {
      "id": 1827,
      "db_id": "movie_2",
      "question": "Find the name of all movies that are not played in Odeon theater."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of all movies that are not played in Odeon theater.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of all movies that are not played in Odeon theater.[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m LEFT JOIN movie_theaters mt ON m.code = mt.movie WHERE mt.name != 'Odeon' ORDER BY m.title NULLS LAST;"
  },
  {
    "id": 1828,
    "db_id": "movie_2",
    "question": {
      "id": 1828,
      "db_id": "movie_2",
      "question": "What are the names of every movie that is not playing at the Odeon theater?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of every movie that is not playing at the Odeon theater?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of every movie that is not playing at the Odeon theater?[/QUESTION]\n[SQL]\n SELECT m.Title FROM Movies m WHERE m.Code NOT IN (SELECT t.Movie FROM MovieTheaters t WHERE t.Name = 'Odeon')"
  },
  {
    "id": 1829,
    "db_id": "movie_2",
    "question": {
      "id": 1829,
      "db_id": "movie_2",
      "question": "List in alphabetical order the titles of all movies."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List in alphabetical order the titles of all movies.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List in alphabetical order the titles of all movies.[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m ORDER BY m.title ASC;"
  },
  {
    "id": 1830,
    "db_id": "movie_2",
    "question": {
      "id": 1830,
      "db_id": "movie_2",
      "question": "What are the movie names in alphabetical order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the movie names in alphabetical order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the movie names in alphabetical order?[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m ORDER BY m.title ASC;"
  },
  {
    "id": 1831,
    "db_id": "movie_2",
    "question": {
      "id": 1831,
      "db_id": "movie_2",
      "question": "Find the titles of all movies sorted by their ratings."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the titles of all movies sorted by their ratings.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the titles of all movies sorted by their ratings.[/QUESTION]\n[SQL]\n SELECT m.title FROM Movies m ORDER BY m.rating DESC;"
  },
  {
    "id": 1832,
    "db_id": "movie_2",
    "question": {
      "id": 1832,
      "db_id": "movie_2",
      "question": "What are the movie names sorted by rating?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the movie names sorted by rating?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the movie names sorted by rating?[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m ORDER BY m.rating DESC;"
  },
  {
    "id": 1833,
    "db_id": "movie_2",
    "question": {
      "id": 1833,
      "db_id": "movie_2",
      "question": "Find the name of the theater that is playing the most number of movies."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the theater that is playing the most number of movies.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the theater that is playing the most number of movies.[/QUESTION]\n[SQL]\n SELECT mt.name FROM movie_theaters mt GROUP BY mt.name ORDER BY COUNT(mt.movie) DESC LIMIT 1;"
  },
  {
    "id": 1834,
    "db_id": "movie_2",
    "question": {
      "id": 1834,
      "db_id": "movie_2",
      "question": "What is the name of the theater playing the most movies?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the theater playing the most movies?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the theater playing the most movies?[/QUESTION]\n[SQL]\n SELECT mt.name FROM movie_theaters mt GROUP BY mt.name ORDER BY COUNT(mt.movie) DESC LIMIT 1;"
  },
  {
    "id": 1835,
    "db_id": "movie_2",
    "question": {
      "id": 1835,
      "db_id": "movie_2",
      "question": "Find the name of the movie that is played in the most number of theaters."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the movie that is played in the most number of theaters.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the movie that is played in the most number of theaters.[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m JOIN (SELECT mt.movie, COUNT(*) AS num_theaters FROM movie_theaters mt GROUP BY mt.movie ORDER BY num_theaters DESC LIMIT 1) AS mt ON m.code = mt.movie;"
  },
  {
    "id": 1836,
    "db_id": "movie_2",
    "question": {
      "id": 1836,
      "db_id": "movie_2",
      "question": "What is the name of the film playing at the most number of theaters?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the film playing at the most number of theaters?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the film playing at the most number of theaters?[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m JOIN movie_theaters mt ON m.code = mt.movie GROUP BY m.title ORDER BY COUNT(mt.name) DESC LIMIT 1;"
  },
  {
    "id": 1837,
    "db_id": "movie_2",
    "question": {
      "id": 1837,
      "db_id": "movie_2",
      "question": "Find the number of movies in each rating."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of movies in each rating.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of movies in each rating.[/QUESTION]\n[SQL]\n SELECT m.rating, COUNT(*) AS movie_count FROM Movies m GROUP BY m.rating ORDER BY movie_count DESC;"
  },
  {
    "id": 1838,
    "db_id": "movie_2",
    "question": {
      "id": 1838,
      "db_id": "movie_2",
      "question": "How many movies exist for each rating?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many movies exist for each rating?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many movies exist for each rating?[/QUESTION]\n[SQL]\n SELECT m.rating, COUNT(*) AS number_of_movies FROM Movies m GROUP BY m.rating ORDER BY number_of_movies DESC NULLS LAST;"
  },
  {
    "id": 1839,
    "db_id": "movie_2",
    "question": {
      "id": 1839,
      "db_id": "movie_2",
      "question": "Find the number of movies whose rating is not null."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of movies whose rating is not null.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of movies whose rating is not null.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Movies m WHERE m.Rating IS NOT NULL;"
  },
  {
    "id": 1840,
    "db_id": "movie_2",
    "question": {
      "id": 1840,
      "db_id": "movie_2",
      "question": "How many movies have a rating that is not null?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many movies have a rating that is not null?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many movies have a rating that is not null?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Movies m WHERE m.Rating IS NOT NULL;"
  },
  {
    "id": 1841,
    "db_id": "movie_2",
    "question": {
      "id": 1841,
      "db_id": "movie_2",
      "question": "Find the name of theaters that has at least one movie playing."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of theaters that has at least one movie playing.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of theaters that has at least one movie playing.[/QUESTION]\n[SQL]\n SELECT mt.name FROM movietheaters mt WHERE mt.movie IS NOT NULL;"
  },
  {
    "id": 1842,
    "db_id": "movie_2",
    "question": {
      "id": 1842,
      "db_id": "movie_2",
      "question": "What are the names of every theater with at least one movie playing?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of every theater with at least one movie playing?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of every theater with at least one movie playing?[/QUESTION]\n[SQL]\n SELECT DISTINCT mt.name FROM MovieTheaters mt;"
  },
  {
    "id": 1843,
    "db_id": "movie_2",
    "question": {
      "id": 1843,
      "db_id": "movie_2",
      "question": "Select the name of all movie theaters that are not currently showing a movie."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select the name of all movie theaters that are not currently showing a movie.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select the name of all movie theaters that are not currently showing a movie.[/QUESTION]\n[SQL]\n SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NULL"
  },
  {
    "id": 1844,
    "db_id": "movie_2",
    "question": {
      "id": 1844,
      "db_id": "movie_2",
      "question": "What are the names of all cinemas not showing any movies?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all cinemas not showing any movies?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all cinemas not showing any movies?[/QUESTION]\n[SQL]\n SELECT mt.name FROM movie_theaters mt WHERE mt.movie IS NULL"
  },
  {
    "id": 1845,
    "db_id": "movie_2",
    "question": {
      "id": 1845,
      "db_id": "movie_2",
      "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.[/QUESTION]\n[SQL]\n SELECT mt.name FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE m.rating ilike '%G%';"
  },
  {
    "id": 1846,
    "db_id": "movie_2",
    "question": {
      "id": 1846,
      "db_id": "movie_2",
      "question": "What are the names of theaters playing 'G' rated movies?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of theaters playing 'G' rated movies?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of theaters playing 'G' rated movies?[/QUESTION]\n[SQL]\n SELECT m.title, t.name AS theater_name FROM movies m JOIN movie_theaters t ON m.code = t.movie WHERE m.rating = 'G';"
  },
  {
    "id": 1847,
    "db_id": "movie_2",
    "question": {
      "id": 1847,
      "db_id": "movie_2",
      "question": "Select the title of all movies."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Select the title of all movies.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Select the title of all movies.[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m;"
  },
  {
    "id": 1848,
    "db_id": "movie_2",
    "question": {
      "id": 1848,
      "db_id": "movie_2",
      "question": "What are all of the movie names?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all of the movie names?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all of the movie names?[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m;"
  },
  {
    "id": 1849,
    "db_id": "movie_2",
    "question": {
      "id": 1849,
      "db_id": "movie_2",
      "question": "Show all the distinct ratings in the database."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all the distinct ratings in the database.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all the distinct ratings in the database.[/QUESTION]\n[SQL]\n SELECT DISTINCT m.Rating FROM Movies m;"
  },
  {
    "id": 1850,
    "db_id": "movie_2",
    "question": {
      "id": 1850,
      "db_id": "movie_2",
      "question": "What are the different movie ratings?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different movie ratings?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different movie ratings?[/QUESTION]\n[SQL]\n SELECT m.rating FROM Movies m GROUP BY m.rating ORDER BY COUNT(m.rating) DESC;"
  },
  {
    "id": 1851,
    "db_id": "movie_2",
    "question": {
      "id": 1851,
      "db_id": "movie_2",
      "question": "Show all information of all unrated movies."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all information of all unrated movies.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all information of all unrated movies.[/QUESTION]\n[SQL]\n SELECT m.code, m.title FROM Movies m WHERE m.rating IS NULL"
  },
  {
    "id": 1852,
    "db_id": "movie_2",
    "question": {
      "id": 1852,
      "db_id": "movie_2",
      "question": "What is all the information about the unrated movies?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is all the information about the unrated movies?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is all the information about the unrated movies?[/QUESTION]\n[SQL]\n SELECT m.code, m.title FROM Movies m WHERE m.rating IS NULL"
  },
  {
    "id": 1853,
    "db_id": "movie_2",
    "question": {
      "id": 1853,
      "db_id": "movie_2",
      "question": "Show the titles of movies not currently being shown in any theaters."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the titles of movies not currently being shown in any theaters.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the titles of movies not currently being shown in any theaters.[/QUESTION]\n[SQL]\n SELECT m.title FROM movies m WHERE m.code NOT IN (SELECT t.movie FROM movie_theaters t);"
  },
  {
    "id": 1854,
    "db_id": "movie_2",
    "question": {
      "id": 1854,
      "db_id": "movie_2",
      "question": "What are the names of the movies not being shown in any theaters?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the movies not being shown in any theaters?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the movies not being shown in any theaters?[/QUESTION]\n[SQL]\n SELECT m.Title FROM Movies m WHERE m.Code NOT IN (SELECT t.Movie FROM MovieTheaters t);"
  },
  {
    "id": 1855,
    "db_id": "planet_1",
    "question": {
      "id": 1855,
      "db_id": "planet_1",
      "question": "Who receieved the heaviest package?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who receieved the heaviest package?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who receieved the heaviest package?[/QUESTION]\n[SQL]\n SELECT e.name, p.contents, p.weight FROM employee e JOIN shipment s ON e.employeeid = s.manager JOIN planet pl ON s.planet = pl.planetid JOIN package p ON s.shipmentid = p.shipment WHERE p.weight = (SELECT MAX(weight) FROM package);"
  },
  {
    "id": 1856,
    "db_id": "planet_1",
    "question": {
      "id": 1856,
      "db_id": "planet_1",
      "question": "What is the name of the client who received the heaviest package?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the client who received the heaviest package?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the client who received the heaviest package?[/QUESTION]\n[SQL]\n SELECT c.name AS client_name, p.shipment AS shipment_id, p.package_number AS package_number, p.contents AS contents, p.weight AS weight FROM client c JOIN package p ON c.account_number = p.recipient ORDER BY weight DESC LIMIT 1;"
  },
  {
    "id": 1857,
    "db_id": "planet_1",
    "question": {
      "id": 1857,
      "db_id": "planet_1",
      "question": "What is the total weight of all the packages that customer Leo Wong sent?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total weight of all the packages that customer Leo Wong sent?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total weight of all the packages that customer Leo Wong sent?[/QUESTION]\n[SQL]\n SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';"
  },
  {
    "id": 1858,
    "db_id": "planet_1",
    "question": {
      "id": 1858,
      "db_id": "planet_1",
      "question": "What is the total weight for all packages that Leo Wong sent?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total weight for all packages that Leo Wong sent?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total weight for all packages that Leo Wong sent?[/QUESTION]\n[SQL]\n SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';"
  },
  {
    "id": 1859,
    "db_id": "planet_1",
    "question": {
      "id": 1859,
      "db_id": "planet_1",
      "question": "What is the position of Amy Wong?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the position of Amy Wong?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the position of Amy Wong?[/QUESTION]\n[SQL]\n SELECT e.position FROM Employee e WHERE e.name ilike '%Amy%Wong%' LIMIT 1;"
  },
  {
    "id": 1860,
    "db_id": "planet_1",
    "question": {
      "id": 1860,
      "db_id": "planet_1",
      "question": "What position does Amy Wong have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What position does Amy Wong have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What position does Amy Wong have?[/QUESTION]\n[SQL]\n SELECT e.position FROM Employee e WHERE e.name ilike '%Amy%Wong%'"
  },
  {
    "id": 1861,
    "db_id": "planet_1",
    "question": {
      "id": 1861,
      "db_id": "planet_1",
      "question": "What is Turanga Leela's salary and position?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is Turanga Leela's salary and position?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is Turanga Leela's salary and position?[/QUESTION]\n[SQL]\n SELECT e.salary, e.position FROM Employee e WHERE e.name ilike '%Turanga%Leela%'"
  },
  {
    "id": 1862,
    "db_id": "planet_1",
    "question": {
      "id": 1862,
      "db_id": "planet_1",
      "question": "What is the salary and position of the employee named Turanga Leela?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the salary and position of the employee named Turanga Leela?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the salary and position of the employee named Turanga Leela?[/QUESTION]\n[SQL]\n SELECT e.salary, e.position FROM Employee e WHERE e.name ilike '%Turanga%Leela%' LIMIT 1;"
  },
  {
    "id": 1863,
    "db_id": "planet_1",
    "question": {
      "id": 1863,
      "db_id": "planet_1",
      "question": "What is the average salary of all intern jobs?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average salary of all intern jobs?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average salary of all intern jobs?[/QUESTION]\n[SQL]\n SELECT AVG(e.salary) FROM employee e WHERE e.position ilike '%intern%';"
  },
  {
    "id": 1864,
    "db_id": "planet_1",
    "question": {
      "id": 1864,
      "db_id": "planet_1",
      "question": "What is the average salary of an intern?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average salary of an intern?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average salary of an intern?[/QUESTION]\n[SQL]\n SELECT AVG(e.salary) FROM employee e WHERE e.position ilike '%intern%';"
  },
  {
    "id": 1865,
    "db_id": "planet_1",
    "question": {
      "id": 1865,
      "db_id": "planet_1",
      "question": "What level is Physician?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What level is Physician?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What level is Physician?[/QUESTION]\n[SQL]\n SELECT h.level FROM has_clearance h WHERE h.employee = (SELECT e.employeeid FROM employee e WHERE e.position ilike '%Physician%');"
  },
  {
    "id": 1866,
    "db_id": "planet_1",
    "question": {
      "id": 1866,
      "db_id": "planet_1",
      "question": "What is the clearance level of a physician?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the clearance level of a physician?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the clearance level of a physician?[/QUESTION]\n[SQL]\n SELECT h.level FROM Has_Clearance h WHERE h.employee = 757071 AND h.planet = 3;"
  },
  {
    "id": 1867,
    "db_id": "planet_1",
    "question": {
      "id": 1867,
      "db_id": "planet_1",
      "question": "List Package Number of all package sent by Leo Wong?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List Package Number of all package sent by Leo Wong?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List Package Number of all package sent by Leo Wong?[/QUESTION]\n[SQL]\n SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';"
  },
  {
    "id": 1868,
    "db_id": "planet_1",
    "question": {
      "id": 1868,
      "db_id": "planet_1",
      "question": "What is the number of all packages that Leo Wong sent?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the number of all packages that Leo Wong sent?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the number of all packages that Leo Wong sent?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';"
  },
  {
    "id": 1869,
    "db_id": "planet_1",
    "question": {
      "id": 1869,
      "db_id": "planet_1",
      "question": "List all package numbers received by Leo Wong ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all package numbers received by Leo Wong ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all package numbers received by Leo Wong ?[/QUESTION]\n[SQL]\n SELECT p.package_number FROM employee e JOIN shipment s ON e.employee_id = s.manager JOIN package p ON s.shipment_id = p.shipment_ WHERE e.name ilike '%Leo%Wong%' ORDER BY p.package_number NULLS LAST;"
  },
  {
    "id": 1870,
    "db_id": "planet_1",
    "question": {
      "id": 1870,
      "db_id": "planet_1",
      "question": "What are all of the package numbers received by Leo Wong?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all of the package numbers received by Leo Wong?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all of the package numbers received by Leo Wong?[/QUESTION]\n[SQL]\n SELECT p.package_number FROM employee e JOIN shipment s ON e.employee_id = s.manager JOIN package p ON s.shipment_id = p.shipment_ WHERE e.name ilike '%Leo%Wong%' ORDER BY p.package_number NULLS LAST;"
  },
  {
    "id": 1871,
    "db_id": "planet_1",
    "question": {
      "id": 1871,
      "db_id": "planet_1",
      "question": "List all package sent or received by Leo Wong."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all package sent or received by Leo Wong.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all package sent or received by Leo Wong.[/QUESTION]\n[SQL]\n SELECT p.shipment, p.package_number, p.contents, p.weight, e.name AS sender_name, c.name AS recipient_name FROM package p JOIN client e ON p.sender = e.account_number JOIN client c ON p.recipient = c.account_number WHERE e.name ilike '%Leo%Wong%' OR c.name ilike '%Leo%Wong%';"
  },
  {
    "id": 1872,
    "db_id": "planet_1",
    "question": {
      "id": 1872,
      "db_id": "planet_1",
      "question": "What are all the different package numbers that Leo Wong sent or received?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the different package numbers that Leo Wong sent or received?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the different package numbers that Leo Wong sent or received?[/QUESTION]\n[SQL]\n SELECT p.package_number FROM package p JOIN client c ON p.sender = c.account_number WHERE c.name ilike '%Leo%Wong%' UNION SELECT p.package_number FROM package p JOIN client c ON p.recipient = c.account_number WHERE c.name ilike '%Leo%Wong%' ORDER BY p.package_number NULLS LAST;"
  },
  {
    "id": 1873,
    "db_id": "planet_1",
    "question": {
      "id": 1873,
      "db_id": "planet_1",
      "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Package p WHERE p.Sender = (SELECT e.AccountNumber FROM Employee e WHERE e.Name ilike '%Ogden%Wernstrom%') AND p.Recipient = (SELECT e.AccountNumber FROM Employee e WHERE e.Name ilike '%Leo%Wong%');"
  },
  {
    "id": 1874,
    "db_id": "planet_1",
    "question": {
      "id": 1874,
      "db_id": "planet_1",
      "question": "How many packages sent by Ogden Wernstrom and received by Leo Wong?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many packages sent by Ogden Wernstrom and received by Leo Wong?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many packages sent by Ogden Wernstrom and received by Leo Wong?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Package p WHERE p.Sender = (SELECT e.AccountNumber FROM Employee e WHERE e.Name = 'Ogden Wernstrom') AND p.Recipient = (SELECT e.AccountNumber FROM Employee e WHERE e.Name = 'Leo Wong');"
  },
  {
    "id": 1875,
    "db_id": "planet_1",
    "question": {
      "id": 1875,
      "db_id": "planet_1",
      "question": "What are the contents of package sent by John Zoidfarb?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the contents of package sent by John Zoidfarb?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the contents of package sent by John Zoidfarb?[/QUESTION]\n[SQL]\n SELECT p.Contents FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name ilike '%John%Zoidfarb%'"
  },
  {
    "id": 1876,
    "db_id": "planet_1",
    "question": {
      "id": 1876,
      "db_id": "planet_1",
      "question": "What are the package contents of all those sent by John Zoidfarb?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the package contents of all those sent by John Zoidfarb?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the package contents of all those sent by John Zoidfarb?[/QUESTION]\n[SQL]\n SELECT p.Contents FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name ilike '%John%Zoidfarb%' ORDER BY p.Contents NULLS LAST;"
  },
  {
    "id": 1877,
    "db_id": "planet_1",
    "question": {
      "id": 1877,
      "db_id": "planet_1",
      "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.[/QUESTION]\n[SQL]\n SELECT p.package_number, p.weight FROM client c JOIN shipment s ON c.account_number = s.manager JOIN package p ON s.shipment_id = p.shipment_id WHERE c.name ilike '%John%' ORDER BY p.weight DESC LIMIT 1;"
  },
  {
    "id": 1878,
    "db_id": "planet_1",
    "question": {
      "id": 1878,
      "db_id": "planet_1",
      "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the package number and weight of the heaviest package that was sent by a client named John or something similar?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the package number and weight of the heaviest package that was sent by a client named John or something similar?[/QUESTION]\n[SQL]\n SELECT p.package_number, p.weight FROM package p JOIN client c ON p.sender = c.account_number WHERE c.name ilike '%John%' ORDER BY p.weight DESC LIMIT 1;"
  },
  {
    "id": 1879,
    "db_id": "planet_1",
    "question": {
      "id": 1879,
      "db_id": "planet_1",
      "question": "List package number and weight of top 3 lightest packages."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List package number and weight of top 3 lightest packages.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List package number and weight of top 3 lightest packages.[/QUESTION]\n[SQL]\n SELECT p.package_number, p.weight FROM package p ORDER BY p.weight ASC NULLS LAST LIMIT 3;"
  },
  {
    "id": 1880,
    "db_id": "planet_1",
    "question": {
      "id": 1880,
      "db_id": "planet_1",
      "question": "What is the package number and weight of the 3 lightest packages?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the package number and weight of the 3 lightest packages?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the package number and weight of the 3 lightest packages?[/QUESTION]\n[SQL]\n SELECT p.package_number, p.weight FROM package p ORDER BY p.weight ASC NULLS LAST LIMIT 3;"
  },
  {
    "id": 1881,
    "db_id": "planet_1",
    "question": {
      "id": 1881,
      "db_id": "planet_1",
      "question": "Who sent most number of packages? List client name and number of packages sent by that client."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who sent most number of packages? List client name and number of packages sent by that client.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who sent most number of packages? List client name and number of packages sent by that client.[/QUESTION]\n[SQL]\n SELECT c.name AS client_name, COUNT(p.package_number) AS total_packages FROM package p JOIN client c ON p.sender = c.account_number GROUP BY c.name ORDER BY total_packages DESC LIMIT 1;"
  },
  {
    "id": 1882,
    "db_id": "planet_1",
    "question": {
      "id": 1882,
      "db_id": "planet_1",
      "question": "What is the name of the client who sent the most packages and how many were there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the client who sent the most packages and how many were there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the client who sent the most packages and how many were there?[/QUESTION]\n[SQL]\n SELECT c.name, COUNT(p.packageid) AS total_packages FROM client c JOIN package p ON c.accountnumber = p.sender GROUP BY c.name ORDER BY total_packages DESC LIMIT 1;"
  },
  {
    "id": 1883,
    "db_id": "planet_1",
    "question": {
      "id": 1883,
      "db_id": "planet_1",
      "question": "Who received least number of packages ? List client name and number of packages received by that client ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who received least number of packages ? List client name and number of packages received by that client .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who received least number of packages ? List client name and number of packages received by that client .[/QUESTION]\n[SQL]\n SELECT c.name, COUNT(p.package_number) AS package_count FROM client c JOIN package p ON c.account_number = p.recipient GROUP BY c.name ORDER BY package_count ASC LIMIT 1;"
  },
  {
    "id": 1884,
    "db_id": "planet_1",
    "question": {
      "id": 1884,
      "db_id": "planet_1",
      "question": "What is the smallest number of packages received and by whom ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the smallest number of packages received and by whom ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the smallest number of packages received and by whom ?[/QUESTION]\n[SQL]\n SELECT c.Name AS client_name, COUNT(p.PackageNumber) AS total_packages FROM Client c JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.Name ORDER BY total_packages ASC LIMIT 1;"
  },
  {
    "id": 1885,
    "db_id": "planet_1",
    "question": {
      "id": 1885,
      "db_id": "planet_1",
      "question": "Who sent more than one packages? List the client's name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who sent more than one packages? List the client's name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who sent more than one packages? List the client's name.[/QUESTION]\n[SQL]\n SELECT c.name FROM client c JOIN package p ON c.accountnumber = p.sender GROUP BY c.name HAVING COUNT(p.packageid) > 1;"
  },
  {
    "id": 1886,
    "db_id": "planet_1",
    "question": {
      "id": 1886,
      "db_id": "planet_1",
      "question": "What is the name of all clients who sent more than one package?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of all clients who sent more than one package?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of all clients who sent more than one package?[/QUESTION]\n[SQL]\n SELECT c.name FROM client c JOIN (SELECT s.sender FROM shipment s GROUP BY s.sender HAVING COUNT(s.shipmentid) > 1) AS subquery ON c.accountnumber = subquery.sender;"
  },
  {
    "id": 1887,
    "db_id": "planet_1",
    "question": {
      "id": 1887,
      "db_id": "planet_1",
      "question": "What are the Coordinates of planet Mars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the Coordinates of planet Mars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the Coordinates of planet Mars?[/QUESTION]\n[SQL]\n SELECT p.coordinates FROM planet p WHERE p.name = 'Mars';"
  },
  {
    "id": 1888,
    "db_id": "planet_1",
    "question": {
      "id": 1888,
      "db_id": "planet_1",
      "question": "What are the coordinates of the planet named Mars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the coordinates of the planet named Mars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the coordinates of the planet named Mars?[/QUESTION]\n[SQL]\n SELECT p.coordinates FROM planet p WHERE p.name ilike '%Mars%';"
  },
  {
    "id": 1889,
    "db_id": "planet_1",
    "question": {
      "id": 1889,
      "db_id": "planet_1",
      "question": "List all Planets' names and coordinates in alphabetical order of name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all Planets' names and coordinates in alphabetical order of name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all Planets' names and coordinates in alphabetical order of name.[/QUESTION]\n[SQL]\n SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;"
  },
  {
    "id": 1890,
    "db_id": "planet_1",
    "question": {
      "id": 1890,
      "db_id": "planet_1",
      "question": "What are the names and coordinates of all planets in alphabetical order by name?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and coordinates of all planets in alphabetical order by name?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and coordinates of all planets in alphabetical order by name?[/QUESTION]\n[SQL]\n SELECT p.name, p.coordinates FROM planet p ORDER BY p.name ASC;"
  },
  {
    "id": 1891,
    "db_id": "planet_1",
    "question": {
      "id": 1891,
      "db_id": "planet_1",
      "question": "List all shipment id under Phillip J. Fry's management."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all shipment id under Phillip J. Fry's management.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all shipment id under Phillip J. Fry's management.[/QUESTION]\n[SQL]\n SELECT s.shipmentid FROM shipment s WHERE s.manager = (SELECT e.employeeid FROM employee e WHERE e.name ilike '%Phillip%J%Fry%');"
  },
  {
    "id": 1892,
    "db_id": "planet_1",
    "question": {
      "id": 1892,
      "db_id": "planet_1",
      "question": "What are the shipment IDs of every delivery managed by Phillip J Fry?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the shipment IDs of every delivery managed by Phillip J Fry?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the shipment IDs of every delivery managed by Phillip J Fry?[/QUESTION]\n[SQL]\n SELECT s.shipmentid FROM shipment s WHERE s.manager = (SELECT e.employeeid FROM employee e WHERE e.name ilike '%Phillip%J%Fry%');"
  },
  {
    "id": 1893,
    "db_id": "planet_1",
    "question": {
      "id": 1893,
      "db_id": "planet_1",
      "question": "List the dates of all shipments."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the dates of all shipments.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the dates of all shipments.[/QUESTION]\n[SQL]\n SELECT s.date FROM shipment s ORDER BY s.date NULLS LAST;"
  },
  {
    "id": 1894,
    "db_id": "planet_1",
    "question": {
      "id": 1894,
      "db_id": "planet_1",
      "question": "What are the dates of every shipment in the database?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the dates of every shipment in the database?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the dates of every shipment in the database?[/QUESTION]\n[SQL]\n SELECT s.date FROM shipment s ORDER BY s.date NULLS LAST;"
  },
  {
    "id": 1895,
    "db_id": "planet_1",
    "question": {
      "id": 1895,
      "db_id": "planet_1",
      "question": "List all shipment ids for the planet Mars."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all shipment ids for the planet Mars.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all shipment ids for the planet Mars.[/QUESTION]\n[SQL]\n SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name ilike '%Mars%';"
  },
  {
    "id": 1896,
    "db_id": "planet_1",
    "question": {
      "id": 1896,
      "db_id": "planet_1",
      "question": "What are the shipment ids for the planet Mars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the shipment ids for the planet Mars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the shipment ids for the planet Mars?[/QUESTION]\n[SQL]\n SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name ilike '%Mars%';"
  },
  {
    "id": 1897,
    "db_id": "planet_1",
    "question": {
      "id": 1897,
      "db_id": "planet_1",
      "question": "List all shipment ids for the planet Mars and under the management of Turanga Leela."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all shipment ids for the planet Mars and under the management of Turanga Leela.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all shipment ids for the planet Mars and under the management of Turanga Leela.[/QUESTION]\n[SQL]\n SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name ilike '%Mars%' AND s.manager = (SELECT employeeid FROM employee e WHERE e.name ilike '%Turanga%Leela%');"
  },
  {
    "id": 1898,
    "db_id": "planet_1",
    "question": {
      "id": 1898,
      "db_id": "planet_1",
      "question": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?[/QUESTION]\n[SQL]\n SELECT s.shipmentid FROM shipment s JOIN employee e ON s.manager = e.employeeid JOIN planet p ON s.planet = p.planetid WHERE e.name ilike '%Turanga%Leela%' AND p.name ilike '%Mars%';"
  },
  {
    "id": 1899,
    "db_id": "planet_1",
    "question": {
      "id": 1899,
      "db_id": "planet_1",
      "question": "List all shipment ids on the planet Mars or under the management of Turanga Leela."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all shipment ids on the planet Mars or under the management of Turanga Leela.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all shipment ids on the planet Mars or under the management of Turanga Leela.[/QUESTION]\n[SQL]\n SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name ilike '%Mars%' OR s.manager = (SELECT employeeid FROM employee e WHERE e.name ilike '%Turanga%Leela%');"
  },
  {
    "id": 1900,
    "db_id": "planet_1",
    "question": {
      "id": 1900,
      "db_id": "planet_1",
      "question": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids for all shipments on the planet Mars that Turanga Leela manages?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids for all shipments on the planet Mars that Turanga Leela manages?[/QUESTION]\n[SQL]\n SELECT s.shipmentid FROM shipment s JOIN employee e ON s.manager = e.employeeid JOIN planet p ON s.planet = p.planetid WHERE e.name ilike '%Turanga%Leela%' AND p.name ilike '%Mars%';"
  },
  {
    "id": 1901,
    "db_id": "planet_1",
    "question": {
      "id": 1901,
      "db_id": "planet_1",
      "question": "What is the total shipments in each planet? List the planet name and total shipments."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the total shipments in each planet? List the planet name and total shipments.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the total shipments in each planet? List the planet name and total shipments.[/QUESTION]\n[SQL]\n SELECT p.name AS planet_name, COUNT(s.shipmentid) AS total_shipments FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.name ORDER BY total_shipments DESC NULLS LAST;"
  },
  {
    "id": 1902,
    "db_id": "planet_1",
    "question": {
      "id": 1902,
      "db_id": "planet_1",
      "question": "How many shipments take place on each planet?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many shipments take place on each planet?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many shipments take place on each planet?[/QUESTION]\n[SQL]\n SELECT p.name AS planet_name, COUNT(s.shipmentid) AS number_of_shipments FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.name ORDER BY number_of_shipments DESC NULLS LAST;"
  },
  {
    "id": 1903,
    "db_id": "planet_1",
    "question": {
      "id": 1903,
      "db_id": "planet_1",
      "question": "Which planet has most shipments? List the planet name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which planet has most shipments? List the planet name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which planet has most shipments? List the planet name.[/QUESTION]\n[SQL]\n SELECT p.name FROM Planet p JOIN (SELECT s.planet, COUNT(*) AS num_shipments FROM Shipment s GROUP BY s.planet ORDER BY num_shipments DESC LIMIT 1) AS m ON p.planetid = m.planet LIMIT 1;"
  },
  {
    "id": 1904,
    "db_id": "planet_1",
    "question": {
      "id": 1904,
      "db_id": "planet_1",
      "question": "What is the name of the planet with the most shipments?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the planet with the most shipments?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the planet with the most shipments?[/QUESTION]\n[SQL]\n SELECT p.name FROM planet p JOIN (SELECT s.planet, COUNT(*) AS num_shipments FROM shipment s GROUP BY s.planet) AS ps ON p.planetid = ps.planet ORDER BY ps.num_shipments DESC LIMIT 1;"
  },
  {
    "id": 1905,
    "db_id": "planet_1",
    "question": {
      "id": 1905,
      "db_id": "planet_1",
      "question": "List the manger's name and number of shipments under his management."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the manger's name and number of shipments under his management.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the manger's name and number of shipments under his management.[/QUESTION]\n[SQL]\n SELECT e.name, COUNT(s.shipmentid) AS number_of_shipments FROM employee e JOIN shipment s ON e.employeeid = s.manager GROUP BY e.name;"
  },
  {
    "id": 1906,
    "db_id": "planet_1",
    "question": {
      "id": 1906,
      "db_id": "planet_1",
      "question": "What are the number of shipments managed and names of each manager?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the number of shipments managed and names of each manager?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the number of shipments managed and names of each manager?[/QUESTION]\n[SQL]\n SELECT e.name, COUNT(s.shipmentid) AS number_of_shipments FROM employee e JOIN shipment s ON e.employeeid = s.manager GROUP BY e.name ORDER BY number_of_shipments DESC NULLS LAST;"
  },
  {
    "id": 1907,
    "db_id": "planet_1",
    "question": {
      "id": 1907,
      "db_id": "planet_1",
      "question": "Calculate total weight of package shipped on Mars."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Calculate total weight of package shipped on Mars.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Calculate total weight of package shipped on Mars.[/QUESTION]\n[SQL]\n SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE pl.Name = 'Mars';"
  },
  {
    "id": 1908,
    "db_id": "planet_1",
    "question": {
      "id": 1908,
      "db_id": "planet_1",
      "question": "what is the total weight of all packages shipped on Mars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]what is the total weight of all packages shipped on Mars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]what is the total weight of all packages shipped on Mars?[/QUESTION]\n[SQL]\n SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE pl.Name = 'Mars';"
  },
  {
    "id": 1909,
    "db_id": "planet_1",
    "question": {
      "id": 1909,
      "db_id": "planet_1",
      "question": "Calculate total weight of package shipped in each planet . show the name of each planet ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Calculate total weight of package shipped in each planet . show the name of each planet .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Calculate total weight of package shipped in each planet . show the name of each planet .[/QUESTION]\n[SQL]\n SELECT p.name AS planet_name, SUM(w.weight) AS total_weight FROM Package w JOIN Shipment s ON w.shipment = s.shipmentid JOIN Planet p ON s.planet = p.planetid GROUP BY p.name ORDER BY total_weight DESC NULLS LAST;"
  },
  {
    "id": 1910,
    "db_id": "planet_1",
    "question": {
      "id": 1910,
      "db_id": "planet_1",
      "question": "what is the total package weight for each planet, list its name ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]what is the total package weight for each planet, list its name ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]what is the total package weight for each planet, list its name ?[/QUESTION]\n[SQL]\n SELECT p.name AS planet_name, SUM(w.weight) AS total_package_weight FROM Package w JOIN Shipment s ON w.shipment = s.shipmentid JOIN Planet p ON s.planet = p.planetid GROUP BY p.name ORDER BY total_package_weight DESC NULLS LAST;"
  },
  {
    "id": 1911,
    "db_id": "planet_1",
    "question": {
      "id": 1911,
      "db_id": "planet_1",
      "question": "Which planet has total weight of shipment greater than 30? List planet name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which planet has total weight of shipment greater than 30? List planet name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which planet has total weight of shipment greater than 30? List planet name.[/QUESTION]\n[SQL]\n SELECT p.name FROM Planet p JOIN Shipment s ON p.planetid = s.planet WHERE SUM(s.date::INTEGER) > 30;"
  },
  {
    "id": 1912,
    "db_id": "planet_1",
    "question": {
      "id": 1912,
      "db_id": "planet_1",
      "question": "What are the names of all planets tjat have a total shipment weight greater than 30?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all planets tjat have a total shipment weight greater than 30?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all planets tjat have a total shipment weight greater than 30?[/QUESTION]\n[SQL]\n SELECT p.name FROM planet p JOIN (SELECT s.planet, SUM(p.weight) AS total_weight FROM package p GROUP BY s.planet HAVING SUM(p.weight) > 30) AS subquery ON p.planetid = subquery.planet;"
  },
  {
    "id": 1913,
    "db_id": "planet_1",
    "question": {
      "id": 1913,
      "db_id": "planet_1",
      "question": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.[/QUESTION]\n[SQL]\n SELECT p.package_number FROM package p JOIN shipment s ON p.shipment = s.shipment_id JOIN client c ON p.sender = c.account_number WHERE s.planet = (SELECT planet_id FROM planet WHERE name = 'Omicron Persei 8') AND c.name = 'Zapp Brannigan';"
  },
  {
    "id": 1914,
    "db_id": "planet_1",
    "question": {
      "id": 1914,
      "db_id": "planet_1",
      "question": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Employee e ON s.Manager = e.EmployeeID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE e.Name ilike '%Zapp%Brannigan%' AND pl.Name ilike '%Omicron%Persei%8%';"
  },
  {
    "id": 1915,
    "db_id": "planet_1",
    "question": {
      "id": 1915,
      "db_id": "planet_1",
      "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.[/QUESTION]\n[SQL]\n SELECT p.package_number FROM package p JOIN shipment s ON p.shipment = s.shipment_id WHERE s.planet = (SELECT planet_id FROM planet WHERE name = 'Omicron Persei 8') OR p.sender = (SELECT account_number FROM client WHERE name = 'Zapp Brannigan');"
  },
  {
    "id": 1916,
    "db_id": "planet_1",
    "question": {
      "id": 1916,
      "db_id": "planet_1",
      "question": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT p.PackageNumber) AS total_packages FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID WHERE s.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8') OR p.Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan');"
  },
  {
    "id": 1917,
    "db_id": "planet_1",
    "question": {
      "id": 1917,
      "db_id": "planet_1",
      "question": "Which packages have weight between 10 and 30? List the package number and weight."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which packages have weight between 10 and 30? List the package number and weight.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which packages have weight between 10 and 30? List the package number and weight.[/QUESTION]\n[SQL]\n SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight BETWEEN 10 AND 30;"
  },
  {
    "id": 1918,
    "db_id": "planet_1",
    "question": {
      "id": 1918,
      "db_id": "planet_1",
      "question": "What are the package numbers and weights that are between 10 and 30?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the package numbers and weights that are between 10 and 30?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the package numbers and weights that are between 10 and 30?[/QUESTION]\n[SQL]\n SELECT p.package_number, p.weight FROM package p WHERE p.weight BETWEEN 10 AND 30;"
  },
  {
    "id": 1919,
    "db_id": "planet_1",
    "question": {
      "id": 1919,
      "db_id": "planet_1",
      "question": "Which employees do not have clearance in Mars? List employee's name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which employees do not have clearance in Mars? List employee's name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which employees do not have clearance in Mars? List employee's name.[/QUESTION]\n[SQL]\n SELECT e.name FROM Employee e LEFT JOIN Has_Clearance hc ON e.employeeid = hc.employee AND hc.planet = (SELECT planetid FROM planet WHERE name = 'Mars') WHERE hc.employee IS NULL;"
  },
  {
    "id": 1920,
    "db_id": "planet_1",
    "question": {
      "id": 1920,
      "db_id": "planet_1",
      "question": "What are the names of all employees who don't have clearance on Mars?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all employees who don't have clearance on Mars?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all employees who don't have clearance on Mars?[/QUESTION]\n[SQL]\n SELECT e.name FROM employee e LEFT JOIN has_clearance hc ON e.employeeid = hc.employee AND hc.planet = (SELECT planetid FROM planet WHERE name = 'Mars') WHERE hc.employee IS NULL;"
  },
  {
    "id": 1921,
    "db_id": "planet_1",
    "question": {
      "id": 1921,
      "db_id": "planet_1",
      "question": "Which employees have clearance in Omega III? List employees' name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which employees have clearance in Omega III? List employees' name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which employees have clearance in Omega III? List employees' name.[/QUESTION]\n[SQL]\n SELECT e.name FROM employee e JOIN has_clearance hc ON e.employeeid = hc.employee WHERE hc.planet = (SELECT planetid FROM planet WHERE name = 'Omega III');"
  },
  {
    "id": 1922,
    "db_id": "planet_1",
    "question": {
      "id": 1922,
      "db_id": "planet_1",
      "question": "What are the names of all employees with clearance on Omega III?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all employees with clearance on Omega III?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all employees with clearance on Omega III?[/QUESTION]\n[SQL]\n SELECT e.name FROM employee e JOIN has_clearance hc ON e.employeeid = hc.employee WHERE hc.planet = (SELECT planetid FROM planet WHERE name = 'Omega III');"
  },
  {
    "id": 1923,
    "db_id": "planet_1",
    "question": {
      "id": 1923,
      "db_id": "planet_1",
      "question": "Which planets that have exact one employee has clearance? List planets' name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which planets that have exact one employee has clearance? List planets' name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which planets that have exact one employee has clearance? List planets' name.[/QUESTION]\n[SQL]\n SELECT p.name FROM planet p JOIN (SELECT h.planet FROM has_clearance h GROUP BY h.planet HAVING COUNT(h.employee) = 1) AS subquery ON p.planetid = subquery.planet;"
  },
  {
    "id": 1924,
    "db_id": "planet_1",
    "question": {
      "id": 1924,
      "db_id": "planet_1",
      "question": "What are the names of all planets with one employee that has clearance?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all planets with one employee that has clearance?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all planets with one employee that has clearance?[/QUESTION]\n[SQL]\n SELECT p.name AS planet_name, e.name AS employee_name FROM Planet p JOIN Shipment s ON p.planetid = s.planet JOIN Employee e ON s.manager = e.employeeid WHERE EXISTS (SELECT 1 FROM Has_Clearance hc WHERE hc.employee = e.employeeid AND hc.planet = p.planetid);"
  },
  {
    "id": 1925,
    "db_id": "planet_1",
    "question": {
      "id": 1925,
      "db_id": "planet_1",
      "question": "Which employees have salaries between 5000 and 10000? List employees' name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which employees have salaries between 5000 and 10000? List employees' name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which employees have salaries between 5000 and 10000? List employees' name.[/QUESTION]\n[SQL]\n SELECT e.name FROM employee e WHERE e.salary BETWEEN 5000 AND 10000;"
  },
  {
    "id": 1926,
    "db_id": "planet_1",
    "question": {
      "id": 1926,
      "db_id": "planet_1",
      "question": "What are the employees's names for those that have salaries between 5000 and 10000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the employees's names for those that have salaries between 5000 and 10000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the employees's names for those that have salaries between 5000 and 10000?[/QUESTION]\n[SQL]\n SELECT e.name FROM employee e WHERE e.salary BETWEEN 5000 AND 10000 ORDER BY e.name NULLS LAST;"
  },
  {
    "id": 1927,
    "db_id": "planet_1",
    "question": {
      "id": 1927,
      "db_id": "planet_1",
      "question": "Find the name of employees whose salary is above the average salary or more than 5000."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of employees whose salary is above the average salary or more than 5000.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of employees whose salary is above the average salary or more than 5000.[/QUESTION]\n[SQL]\n SELECT e.name FROM employee e WHERE e.salary > (SELECT AVG(e2.salary) FROM employee e2) OR e.salary > 5000;"
  },
  {
    "id": 1928,
    "db_id": "planet_1",
    "question": {
      "id": 1928,
      "db_id": "planet_1",
      "question": "What are the names of all employees who have a salary greater than average or more than 5000?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all employees who have a salary greater than average or more than 5000?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all employees who have a salary greater than average or more than 5000?[/QUESTION]\n[SQL]\n SELECT e.name FROM employee e WHERE e.salary > (SELECT AVG(e2.salary) FROM employee e2) OR e.salary > 5000;"
  },
  {
    "id": 1929,
    "db_id": "planet_1",
    "question": {
      "id": 1929,
      "db_id": "planet_1",
      "question": "Find the number of employees who do not have clearance in Mars ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of employees who do not have clearance in Mars .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of employees who do not have clearance in Mars .[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee WHERE hc.Planet IS NULL OR hc.Planet != (SELECT PlanetID FROM Planet WHERE Name = 'Mars');"
  },
  {
    "id": 1930,
    "db_id": "planet_1",
    "question": {
      "id": 1930,
      "db_id": "planet_1",
      "question": "What is the number of employees that do not have clearance on Mars ?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the number of employees that do not have clearance on Mars ?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the number of employees that do not have clearance on Mars ?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee WHERE hc.Planet IS NULL OR hc.Planet != (SELECT PlanetID FROM Planet WHERE Name = 'Mars');"
  },
  {
    "id": 1931,
    "db_id": "video_game",
    "question": {
      "id": 1931,
      "db_id": "video_game",
      "question": "How many games are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many games are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many games are there?[/QUESTION]\n[SQL]\n SELECT COUNT(g.game_id) AS total_games FROM game g;"
  },
  {
    "id": 1932,
    "db_id": "video_game",
    "question": {
      "id": 1932,
      "db_id": "video_game",
      "question": "Count the number of games."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of games.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of games.[/QUESTION]\n[SQL]\n SELECT COUNT(g.game_id) AS total_games FROM game g;"
  },
  {
    "id": 1933,
    "db_id": "video_game",
    "question": {
      "id": 1933,
      "db_id": "video_game",
      "question": "List the Title and Developers of all games ordered by units sold from large to small."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the Title and Developers of all games ordered by units sold from large to small.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the Title and Developers of all games ordered by units sold from large to small.[/QUESTION]\n[SQL]\n SELECT g.title, g.developers FROM game g ORDER BY g.units_sold_millions DESC;"
  },
  {
    "id": 1934,
    "db_id": "video_game",
    "question": {
      "id": 1934,
      "db_id": "video_game",
      "question": "What are the titles and developers of all games, sorted by units sold descending?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles and developers of all games, sorted by units sold descending?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles and developers of all games, sorted by units sold descending?[/QUESTION]\n[SQL]\n SELECT g.title, g.developers FROM game g ORDER BY g.units_sold_millions DESC;"
  },
  {
    "id": 1935,
    "db_id": "video_game",
    "question": {
      "id": 1935,
      "db_id": "video_game",
      "question": "What is the average units sold in millions of the games that are not developed by Nintendo?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average units sold in millions of the games that are not developed by Nintendo?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average units sold in millions of the games that are not developed by Nintendo?[/QUESTION]\n[SQL]\n SELECT AVG(g.units_sold_millions) AS average_units_sold FROM game g WHERE g.developers NOT ILIKE '%Nintendo%';"
  },
  {
    "id": 1936,
    "db_id": "video_game",
    "question": {
      "id": 1936,
      "db_id": "video_game",
      "question": "Return the average number of units sold in millions for games not developed by Nintendo."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the average number of units sold in millions for games not developed by Nintendo.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the average number of units sold in millions for games not developed by Nintendo.[/QUESTION]\n[SQL]\n SELECT AVG(g.units_sold_millions) FROM game g WHERE g.developers NOT ILIKE '%Nintendo%';"
  },
  {
    "id": 1937,
    "db_id": "video_game",
    "question": {
      "id": 1937,
      "db_id": "video_game",
      "question": "What are the names and market districts of all platforms?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and market districts of all platforms?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and market districts of all platforms?[/QUESTION]\n[SQL]\n SELECT p.platform_name, p.market_district FROM platform p;"
  },
  {
    "id": 1938,
    "db_id": "video_game",
    "question": {
      "id": 1938,
      "db_id": "video_game",
      "question": "Return all platform names and corresponding market districts."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return all platform names and corresponding market districts.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return all platform names and corresponding market districts.[/QUESTION]\n[SQL]\n SELECT p.platform_name, p.market_district FROM platform p;"
  },
  {
    "id": 1939,
    "db_id": "video_game",
    "question": {
      "id": 1939,
      "db_id": "video_game",
      "question": "What are the names and id of platforms whose download rank is 1?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and id of platforms whose download rank is 1?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and id of platforms whose download rank is 1?[/QUESTION]\n[SQL]\n SELECT p.platform_name, p.platform_id FROM platform p WHERE p.download_rank = 1 ORDER BY p.platform_name NULLS LAST;"
  },
  {
    "id": 1940,
    "db_id": "video_game",
    "question": {
      "id": 1940,
      "db_id": "video_game",
      "question": "Return the names and ids of all platforms with the download rank of 1."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the names and ids of all platforms with the download rank of 1.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the names and ids of all platforms with the download rank of 1.[/QUESTION]\n[SQL]\n SELECT p.platform_name, p.platform_id FROM platform p WHERE p.download_rank = 1 ORDER BY p.platform_name NULLS LAST;"
  },
  {
    "id": 1941,
    "db_id": "video_game",
    "question": {
      "id": 1941,
      "db_id": "video_game",
      "question": "What are the maximum and minimum rank of the year of players."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the maximum and minimum rank of the year of players.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the maximum and minimum rank of the year of players.[/QUESTION]\n[SQL]\n SELECT MIN(p.rank_of_the_year) AS min_rank, MAX(p.rank_of_the_year) AS max_rank FROM player p;"
  },
  {
    "id": 1942,
    "db_id": "video_game",
    "question": {
      "id": 1942,
      "db_id": "video_game",
      "question": "Give the maximum and minimum rank of the year across all players."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Give the maximum and minimum rank of the year across all players.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Give the maximum and minimum rank of the year across all players.[/QUESTION]\n[SQL]\n SELECT MIN(p.rank_of_the_year) AS min_rank, MAX(p.rank_of_the_year) AS max_rank FROM player p;"
  },
  {
    "id": 1943,
    "db_id": "video_game",
    "question": {
      "id": 1943,
      "db_id": "video_game",
      "question": "How many players have rank of the year smaller than 3?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many players have rank of the year smaller than 3?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many players have rank of the year smaller than 3?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM player p WHERE p.rank_of_the_year < 3;"
  },
  {
    "id": 1944,
    "db_id": "video_game",
    "question": {
      "id": 1944,
      "db_id": "video_game",
      "question": "Count the number of players that have a rank of year of at most 3."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of players that have a rank of year of at most 3.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of players that have a rank of year of at most 3.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM player p WHERE p.rank_of_the_year <= 3;"
  },
  {
    "id": 1945,
    "db_id": "video_game",
    "question": {
      "id": 1945,
      "db_id": "video_game",
      "question": "List all player names in ascending alphabetical order."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all player names in ascending alphabetical order.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all player names in ascending alphabetical order.[/QUESTION]\n[SQL]\n SELECT p.player_name FROM player p ORDER BY p.player_name ASC;"
  },
  {
    "id": 1946,
    "db_id": "video_game",
    "question": {
      "id": 1946,
      "db_id": "video_game",
      "question": "What are the names of all players in alphabetical order?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of all players in alphabetical order?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of all players in alphabetical order?[/QUESTION]\n[SQL]\n SELECT p.player_name FROM player p ORDER BY p.player_name ASC;"
  },
  {
    "id": 1947,
    "db_id": "video_game",
    "question": {
      "id": 1947,
      "db_id": "video_game",
      "question": "List names and colleges of all players in descending order of rank of the year."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List names and colleges of all players in descending order of rank of the year.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List names and colleges of all players in descending order of rank of the year.[/QUESTION]\n[SQL]\n SELECT p.player_name, p.college FROM player p ORDER BY p.rank_of_the_year DESC;"
  },
  {
    "id": 1948,
    "db_id": "video_game",
    "question": {
      "id": 1948,
      "db_id": "video_game",
      "question": "What are the names and colleges of all players, ordered by rank of year descending?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and colleges of all players, ordered by rank of year descending?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and colleges of all players, ordered by rank of year descending?[/QUESTION]\n[SQL]\n SELECT p.player_name, p.college FROM player p ORDER BY p.rank_of_the_year DESC;"
  },
  {
    "id": 1949,
    "db_id": "video_game",
    "question": {
      "id": 1949,
      "db_id": "video_game",
      "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please show the names and rank of players that have played the game titled \"Super Mario World\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please show the names and rank of players that have played the game titled \"Super Mario World\".[/QUESTION]\n[SQL]\n SELECT p.player_name, p.rank_of_the_year FROM player p JOIN game_player gp ON p.player_id = gp.player_id WHERE gp.if_active = TRUE AND gp.game_id IN (SELECT game_id FROM game WHERE title ilike '%Super%Mario%World%');"
  },
  {
    "id": 1950,
    "db_id": "video_game",
    "question": {
      "id": 1950,
      "db_id": "video_game",
      "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names and ranks of players who have played the game with the title \"Super Mario World\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names and ranks of players who have played the game with the title \"Super Mario World\"?[/QUESTION]\n[SQL]\n SELECT p.player_name, g.title, rank() OVER (PARTITION BY g.title ORDER BY p.player_id) AS rank FROM player p JOIN game_player gp ON p.player_id = gp.player_id JOIN game g ON gp.game_id = g.game_id WHERE g.title ilike '%Super%Mario%World%' ORDER BY g.title, rank NULLS LAST;"
  },
  {
    "id": 1951,
    "db_id": "video_game",
    "question": {
      "id": 1951,
      "db_id": "video_game",
      "question": "Show the distinct developer of games played by players that go to college \"Auburn\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the distinct developer of games played by players that go to college \"Auburn\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the distinct developer of games played by players that go to college \"Auburn\".[/QUESTION]\n[SQL]\n SELECT DISTINCT g.developers FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college ilike '%Auburn%'"
  },
  {
    "id": 1952,
    "db_id": "video_game",
    "question": {
      "id": 1952,
      "db_id": "video_game",
      "question": "What are the different developers of games that are played by players that attend Auburn college?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the different developers of games that are played by players that attend Auburn college?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the different developers of games that are played by players that attend Auburn college?[/QUESTION]\n[SQL]\n SELECT DISTINCT g.developers FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college ilike '%Auburn%'"
  },
  {
    "id": 1953,
    "db_id": "video_game",
    "question": {
      "id": 1953,
      "db_id": "video_game",
      "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the average number of units sold in millions of games played by players with position \"Guard\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the average number of units sold in millions of games played by players with position \"Guard\"?[/QUESTION]\n[SQL]\n SELECT AVG(g.units_sold_millions) AS average_units_sold FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard';"
  },
  {
    "id": 1954,
    "db_id": "video_game",
    "question": {
      "id": 1954,
      "db_id": "video_game",
      "question": "Return the average number of units sold in millions among games played by players who have the position Guard."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the average number of units sold in millions among games played by players who have the position Guard.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the average number of units sold in millions among games played by players who have the position Guard.[/QUESTION]\n[SQL]\n SELECT AVG(g.units_sold_millions) AS average_units_sold_millions FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard';"
  },
  {
    "id": 1955,
    "db_id": "video_game",
    "question": {
      "id": 1955,
      "db_id": "video_game",
      "question": "Please list the title and platform name of games."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please list the title and platform name of games.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please list the title and platform name of games.[/QUESTION]\n[SQL]\n SELECT g.title, p.platform_name FROM game g JOIN platform p ON g.platform_id = p.platform_id;"
  },
  {
    "id": 1956,
    "db_id": "video_game",
    "question": {
      "id": 1956,
      "db_id": "video_game",
      "question": "What are the titles and platform names of all games?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles and platform names of all games?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles and platform names of all games?[/QUESTION]\n[SQL]\n SELECT g.title, p.platform_name FROM game g JOIN platform p ON g.platform_id = p.platform_id;"
  },
  {
    "id": 1957,
    "db_id": "video_game",
    "question": {
      "id": 1957,
      "db_id": "video_game",
      "question": "Please list the title of games with platforms that have market district in Asia or USA."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Please list the title of games with platforms that have market district in Asia or USA.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Please list the title of games with platforms that have market district in Asia or USA.[/QUESTION]\n[SQL]\n SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district IN ('Asia', 'USA');"
  },
  {
    "id": 1958,
    "db_id": "video_game",
    "question": {
      "id": 1958,
      "db_id": "video_game",
      "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of games that have platforms in the market districts of Asia or the USA?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of games that have platforms in the market districts of Asia or the USA?[/QUESTION]\n[SQL]\n SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district ilike '%Asia%' OR p.market_district ilike '%USA%';"
  },
  {
    "id": 1959,
    "db_id": "video_game",
    "question": {
      "id": 1959,
      "db_id": "video_game",
      "question": "List the name of each franchise and the number of games belonging to that franchise."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the name of each franchise and the number of games belonging to that franchise.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the name of each franchise and the number of games belonging to that franchise.[/QUESTION]\n[SQL]\n SELECT g.franchise, COUNT(g.game_id) AS game_count FROM game g GROUP BY g.franchise ORDER BY game_count DESC NULLS LAST;"
  },
  {
    "id": 1960,
    "db_id": "video_game",
    "question": {
      "id": 1960,
      "db_id": "video_game",
      "question": "How many games are there from each Franchise?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many games are there from each Franchise?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many games are there from each Franchise?[/QUESTION]\n[SQL]\n SELECT g.franchise, COUNT(g.game_id) AS number_of_games FROM game g GROUP BY g.franchise ORDER BY number_of_games DESC NULLS LAST;"
  },
  {
    "id": 1961,
    "db_id": "video_game",
    "question": {
      "id": 1961,
      "db_id": "video_game",
      "question": "List the name of franchise that have the most number of games."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the name of franchise that have the most number of games.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the name of franchise that have the most number of games.[/QUESTION]\n[SQL]\n SELECT g.franchise, COUNT(g.game_id) AS game_count FROM game g GROUP BY g.franchise ORDER BY game_count DESC LIMIT 1;"
  },
  {
    "id": 1962,
    "db_id": "video_game",
    "question": {
      "id": 1962,
      "db_id": "video_game",
      "question": "Which franchise has the most games?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which franchise has the most games?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which franchise has the most games?[/QUESTION]\n[SQL]\n SELECT g.franchise, COUNT(g.game_id) AS game_count FROM game g GROUP BY g.franchise ORDER BY game_count DESC LIMIT 1;"
  },
  {
    "id": 1963,
    "db_id": "video_game",
    "question": {
      "id": 1963,
      "db_id": "video_game",
      "question": "List the names of franchises that have at least two games."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the names of franchises that have at least two games.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the names of franchises that have at least two games.[/QUESTION]\n[SQL]\n SELECT g.franchise FROM game g GROUP BY g.franchise HAVING COUNT(g.game_id) >= 2;"
  },
  {
    "id": 1964,
    "db_id": "video_game",
    "question": {
      "id": 1964,
      "db_id": "video_game",
      "question": "What are the names of franchises that have two or more games?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of franchises that have two or more games?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of franchises that have two or more games?[/QUESTION]\n[SQL]\n SELECT g.franchise FROM game g GROUP BY g.franchise HAVING COUNT(g.game_id) >= 2;"
  },
  {
    "id": 1965,
    "db_id": "video_game",
    "question": {
      "id": 1965,
      "db_id": "video_game",
      "question": "List the name of players that do not play any game."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the name of players that do not play any game.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the name of players that do not play any game.[/QUESTION]\n[SQL]\n SELECT p.player_name FROM player p LEFT JOIN game_player gp ON p.player_id = gp.player_id WHERE gp.player_id IS NULL;"
  },
  {
    "id": 1966,
    "db_id": "video_game",
    "question": {
      "id": 1966,
      "db_id": "video_game",
      "question": "What are the names of players who do not play any games?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of players who do not play any games?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of players who do not play any games?[/QUESTION]\n[SQL]\n SELECT p.player_name FROM player p WHERE p.player_id NOT IN (SELECT g.player_id FROM game_player g);"
  },
  {
    "id": 1967,
    "db_id": "video_game",
    "question": {
      "id": 1967,
      "db_id": "video_game",
      "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".[/QUESTION]\n[SQL]\n SELECT DISTINCT g.title FROM game g JOIN game_player p1 ON g.game_id = p1.game_id JOIN game_player p2 ON g.game_id = p2.game_id WHERE p1.player_id IN (SELECT player_id FROM player WHERE college ilike '%Oklahoma%') AND p2.player_id IN (SELECT player_id FROM player WHERE college ilike '%Auburn%');"
  },
  {
    "id": 1968,
    "db_id": "video_game",
    "question": {
      "id": 1968,
      "db_id": "video_game",
      "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of games that are played by players from Oklahoma college or Auburn college?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of games that are played by players from Oklahoma college or Auburn college?[/QUESTION]\n[SQL]\n SELECT DISTINCT g.title FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college ilike '%Oklahoma%' OR p.college ilike '%Auburn%';"
  },
  {
    "id": 1969,
    "db_id": "video_game",
    "question": {
      "id": 1969,
      "db_id": "video_game",
      "question": "Show all distinct franchises of games."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all distinct franchises of games.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all distinct franchises of games.[/QUESTION]\n[SQL]\n SELECT DISTINCT g.franchise FROM game g;"
  },
  {
    "id": 1970,
    "db_id": "video_game",
    "question": {
      "id": 1970,
      "db_id": "video_game",
      "question": "What are all the distinct franchises?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the distinct franchises?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the distinct franchises?[/QUESTION]\n[SQL]\n SELECT DISTINCT g.franchise FROM game g;"
  },
  {
    "id": 1971,
    "db_id": "video_game",
    "question": {
      "id": 1971,
      "db_id": "video_game",
      "question": "Show the title of games that are not played by any player who is in the Guard position."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the title of games that are not played by any player who is in the Guard position.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the title of games that are not played by any player who is in the Guard position.[/QUESTION]\n[SQL]\n SELECT g.title FROM game g WHERE g.game_id NOT IN (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard');"
  },
  {
    "id": 1972,
    "db_id": "video_game",
    "question": {
      "id": 1972,
      "db_id": "video_game",
      "question": "What are the titles of games not played by any players who play the Guard position?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the titles of games not played by any players who play the Guard position?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the titles of games not played by any players who play the Guard position?[/QUESTION]\n[SQL]\n SELECT g.title FROM game g WHERE g.game_id NOT IN (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard') ORDER BY g.title NULLS LAST;"
  },
  {
    "id": 1973,
    "db_id": "book_press",
    "question": {
      "id": 1973,
      "db_id": "book_press",
      "question": "list all the names of press in descending order of the profit of the year."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]list all the names of press in descending order of the profit of the year.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]list all the names of press in descending order of the profit of the year.[/QUESTION]\n[SQL]\n SELECT p.name FROM press p ORDER BY p.year_profits_billion DESC;"
  },
  {
    "id": 1974,
    "db_id": "book_press",
    "question": {
      "id": 1974,
      "db_id": "book_press",
      "question": "Sorted all the press by year profits in descending order, and return press names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Sorted all the press by year profits in descending order, and return press names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Sorted all the press by year profits in descending order, and return press names.[/QUESTION]\n[SQL]\n SELECT p.name FROM press p ORDER BY p.year_profits_billion DESC;"
  },
  {
    "id": 1975,
    "db_id": "book_press",
    "question": {
      "id": 1975,
      "db_id": "book_press",
      "question": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?[/QUESTION]\n[SQL]\n SELECT p.name FROM press p WHERE (p.year_profit_billion > 15 OR p.month_profit_billion > 1) ORDER BY p.name NULLS LAST;"
  },
  {
    "id": 1976,
    "db_id": "book_press",
    "question": {
      "id": 1976,
      "db_id": "book_press",
      "question": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.[/QUESTION]\n[SQL]\n SELECT p.name FROM press p WHERE (p.year_profits_billion > 15 OR p.month_profits_billion > 1);"
  },
  {
    "id": 1977,
    "db_id": "book_press",
    "question": {
      "id": 1977,
      "db_id": "book_press",
      "question": "what are the average and maximum profit of a year for all presses?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]what are the average and maximum profit of a year for all presses?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]what are the average and maximum profit of a year for all presses?[/QUESTION]\n[SQL]\n SELECT p.year_profits_billion AS max_profit, AVG(p.month_profits_billion) AS avg_profit FROM press p GROUP BY p.year_profits_billion ORDER BY max_profit DESC NULLS LAST;"
  },
  {
    "id": 1978,
    "db_id": "book_press",
    "question": {
      "id": 1978,
      "db_id": "book_press",
      "question": "Find the average and maximum yearly profit for each press."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the average and maximum yearly profit for each press.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the average and maximum yearly profit for each press.[/QUESTION]\n[SQL]\n SELECT p.name AS press_name, EXTRACT(YEAR FROM b.release_date::DATE) AS YEAR, AVG(p.month_profits_billion) AS avg_profit, MAX(p.year_profits_billion) AS max_profit FROM book b JOIN press p ON b.press_id = p.press_id GROUP BY p.name, YEAR ORDER BY YEAR NULLS LAST;"
  },
  {
    "id": 1979,
    "db_id": "book_press",
    "question": {
      "id": 1979,
      "db_id": "book_press",
      "question": "Find the name of the publisher whose monthly profit is the highest."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the publisher whose monthly profit is the highest.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the publisher whose monthly profit is the highest.[/QUESTION]\n[SQL]\n SELECT p.name FROM press p ORDER BY p.month_profits_billion DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1980,
    "db_id": "book_press",
    "question": {
      "id": 1980,
      "db_id": "book_press",
      "question": "Which press has the largest monthly profit? Give me the press name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which press has the largest monthly profit? Give me the press name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which press has the largest monthly profit? Give me the press name.[/QUESTION]\n[SQL]\n SELECT p.name FROM press p ORDER BY p.month_profits_billion DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1981,
    "db_id": "book_press",
    "question": {
      "id": 1981,
      "db_id": "book_press",
      "question": "Find the name of the publisher whose monthly profit is the highest or the lowest."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of the publisher whose monthly profit is the highest or the lowest.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of the publisher whose monthly profit is the highest or the lowest.[/QUESTION]\n[SQL]\n SELECT p.name FROM press p ORDER BY ABS(p.month_profits_billion) DESC LIMIT 1;"
  },
  {
    "id": 1982,
    "db_id": "book_press",
    "question": {
      "id": 1982,
      "db_id": "book_press",
      "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the names of the press that makes the highest monthly profit or the lowest monthly profit?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the names of the press that makes the highest monthly profit or the lowest monthly profit?[/QUESTION]\n[SQL]\n SELECT p.name, SUM(p.month_profits_billion) AS total_month_profit FROM press p GROUP BY p.name ORDER BY total_month_profit DESC LIMIT 1;"
  },
  {
    "id": 1983,
    "db_id": "book_press",
    "question": {
      "id": 1983,
      "db_id": "book_press",
      "question": "how many authors are under age 30?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]how many authors are under age 30?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]how many authors are under age 30?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM author WHERE age < 30;"
  },
  {
    "id": 1984,
    "db_id": "book_press",
    "question": {
      "id": 1984,
      "db_id": "book_press",
      "question": "Count the number of authors of age below 30."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of authors of age below 30.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of authors of age below 30.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM author WHERE age < 30;"
  },
  {
    "id": 1985,
    "db_id": "book_press",
    "question": {
      "id": 1985,
      "db_id": "book_press",
      "question": "find the average age of authors for each gender."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]find the average age of authors for each gender.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]find the average age of authors for each gender.[/QUESTION]\n[SQL]\n SELECT a.gender, AVG(a.age) AS average_age FROM author a GROUP BY a.gender;"
  },
  {
    "id": 1986,
    "db_id": "book_press",
    "question": {
      "id": 1986,
      "db_id": "book_press",
      "question": "For each gender, return gender and the average age of authors."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each gender, return gender and the average age of authors.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each gender, return gender and the average age of authors.[/QUESTION]\n[SQL]\n SELECT a.gender, AVG(a.age) AS average_age FROM author a GROUP BY a.gender ORDER BY average_age DESC NULLS LAST;"
  },
  {
    "id": 1987,
    "db_id": "book_press",
    "question": {
      "id": 1987,
      "db_id": "book_press",
      "question": "find the number of authors who are older than 30 for each gender."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]find the number of authors who are older than 30 for each gender.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]find the number of authors who are older than 30 for each gender.[/QUESTION]\n[SQL]\n SELECT a.gender, COUNT(*) FROM author a WHERE a.age > 30 GROUP BY a.gender;"
  },
  {
    "id": 1988,
    "db_id": "book_press",
    "question": {
      "id": 1988,
      "db_id": "book_press",
      "question": "How many authors are of age above 30 for each gender?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many authors are of age above 30 for each gender?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many authors are of age above 30 for each gender?[/QUESTION]\n[SQL]\n SELECT a.gender, COUNT(*) FROM author a WHERE a.age > 30 GROUP BY a.gender;"
  },
  {
    "id": 1989,
    "db_id": "book_press",
    "question": {
      "id": 1989,
      "db_id": "book_press",
      "question": "List all book titles in the order of their release date from the most recent to the past."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all book titles in the order of their release date from the most recent to the past.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all book titles in the order of their release date from the most recent to the past.[/QUESTION]\n[SQL]\n SELECT b.title FROM book b ORDER BY b.release_date DESC;"
  },
  {
    "id": 1990,
    "db_id": "book_press",
    "question": {
      "id": 1990,
      "db_id": "book_press",
      "question": "Sort all the books in descending order of release date, and return the book titles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Sort all the books in descending order of release date, and return the book titles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Sort all the books in descending order of release date, and return the book titles.[/QUESTION]\n[SQL]\n SELECT b.title FROM book b ORDER BY b.release_date DESC;"
  },
  {
    "id": 1991,
    "db_id": "book_press",
    "question": {
      "id": 1991,
      "db_id": "book_press",
      "question": "Find the number of books for each series."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of books for each series.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of books for each series.[/QUESTION]\n[SQL]\n SELECT b.book_series, COUNT(b.book_id) AS book_count FROM book b GROUP BY b.book_series ORDER BY book_count DESC NULLS LAST;"
  },
  {
    "id": 1992,
    "db_id": "book_press",
    "question": {
      "id": 1992,
      "db_id": "book_press",
      "question": "How many books does each book series have? Return the counts and book series."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many books does each book series have? Return the counts and book series.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many books does each book series have? Return the counts and book series.[/QUESTION]\n[SQL]\n SELECT b.book_series, COUNT(b.book_id) AS COUNT FROM book b GROUP BY b.book_series ORDER BY COUNT DESC NULLS LAST;"
  },
  {
    "id": 1993,
    "db_id": "book_press",
    "question": {
      "id": 1993,
      "db_id": "book_press",
      "question": "Find the titles and publish dates of the top 5 best sale books."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the titles and publish dates of the top 5 best sale books.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the titles and publish dates of the top 5 best sale books.[/QUESTION]\n[SQL]\n SELECT b.title, b.release_date FROM book b ORDER BY b.sale_amount DESC NULLS LAST LIMIT 5;"
  },
  {
    "id": 1994,
    "db_id": "book_press",
    "question": {
      "id": 1994,
      "db_id": "book_press",
      "question": "What are the 5 best books in terms of sale amount? Give me their titles and release dates."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the 5 best books in terms of sale amount? Give me their titles and release dates.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the 5 best books in terms of sale amount? Give me their titles and release dates.[/QUESTION]\n[SQL]\n SELECT b.title, b.release_date FROM book b ORDER BY b.sale_amount DESC NULLS LAST LIMIT 5;"
  },
  {
    "id": 1995,
    "db_id": "book_press",
    "question": {
      "id": 1995,
      "db_id": "book_press",
      "question": "Find the book series that have some book selling more than 1000 and some book less 500."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the book series that have some book selling more than 1000 and some book less 500.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the book series that have some book selling more than 1000 and some book less 500.[/QUESTION]\n[SQL]\n SELECT b.book_series FROM book b WHERE CAST(b.sale_amount AS INT) > 1000 AND CAST(b.sale_amount AS INT) < 500 GROUP BY b.book_series;"
  },
  {
    "id": 1996,
    "db_id": "book_press",
    "question": {
      "id": 1996,
      "db_id": "book_press",
      "question": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which book series contain both books with sale amount above 1000 and books with sale amount below 500?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which book series contain both books with sale amount above 1000 and books with sale amount below 500?[/QUESTION]\n[SQL]\n SELECT b.book_series FROM book b WHERE CAST(b.sale_amount AS INT) > 1000 AND CAST(b.sale_amount AS INT) < 500 GROUP BY b.book_series;"
  },
  {
    "id": 1997,
    "db_id": "book_press",
    "question": {
      "id": 1997,
      "db_id": "book_press",
      "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name of authors who publish their books in both \"MM\" and \"LT\" series.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name of authors who publish their books in both \"MM\" and \"LT\" series.[/QUESTION]\n[SQL]\n SELECT DISTINCT a.\"Name\" FROM author a JOIN book b ON a.\"Author_ID\" = b.Author_ID WHERE b.Book_Series ilike '%MM%' AND b.Book_Series ilike '%LT%';"
  },
  {
    "id": 1998,
    "db_id": "book_press",
    "question": {
      "id": 1998,
      "db_id": "book_press",
      "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.[/QUESTION]\n[SQL]\n SELECT DISTINCT a.\"Name\" FROM book b JOIN author a ON b.Author_ID = a.Author_ID WHERE b.Book_Series IN ('MM', 'LT')"
  },
  {
    "id": 1999,
    "db_id": "book_press",
    "question": {
      "id": 1999,
      "db_id": "book_press",
      "question": "Find the name and age of the authors who do not have any book in the record."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and age of the authors who do not have any book in the record.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and age of the authors who do not have any book in the record.[/QUESTION]\n[SQL]\n SELECT a.\"Name\", a.\"Age\" FROM \"author\" a LEFT JOIN \"book\" b ON a.\"Author_ID\" = b.Author_ID WHERE b.Author_ID IS NULL;"
  },
  {
    "id": 2000,
    "db_id": "book_press",
    "question": {
      "id": 2000,
      "db_id": "book_press",
      "question": "Which authors in the record have not published any books ? Give me their names ."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which authors in the record have not published any books ? Give me their names .[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which authors in the record have not published any books ? Give me their names .[/QUESTION]\n[SQL]\n SELECT a.\"Name\" FROM \"author\" a LEFT JOIN book b ON a.\"Author_ID\" = b.Author_ID WHERE b.Author_ID IS NULL;"
  },
  {
    "id": 2001,
    "db_id": "book_press",
    "question": {
      "id": 2001,
      "db_id": "book_press",
      "question": "Find the names of authors who have more than one book in the database."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of authors who have more than one book in the database.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of authors who have more than one book in the database.[/QUESTION]\n[SQL]\n SELECT a.\"Name\" FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Name HAVING COUNT(b.Book_ID) > 1;"
  },
  {
    "id": 2002,
    "db_id": "book_press",
    "question": {
      "id": 2002,
      "db_id": "book_press",
      "question": "Which authors have published more than 1 book according to the database? Give me their names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which authors have published more than 1 book according to the database? Give me their names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which authors have published more than 1 book according to the database? Give me their names.[/QUESTION]\n[SQL]\n SELECT a.\"Name\" FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Name HAVING COUNT(b.Book_ID) > 1;"
  },
  {
    "id": 2003,
    "db_id": "book_press",
    "question": {
      "id": 2003,
      "db_id": "book_press",
      "question": "Find the title, author name, and publisher name for the top 3 best sales books."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the title, author name, and publisher name for the top 3 best sales books.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the title, author name, and publisher name for the top 3 best sales books.[/QUESTION]\n[SQL]\n SELECT b.title, a.\"name\", p.name AS press_name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY sale_amount DESC NULLS LAST LIMIT 3;"
  },
  {
    "id": 2004,
    "db_id": "book_press",
    "question": {
      "id": 2004,
      "db_id": "book_press",
      "question": "What are the 3 best selling books? Show their titles, author names, and press names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the 3 best selling books? Show their titles, author names, and press names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the 3 best selling books? Show their titles, author names, and press names.[/QUESTION]\n[SQL]\n SELECT b.title, a.\"name\", p.\"name\" FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY sale_amount DESC NULLS LAST LIMIT 3;"
  },
  {
    "id": 2005,
    "db_id": "book_press",
    "question": {
      "id": 2005,
      "db_id": "book_press",
      "question": "Find the name and total book sale amount of each press."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and total book sale amount of each press.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and total book sale amount of each press.[/QUESTION]\n[SQL]\n SELECT p.name AS press_name, SUM(b.sale_amount::int) AS total_sales FROM book b JOIN press p ON b.press_id = p.press_id GROUP BY p.name ORDER BY total_sales DESC NULLS LAST;"
  },
  {
    "id": 2006,
    "db_id": "book_press",
    "question": {
      "id": 2006,
      "db_id": "book_press",
      "question": "What are the name and total book sale amount of each press?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the name and total book sale amount of each press?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the name and total book sale amount of each press?[/QUESTION]\n[SQL]\n SELECT p.name AS press_name, SUM(b.sale_amount::int) AS total_sales FROM book b JOIN press p ON b.press_id = p.press_id GROUP BY p.name ORDER BY total_sales DESC NULLS LAST;"
  },
  {
    "id": 2007,
    "db_id": "book_press",
    "question": {
      "id": 2007,
      "db_id": "book_press",
      "question": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the number of books that are sold more than 1000 for each publisher. List the press name as well.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the number of books that are sold more than 1000 for each publisher. List the press name as well.[/QUESTION]\n[SQL]\n SELECT p.name AS press_name, COUNT(*) AS book_count FROM book b JOIN press p ON b.press_id = p.press_id WHERE CAST(b.sale_amount AS INT) > 1000 GROUP BY p.name ORDER BY book_count DESC NULLS LAST;"
  },
  {
    "id": 2008,
    "db_id": "book_press",
    "question": {
      "id": 2008,
      "db_id": "book_press",
      "question": "For each press, return its name and the number of books that have sale amount above 1000."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]For each press, return its name and the number of books that have sale amount above 1000.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]For each press, return its name and the number of books that have sale amount above 1000.[/QUESTION]\n[SQL]\n SELECT p.name AS press_name, COUNT(b.book_id) AS num_books FROM book b JOIN press p ON b.press_id = p.press_id WHERE CAST(b.sale_amount AS FLOAT) > 1000 GROUP BY p.name ORDER BY num_books DESC NULLS LAST;"
  },
  {
    "id": 2009,
    "db_id": "book_press",
    "question": {
      "id": 2009,
      "db_id": "book_press",
      "question": "What is the name of the author of best selling book?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the author of best selling book?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the author of best selling book?[/QUESTION]\n[SQL]\n SELECT a.\"Name\" FROM book b JOIN author a ON b.Author_ID = a.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1;"
  },
  {
    "id": 2010,
    "db_id": "book_press",
    "question": {
      "id": 2010,
      "db_id": "book_press",
      "question": "Who wrote the best selling book? Give me the author name."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who wrote the best selling book? Give me the author name.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who wrote the best selling book? Give me the author name.[/QUESTION]\n[SQL]\n SELECT a.\"Name\" FROM book b JOIN author a ON b.Author_ID = a.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1;"
  },
  {
    "id": 2011,
    "db_id": "book_press",
    "question": {
      "id": 2011,
      "db_id": "book_press",
      "question": "find the name and gender of the author who published the most books."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]find the name and gender of the author who published the most books.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]find the name and gender of the author who published the most books.[/QUESTION]\n[SQL]\n SELECT a.\"Name\", a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.\"Name\", a.Gender ORDER BY COUNT(b.Book_ID) DESC LIMIT 1;"
  },
  {
    "id": 2012,
    "db_id": "book_press",
    "question": {
      "id": 2012,
      "db_id": "book_press",
      "question": "Who wrote the largest number of books? Give me the author name and gender."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who wrote the largest number of books? Give me the author name and gender.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who wrote the largest number of books? Give me the author name and gender.[/QUESTION]\n[SQL]\n SELECT a.\"Name\", a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.\"Name\", a.Gender ORDER BY COUNT(b.Book_ID) DESC LIMIT 1;"
  },
  {
    "id": 2013,
    "db_id": "book_press",
    "question": {
      "id": 2013,
      "db_id": "book_press",
      "question": "Find the names of the authors who did not have any book with the \"Accor\" press."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the names of the authors who did not have any book with the \"Accor\" press.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the names of the authors who did not have any book with the \"Accor\" press.[/QUESTION]\n[SQL]\n SELECT a.\"Name\" FROM author a LEFT JOIN book b ON a.\"Author_ID\" = b.Author_ID AND b.Press_ID = (SELECT Press_ID FROM press WHERE Name ilike '%Accor%') WHERE b.Author_ID IS NULL;"
  },
  {
    "id": 2014,
    "db_id": "book_press",
    "question": {
      "id": 2014,
      "db_id": "book_press",
      "question": "Which authors have never published under the \"Accor\" press? Give me their names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Which authors have never published under the \"Accor\" press? Give me their names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Which authors have never published under the \"Accor\" press? Give me their names.[/QUESTION]\n[SQL]\n SELECT a.\"Name\" FROM \"author\" a LEFT JOIN book b ON a.\"Author_ID\" = b.Author_ID AND b.Press_ID = 1 WHERE b.Author_ID IS NULL"
  },
  {
    "id": 2015,
    "db_id": "book_press",
    "question": {
      "id": 2015,
      "db_id": "book_press",
      "question": "Find the name and the yearly profit in billion for press that published more than two books."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the name and the yearly profit in billion for press that published more than two books.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the name and the yearly profit in billion for press that published more than two books.[/QUESTION]\n[SQL]\n SELECT p.name AS press_name, EXTRACT(YEAR FROM b.release_date::DATE) AS YEAR, SUM(p.month_profits_billion) OVER (PARTITION BY p.name ORDER BY EXTRACT(YEAR FROM b.release_date::DATE)) AS cumulative_profit FROM book b JOIN press p ON b.press_id = p.press_id GROUP BY p.name, YEAR HAVING COUNT(b.book_id) > 2;"
  },
  {
    "id": 2016,
    "db_id": "book_press",
    "question": {
      "id": 2016,
      "db_id": "book_press",
      "question": "Find the press that published more than two books, and return its name and yearly profit in billion."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Find the press that published more than two books, and return its name and yearly profit in billion.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Find the press that published more than two books, and return its name and yearly profit in billion.[/QUESTION]\n[SQL]\n SELECT p.name, SUM(p.year_profits_billion) AS total_yearly_profit FROM press p JOIN book b ON p.press_id = b.press_id GROUP BY p.name HAVING COUNT(b.book_id) > 2;"
  },
  {
    "id": 2017,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2017,
      "db_id": "cre_Doc_Workflow",
      "question": "How many authors do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many authors do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many authors do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT a.author_name) AS number_of_authors FROM Authors a;"
  },
  {
    "id": 2018,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2018,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all author names."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all author names.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all author names.[/QUESTION]\n[SQL]\n SELECT a.author_name FROM Authors a;"
  },
  {
    "id": 2019,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2019,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the names and other details for all authors."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names and other details for all authors.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names and other details for all authors.[/QUESTION]\n[SQL]\n SELECT a.author_name, a.other_details FROM Authors a;"
  },
  {
    "id": 2020,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2020,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the other details for the author Addison Denesik."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the other details for the author Addison Denesik.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the other details for the author Addison Denesik.[/QUESTION]\n[SQL]\n SELECT a.other_details FROM Authors a WHERE a.author_name = 'Addison Denesik';"
  },
  {
    "id": 2021,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2021,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the number of documents."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the number of documents.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the number of documents.[/QUESTION]\n[SQL]\n SELECT COUNT(d.document_id) AS total_documents FROM Documents d;"
  },
  {
    "id": 2022,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2022,
      "db_id": "cre_Doc_Workflow",
      "question": "Who is the author of the document with id 4?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who is the author of the document with id 4?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who is the author of the document with id 4?[/QUESTION]\n[SQL]\n SELECT d.author_name FROM Documents d WHERE d.document_id = 4;"
  },
  {
    "id": 2023,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2023,
      "db_id": "cre_Doc_Workflow",
      "question": "Who is the author of the document \"Travel to Brazil\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Who is the author of the document \"Travel to Brazil\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Who is the author of the document \"Travel to Brazil\"?[/QUESTION]\n[SQL]\n SELECT d.author_name FROM Documents d WHERE d.document_name ilike '%Travel%to%Brazil%'"
  },
  {
    "id": 2024,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2024,
      "db_id": "cre_Doc_Workflow",
      "question": "How many documents does has the author Era Kerluke written?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many documents does has the author Era Kerluke written?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many documents does has the author Era Kerluke written?[/QUESTION]\n[SQL]\n SELECT COUNT(d.document_id) FROM Documents d WHERE d.author_name ILIKE '%Era%Kerluke%'"
  },
  {
    "id": 2025,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2025,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the names and descriptions for all documents."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names and descriptions for all documents.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names and descriptions for all documents.[/QUESTION]\n[SQL]\n SELECT d.document_name, d.document_description FROM Documents d;"
  },
  {
    "id": 2026,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2026,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the ids and names for all documents by author Bianka Cummings."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the ids and names for all documents by author Bianka Cummings.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the ids and names for all documents by author Bianka Cummings.[/QUESTION]\n[SQL]\n SELECT d.document_id, d.document_name FROM Documents d WHERE d.author_name ILIKE '%Bianka%Cummings%' ORDER BY d.document_id NULLS LAST;"
  },
  {
    "id": 2027,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2027,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the author name and details for the document \"Travel to China\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the author name and details for the document \"Travel to China\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the author name and details for the document \"Travel to China\".[/QUESTION]\n[SQL]\n SELECT d.author_name, d.other_details FROM Documents d WHERE d.document_name ilike '%Travel%to%China%'"
  },
  {
    "id": 2028,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2028,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all author names and number of documents corresponding to each."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all author names and number of documents corresponding to each.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all author names and number of documents corresponding to each.[/QUESTION]\n[SQL]\n SELECT a.author_name, COUNT(d.document_id) AS document_count FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name ORDER BY document_count DESC NULLS LAST;"
  },
  {
    "id": 2029,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2029,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the name of the author with most number of documents?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the name of the author with most number of documents?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the name of the author with most number of documents?[/QUESTION]\n[SQL]\n SELECT a.author_name, COUNT(d.document_id) AS document_count FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name ORDER BY document_count DESC LIMIT 1;"
  },
  {
    "id": 2030,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2030,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the names for authors with at least two documents."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the names for authors with at least two documents.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the names for authors with at least two documents.[/QUESTION]\n[SQL]\n SELECT a.author_name FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name HAVING COUNT(d.document_id) >= 2;"
  },
  {
    "id": 2031,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2031,
      "db_id": "cre_Doc_Workflow",
      "question": "How many business processes do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many business processes do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many business processes do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Business_Processes bp;"
  },
  {
    "id": 2032,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2032,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the next process id, process name, process description for process with id 9."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the next process id, process name, process description for process with id 9.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the next process id, process name, process description for process with id 9.[/QUESTION]\n[SQL]\n SELECT bp.next_process_id, bp.process_name, bp.process_description FROM Business_Processes bp WHERE bp.process_id = 9;"
  },
  {
    "id": 2033,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2033,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the process name for the next process of the process with id 9?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the process name for the next process of the process with id 9?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the process name for the next process of the process with id 9?[/QUESTION]\n[SQL]\n SELECT bp.process_name FROM Business_Processes bp WHERE bp.process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9);"
  },
  {
    "id": 2034,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2034,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the number of process outcomes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the number of process outcomes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the number of process outcomes.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT po.process_outcome_code) AS total_process_outcomes FROM Process_Outcomes po;"
  },
  {
    "id": 2035,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2035,
      "db_id": "cre_Doc_Workflow",
      "question": "List the codes and descriptions for all process outcomes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the codes and descriptions for all process outcomes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the codes and descriptions for all process outcomes.[/QUESTION]\n[SQL]\n SELECT po.process_outcome_code, po.process_outcome_description FROM Process_Outcomes po ORDER BY po.process_outcome_code NULLS LAST;"
  },
  {
    "id": 2036,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2036,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the description for the process outcome code working?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the description for the process outcome code working?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the description for the process outcome code working?[/QUESTION]\n[SQL]\n SELECT po.process_outcome_description FROM Process_Outcomes po WHERE po.process_outcome_code = 'working';"
  },
  {
    "id": 2037,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2037,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the number of process status."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the number of process status.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the number of process status.[/QUESTION]\n[SQL]\n SELECT ps.process_status_code, COUNT(*) AS COUNT FROM Process_Status ps GROUP BY ps.process_status_code ORDER BY COUNT DESC NULLS LAST;"
  },
  {
    "id": 2038,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2038,
      "db_id": "cre_Doc_Workflow",
      "question": "List the codes and descriptions for all process status."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the codes and descriptions for all process status.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the codes and descriptions for all process status.[/QUESTION]\n[SQL]\n SELECT ps.process_status_code, ps.process_status_description FROM Process_Status ps ORDER BY ps.process_status_code NULLS LAST;"
  },
  {
    "id": 2039,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2039,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the description for process status code ct?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the description for process status code ct?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the description for process status code ct?[/QUESTION]\n[SQL]\n SELECT ps.process_status_description FROM Process_Status ps WHERE ps.process_status_code = 'ct';"
  },
  {
    "id": 2040,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2040,
      "db_id": "cre_Doc_Workflow",
      "question": "How many staff do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many staff do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many staff do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Staff s;"
  },
  {
    "id": 2041,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2041,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the ids and details for all staff."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the ids and details for all staff.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the ids and details for all staff.[/QUESTION]\n[SQL]\n SELECT s.staff_id, s.staff_details FROM Staff s ORDER BY s.staff_id NULLS LAST;"
  },
  {
    "id": 2042,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2042,
      "db_id": "cre_Doc_Workflow",
      "question": "What are the details for the staff member with id 100."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the details for the staff member with id 100.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the details for the staff member with id 100.[/QUESTION]\n[SQL]\n SELECT s.staff_details FROM Staff s WHERE s.staff_id = 100;"
  },
  {
    "id": 2043,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2043,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the number of staff roles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the number of staff roles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the number of staff roles.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT r.staff_role_code) AS total_roles FROM Ref_Staff_Roles r;"
  },
  {
    "id": 2044,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2044,
      "db_id": "cre_Doc_Workflow",
      "question": "List the codes and descriptions for all staff roles."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the codes and descriptions for all staff roles.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the codes and descriptions for all staff roles.[/QUESTION]\n[SQL]\n SELECT r.staff_role_code, r.staff_role_description FROM ref_staff_roles r ORDER BY r.staff_role_code NULLS LAST;"
  },
  {
    "id": 2045,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2045,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the description for staff role code HR?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the description for staff role code HR?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the description for staff role code HR?[/QUESTION]\n[SQL]\n SELECT r.staff_role_description FROM ref_staff_roles r WHERE r.staff_role_code = 'HR';"
  },
  {
    "id": 2046,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2046,
      "db_id": "cre_Doc_Workflow",
      "question": "How many documents have a process?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many documents have a process?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many documents have a process?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT dp.document_id) AS number_of_documents FROM Documents_Processes dp;"
  },
  {
    "id": 2047,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2047,
      "db_id": "cre_Doc_Workflow",
      "question": "List all process ids with a document."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all process ids with a document.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all process ids with a document.[/QUESTION]\n[SQL]\n SELECT DISTINCT bp.process_id FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id;"
  },
  {
    "id": 2048,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2048,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all document ids without a process."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all document ids without a process.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all document ids without a process.[/QUESTION]\n[SQL]\n SELECT d.document_id FROM Documents d WHERE d.document_id NOT IN (SELECT doc.document_id FROM Documents_Processes doc);"
  },
  {
    "id": 2049,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2049,
      "db_id": "cre_Doc_Workflow",
      "question": "List all process ids with no document."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all process ids with no document.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all process ids with no document.[/QUESTION]\n[SQL]\n SELECT bp.process_id FROM Business_Processes bp LEFT JOIN Documents_Processes dp ON bp.process_id = dp.process_id WHERE dp.process_id IS NULL;"
  },
  {
    "id": 2050,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2050,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the process outcome description and process status description for the document with id 0?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the process outcome description and process status description for the document with id 0?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the process outcome description and process status description for the document with id 0?[/QUESTION]\n[SQL]\n SELECT dp.process_outcome_description, ps.process_status_description FROM Documents_Processes dp JOIN Process_Outcomes po ON dp.process_outcome_code = po.process_outcome_code JOIN Process_Status ps ON dp.process_status_code = ps.process_status_code WHERE dp.document_id = 0;"
  },
  {
    "id": 2051,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2051,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the process name for the document \"Travel to Brazil\"?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the process name for the document \"Travel to Brazil\"?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the process name for the document \"Travel to Brazil\"?[/QUESTION]\n[SQL]\n SELECT bp.process_name FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id WHERE dp.document_id = (SELECT document_id FROM Documents WHERE document_name ilike '%Travel%to%Brazil%');"
  },
  {
    "id": 2052,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2052,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all process ids and the number of documents in each process."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all process ids and the number of documents in each process.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all process ids and the number of documents in each process.[/QUESTION]\n[SQL]\n SELECT bp.process_id, COUNT(dp.document_id) AS document_count FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id ORDER BY bp.process_id NULLS LAST;"
  },
  {
    "id": 2053,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2053,
      "db_id": "cre_Doc_Workflow",
      "question": "How many staff are the document with id 0 and process with id 9."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many staff are the document with id 0 and process with id 9.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many staff are the document with id 0 and process with id 9.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT s.staff_id) AS number_of_staff FROM Staff_in_Processes s JOIN Documents_Processes dp ON s.document_id = dp.document_id AND s.process_id = dp.process_id WHERE dp.document_id = 0 AND dp.process_id = 9;"
  },
  {
    "id": 2054,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2054,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all staff ids and the number of document processes for each staff."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all staff ids and the number of document processes for each staff.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all staff ids and the number of document processes for each staff.[/QUESTION]\n[SQL]\n SELECT s.staff_id, COUNT(d.document_id) AS total_documents FROM Staff s JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id JOIN Documents_Processes dp ON sp.document_id = dp.document_id AND sp.process_id = dp.process_id JOIN Documents d ON dp.document_id = d.document_id GROUP BY s.staff_id ORDER BY total_documents DESC NULLS LAST;"
  },
  {
    "id": 2055,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2055,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all staff role codes and the number of document processes for each role."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all staff role codes and the number of document processes for each role.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all staff role codes and the number of document processes for each role.[/QUESTION]\n[SQL]\n SELECT s.staff_role_code, COUNT(d.document_id) AS num_documents FROM Staff s JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id JOIN Documents_Processes dp ON sp.document_id = dp.document_id AND sp.process_id = dp.process_id JOIN Documents d ON dp.document_id = d.document_id GROUP BY s.staff_role_code ORDER BY num_documents DESC NULLS LAST;"
  },
  {
    "id": 2056,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 2056,
      "db_id": "cre_Doc_Workflow",
      "question": "How many different roles does the staff with id 3 have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many different roles does the staff with id 3 have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many different roles does the staff with id 3 have?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT s.staff_role_code) FROM Staff_in_Processes s WHERE s.staff_id = 3;"
  },
  {
    "id": 2057,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2057,
      "db_id": "advertising_agencies",
      "question": "How many agencies do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many agencies do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many agencies do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT a.agency_id) AS number_of_agencies FROM Agencies a;"
  },
  {
    "id": 2058,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2058,
      "db_id": "advertising_agencies",
      "question": "Count the number of agencies."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of agencies.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of agencies.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Agencies;"
  },
  {
    "id": 2059,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2059,
      "db_id": "advertising_agencies",
      "question": "Show all agency ids and details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all agency ids and details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all agency ids and details.[/QUESTION]\n[SQL]\n SELECT a.agency_id, a.agency_details FROM Agencies a;"
  },
  {
    "id": 2060,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2060,
      "db_id": "advertising_agencies",
      "question": "What are all the agency ids and details?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the agency ids and details?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the agency ids and details?[/QUESTION]\n[SQL]\n SELECT a.agency_id, a.agency_details FROM Agencies a;"
  },
  {
    "id": 2061,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2061,
      "db_id": "advertising_agencies",
      "question": "Show the number of clients."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the number of clients.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the number of clients.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.client_id) AS total_clients FROM Clients c;"
  },
  {
    "id": 2062,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2062,
      "db_id": "advertising_agencies",
      "question": "How many clients are there?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many clients are there?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many clients are there?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT c.client_id) AS total_clients FROM Clients c;"
  },
  {
    "id": 2063,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2063,
      "db_id": "advertising_agencies",
      "question": "List all client ids and client details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all client ids and client details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all client ids and client details.[/QUESTION]\n[SQL]\n SELECT c.client_id, c.client_details FROM Clients c;"
  },
  {
    "id": 2064,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2064,
      "db_id": "advertising_agencies",
      "question": "What are all the client ids and details?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all the client ids and details?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all the client ids and details?[/QUESTION]\n[SQL]\n SELECT c.client_id, c.client_details FROM Clients c;"
  },
  {
    "id": 2065,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2065,
      "db_id": "advertising_agencies",
      "question": "Show agency ids and the number of clients for each agency."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show agency ids and the number of clients for each agency.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show agency ids and the number of clients for each agency.[/QUESTION]\n[SQL]\n SELECT a.agency_id, COUNT(c.client_id) AS client_count FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id ORDER BY client_count DESC NULLS LAST;"
  },
  {
    "id": 2066,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2066,
      "db_id": "advertising_agencies",
      "question": "How many clients does each agency have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many clients does each agency have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many clients does each agency have?[/QUESTION]\n[SQL]\n SELECT a.agency_id, COUNT(c.client_id) AS number_of_clients FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id ORDER BY number_of_clients DESC NULLS LAST;"
  },
  {
    "id": 2067,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2067,
      "db_id": "advertising_agencies",
      "question": "What is the agency id and details with most number of clients?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the agency id and details with most number of clients?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the agency id and details with most number of clients?[/QUESTION]\n[SQL]\n SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(c.client_id) DESC LIMIT 1;"
  },
  {
    "id": 2068,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2068,
      "db_id": "advertising_agencies",
      "question": "Return the agency id and details for the agency with the greatest number of clients."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the agency id and details for the agency with the greatest number of clients.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the agency id and details for the agency with the greatest number of clients.[/QUESTION]\n[SQL]\n SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(c.client_id) DESC LIMIT 1;"
  },
  {
    "id": 2069,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2069,
      "db_id": "advertising_agencies",
      "question": "Show agency ids and details with at least 2 clients."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show agency ids and details with at least 2 clients.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show agency ids and details with at least 2 clients.[/QUESTION]\n[SQL]\n SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details HAVING COUNT(c.client_id) >= 2 ORDER BY a.agency_id NULLS LAST;"
  },
  {
    "id": 2070,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2070,
      "db_id": "advertising_agencies",
      "question": "What are the agency ids and details agencies with at least 2 clients?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the agency ids and details agencies with at least 2 clients?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the agency ids and details agencies with at least 2 clients?[/QUESTION]\n[SQL]\n SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details HAVING COUNT(c.client_id) >= 2;"
  },
  {
    "id": 2071,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2071,
      "db_id": "advertising_agencies",
      "question": "Show agency details for client with detail 'Mac'."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show agency details for client with detail 'Mac'.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show agency details for client with detail 'Mac'.[/QUESTION]\n[SQL]\n SELECT a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id WHERE c.client_details ilike '%Mac%';"
  },
  {
    "id": 2072,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2072,
      "db_id": "advertising_agencies",
      "question": "What are the agency details for clients with the detail Mac?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the agency details for clients with the detail Mac?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the agency details for clients with the detail Mac?[/QUESTION]\n[SQL]\n SELECT c.client_id, c.agency_id, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id WHERE c.client_details ilike '%Mac%';"
  },
  {
    "id": 2073,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2073,
      "db_id": "advertising_agencies",
      "question": "Show details for all clients and the details of their corresponding agents."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show details for all clients and the details of their corresponding agents.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show details for all clients and the details of their corresponding agents.[/QUESTION]\n[SQL]\n WITH client_info AS (SELECT c.client_id, c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id), staff_info AS (SELECT s.staff_id, s.staff_details, ci.agency_details FROM Staff s JOIN client_info ci ON s.agency_id = ci.agency_id) SELECT i.invoice_id, i.invoice_status, si.staff_details, ci.client_details FROM Invoices i JOIN staff_info si ON i.client_id = si.staff_id JOIN client_info ci ON ci.client_id = i.client_id;"
  },
  {
    "id": 2074,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2074,
      "db_id": "advertising_agencies",
      "question": "What are the client details for each client and the corresponding details of their agencies?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the client details for each client and the corresponding details of their agencies?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the client details for each client and the corresponding details of their agencies?[/QUESTION]\n[SQL]\n SELECT c.client_id, c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id;"
  },
  {
    "id": 2075,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2075,
      "db_id": "advertising_agencies",
      "question": "Show all sic codes and the number of clients with each code."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all sic codes and the number of clients with each code.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all sic codes and the number of clients with each code.[/QUESTION]\n[SQL]\n SELECT c.sic_code, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.sic_code ORDER BY client_count DESC NULLS LAST;"
  },
  {
    "id": 2076,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2076,
      "db_id": "advertising_agencies",
      "question": "How many clients are there for each sic code?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many clients are there for each sic code?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many clients are there for each sic code?[/QUESTION]\n[SQL]\n SELECT c.sic_code, COUNT(c.client_id) AS number_of_clients FROM Clients c GROUP BY c.sic_code ORDER BY number_of_clients DESC NULLS LAST;"
  },
  {
    "id": 2077,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2077,
      "db_id": "advertising_agencies",
      "question": "Show all client ids and details with sic code \"Bad\"."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all client ids and details with sic code \"Bad\".[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all client ids and details with sic code \"Bad\".[/QUESTION]\n[SQL]\n SELECT c.client_id, c.client_details FROM Clients c WHERE c.sic_code ilike '%Bad%';"
  },
  {
    "id": 2078,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2078,
      "db_id": "advertising_agencies",
      "question": "What are the client ideas and details for clients with the sic code Bad?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the client ideas and details for clients with the sic code Bad?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the client ideas and details for clients with the sic code Bad?[/QUESTION]\n[SQL]\n SELECT c.client_id, c.client_details FROM Clients c WHERE c.sic_code ilike '%Bad%';"
  },
  {
    "id": 2079,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2079,
      "db_id": "advertising_agencies",
      "question": "Show all agency ids and details for agencies with a client."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all agency ids and details for agencies with a client.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all agency ids and details for agencies with a client.[/QUESTION]\n[SQL]\n SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id;"
  },
  {
    "id": 2080,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2080,
      "db_id": "advertising_agencies",
      "question": "What are the agency ids and agency details for all agencies who have a client?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the agency ids and agency details for all agencies who have a client?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the agency ids and agency details for all agencies who have a client?[/QUESTION]\n[SQL]\n SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id;"
  },
  {
    "id": 2081,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2081,
      "db_id": "advertising_agencies",
      "question": "Show all agency ids without any client."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all agency ids without any client.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all agency ids without any client.[/QUESTION]\n[SQL]\n SELECT a.agency_id FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id WHERE c.agency_id IS NULL;"
  },
  {
    "id": 2082,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2082,
      "db_id": "advertising_agencies",
      "question": "What are ids of agencies that do not have any clients?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are ids of agencies that do not have any clients?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are ids of agencies that do not have any clients?[/QUESTION]\n[SQL]\n SELECT a.agency_id FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id WHERE c.agency_id IS NULL;"
  },
  {
    "id": 2083,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2083,
      "db_id": "advertising_agencies",
      "question": "How many invoices do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many invoices do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many invoices do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Invoices i;"
  },
  {
    "id": 2084,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2084,
      "db_id": "advertising_agencies",
      "question": "Count the number of invoices."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of invoices.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of invoices.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Invoices i;"
  },
  {
    "id": 2085,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2085,
      "db_id": "advertising_agencies",
      "question": "Show ids, status codes, and details for all invoices for clients."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show ids, status codes, and details for all invoices for clients.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show ids, status codes, and details for all invoices for clients.[/QUESTION]\n[SQL]\n SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i;"
  },
  {
    "id": 2086,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2086,
      "db_id": "advertising_agencies",
      "question": "What are the ids, statuses, and details for all invoices?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids, statuses, and details for all invoices?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids, statuses, and details for all invoices?[/QUESTION]\n[SQL]\n SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i;"
  },
  {
    "id": 2087,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2087,
      "db_id": "advertising_agencies",
      "question": "Show all client ids and the number of invoices for each client."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all client ids and the number of invoices for each client.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all client ids and the number of invoices for each client.[/QUESTION]\n[SQL]\n SELECT c.client_id, COUNT(i.invoice_id) AS total_invoices FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ORDER BY total_invoices DESC NULLS LAST;"
  },
  {
    "id": 2088,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2088,
      "db_id": "advertising_agencies",
      "question": "How many invoices are there for each client id?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many invoices are there for each client id?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many invoices are there for each client id?[/QUESTION]\n[SQL]\n SELECT c.client_id, COUNT(i.invoice_id) AS number_of_invoices FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ORDER BY number_of_invoices DESC NULLS LAST;"
  },
  {
    "id": 2089,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2089,
      "db_id": "advertising_agencies",
      "question": "List the client id and detail with most number of invoices."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the client id and detail with most number of invoices.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the client id and detail with most number of invoices.[/QUESTION]\n[SQL]\n SELECT c.client_id, c.client_details, COUNT(i.invoice_id) AS total_invoices FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id, c.client_details ORDER BY total_invoices DESC LIMIT 1;"
  },
  {
    "id": 2090,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2090,
      "db_id": "advertising_agencies",
      "question": "What are the client id and details for the client with the most invoices?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the client id and details for the client with the most invoices?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the client id and details for the client with the most invoices?[/QUESTION]\n[SQL]\n SELECT c.client_id, c.client_details FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id, c.client_details ORDER BY COUNT(i.invoice_id) DESC LIMIT 1;"
  },
  {
    "id": 2091,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2091,
      "db_id": "advertising_agencies",
      "question": "What are client ids for clients with at least 2 invoices."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are client ids for clients with at least 2 invoices.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are client ids for clients with at least 2 invoices.[/QUESTION]\n[SQL]\n SELECT c.client_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id HAVING COUNT(i.invoice_id) >= 2;"
  },
  {
    "id": 2092,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2092,
      "db_id": "advertising_agencies",
      "question": "Return the client ids for clients with two or more invoices?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the client ids for clients with two or more invoices?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the client ids for clients with two or more invoices?[/QUESTION]\n[SQL]\n SELECT c.client_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id HAVING COUNT(i.invoice_id) >= 2;"
  },
  {
    "id": 2093,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2093,
      "db_id": "advertising_agencies",
      "question": "Show all invoice status codes and the number of invoices with each status."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all invoice status codes and the number of invoices with each status.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all invoice status codes and the number of invoices with each status.[/QUESTION]\n[SQL]\n SELECT i.invoice_status, COUNT(*) AS COUNT FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT DESC;"
  },
  {
    "id": 2094,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2094,
      "db_id": "advertising_agencies",
      "question": "How many invoices are there for each status code?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many invoices are there for each status code?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many invoices are there for each status code?[/QUESTION]\n[SQL]\n SELECT i.invoice_status, COUNT(*) AS number_of_invoices FROM Invoices i GROUP BY i.invoice_status ORDER BY number_of_invoices DESC NULLS LAST;"
  },
  {
    "id": 2095,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2095,
      "db_id": "advertising_agencies",
      "question": "What is the invoice status code with most number of invoices."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the invoice status code with most number of invoices.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the invoice status code with most number of invoices.[/QUESTION]\n[SQL]\n SELECT i.invoice_status, COUNT(*) AS COUNT FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 2096,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2096,
      "db_id": "advertising_agencies",
      "question": "Return the invoice status that has the most invoices."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the invoice status that has the most invoices.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the invoice status that has the most invoices.[/QUESTION]\n[SQL]\n SELECT i.invoice_status, COUNT(*) AS COUNT FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 2097,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2097,
      "db_id": "advertising_agencies",
      "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all invoice status codes and details and the corresponding client id and details and agency id and details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all invoice status codes and details and the corresponding client id and details and agency id and details.[/QUESTION]\n[SQL]\n SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;"
  },
  {
    "id": 2098,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2098,
      "db_id": "advertising_agencies",
      "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?[/QUESTION]\n[SQL]\n SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;"
  },
  {
    "id": 2099,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2099,
      "db_id": "advertising_agencies",
      "question": "List all meeting type codes and details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all meeting type codes and details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all meeting type codes and details.[/QUESTION]\n[SQL]\n SELECT m.meeting_type, m.other_details FROM Meetings m ORDER BY m.meeting_type NULLS LAST;"
  },
  {
    "id": 2100,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2100,
      "db_id": "advertising_agencies",
      "question": "What are all meeting types and other details?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all meeting types and other details?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all meeting types and other details?[/QUESTION]\n[SQL]\n SELECT m.meeting_type, m.other_details FROM Meetings m;"
  },
  {
    "id": 2101,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2101,
      "db_id": "advertising_agencies",
      "question": "Show all meeting outcomes and purposes."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all meeting outcomes and purposes.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all meeting outcomes and purposes.[/QUESTION]\n[SQL]\n SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m;"
  },
  {
    "id": 2102,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2102,
      "db_id": "advertising_agencies",
      "question": "What are all meeting outcomes and purposes?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all meeting outcomes and purposes?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all meeting outcomes and purposes?[/QUESTION]\n[SQL]\n SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m;"
  },
  {
    "id": 2103,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2103,
      "db_id": "advertising_agencies",
      "question": "Show all payment ids and details for invoices whose status is 'Working'."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all payment ids and details for invoices whose status is 'Working'.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all payment ids and details for invoices whose status is 'Working'.[/QUESTION]\n[SQL]\n SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status ilike '%Working%';"
  },
  {
    "id": 2104,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2104,
      "db_id": "advertising_agencies",
      "question": "What are all payment ids and payment details for invoices with status Working?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are all payment ids and payment details for invoices with status Working?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are all payment ids and payment details for invoices with status Working?[/QUESTION]\n[SQL]\n SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status ilike '%Working%';"
  },
  {
    "id": 2105,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2105,
      "db_id": "advertising_agencies",
      "question": "Show all invoice ids and statuses without a payment."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all invoice ids and statuses without a payment.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all invoice ids and statuses without a payment.[/QUESTION]\n[SQL]\n SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL;"
  },
  {
    "id": 2106,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2106,
      "db_id": "advertising_agencies",
      "question": "What are the invoice ids and statuses for invoices without a payment?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the invoice ids and statuses for invoices without a payment?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the invoice ids and statuses for invoices without a payment?[/QUESTION]\n[SQL]\n SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL;"
  },
  {
    "id": 2107,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2107,
      "db_id": "advertising_agencies",
      "question": "How many payments do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many payments do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many payments do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Payments p;"
  },
  {
    "id": 2108,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2108,
      "db_id": "advertising_agencies",
      "question": "Count the number of payments."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of payments.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of payments.[/QUESTION]\n[SQL]\n SELECT COUNT(*) AS total_payments FROM Payments p;"
  },
  {
    "id": 2109,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2109,
      "db_id": "advertising_agencies",
      "question": "List all payment ids and its corresponding invoice ids and details."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List all payment ids and its corresponding invoice ids and details.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List all payment ids and its corresponding invoice ids and details.[/QUESTION]\n[SQL]\n SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p;"
  },
  {
    "id": 2110,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2110,
      "db_id": "advertising_agencies",
      "question": "What are the payment ids, invoice ids, and payment details for all payments?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the payment ids, invoice ids, and payment details for all payments?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the payment ids, invoice ids, and payment details for all payments?[/QUESTION]\n[SQL]\n SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p;"
  },
  {
    "id": 2111,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2111,
      "db_id": "advertising_agencies",
      "question": "Show all the different invoice ids and statuses of the payments"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all the different invoice ids and statuses of the payments[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all the different invoice ids and statuses of the payments[/QUESTION]\n[SQL]\n SELECT i.invoice_id, p.payment_details, i.invoice_status FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id;"
  },
  {
    "id": 2112,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2112,
      "db_id": "advertising_agencies",
      "question": "What are the distinct invoice ids and statuses for all payments?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the distinct invoice ids and statuses for all payments?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the distinct invoice ids and statuses for all payments?[/QUESTION]\n[SQL]\n SELECT DISTINCT p.invoice_id, i.invoice_status FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id;"
  },
  {
    "id": 2113,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2113,
      "db_id": "advertising_agencies",
      "question": "Show all invoice ids and the number of payments for each invoice."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all invoice ids and the number of payments for each invoice.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all invoice ids and the number of payments for each invoice.[/QUESTION]\n[SQL]\n SELECT i.invoice_id, COUNT(p.payment_id) AS number_of_payments FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id ORDER BY i.invoice_id NULLS LAST;"
  },
  {
    "id": 2114,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2114,
      "db_id": "advertising_agencies",
      "question": "How many payments are there for each invoice?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many payments are there for each invoice?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many payments are there for each invoice?[/QUESTION]\n[SQL]\n SELECT p.invoice_id, COUNT(*) AS number_of_payments FROM Payments p GROUP BY p.invoice_id ORDER BY number_of_payments DESC NULLS LAST;"
  },
  {
    "id": 2115,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2115,
      "db_id": "advertising_agencies",
      "question": "What is the invoice id, status code, and details for the invoice with most number of payments."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the invoice id, status code, and details for the invoice with most number of payments.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the invoice id, status code, and details for the invoice with most number of payments.[/QUESTION]\n[SQL]\n SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN (SELECT p.invoice_id, COUNT(*) AS num_payments FROM Payments p GROUP BY p.invoice_id ORDER BY num_payments DESC LIMIT 1) AS m ON i.invoice_id = m.invoice_id;"
  },
  {
    "id": 2116,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2116,
      "db_id": "advertising_agencies",
      "question": "Return the invoice ids, statuses, and details for invoices with the most payments?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the invoice ids, statuses, and details for invoices with the most payments?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the invoice ids, statuses, and details for invoices with the most payments?[/QUESTION]\n[SQL]\n SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN (SELECT p.invoice_id, COUNT(*) AS payment_count FROM Payments p GROUP BY p.invoice_id ORDER BY payment_count DESC LIMIT 10) AS m ON i.invoice_id = m.invoice_id;"
  },
  {
    "id": 2117,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2117,
      "db_id": "advertising_agencies",
      "question": "How many staff do we have?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many staff do we have?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many staff do we have?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT s.staff_id) AS total_staff FROM Staff s;"
  },
  {
    "id": 2118,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2118,
      "db_id": "advertising_agencies",
      "question": "Count the number of staff."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of staff.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of staff.[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT s.staff_id) AS total_staff FROM Staff s;"
  },
  {
    "id": 2119,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2119,
      "db_id": "advertising_agencies",
      "question": "Show the agency ids and the number of staff in each agent?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the agency ids and the number of staff in each agent?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the agency ids and the number of staff in each agent?[/QUESTION]\n[SQL]\n SELECT a.agency_id, COUNT(s.staff_id) AS total_staff FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id ORDER BY total_staff DESC NULLS LAST;"
  },
  {
    "id": 2120,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2120,
      "db_id": "advertising_agencies",
      "question": "Return the agency ids and number of staff in each."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the agency ids and number of staff in each.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the agency ids and number of staff in each.[/QUESTION]\n[SQL]\n SELECT a.agency_id, COUNT(s.staff_id) AS total_staff FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id ORDER BY total_staff DESC NULLS LAST;"
  },
  {
    "id": 2121,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2121,
      "db_id": "advertising_agencies",
      "question": "What is the agent id and details for the agency with most staff?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the agent id and details for the agency with most staff?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the agent id and details for the agency with most staff?[/QUESTION]\n[SQL]\n SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(s.staff_id) DESC LIMIT 1;"
  },
  {
    "id": 2122,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2122,
      "db_id": "advertising_agencies",
      "question": "Return the id and detail for the agency with the most staff."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the id and detail for the agency with the most staff.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the id and detail for the agency with the most staff.[/QUESTION]\n[SQL]\n SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(s.staff_id) DESC LIMIT 1;"
  },
  {
    "id": 2123,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2123,
      "db_id": "advertising_agencies",
      "question": "Show meeting outcome codes and the number of meeting in each outcome."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show meeting outcome codes and the number of meeting in each outcome.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show meeting outcome codes and the number of meeting in each outcome.[/QUESTION]\n[SQL]\n SELECT m.meeting_outcome, COUNT(*) AS COUNT FROM Meetings m GROUP BY m.meeting_outcome ORDER BY COUNT DESC;"
  },
  {
    "id": 2124,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2124,
      "db_id": "advertising_agencies",
      "question": "How many meetings had each meeting outcome?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many meetings had each meeting outcome?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many meetings had each meeting outcome?[/QUESTION]\n[SQL]\n SELECT m.meeting_outcome, COUNT(*) AS number_of_meetings FROM Meetings m GROUP BY m.meeting_outcome ORDER BY number_of_meetings DESC NULLS LAST;"
  },
  {
    "id": 2125,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2125,
      "db_id": "advertising_agencies",
      "question": "List the client ids and the number of meeting for each client."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the client ids and the number of meeting for each client.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the client ids and the number of meeting for each client.[/QUESTION]\n[SQL]\n SELECT c.client_id, COUNT(m.meeting_id) AS total_meetings FROM Clients c JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id ORDER BY total_meetings DESC NULLS LAST;"
  },
  {
    "id": 2126,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2126,
      "db_id": "advertising_agencies",
      "question": "How many meetings are there for each client id?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many meetings are there for each client id?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many meetings are there for each client id?[/QUESTION]\n[SQL]\n SELECT m.client_id, COUNT(*) AS number_of_meetings FROM Meetings m GROUP BY m.client_id ORDER BY number_of_meetings DESC NULLS LAST;"
  },
  {
    "id": 2127,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2127,
      "db_id": "advertising_agencies",
      "question": "Show the meeting type codes and the number of meeting for each client."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the meeting type codes and the number of meeting for each client.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the meeting type codes and the number of meeting for each client.[/QUESTION]\n[SQL]\n SELECT m.client_id, m.meeting_type, COUNT(*) AS total_meetings FROM Meetings m GROUP BY m.client_id, m.meeting_type ORDER BY total_meetings DESC;"
  },
  {
    "id": 2128,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2128,
      "db_id": "advertising_agencies",
      "question": "How many meetings are there for each meeting type?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many meetings are there for each meeting type?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many meetings are there for each meeting type?[/QUESTION]\n[SQL]\n SELECT m.meeting_type, COUNT(*) AS number_of_meetings FROM Meetings m GROUP BY m.meeting_type ORDER BY number_of_meetings DESC NULLS LAST;"
  },
  {
    "id": 2129,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2129,
      "db_id": "advertising_agencies",
      "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.[/QUESTION]\n[SQL]\n SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id;"
  },
  {
    "id": 2130,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2130,
      "db_id": "advertising_agencies",
      "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?[/QUESTION]\n[SQL]\n SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m JOIN Clients AS c ON m.client_id = c.client_id;"
  },
  {
    "id": 2131,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2131,
      "db_id": "advertising_agencies",
      "question": "Show the meeting ids and the number of staff in each meeting."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the meeting ids and the number of staff in each meeting.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the meeting ids and the number of staff in each meeting.[/QUESTION]\n[SQL]\n SELECT m.meeting_id, COUNT(sm.staff_id) AS total_staff FROM Meetings m JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id GROUP BY m.meeting_id ORDER BY total_staff DESC NULLS LAST;"
  },
  {
    "id": 2132,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2132,
      "db_id": "advertising_agencies",
      "question": "Count the number of staff in each meeting by meeting id."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of staff in each meeting by meeting id.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of staff in each meeting by meeting id.[/QUESTION]\n[SQL]\n SELECT m.meeting_id, COUNT(sm.staff_id) AS total_staff FROM Meetings m JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id GROUP BY m.meeting_id ORDER BY total_staff DESC NULLS LAST;"
  },
  {
    "id": 2133,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2133,
      "db_id": "advertising_agencies",
      "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.[/QUESTION]\n[SQL]\n SELECT s.staff_id, COUNT(m.meeting_id) AS number_of_meetings FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id JOIN Meetings m ON sm.meeting_id = m.meeting_id GROUP BY s.staff_id ORDER BY number_of_meetings ASC LIMIT 1;"
  },
  {
    "id": 2134,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2134,
      "db_id": "advertising_agencies",
      "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What is the staff id of the staff who attended the least meetings but attended some meeting?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What is the staff id of the staff who attended the least meetings but attended some meeting?[/QUESTION]\n[SQL]\n SELECT s.staff_id FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id GROUP BY s.staff_id HAVING COUNT(sm.meeting_id) > 0 ORDER BY COUNT(sm.meeting_id) ASC LIMIT 1;"
  },
  {
    "id": 2135,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2135,
      "db_id": "advertising_agencies",
      "question": "How many staff have attended a meeting?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many staff have attended a meeting?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many staff have attended a meeting?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT sm.staff_id) AS number_of_staff FROM Staff_in_Meetings sm;"
  },
  {
    "id": 2136,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2136,
      "db_id": "advertising_agencies",
      "question": "Return the number of distinct staff who have attended a meeting?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the number of distinct staff who have attended a meeting?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the number of distinct staff who have attended a meeting?[/QUESTION]\n[SQL]\n SELECT COUNT(DISTINCT s.staff_id) AS total_staff FROM Staff_in_Meetings s;"
  },
  {
    "id": 2137,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2137,
      "db_id": "advertising_agencies",
      "question": "How many staff did not attend any meeting?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]How many staff did not attend any meeting?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]How many staff did not attend any meeting?[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.staff_id IS NULL;"
  },
  {
    "id": 2138,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2138,
      "db_id": "advertising_agencies",
      "question": "Count the number of staff who did not attend any meeting."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Count the number of staff who did not attend any meeting.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Count the number of staff who did not attend any meeting.[/QUESTION]\n[SQL]\n SELECT COUNT(*) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.staff_id IS NULL;"
  },
  {
    "id": 2139,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2139,
      "db_id": "advertising_agencies",
      "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids and details of the clients who have attended any meeting or have any invoice?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids and details of the clients who have attended any meeting or have any invoice?[/QUESTION]\n[SQL]\n SELECT c.client_id, c.client_details FROM Clients c JOIN Meetings m ON c.client_id = m.client_id OR c.client_id = m.client_id JOIN Invoices i ON c.client_id = i.client_id;"
  },
  {
    "id": 2140,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2140,
      "db_id": "advertising_agencies",
      "question": "Return the ids and details of clients who have attended a meeting or had an invoice."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the ids and details of clients who have attended a meeting or had an invoice.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the ids and details of clients who have attended a meeting or had an invoice.[/QUESTION]\n[SQL]\n SELECT c.client_id, c.client_details FROM Clients c JOIN Meetings m ON c.client_id = m.client_id OR c.client_id = m.client_id JOIN Invoices i ON c.client_id = i.client_id WHERE m.meeting_type IS NOT NULL OR i.invoice_status IS NOT NULL;"
  },
  {
    "id": 2141,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2141,
      "db_id": "advertising_agencies",
      "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?[/QUESTION]\n[SQL]\n SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE s.staff_details ilike '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sm.meeting_id) >= 1;"
  },
  {
    "id": 2142,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2142,
      "db_id": "advertising_agencies",
      "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?[/QUESTION]\n[SQL]\n SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE s.staff_details ilike '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sm.meeting_id) >= 1;"
  },
  {
    "id": 2143,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2143,
      "db_id": "advertising_agencies",
      "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.[/QUESTION]\n[SQL]\n SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id, c.sic_code, c.agency_id HAVING COUNT(DISTINCT m.meeting_id) >= 1;"
  },
  {
    "id": 2144,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2144,
      "db_id": "advertising_agencies",
      "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.[/QUESTION]\n[SQL]\n SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id, c.sic_code, c.agency_id HAVING COUNT(DISTINCT m.meeting_id) >= 1;"
  },
  {
    "id": 2145,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2145,
      "db_id": "advertising_agencies",
      "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail."
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]List the start time, end time of each meeting, and the corresponding client detail and staff detail.[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]List the start time, end time of each meeting, and the corresponding client detail and staff detail.[/QUESTION]\n[SQL]\n SELECT m.start_date_time, m.end_date_time, c.client_details AS client_info, s.staff_details AS staff_info FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;"
  },
  {
    "id": 2146,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2146,
      "db_id": "advertising_agencies",
      "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?"
    },
    "answer": "### Task\nGenerate a SQL query to answer [QUESTION]What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?[/QUESTION]\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n\n\n### Answer\nGiven the database schema, here is the SQL query that [QUESTION]What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?[/QUESTION]\n[SQL]\n SELECT m.meeting_id, c.client_details AS client_name, s.staff_details AS staff_name, m.start_date_time, m.end_date_time FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;"
  }
]