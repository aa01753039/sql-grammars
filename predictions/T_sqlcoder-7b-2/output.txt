SELECT COUNT(c.Club_ID) FROM club c;
SELECT COUNT(c.Club_ID) FROM club c;
SELECT c.name FROM club c ORDER BY c.name ASC;
SELECT c.name FROM club c ORDER BY c.name ASC;
SELECT c.manager, c.captain FROM club c;
SELECT c.manager, c.captain FROM club c;
SELECT c.name FROM club c WHERE c.manufacturer not ilike '%Nike%';
SELECT c.name FROM club c WHERE c.manufacturer not ilike '%Nike%';
SELECT p.name FROM player p ORDER BY p.wins_count ASC;
SELECT p.name FROM player p ORDER BY p.wins_count ASC;
SELECT p.name FROM player p ORDER BY p.earnings DESC NULLS LAST LIMIT 1;
SELECT p.name FROM player p ORDER BY p.earnings DESC NULLS LAST LIMIT 1;
SELECT p.country FROM player p WHERE p.earnings > 1200000 ORDER BY p.country NULLS LAST;
SELECT p.country FROM player p WHERE p.earnings > 1200000 ORDER BY p.country NULLS LAST;
SELECT p.country FROM player p WHERE p.wins_count > 2 ORDER BY p.earnings DESC NULLS LAST LIMIT 1;
SELECT p.country FROM player p WHERE p.wins_count > 2 ORDER BY p.earnings DESC LIMIT 1;
SELECT p.name AS player_name, c.name AS club_name FROM player p JOIN club c ON p.club_id = c.club_id;
SELECT p.name AS player_name, c.name AS club_name FROM player p JOIN club c ON p.club_id = c.club_id;
SELECT c.name FROM club c JOIN player p ON c.club_id = p.club_id WHERE p.wins_count > 2;
SELECT c.name FROM club c JOIN player p ON c.club_id = p.club_id WHERE p.wins_count > 2;
SELECT p.name FROM player p JOIN club c ON p.club_id = c.club_id WHERE c.manager ilike '%Sam%Allardyce%' ORDER BY p.name NULLS LAST;
SELECT p.name FROM player p JOIN club c ON p.club_id = c.club_id WHERE c.manager ilike '%Sam%Allardyce%' ORDER BY p.name NULLS LAST;
SELECT c.name FROM club c JOIN player p ON c.club_id = p.club_id GROUP BY c.name ORDER BY AVG(p.earnings) DESC;
SELECT c.name, AVG(p.earnings) AS average_earnings FROM player p JOIN club c ON p.club_id = c.club_id GROUP BY c.name ORDER BY average_earnings DESC;
SELECT c.manufacturer, COUNT(c.club_id) AS club_count FROM club c GROUP BY c.manufacturer ORDER BY club_count DESC NULLS LAST;
SELECT c.manufacturer, COUNT(c.club_id) AS number_of_clubs FROM club c GROUP BY c.manufacturer ORDER BY number_of_clubs DESC NULLS LAST;
SELECT c.manufacturer, COUNT(c.manufacturer) AS frequency FROM club c GROUP BY c.manufacturer ORDER BY frequency DESC LIMIT 1;
SELECT c.manufacturer, COUNT(c.manufacturer) AS COUNT FROM club c GROUP BY c.manufacturer ORDER BY COUNT DESC LIMIT 1;
SELECT c.manufacturer FROM club c GROUP BY c.manufacturer HAVING COUNT(c.club_id) > 1;
SELECT c.manufacturer FROM club c GROUP BY c.manufacturer HAVING COUNT(c.club_id) > 1;
SELECT p.country FROM player p GROUP BY p.country HAVING COUNT(p.player_id) > 1 ORDER BY p.country NULLS LAST;
SELECT p.country, COUNT(p.player_id) AS player_count FROM player p GROUP BY p.country HAVING COUNT(p.player_id) > 1 ORDER BY player_count DESC NULLS LAST;
SELECT c.name FROM club c WHERE c.club_id NOT IN (SELECT p.club_id FROM player p);
SELECT c.name FROM club c WHERE c.club_id NOT IN (SELECT p.club_id FROM player p);
SELECT p.country FROM player p WHERE p.earnings > 1400000 ORDER BY p.country NULLS LAST;
SELECT p.country FROM player p WHERE p.earnings > 1400000 AND p.earnings < 1100000 GROUP BY p.country;
SELECT COUNT(DISTINCT p.country) FROM player p;
SELECT COUNT(DISTINCT p.country) FROM player p;
SELECT p.name, p.earnings FROM player p WHERE p.country IN ('Australia', 'Zimbabwe') ORDER BY p.earnings DESC NULLS LAST;
SELECT p.name, p.earnings FROM player p WHERE p.country ilike '%Australia%' OR p.country ilike '%Zimbabwe%';
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(DISTINCT o.order_id) >= 3;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(o.order_id) > 2 AND COUNT(DISTINCT oi.product_id) >= 3;
SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS product_count FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code HAVING COUNT(oi.product_id) > 0 ORDER BY o.order_id NULLS LAST;
SELECT o.order_id, COUNT(oi.product_id) AS number_of_products, o.order_status_code FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code;
SELECT o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.date_order_placed HAVING COUNT(oi.order_item_id) > 1 ORDER BY o.date_order_placed ASC LIMIT 1;
SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.order_item_id) > 1 ORDER BY o.date_order_placed ASC LIMIT 1;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL;
SELECT c.customer_first_name, c.customer_last_name, c.customer_middle_initial FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;
SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(oi.order_item_id) >= 2);
SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(oi.order_id) < 2);
SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.order_item_id) >= 2;
SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.product_id) >= 2;
SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC LIMIT 1;
SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC;
SELECT o.order_id, SUM(p.product_price) AS total_product_price FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_product_price ASC LIMIT 1;
SELECT o.order_id, SUM(oi.order_item_unit_price * oi.order_item_quantity) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id ORDER BY total_cost ASC LIMIT 1;
SELECT cp.payment_method_code, COUNT(*) AS COUNT FROM Customer_Payment_Methods cp GROUP BY cp.payment_method_code ORDER BY COUNT DESC LIMIT 1;
SELECT cp.payment_method_code, COUNT(*) AS COUNT FROM Customer_Payment_Methods cp GROUP BY cp.payment_method_code ORDER BY COUNT DESC LIMIT 1;
SELECT c.gender_code, COUNT(oi.product_id) AS product_count FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.gender_code ORDER BY product_count DESC NULLS LAST;
SELECT c.gender_code, COUNT(oi.product_id) AS total_products FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.gender_code ORDER BY total_products DESC NULLS LAST;
SELECT c.gender_code, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY number_of_orders DESC NULLS LAST;
SELECT c.gender_code, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY number_of_orders DESC NULLS LAST;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, cp.payment_method_code FROM Customers c JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, cp.payment_method_code FROM Customers c JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id;
SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number;
SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number;
SELECT p.product_name, s.shipment_date FROM Shipments s JOIN Order_Items oi ON s.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
SELECT p.product_name, to_char(s.shipment_date, 'DD-MM-YYYY') AS shipment_date FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS varchar) = CAST(oi.product_id AS varchar) JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;
SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;
SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id WHERE oi.order_item_status_code ilike '%shipped%' ORDER BY oi.order_item_status_code NULLS LAST;
SELECT p.product_name, p.product_color FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_item_status_code = 'shipped' ORDER BY p.product_name NULLS LAST;
SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id WHERE EXISTS (SELECT 1 FROM Shipments s WHERE s.invoice_number = si.shipment_id);
SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'F' ORDER BY p.product_name NULLS LAST;
SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'F';
SELECT i.invoice_status_code FROM Invoices i JOIN Orders o ON i.invoice_number = o.order_id WHERE o.order_status_code != 'shipped' ORDER BY i.invoice_status_code NULLS LAST;
SELECT i.invoice_status_code FROM Invoices i JOIN Orders o ON i.invoice_number = o.order_id WHERE o.order_status_code != 'shipped' ORDER BY i.invoice_status_code NULLS LAST;
SELECT o.order_id, o.date_order_placed, SUM(oi.product_price) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed ORDER BY o.order_id NULLS LAST;
SELECT o.order_id, o.date_order_placed, SUM(oi.product_price) AS total_amount FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed;
SELECT COUNT(DISTINCT o.customer_id) AS number_of_customers FROM Orders o;
SELECT COUNT(DISTINCT o.customer_id) AS number_of_customers FROM orders o;
SELECT COUNT(DISTINCT oi.order_item_status_code) AS number_of_order_item_states FROM Order_Items oi;
SELECT COUNT(DISTINCT oi.order_item_status_code) AS number_of_status_codes FROM Order_Items oi;
SELECT COUNT(DISTINCT c.payment_method_code) AS number_of_payment_methods FROM Customer_Payment_Methods c;
SELECT COUNT(DISTINCT cp.payment_method_code) AS number_of_payment_methods FROM Customer_Payment_Methods cp;
SELECT c.login_name, c.login_password FROM Customers c WHERE c.phone_number like '+12%';
SELECT c.login_name, c.login_password FROM Customers c WHERE c.phone_number like '+12%';
SELECT p.product_size FROM Products p WHERE p.product_name ILIKE '%Dell%';
SELECT p.product_size FROM Products p WHERE p.product_name ILIKE '%Dell%';
SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);
SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);
SELECT COUNT(DISTINCT p.product_id) AS number_of_products FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL
SELECT COUNT(*) AS unordered_products FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi);
SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT cp.customer_id FROM Customer_Payment_Methods cp);
SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT cp.customer_id FROM Customer_Payment_Methods cp);
SELECT o.order_status_code, o.date_order_placed FROM Orders o;
SELECT o.order_status_code, o.date_order_placed FROM Orders o;
SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE c.country ILIKE '%USA%'
SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE c.country = 'United States';
SELECT c.customer_first_name, p.product_name FROM Customers AS c CROSS JOIN Products AS p;
SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
SELECT COUNT(*) AS total_shipped_items FROM Shipment_Items si JOIN Order_Items oi ON si.order_item_id = oi.order_item_id;
SELECT COUNT(DISTINCT p.product_id) AS total_shipped_products FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id;
SELECT AVG(p.product_price) AS average_price FROM Products p;
SELECT AVG(p.product_price) AS average_product_price FROM Products p;
SELECT AVG(p.product_price) AS average_product_price FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR);
SELECT AVG(p.product_price) AS average_product_price FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR);
SELECT c.email_address, c.town_city, c.county FROM Customers c GROUP BY c.email_address, c.town_city, c.county ORDER BY COUNT(c.gender_code) ASC LIMIT 1;
SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(order_id) ASC LIMIT 1);
SELECT o.date_order_placed FROM Orders o JOIN Customer_Payment_Methods c ON o.customer_id = c.customer_id GROUP BY o.date_order_placed HAVING COUNT(DISTINCT c.payment_method_code) >= 2;
SELECT o.date_order_placed FROM Orders o JOIN Customer_Payment_Methods cpm ON o.customer_id = cpm.customer_id GROUP BY o.date_order_placed HAVING COUNT(DISTINCT cpm.payment_method_code) >= 2;
SELECT o.order_status_code FROM Orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) ASC LIMIT 1;
SELECT o.order_status_code FROM Orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) ASC LIMIT 1;
SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) GROUP BY p.product_id, p.product_description HAVING COUNT(oi.order_item_id) > 3;
SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON CAST(p.product_id AS VARCHAR) = CAST(oi.product_id AS VARCHAR) GROUP BY p.product_id, p.product_description HAVING COUNT(oi.order_item_id) > 3;
SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_date, i.invoice_number HAVING COUNT(s.shipment_id) >= 2;
SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_date, i.invoice_number HAVING COUNT(s.shipment_id) >= 2;
SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s;
SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s ORDER BY s.shipment_date NULLS LAST;
SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT MAX(p.product_price) FROM Products);
SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT MAX(product_price) FROM Products);
SELECT d.name FROM director d WHERE d.age > (SELECT AVG(d2.age) FROM director d2);
SELECT d.name FROM director d ORDER BY d.age ASC LIMIT 1;
SELECT COUNT(*) FROM "channel" c WHERE c.internet ilike '%bbc%';
SELECT COUNT(DISTINCT c.Digital_terrestrial_channel) FROM channel c;
SELECT p.title FROM program p ORDER BY p.start_year DESC;
SELECT d.name, COUNT(p.program_id) AS program_count FROM program p JOIN director d ON p.director_id = d.director_id GROUP BY d.name ORDER BY program_count DESC LIMIT 1;
SELECT d.name, d.age FROM director d JOIN (SELECT p.director_id, COUNT(p.program_id) AS program_count FROM program p GROUP BY p.director_id) AS pd ON d.director_id = pd.director_id ORDER BY program_count DESC LIMIT 1;
SELECT p.title FROM program p ORDER BY p.start_year DESC LIMIT 1;
SELECT c.name, row_number() OVER(PARTITION BY c.channel_id ORDER BY COUNT(p.program_id) DESC) AS rank FROM channel c JOIN program p ON c.channel_id = p.channel_id GROUP BY c.name, c.channel_id HAVING COUNT(p.program_id) > 1;
SELECT c.name, COUNT(p.program_id) AS program_count FROM channel c JOIN program p ON c.channel_id = p.channel_id GROUP BY c.name ORDER BY program_count DESC NULLS LAST;
SELECT COUNT(DISTINCT c.Channel_ID) AS num_channels FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID WHERE p.Channel_ID IS NULL;
SELECT d.name FROM program p JOIN director d ON p.director_id = d.director_id WHERE p.title ilike '%Dracula%';
SELECT c.name, c.internet FROM channel c JOIN director_admin da ON c.channel_id = da.channel_id GROUP BY c.name, c.internet ORDER BY COUNT(da.director_id) DESC LIMIT 1;
SELECT d.name FROM director d WHERE d.age BETWEEN 30 AND 60;
SELECT DISTINCT c.name FROM channel c JOIN program p ON c.channel_id = p.channel_id JOIN director d ON p.director_id = d.director_id WHERE d.age > 60 AND EXTRACT(YEAR FROM CURRENT_DATE) - d.age < 40 GROUP BY c.name HAVING COUNT(DISTINCT CASE WHEN d.age > 60 THEN p.program_id END) >= 2;
SELECT c.channel_id, c.name FROM channel c JOIN program p ON c.channel_id = p.channel_id WHERE p.director_id NOT IN (SELECT director_id FROM director WHERE name ilike '%Hank%Baskett%') ORDER BY c.name NULLS LAST;
SELECT COUNT(r.Radio_ID) FROM radio r;
SELECT r.transmitter FROM radio r ORDER BY r.erp_kw ASC;
SELECT t.tv_show_name, t.original_airdate FROM tv_show t;
SELECT c.station_name FROM city_channel c WHERE c.affiliation != 'ABC';
SELECT r.transmitter FROM radio r WHERE CAST(r.erp_kw AS integer) > 150 OR CAST(r.erp_kw AS integer) < 30;
SELECT r.transmitter FROM radio r ORDER BY r.erp_kw DESC NULLS LAST LIMIT 1;
SELECT AVG(r.ERP_kW::int) AS average_erp FROM radio r;
SELECT cc.affiliation, COUNT(cc.id) AS count FROM city_channel cc GROUP BY cc.affiliation ORDER BY count DESC NULLS LAST;
SELECT cc.affiliation FROM city_channel cc GROUP BY cc.affiliation ORDER BY COUNT(cc.affiliation) DESC LIMIT 1;
SELECT c.affiliation FROM city_channel c GROUP BY c.affiliation HAVING COUNT(c.id) > 3;
SELECT c.city, cc.station_name FROM city_channel cc JOIN city c ON cc.city = c.city ORDER BY cc.station_name ASC;
SELECT r.transmitter, cc.city FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id JOIN city_channel cc ON ccr.city_channel_id = cc.id;
SELECT r.transmitter, cc.station_name, CAST(r.erp_kw AS FLOAT) AS erp FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id JOIN city_channel cc ON ccr.city_channel_id = cc.id ORDER BY erp DESC;
SELECT r.transmitter, COUNT(ccr.city_channel_id) AS channel_count FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id GROUP BY r.transmitter ORDER BY channel_count DESC NULLS LAST;
SELECT DISTINCT r.transmitter FROM radio r LEFT JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id WHERE ccr.radio_id IS NULL;
SELECT v.model FROM vehicle v WHERE v.top_speed = (SELECT MAX(v2.top_speed) FROM vehicle v2 WHERE v2.power > 6000) ORDER BY v.model NULLS LAST;
SELECT v.model FROM vehicle v WHERE v.power > 6000 ORDER BY v.top_speed DESC NULLS LAST LIMIT 1;
SELECT d.name FROM driver d WHERE d.citizenship ilike '%United States%';
SELECT d.name FROM driver d WHERE d.citizenship ilike '%United States%';
SELECT d.driver_id, COUNT(v.vehicle_id) AS total_vehicles FROM vehicle_driver vd JOIN vehicle v ON vd.vehicle_id = v.vehicle_id JOIN driver d ON vd.driver_id = d.driver_id GROUP BY d.driver_id ORDER BY total_vehicles DESC LIMIT 1;
SELECT d.driver_id, COUNT(v.vehicle_id) AS vehicle_count FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id GROUP BY d.driver_id ORDER BY vehicle_count DESC LIMIT 1;
SELECT MAX(v.power) AS max_power, AVG(v.power) AS average_power FROM vehicle v WHERE v.builder ILIKE '%Zhuzhou%';
SELECT MAX(v.power) AS max_power, AVG(v.power) AS average_power FROM vehicle v WHERE v.builder ILIKE '%Zhuzhou%';
SELECT v.Vehicle_ID FROM vehicle v JOIN (SELECT v.Vehicle_ID, COUNT(*) AS num_drivers FROM vehicle_driver v GROUP BY v.Vehicle_ID ORDER BY num_drivers ASC LIMIT 1) AS m ON v.Vehicle_ID = m.Vehicle_ID;
SELECT v.vehicle_id FROM vehicle v JOIN (SELECT d.vehicle_id, COUNT(*) AS num_drivers FROM driver d GROUP BY d.vehicle_id ORDER BY num_drivers ASC LIMIT 1) AS m ON v.vehicle_id = m.vehicle_id;
SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = '1996';
SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = '1996' ORDER BY v.top_speed DESC, v.power DESC LIMIT 1;
SELECT v.build_year, v.model, v.builder FROM vehicle v;
SELECT v.build_year, v.model, v.builder FROM vehicle v;
SELECT COUNT(DISTINCT v.driver_id) AS number_of_drivers FROM vehicle v WHERE v.build_year = '2012';
SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = '2012';
SELECT COUNT(DISTINCT d.driver_id) FROM driver d WHERE d.racing_series ilike '%NASCAR%';
SELECT COUNT(DISTINCT d.driver_id) FROM driver d WHERE d.racing_series ilike '%NASCAR%';
SELECT AVG(v.top_speed) AS average_top_speed FROM vehicle v;
SELECT AVG(v.top_speed) AS average_top_speed FROM vehicle v;
SELECT d.name FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000;
SELECT d.name FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000;
SELECT v.model FROM vehicle v WHERE CAST(v.total_production AS INT) > 100 OR v.top_speed > 150 ORDER BY v.model NULLS LAST;
SELECT v.model FROM vehicle v WHERE CAST(v.total_production AS INT) > 100 OR v.top_speed > 150;
SELECT v.model, v.build_year FROM vehicle v WHERE v.model ilike '%DJ%';
SELECT v.model, v.build_year FROM vehicle v WHERE v.model ilike '%DJ%';
SELECT v.model FROM vehicle v WHERE v.model NOT IN (SELECT DISTINCT vd.model FROM vehicle_driver vd);
SELECT v.model FROM vehicle v WHERE v.vehicle_id NOT IN (SELECT vd.vehicle_id FROM vehicle_driver vd);
SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE EXISTS (SELECT 1 FROM driver d WHERE d.driver_id = vd.driver_id AND d.name != 'John') OR v.builder = 'Ziyang' GROUP BY v.vehicle_id, v.model HAVING COUNT(DISTINCT vd.driver_id) >= 2
SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id GROUP BY v.vehicle_id, v.model HAVING COUNT(DISTINCT vd.driver_id) >= 2 OR v.builder = 'Ziyang' ORDER BY v.vehicle_id NULLS LAST;
SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE EXISTS (SELECT 1 FROM driver d WHERE d.name = 'Jeff Gordon' AND d.driver_id = vd.driver_id) OR (SELECT COUNT(DISTINCT vd.driver_id) FROM vehicle_driver WHERE vehicle_id = v.vehicle_id) > 2;
SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id JOIN driver d ON vd.driver_id = d.driver_id WHERE (SELECT COUNT(DISTINCT vd.driver_id) FROM vehicle_driver WHERE vehicle_id = v.vehicle_id) > 2 OR d.name ILIKE '%Jeff%Gordon%' ORDER BY v.vehicle_id NULLS LAST;
SELECT COUNT(*) FROM "vehicle" v WHERE v.top_speed = (SELECT MAX(v2.top_speed) FROM "vehicle" v2);
SELECT COUNT(*) FROM "vehicle" v WHERE v.top_speed = (SELECT MAX(v2.top_speed) FROM "vehicle" v2);
SELECT d.name FROM driver d ORDER BY d.name ASC;
SELECT d.name FROM driver d ORDER BY d.name ASC;
SELECT d.Racing_Series, COUNT(DISTINCT vd.Driver_ID) AS Driver_Count FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID GROUP BY d.Racing_Series ORDER BY Driver_Count DESC NULLS LAST;
SELECT d.Racing_Series, COUNT(DISTINCT vd.Driver_ID) AS Driver_Count FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID GROUP BY d.Racing_Series ORDER BY Driver_Count DESC NULLS LAST;
SELECT d.name, d.citizenship FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.model ilike '%DJ1%';
SELECT d.name, d.citizenship FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.model ilike '%DJ1%';
SELECT COUNT(DISTINCT d.driver_id) FROM driver d LEFT JOIN vehicle_driver vd ON d.driver_id = vd.driver_id WHERE vd.driver_id IS NULL
SELECT COUNT(DISTINCT d.driver_id) FROM driver d LEFT JOIN vehicle_driver vd ON d.driver_id = vd.driver_id WHERE vd.driver_id IS NULL;
SELECT COUNT(e.exam_id) FROM exams e;
SELECT COUNT(e.exam_id) FROM exams e;
SELECT DISTINCT e.subject_code FROM exams e ORDER BY e.subject_code ASC;
SELECT DISTINCT e.subject_code FROM exams e ORDER BY e.subject_code ASC;
SELECT e.exam_name, e.exam_date FROM exams e WHERE e.subject_code not ilike '%Database%';
SELECT e.exam_date, e.exam_name FROM exams e WHERE e.subject_code != 'Database';
SELECT e.exam_date FROM exams e WHERE e.subject_code ilike '%data%' ORDER BY e.exam_date DESC;
SELECT e.exam_date FROM exams e WHERE e.subject_code ilike '%data%' ORDER BY e.exam_date DESC;
SELECT q.type_of_question_code, COUNT(*) AS question_count FROM questions q GROUP BY q.type_of_question_code ORDER BY question_count DESC NULLS LAST;
SELECT q.type_of_question_code, COUNT(*) AS COUNT FROM questions q GROUP BY q.type_of_question_code ORDER BY COUNT DESC;
SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%';
SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%';
SELECT COUNT(DISTINCT sa.Comments) AS number_of_comments FROM Student_Answers sa;
SELECT COUNT(DISTINCT sa.Comments) AS distinct_comment_count FROM Student_Answers sa;
SELECT sa.Student_Answer_Text, COUNT(*) AS COUNT FROM Student_Answers sa GROUP BY sa.Student_Answer_Text ORDER BY COUNT DESC;
SELECT sa.Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers sa GROUP BY sa.Student_Answer_Text ORDER BY Frequency DESC;
SELECT s.first_name, sa.date_of_answer FROM students s JOIN student_answers sa ON s.student_id = sa.student_id;
SELECT s.first_name, sa.date_of_answer FROM students s JOIN student_answers sa ON s.student_id = sa.student_id;
SELECT s.email_adress, sa.date_of_answer FROM students s JOIN student_answers sa ON s.student_id = sa.student_id ORDER BY sa.date_of_answer DESC;
SELECT s.email_adress, sa.date_of_answer FROM student_answers sa JOIN students s ON sa.student_id = s.student_id ORDER BY sa.date_of_answer DESC;
SELECT sa.assessment FROM Student_Assessments sa GROUP BY sa.assessment ORDER BY COUNT(sa.assessment) ASC LIMIT 1;
SELECT sa.Assessment, COUNT(*) AS Frequency FROM Student_Assessments sa GROUP BY sa.Assessment ORDER BY Frequency ASC LIMIT 1;
SELECT s.First_Name FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID GROUP BY s.First_Name HAVING COUNT(sa.Student_Answer_ID) >= 2;
SELECT s.First_Name FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID GROUP BY s.First_Name HAVING COUNT(sa.Student_Answer_ID) >= 2;
SELECT v.valid_answer_text FROM valid_answers v GROUP BY v.valid_answer_text ORDER BY COUNT(v.valid_answer_text) DESC LIMIT 1;
SELECT v.valid_answer_text, COUNT(*) AS frequency FROM valid_answers v GROUP BY v.valid_answer_text ORDER BY frequency DESC LIMIT 1;
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU != 'M';
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU != 'M';
SELECT s.gender_mfu, COUNT(*) AS number_of_students FROM Students s GROUP BY s.gender_mfu ORDER BY number_of_students DESC;
SELECT s.gender_mfu, COUNT(*) AS number_of_students FROM Students s GROUP BY s.gender_mfu ORDER BY number_of_students DESC NULLS LAST;
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M');
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M');
SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL;
SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL;
SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%Absent%'
SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%Absent%'
SELECT q.type_of_question_code FROM questions q GROUP BY q.type_of_question_code HAVING COUNT(q.question_id) >= 3 ORDER BY q.type_of_question_code NULLS LAST;
SELECT q.type_of_question_code FROM questions q GROUP BY q.type_of_question_code HAVING COUNT(q.question_id) >= 3;
SELECT * FROM Students s;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, s.gender_mfu, s.student_address, s.email_adress, s.cell_mobile_phone, s.home_phone FROM students s;
SELECT COUNT(*) FROM Addresses;
SELECT COUNT(*) AS total_addresses FROM Addresses;
SELECT a.address_id, a.address_details FROM Addresses a;
SELECT a.address_id, a.address_details FROM Addresses a;
SELECT COUNT(*) FROM Products p;
SELECT COUNT(*) FROM Products p;
SELECT p.product_id, p.product_type_code, p.product_name FROM Products p;
SELECT p.product_id, p.product_type_code, p.product_name FROM Products p ORDER BY p.product_id NULLS LAST;
SELECT p.product_price FROM Products p WHERE p.product_name ilike '%Monitor%';
SELECT p.product_price FROM Products p WHERE p.product_name ilike '%Monitor%';
SELECT MIN(p.product_price) AS min_price, AVG(p.product_price) AS avg_price, MAX(p.product_price) AS max_price FROM Products p;
SELECT MIN(p.product_price) AS min_price, AVG(p.product_price) AS avg_price, MAX(p.product_price) AS max_price FROM Products p;
SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code ilike '%Clothes%';
SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code ilike '%Clothes%';
SELECT COUNT(*) FROM Products p WHERE p.product_type_code ilike '%hardware%';
SELECT COUNT(*) FROM Products p WHERE p.product_type_code ilike '%Hardware%';
SELECT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);
SELECT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'hardware' AND p.product_price > (SELECT AVG(p2.product_price) FROM Products p2 WHERE p2.product_type_code = 'hardware');
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' AND p.product_price > (SELECT AVG(p2.product_price) FROM Products p2 WHERE p2.product_type_code = 'Hardware');
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Clothes' ORDER BY p.product_price DESC NULLS LAST LIMIT 1;
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Clothes' ORDER BY p.product_price DESC NULLS LAST LIMIT 1;
SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1;
SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1;
SELECT p.product_name FROM Products p ORDER BY p.product_price DESC;
SELECT p.product_name FROM Products p ORDER BY p.product_price DESC;
SELECT p.product_name, p.product_price FROM Products p WHERE p.product_type_code ilike '%hardware%' ORDER BY p.product_price ASC;
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC;
SELECT p.product_type_code, COUNT(*) AS COUNT FROM Products p GROUP BY p.product_type_code ORDER BY COUNT DESC;
SELECT p.product_type_code, COUNT(*) AS number_of_products FROM Products p GROUP BY p.product_type_code ORDER BY number_of_products DESC NULLS LAST;
SELECT p.product_type_code, AVG(p.product_price) AS average_price FROM Products p GROUP BY p.product_type_code ORDER BY average_price DESC NULLS LAST;
SELECT p.product_type_code, AVG(p.product_price) AS average_price FROM Products p GROUP BY p.product_type_code ORDER BY average_price DESC NULLS LAST;
SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2;
SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2;
SELECT p.product_type_code, COUNT(*) AS COUNT FROM Products p GROUP BY p.product_type_code ORDER BY COUNT DESC LIMIT 1;
SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_type_code) DESC LIMIT 1;
SELECT COUNT(*) FROM Customers c;
SELECT COUNT(*) FROM Customers c;
SELECT c.customer_id, c.customer_name FROM Customers c;
SELECT c.customer_id, c.customer_name FROM Customers c ORDER BY c.customer_id NULLS LAST;
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name ilike '%Jeromy%';
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name ilike '%Jeromy%';
SELECT c.payment_method_code, COUNT(c.customer_id) AS customer_count FROM Customers c GROUP BY c.payment_method_code ORDER BY customer_count DESC NULLS LAST;
SELECT c.payment_method_code, COUNT(*) AS number_of_customers FROM Customers c GROUP BY c.payment_method_code ORDER BY number_of_customers DESC NULLS LAST;
SELECT c.payment_method_code, COUNT(*) AS COUNT FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT DESC LIMIT 1;
SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.payment_method_code) DESC LIMIT 1;
SELECT c.customer_name, c.payment_method_code FROM Customers c GROUP BY c.customer_name, c.payment_method_code ORDER BY COUNT(c.customer_id) ASC LIMIT 1;
SELECT c.customer_name, c.payment_method_code FROM Customers c GROUP BY c.customer_name, c.payment_method_code ORDER BY COUNT(c.payment_method_code) ASC LIMIT 1;
SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE c.customer_name ilike '%Jeromy%';
SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE c.customer_name ilike '%Jeromy%';
SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.payment_method_code) DESC;
SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.payment_method_code) DESC;
SELECT p.product_id, p.product_type_code, p.product_name FROM Products p ORDER BY p.product_name NULLS LAST;
SELECT p.product_id, p.product_type_code FROM Products p ORDER BY p.product_name ASC;
SELECT p.product_type_code, COUNT(p.product_id) AS COUNT FROM Products p GROUP BY p.product_type_code ORDER BY COUNT ASC LIMIT 1;
SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_type_code) ASC LIMIT 1;
SELECT COUNT(*) AS total_orders FROM Customer_Orders co;
SELECT COUNT(*) AS total_orders FROM Customer_Orders co;
SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE c.customer_name ilike '%Jeromy%' ORDER BY co.order_id NULLS LAST;
SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE c.customer_name ilike '%Jeromy%' ORDER BY co.order_id NULLS LAST;
SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS order_count FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_name, c.customer_id ORDER BY order_count DESC NULLS LAST;
SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS total_orders FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_name, c.customer_id ORDER BY total_orders DESC NULLS LAST;
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id, c.customer_name, c.customer_phone, c.customer_email ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id, c.customer_name, c.customer_phone, c.customer_email ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT co.order_status_code, COUNT(*) AS order_count FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY order_count DESC NULLS LAST;
SELECT co.order_status_code, COUNT(*) AS number_of_orders FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY number_of_orders DESC NULLS LAST;
SELECT co.order_status_code FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY COUNT(co.order_status_code) DESC LIMIT 1;
SELECT co.order_status_code FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY COUNT(co.order_status_code) DESC LIMIT 1;
SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders co);
SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders co);
SELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL;
SELECT p.product_name FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi);
SELECT COUNT(*) AS total_monitors FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name ilike '%Monitor%';
SELECT SUM(o.order_quantity::INTEGER) AS total_monitors FROM Order_Items o JOIN Products p ON o.product_id = p.product_id WHERE p.product_type_code ilike '%Monitor%';
SELECT COUNT(DISTINCT co.customer_id) AS number_of_customers FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Customer_Orders co ON oi.order_id = co.order_id WHERE p.product_name ilike '%Monitor%';
SELECT COUNT(DISTINCT co.customer_id) FROM Order_Items oi JOIN Customer_Orders co ON oi.order_id = co.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_type_code ilike '%Monitor%';
SELECT COUNT(DISTINCT co.customer_id) AS number_of_customers FROM Customer_Orders co;
SELECT COUNT(DISTINCT co.customer_id) AS total_customers FROM Customer_Orders co;
SELECT c.customer_id FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;
SELECT c.customer_id FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;
SELECT c.customer_first_name, c.customer_last_name, co.order_date, oi.product_id, CAST(oi.order_quantity AS INT) AS order_quantity FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Customers c ON co.customer_id = c.customer_id WHERE CAST(oi.order_quantity AS INT) > 6 OR CAST(COUNT(*) FILTER (WHERE oi.product_id = oi.product_id) AS INT) > 3;
SELECT o.order_id, o.order_date FROM Order_Items oi JOIN Customer_Orders o ON oi.order_id = o.order_id WHERE CAST(oi.order_quantity AS INT) > 6 OR (SELECT COUNT(*) FROM Order_Items WHERE order_id = o.order_id) > 3;
SELECT COUNT(b.building_id) FROM building b;
SELECT COUNT(b.building_id) FROM building b;
SELECT b.name FROM building b ORDER BY b.number_of_stories ASC;
SELECT b.name FROM building b ORDER BY b.number_of_stories ASC;
SELECT b.address FROM building b ORDER BY b.completed_year DESC;
SELECT b.address FROM building b ORDER BY b.completed_year DESC;
SELECT MAX(b.number_of_stories) FROM building b WHERE b.completed_year != 1980;
SELECT MAX(b.number_of_stories) FROM building b WHERE b.completed_year != 1980;
SELECT AVG(r.population) AS average_population FROM region r;
SELECT AVG(r.population) FROM region r;
SELECT r.name FROM region r ORDER BY r.name ASC;
SELECT r.name FROM region r ORDER BY r.name ASC;
SELECT r.capital FROM region r WHERE r.area > 10000;
SELECT r.capital FROM region r WHERE r.area > 10000;
SELECT r.capital FROM region r ORDER BY r.population DESC NULLS LAST LIMIT 1;
SELECT r.name, r.capital FROM region r ORDER BY r.population DESC NULLS LAST LIMIT 1;
SELECT r.name FROM region r ORDER BY r.area DESC NULLS LAST LIMIT 5;
SELECT r.name FROM region r ORDER BY r.area DESC NULLS LAST LIMIT 5;
SELECT b.name AS building_name, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id;
SELECT b.name AS building_name, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id;
SELECT r.name FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.name HAVING COUNT(b.building_id) > 1 ORDER BY r.name NULLS LAST;
SELECT r.name FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.name HAVING COUNT(b.building_id) > 1 ORDER BY r.name NULLS LAST;
SELECT r.capital FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.region_id, r.capital ORDER BY COUNT(b.building_id) DESC LIMIT 1;
SELECT r.name, r.capital FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.name, r.capital ORDER BY COUNT(b.building_id) DESC LIMIT 1;
SELECT b.address, r.capital FROM building b JOIN region r ON b.region_id = r.region_id;
SELECT b.address, r.name FROM building b JOIN region r ON b.region_id = r.region_id;
SELECT SUM(b.number_of_stories) AS total_stories FROM building b JOIN region r ON b.region_id = r.region_id WHERE r.name ilike '%Abruzzo%';
SELECT b.name, b.number_of_stories FROM building b JOIN region r ON b.region_id = r.region_id WHERE r.name ilike '%Abruzzo%' ORDER BY b.number_of_stories DESC NULLS LAST;
SELECT b.completed_year, COUNT(b.building_id) AS number_of_buildings FROM building b GROUP BY b.completed_year ORDER BY b.completed_year NULLS LAST;
SELECT b.completed_year, COUNT(b.building_id) AS number_of_buildings FROM building b GROUP BY b.completed_year ORDER BY b.completed_year NULLS LAST;
SELECT b.completed_year FROM building b GROUP BY b.completed_year ORDER BY COUNT(b.building_id) DESC LIMIT 1;
SELECT b.completed_year FROM building b GROUP BY b.completed_year ORDER BY COUNT(b.building_id) DESC LIMIT 1;
SELECT r.name FROM region r WHERE r.region_id NOT IN (SELECT b.region_id FROM building b);
SELECT r.name FROM region r WHERE r.region_id NOT IN (SELECT b.region_id FROM building b);
SELECT b.completed_year FROM building b WHERE b.number_of_stories > 20 AND b.completed_year = (SELECT completed_year FROM building WHERE number_of_stories < 15);
SELECT b.completed_year FROM building b WHERE b.number_of_stories > 20 AND b.completed_year = (SELECT MIN(b2.completed_year) FROM building b2 WHERE b2.number_of_stories < 15);
SELECT DISTINCT b.address FROM building b;
SELECT DISTINCT b.address FROM building b;
SELECT b.completed_year, b.number_of_stories FROM building b ORDER BY b.number_of_stories DESC, b.completed_year DESC;
SELECT b.completed_year, b.number_of_stories FROM building b ORDER BY b.number_of_stories DESC;
SELECT c.channel_id, c.channel_details FROM channels c ORDER BY c.channel_details ASC;
SELECT c.channel_details FROM channels c ORDER BY c.channel_details ASC;
SELECT COUNT(s.service_id) FROM services s;
SELECT COUNT(s.service_id) AS total_services FROM services s;
SELECT al.Analytical_Layer_Type_Code FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY COUNT(al.Analytical_Layer_Type_Code) DESC LIMIT 1;
SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS frequency FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY frequency DESC LIMIT 1;
SELECT s.service_id, s.service_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id WHERE c.customer_details ilike '%Hardy Kutch%' ORDER BY s.service_id NULLS LAST;
SELECT s.service_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id WHERE c.customer_details ilike '%Hardy%Kutch%' ORDER BY s.service_details NULLS LAST;
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id GROUP BY s.service_details HAVING COUNT(cs.customers_and_services_id) > 3;
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customer_id IN (SELECT customer_id FROM customers_and_services GROUP BY customer_id HAVING COUNT(service_id) > 3) ORDER BY s.service_details NULLS LAST;
SELECT c.customer_details, COUNT(*) AS total_interactions FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY total_interactions DESC LIMIT 1;
SELECT c.customer_details, COUNT(cs.service_id) AS service_count FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY service_count DESC LIMIT 1;
SELECT c.customer_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY COUNT(cs.service_id) DESC LIMIT 1;
SELECT c.customer_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY COUNT(cs.service_id) DESC LIMIT 1;
SELECT c.customer_details FROM customers c LEFT JOIN customers_and_services cs ON c.customer_id = cs.customer_id WHERE cs.customer_id IS NULL;
SELECT c.customer_details FROM customers c LEFT JOIN customers_and_services cs ON c.customer_id = cs.customer_id WHERE cs.customer_id IS NULL;
SELECT c.customer_id, s.service_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id ORDER BY COUNT(cs.customers_and_services_id) ASC LIMIT 1;
SELECT c.customer_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY COUNT(cs.service_id) ASC LIMIT 1;
SELECT COUNT(DISTINCT cs.Customers_and_Services_Details) AS unique_customer_service_details FROM Customers_and_Services cs;
SELECT COUNT(DISTINCT c.customer_id) AS total_customers, COUNT(DISTINCT s.service_id) AS total_services FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id;
SELECT c.customer_id, c.customer_details FROM customers c WHERE c.customer_details ilike '%Kutch%';
SELECT c.customer_details FROM customers c WHERE c.customer_details ilike '%Kutch%';
SELECT DISTINCT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customer_id IN (SELECT c.customer_id FROM customers c WHERE c.customer_details ilike '%Hardy%Kutch%') OR EXISTS (SELECT 1 FROM customer_interactions ci JOIN analytical_layer al ON ci.customer_interaction_id = al.analytical_id WHERE ci.status_code = 'good' AND al.customers_and_services_id = cs.customers_and_services_id);
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customer_id IN (SELECT customer_id FROM customers WHERE customer_details ilike '%Hardy%Kutch%') OR EXISTS (SELECT 1 FROM customer_interactions ci JOIN analytical_layer al ON ci.customer_interaction_id = al.analytical_id WHERE ci.status_code = 'good' AND al.customers_and_services_id = cs.customers_and_services_id);
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customer_interactions ci ON cs.customer_id = ci.customer_id WHERE cs.customer_id IN (SELECT customer_id FROM customers WHERE customer_details ilike '%Hardy%Kutch%') AND ci.status_code ilike '%bad%' GROUP BY s.service_details;
SELECT s.service_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id JOIN customer_interactions ci ON c.customer_id = ci.customer_id WHERE c.customer_details ilike '%Hardy Kutch%' AND ci.status_code ilike '%bad%' GROUP BY s.service_details;
SELECT s.service_id, s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details ilike '%15 ij %';
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details ilike '%15 ij%'
SELECT c.customer_details, s.service_details, ch.channel_details FROM customer_interactions ci JOIN customers c ON ci.customer_id = c.customer_id JOIN services s ON ci.service_id = s.service_id JOIN channels ch ON ci.channel_id = ch.channel_id WHERE ci.status_code ilike '%Stuck%' AND s.service_details ilike '%bad%' AND ch.channel_details ilike '%bad%';
SELECT c.customer_details FROM customers c JOIN customer_interactions ci ON c.customer_id = ci.customer_id JOIN services s ON ci.service_id = s.service_id JOIN channels ch ON ci.channel_id = ch.channel_id WHERE ci.status_code ilike '%Stuck%' AND s.service_details ilike '%bad%' AND ch.channel_details ilike '%bad%' ORDER BY c.customer_details NULLS LAST;
SELECT COUNT(*) FROM Integration_Platform i WHERE i.Status_Code = 'Successful';
SELECT COUNT(*) FROM Integration_Platform i JOIN Customer_Interactions c ON i.Customer_Interaction_ID = c.Customer_Interaction_ID WHERE c.Status_Code ilike '%Success%';
SELECT c.customer_details FROM customers c JOIN customer_interactions ci ON c.customer_id = ci.customer_id WHERE ci.status_code = 'failed' AND EXISTS (SELECT 1 FROM integration_platform ip WHERE ip.customer_interaction_id = ci.customer_interaction_id);
SELECT c.customer_details FROM customers c JOIN customer_interactions ci ON c.customer_id = ci.customer_id JOIN integration_platform ip ON ci.customer_interaction_id = ip.customer_interaction_id WHERE ip.integration_platform_details ilike '%Fail%'
SELECT s.service_id, s.service_details FROM services s LEFT JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customer_id IS NULL;
SELECT s.service_details FROM services s LEFT JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.service_id IS NULL;
SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS usage_count FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY usage_count DESC;
SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS COUNT FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY COUNT DESC;
SELECT s.service_id, s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details ilike '%unsatisfied%'
SELECT s.service_details FROM Services s JOIN Customers_and_Services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details ilike '%unsatisfied%'
SELECT COUNT(v.id) AS total_vehicles FROM Vehicles v;
SELECT COUNT(v.id) AS total_vehicles FROM Vehicles v;
SELECT v.name FROM Vehicles v ORDER BY v.model_year DESC;
SELECT v.name FROM Vehicles v ORDER BY v.model_year DESC;
SELECT DISTINCT v.type_of_powertrain FROM vehicles v;
SELECT DISTINCT v.Type_of_powertrain FROM Vehicles v ORDER BY v.Type_of_powertrain NULLS LAST;
SELECT v.name, v.type_of_powertrain, v.annual_fuel_cost FROM vehicles v WHERE v.model_year IN (2013, 2014);
SELECT v.name, v.type_of_powertrain, EXTRACT(YEAR FROM CURRENT_DATE) - v.model_year AS age_of_vehicle, SUM(v.annual_fuel_cost) OVER (PARTITION BY v.type_of_powertrain ORDER BY v.model_year ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS cumulative_fuel_costs FROM vehicles v WHERE v.model_year IN (2013, 2014);
SELECT v.type_of_powertrain FROM vehicles v WHERE v.model_year IN (2014, 2013) GROUP BY v.type_of_powertrain ORDER BY COUNT(v.type_of_powertrain) DESC NULLS LAST;
SELECT DISTINCT v.type_of_powertrain FROM vehicles v WHERE v.model_year IN (2013, 2014);
SELECT v.type_of_powertrain, COUNT(v.id) AS number_of_vehicles FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT v.type_of_powertrain, COUNT(v.id) AS number_of_vehicles FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT v.type_of_powertrain, COUNT(v.id) AS COUNT FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY COUNT DESC LIMIT 1;
SELECT v.type_of_powertrain FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY COUNT(v.type_of_powertrain) DESC LIMIT 1;
SELECT MIN(v.Annual_fuel_cost) AS min_annual_fuel_cost, MAX(v.Annual_fuel_cost) AS max_annual_fuel_cost, AVG(v.Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles v;
SELECT MIN(v.Annual_fuel_cost) AS min_annual_fuel_cost, MAX(v.Annual_fuel_cost) AS max_annual_fuel_cost, AVG(v.Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles v;
SELECT v.name, v.model_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate;
SELECT v.name, v.model_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate ORDER BY v.name NULLS LAST;
SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_annual_fuel_cost FROM vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2 ORDER BY average_annual_fuel_cost DESC NULLS LAST;
SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_annual_fuel_cost FROM vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2 ORDER BY average_annual_fuel_cost DESC NULLS LAST;
SELECT c.name, c.age, c.membership_credit FROM "Customers" c;
SELECT c.name, c.age, c.membership_credit FROM "Customers" c;
SELECT c.name, c.age FROM "Customers" c WHERE c.membership_credit = (SELECT MAX(membership_credit) FROM "Customers");
SELECT c.name, c.age FROM "Customers" c WHERE c.membership_credit = (SELECT MAX(membership_credit) FROM "Customers");
SELECT AVG(c.age) FROM "Customers" c WHERE c.membership_credit > (SELECT AVG(d.membership_credit) FROM "Discount" d);
SELECT AVG(c.age) FROM "Customers" c WHERE c.membership_credit > (SELECT AVG(m.membership_credit) FROM "Customers" m);
SELECT * FROM "Discount";
SELECT * FROM "Discount";
SELECT v.name AS vehicle_name, SUM(r.total_hours) AS total_rental_hours FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY total_rental_hours DESC NULLS LAST;
SELECT v.name AS vehicle_name, SUM(r.total_hours) AS total_rental_hours FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY total_rental_hours DESC NULLS LAST;
SELECT v.name FROM "Vehicles" v WHERE v.id NOT IN (SELECT r.vehicles_id FROM "Renting_history" r);
SELECT v.name FROM Vehicles v WHERE v.id NOT IN (SELECT r.vehicles_id FROM Renting_history r);
SELECT c.name FROM "Customers" c JOIN Renting_history r ON c.id = r.customer_id GROUP BY c.name HAVING COUNT(r.id) >= 2;
SELECT c.name FROM "Customers" c JOIN Renting_history rh ON c.id = rh.customer_id GROUP BY c.name HAVING COUNT(rh.id) >= 2;
SELECT v.name, v.model_year FROM vehicles v JOIN renting_history r ON v.id = r.vehicles_id GROUP BY v.name, v.model_year ORDER BY COUNT(r.id) DESC LIMIT 1;
SELECT v.name, v.model_year FROM vehicles v JOIN renting_history rh ON v.id = rh.vehicles_id GROUP BY v.name, v.model_year ORDER BY COUNT(rh.id) DESC LIMIT 1;
SELECT v.name FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY SUM(r.total_hours) DESC;
SELECT v.name FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY SUM(r.total_hours) DESC;
SELECT d.name, COUNT(r.id) AS total_rentals FROM Renting_history r JOIN Discount d ON r.discount_id = d.id GROUP BY d.name ORDER BY total_rentals DESC LIMIT 1;
SELECT d.name FROM Discount d JOIN Renting_history rh ON d.id = rh.discount_id GROUP BY d.name ORDER BY COUNT(rh.id) DESC LIMIT 1;
SELECT c.name, v.type_of_powertrain FROM renting_history rh JOIN customers c ON rh.customer_id = c.id JOIN vehicles v ON rh.vehicles_id = v.id WHERE rh.total_hours > 30;
SELECT v.name, v.type_of_powertrain FROM vehicles v JOIN renting_history rh ON v.id = rh.vehicles_id WHERE rh.total_hours > 30;
SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS average_city_fuel_rate, AVG(v.highway_fuel_economy_rate) AS average_highway_fuel_rate FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY average_city_fuel_rate DESC NULLS LAST, average_highway_fuel_rate DESC NULLS LAST;
SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS average_city_fuel_economy_rate, AVG(v.highway_fuel_economy_rate) AS average_highway_fuel_economy_rate FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY average_city_fuel_economy_rate DESC NULLS LAST, average_highway_fuel_economy_rate DESC NULLS LAST;
SELECT AVG(sl.amount_of_loan) AS average_amount_of_loan FROM Student_Loans sl;
SELECT AVG(sl.amount_of_loan) AS average_loan_amount FROM Student_Loans sl;
SELECT s.student_id, s.bio_data FROM Students s JOIN (SELECT c.student_id FROM Classes c GROUP BY c.student_id HAVING COUNT(c.class_id) >= 2) AS mc ON s.student_id = mc.student_id WHERE EXISTS (SELECT d.student_id FROM Detention d WHERE d.student_id = s.student_id GROUP BY d.student_id HAVING COUNT(d.detention_id) < 2) ORDER BY s.student_id NULLS LAST;
SELECT s.student_id, s.bio_data FROM Students s JOIN Transcripts t ON s.student_id = t.student_id WHERE (SELECT COUNT(DISTINCT c.class_id) FROM Classes c WHERE c.student_id = s.student_id) >= 2 AND (SELECT COUNT(DISTINCT d.detention_id) FROM Detention d WHERE d.student_id = s.student_id) <= 2;
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details ilike '%data%' AND c.class_details not ilike 'net%' ORDER BY t.teacher_details NULLS LAST;
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details ilike '%data%' AND c.class_details not ilike 'net%' ORDER BY t.teacher_details NULLS LAST;
SELECT s.student_id, s.bio_data FROM Students s LEFT JOIN Detention d ON s.student_id = d.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE d.student_id IS NULL AND sl.student_id IS NULL;
SELECT s.student_id, s.bio_data FROM Students s LEFT JOIN Detention d ON s.student_id = d.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE d.student_id IS NULL AND sl.student_id IS NULL;
SELECT s.student_id, sl.amount_of_loan, sl.date_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE s.student_id IN (SELECT a.student_id FROM Achievements a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2);
SELECT s.student_id, sl.amount_of_loan, sl.date_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE s.student_id IN (SELECT a.student_id FROM Achievements a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2);
SELECT t.teacher_details, t.teacher_id FROM Teachers t JOIN (SELECT c.teacher_id, COUNT(*) AS num_classes FROM Classes c GROUP BY c.teacher_id) AS cl ON t.teacher_id = cl.teacher_id ORDER BY num_classes DESC LIMIT 1;
SELECT t.teacher_details, t.teacher_id FROM Teachers t JOIN (SELECT c.teacher_id, COUNT(*) AS num_classes FROM Classes c GROUP BY c.teacher_id ORDER BY num_classes DESC LIMIT 1) AS mc ON t.teacher_id = mc.teacher_id;
SELECT DISTINCT r.detention_type_description FROM Detention d JOIN Ref_Detention_Type r ON d.detention_type_code = r.detention_type_code;
SELECT DISTINCT d.detention_type_description FROM Detention d;
SELECT s.student_details, r.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id JOIN Ref_Address_Types r ON sa.address_type_code = r.address_type_code;
SELECT s.student_details, r.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types r ON sa.address_type_code = r.address_type_code;
SELECT s.student_id, s.bio_data, sa.address_details FROM Students AS s JOIN Students_Addresses AS sa ON s.student_id = sa.student_id;
SELECT s.student_id, s.bio_data, sa.address_details FROM Students AS s JOIN Students_Addresses AS sa ON s.student_id = sa.student_id;
SELECT s.student_id, s.bio_data, t.date_of_transcript FROM Students AS s JOIN Transcripts AS t ON s.student_id = t.student_id;
SELECT s.student_id, s.bio_data, t.date_of_transcript FROM Students s JOIN Transcripts t ON s.student_id = t.student_id;
SELECT s.student_id, b.behaviour_monitoring_details FROM Students s JOIN Behaviour_Monitoring b ON s.student_id = b.student_id GROUP BY s.student_id, b.behaviour_monitoring_details ORDER BY COUNT(b.behaviour_monitoring_details) DESC LIMIT 1;
SELECT bm.behaviour_monitoring_details, COUNT(*) AS COUNT FROM Behaviour_Monitoring bm GROUP BY bm.behaviour_monitoring_details ORDER BY COUNT DESC LIMIT 1;
WITH transcript_count AS (SELECT t.student_id, COUNT(t.transcript_id) AS transcript_count FROM Transcripts t GROUP BY t.student_id), behavior_monitoring_count AS (SELECT b.student_id, COUNT(b.behaviour_monitoring_id) AS behavior_monitoring_count FROM Behaviour_Monitoring b GROUP BY b.student_id) SELECT s.student_id, s.bio_data, s.student_details, tc.transcript_count, bmc.behavior_monitoring_count FROM Students s JOIN transcript_count tc ON s.student_id = tc.student_id JOIN behavior_monitoring_count bmc ON s.student_id = bmc.student_id WHERE tc.transcript_count > 1 AND bmc.behavior_mon
WITH transcript_count AS (SELECT t.student_id, COUNT(t.transcript_id) AS total_transcripts FROM Transcripts t GROUP BY t.student_id), student_behaviour AS (SELECT b.student_id, COUNT(b.behaviour_monitoring_id) AS total_behaviours FROM Behaviour_Monitoring b GROUP BY b.student_id HAVING COUNT(b.behaviour_monitoring_id) >= 3) SELECT s.student_id, s.bio_data, s.student_details, tc.total_transcripts, sb.total_behaviours FROM Students s JOIN transcript_count tc ON s.student_id = tc.student_id LEFT JOIN student_behaviour sb ON s.student_id = sb.student_id WHERE tc.total_
SELECT s.student_id, s.bio_data FROM Students s JOIN (SELECT bm.student_id, COUNT(*) AS frequency, array_agg(bm.behaviour_monitoring_details) AS all_details FROM Behaviour_Monitoring bm GROUP BY bm.student_id ORDER BY frequency DESC LIMIT 1) AS m ON s.student_id = m.student_id;
SELECT s.student_id, s.bio_data FROM Students s JOIN Behaviour_Monitoring b ON s.student_id = b.student_id GROUP BY s.student_id, s.bio_data ORDER BY COUNT(b.behaviour_monitoring_details) DESC LIMIT 1;
SELECT s.student_id, s.bio_data, se.event_date FROM Students AS s JOIN Student_Events AS se ON s.student_id = se.student_id;
SELECT s.student_id, s.bio_data, se.event_date FROM Students AS s JOIN Student_Events AS se ON s.student_id = se.student_id;
SELECT COUNT(*) AS total_students, r.event_type_code, r.event_type_description FROM Student_Events se JOIN Ref_Event_Types r ON se.event_type_code = r.event_type_code GROUP BY r.event_type_code, r.event_type_description ORDER BY total_students DESC LIMIT 1;
SELECT e.event_type_code, e.event_type_description, COUNT(DISTINCT s.student_id) AS student_count FROM Student_Events s JOIN Ref_Event_Types e ON s.event_type_code = e.event_type_code GROUP BY e.event_type_code, e.event_type_description ORDER BY student_count DESC LIMIT 1;
SELECT a.achievement_id, a.achievement_details, t.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type t ON a.achievement_type_code = t.achievement_type_code;
SELECT a.achievement_id, a.achievement_details, t.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type t ON a.achievement_type_code = t.achievement_type_code;
SELECT COUNT(DISTINCT c.teacher_id) AS number_of_teachers FROM Classes c JOIN Students s ON c.student_id = s.student_id LEFT JOIN Achievements a ON s.student_id = a.student_id WHERE a.student_id IS NULL;
SELECT COUNT(DISTINCT c.teacher_id) AS number_of_teachers FROM Classes c JOIN Students s ON c.student_id = s.student_id WHERE NOT EXISTS (SELECT 1 FROM Achievements a WHERE a.student_id = s.student_id);
SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t ORDER BY t.date_of_transcript NULLS LAST;
SELECT t.transcript_id, t.date_of_transcript, t.transcript_details FROM Transcripts t ORDER BY t.date_of_transcript NULLS LAST;
SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements a ORDER BY a.date_achievement NULLS LAST;
SELECT a.achievement_id, a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements a ORDER BY a.date_achievement NULLS LAST;
SELECT d.detention_id, d.datetime_detention_start, d.datetime_detention_end FROM Detention d;
SELECT d.detention_id, d.datetime_detention_start, d.datetime_detention_end FROM Detention d ORDER BY d.detention_id NULLS LAST;
SELECT s.bio_data FROM Students s WHERE s.student_details ilike '%Suite%';
SELECT s.student_id, s.bio_data FROM Students s WHERE s.student_details ilike '%Suite%';
SELECT t.teacher_id, s.student_id FROM Teachers AS t CROSS JOIN Students AS s INNER JOIN Classes AS c ON t.teacher_id = c.teacher_id AND s.student_id = c.student_id;
SELECT t.teacher_id, s.student_id FROM Teachers AS t CROSS JOIN Students AS s INNER JOIN Classes AS c ON t.teacher_id = c.teacher_id AND s.student_id = c.student_id;
SELECT t.teacher_id, COUNT(c.class_id) AS number_of_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY number_of_classes DESC LIMIT 1;
SELECT t.teacher_id, COUNT(c.class_id) AS num_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY num_classes DESC LIMIT 1;
SELECT MAX(COUNT) AS max_courses, s.student_id FROM (SELECT t.student_id, COUNT(*) AS COUNT FROM Transcripts t GROUP BY t.student_id) AS subquery JOIN Students s ON subquery.student_id = s.student_id GROUP BY s.student_id ORDER BY max_courses DESC LIMIT 1;
SELECT s.student_id, COUNT(c.class_id) AS class_count FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id ORDER BY class_count DESC LIMIT 1;
SELECT s.student_id, s.student_details FROM Students s JOIN Transcripts t ON s.student_id = t.student_id WHERE EXISTS (SELECT 1 FROM Transcripts t2 WHERE t2.student_id = t.student_id AND t2.transcript_id != t.transcript_id) GROUP BY s.student_id, s.student_details HAVING COUNT(t.transcript_id) >= 2;
SELECT s.student_id, s.student_details FROM Students s JOIN (SELECT t.student_id FROM Transcripts t GROUP BY t.student_id HAVING COUNT(t.transcript_id) >= 2) AS m ON s.student_id = m.student_id;
SELECT rdt.detention_type_code, rdt.detention_type_description FROM Ref_Detention_Type rdt GROUP BY rdt.detention_type_code, rdt.detention_type_description ORDER BY COUNT(rdt.detention_type_code) ASC LIMIT 1;
SELECT rd.detention_type_code, rd.detention_type_description FROM Ref_Detention_Type rd GROUP BY rd.detention_type_code, rd.detention_type_description ORDER BY COUNT(rd.detention_type_code) ASC LIMIT 1;
SELECT s.bio_data, s.student_details, sl.amount_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
SELECT s.student_id, s.bio_data, s.student_details, sl.amount_of_loan FROM Students AS s JOIN Student_Loans AS sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
SELECT MIN(s.date_of_loan) AS min_date_of_loan FROM Student_Loans s;
SELECT MIN(s.date_of_loan) AS min_date_of_loan FROM Student_Loans s;
SELECT s.bio_data FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1;
SELECT s.bio_data FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1;
SELECT MAX(t.date_of_transcript) AS latest_transcript_issue_date FROM Transcripts t JOIN Student_Loans s ON t.student_id = s.student_id;
SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans s ON t.student_id = s.student_id ORDER BY s.amount_of_loan DESC LIMIT 1;
SELECT t.teacher_id, t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Transcripts tr ON c.student_id = tr.student_id ORDER BY tr.date_of_transcript ASC LIMIT 1;
SELECT t.teacher_id, t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Transcripts tr ON c.student_id = tr.student_id ORDER BY tr.date_of_transcript ASC LIMIT 1;
SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id ORDER BY total_loan DESC NULLS LAST;
SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id ORDER BY total_loan DESC NULLS LAST;
SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS total_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data ORDER BY total_classes DESC NULLS LAST;
SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS num_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data;
SELECT COUNT(DISTINCT d.student_id) AS number_of_students FROM Detention d;
SELECT COUNT(DISTINCT d.student_id) AS number_of_students FROM Detention d;
SELECT r.address_type_code, r.address_type_description FROM Ref_Address_Types r JOIN (SELECT s.address_type_code, COUNT(*) AS frequency FROM Students_Addresses s GROUP BY s.address_type_code ORDER BY frequency DESC LIMIT 1) AS m ON r.address_type_code = m.address_type_code;
SELECT r.address_type_code, r.address_type_description FROM (SELECT s.address_type_code, COUNT(*) AS frequency FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id GROUP BY s.address_type_code) AS subquery ORDER BY frequency DESC LIMIT 1;
SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL ORDER BY s.bio_data NULLS LAST;
SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL;
SELECT s.student_id, a.address_details, t.date_of_transcript, lag(t.date_of_transcript) OVER (PARTITION BY s.student_id ORDER BY t.date_of_transcript) AS previous_transcript FROM Students AS s JOIN Transcripts AS t ON s.student_id = t.student_id JOIN Students_Addresses AS sa ON s.student_id = sa.student_id JOIN Addresses AS a ON sa.address_id = a.address_id WHERE date_part('year', age(now(), t.date_of_transcript)) <= 2;
SELECT s.student_id, a.address_details, t.date_of_transcript, lag(t.date_of_transcript) OVER (PARTITION BY s.student_id ORDER BY t.date_of_transcript) AS previous_transcript FROM Students AS s JOIN Addresses AS a ON a.address_id = s.current_address JOIN Transcripts AS t ON t.student_id = s.student_id WHERE EXISTS (SELECT 1 FROM Transcripts t2 WHERE t2.student_id = t.student_id AND t2.date_of_transcript > t.date_of_transcript) ORDER BY s.student_id, t.date_of_transcript NULLS LAST;
SELECT MIN(d.datetime_detention_start) AS earliest_start_time FROM Detention d;
SELECT d.detention_id, d.datetime_detention_start FROM Detention d;
SELECT a.name FROM author a ORDER BY a.name NULLS LAST;
SELECT a.name FROM author a;
SELECT c.name, c.address FROM client c;
SELECT c.name, c.address FROM client c;
SELECT b.title, b.isbn, b.saleprice FROM book b;
SELECT b.title, b.isbn, b.saleprice FROM book b;
SELECT COUNT(*) FROM Book b;
SELECT COUNT(*) FROM Book;
SELECT COUNT(a.idAuthor) FROM Author a;
SELECT COUNT(DISTINCT a.idAuthor) AS total_authors FROM Author a;
SELECT COUNT(DISTINCT c.idclient) AS number_of_clients FROM client c;
SELECT COUNT(DISTINCT c.idclient) AS total_clients FROM client c;
SELECT c.name, c.address FROM client c ORDER BY c.name ASC;
SELECT c.name, c.address FROM client c ORDER BY c.name ASC;
SELECT b.title, a."name" FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor;
SELECT b.title, a.name FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor;
SELECT o.idorder, c.name FROM orders o JOIN clients c ON o.idclient = c.idclient;
SELECT o.idorder, c.name FROM orders o JOIN clients c ON o.idclient = c.idclient;
WITH total_books AS (SELECT ab.author, COUNT(ab.isbn) AS num_books FROM author_book ab GROUP BY ab.author) SELECT a."name", tb.num_books FROM author a JOIN total_books tb ON a.idauthor = tb.author;
WITH author_book AS (SELECT ab.author, COUNT(ab.isbn) AS book_count FROM author_book ab GROUP BY ab.author) SELECT a."name", ab.book_count FROM author_book ab JOIN author a ON ab.author = a.idauthor;
WITH book_orders AS (SELECT b.isbn, COUNT(o.idorder) AS num_orders FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN books_order bo ON b.isbn = bo.isbn JOIN order o ON bo.idorder = o.idorder GROUP BY b.isbn) SELECT io.isbn, io.num_orders FROM book_orders io ORDER BY io.num_orders DESC;
WITH book_orders AS (SELECT b.isbn, co.idorder FROM book b JOIN books_order bo ON b.isbn = bo.isbn JOIN orders co ON bo.idorder = co.idorder) SELECT io.isbn, COUNT(*) OVER (PARTITION BY io.isbn) AS num_orders FROM book_orders io;
WITH total_ordered AS (SELECT b.isbn, SUM(bo.amount) AS total_amount FROM book b JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.isbn) SELECT t.isbn, t.total_amount FROM total_ordered t;
SELECT b.ISBN, SUM(bo.amount) AS total_amount FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN ORDER BY total_amount DESC NULLS LAST;
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.title ORDER BY COUNT(bo.idorder) DESC LIMIT 1;
SELECT b.title, COUNT(*) AS total_orders FROM books_order bo JOIN book b ON bo.isbn = b.isbn GROUP BY b.title ORDER BY total_orders DESC LIMIT 1;
SELECT b.title, b.purchaseprice FROM book b JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.amount = (SELECT MAX(amount) FROM books_order);
SELECT b.title, b.purchaseprice FROM book b JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.amount = (SELECT MAX(amount) FROM books_order);
SELECT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.idorder IN (SELECT o.idorder FROM orders o);
SELECT DISTINCT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn JOIN orders o ON bo.idorder = o.idorder WHERE o.dateorder < CURRENT_DATE;
SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name;
SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient;
SELECT c.name, COUNT(o.idorder) AS order_count FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY order_count DESC NULLS LAST;
SELECT c.name, COUNT(o.idorder) AS number_of_orders FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY number_of_orders DESC NULLS LAST;
SELECT c.name, COUNT(o.idorder) AS order_count FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY order_count DESC LIMIT 1;
SELECT c.name FROM Client c JOIN Orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY COUNT(o.idorder) DESC LIMIT 1;
WITH total_books AS (SELECT o.idclient, COUNT(*) AS total_books FROM orders o GROUP BY o.idclient), client_info AS (SELECT c.name, c.address, c.numcc FROM client c JOIN total_books tb ON c.idclient = tb.idclient) SELECT ci.name, ci.address, ci.numcc, tb.total_books FROM client_info ci JOIN total_books tb ON ci.name = 'John'
WITH client_orders AS (SELECT c.name, co.idorder FROM client c JOIN orders o ON c.idclient = o.idclient JOIN books_order bo ON o.idorder = bo.idorder), order_books AS (SELECT co.idorder, COUNT(*) AS total_books FROM client_orders co GROUP BY co.idorder) SELECT co.name, ob.total_books FROM client_orders co JOIN order_books ob ON co.idorder = ob.idorder;
SELECT c.name, SUM(b.price) AS total_spent FROM client c JOIN orders o ON c.idclient = o.idclient JOIN book_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn GROUP BY c.name ORDER BY total_spent DESC LIMIT 1;
SELECT c.name, SUM(b.saleprice * b.amount) AS total_spent FROM client c JOIN orders o ON c.idclient = o.idclient JOIN book_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn GROUP BY c.name ORDER BY total_spent DESC LIMIT 1;
SELECT b.title FROM book b LEFT JOIN Books_Order bo ON b.isbn = bo.isbn WHERE bo.isbn IS NULL;
SELECT b.title FROM book b WHERE b.isbn NOT IN (SELECT o.isbn FROM orders o);
SELECT c.name FROM client c LEFT JOIN orders o ON c.idclient = o.idclient WHERE o.idclient IS NULL;
SELECT c.name FROM client c WHERE c.idclient NOT IN (SELECT o.idclient FROM orders o);
SELECT MAX(b.SalePrice) AS max_sale_price, MIN(b.SalePrice) AS min_sale_price FROM Book b;
SELECT MAX(b.SalePrice) AS max_sale_price, MIN(b.SalePrice) AS min_sale_price FROM Book b;
SELECT AVG(b.PurchasePrice) AS Average_Purchase_Price, AVG(b.SalePrice) AS Average_Sale_Price FROM Book b;
SELECT AVG(b.PurchasePrice) AS Average_Purchase_Price, AVG(b.SalePrice) AS Average_Sale_Price FROM Book b;
SELECT MAX(b.salePrice - b.purchasePrice) AS max_difference FROM book b;
SELECT MAX(b.salePrice - b.purchasePrice) AS max_difference FROM book b;
SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2);
SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2);
SELECT b.title FROM book b ORDER BY b.saleprice ASC NULLS LAST;
SELECT b.title FROM book b WHERE b.saleprice = (SELECT MIN(saleprice) FROM book);
SELECT b.title FROM book b ORDER BY b.purchaseprice DESC NULLS LAST;
SELECT b.title FROM book b WHERE b.purchaseprice = (SELECT MAX(b2.purchaseprice) FROM book b2);
SELECT AVG(b.SalePrice) FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a."Name" ILIKE '%George%Orwell%'
SELECT AVG(b.SalePrice) FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a."Name" ILIKE '%George%Orwell%'
SELECT b.saleprice FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE ab.author = (SELECT idauthor FROM author WHERE name ilike '%Plato%');
SELECT b.saleprice FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a."name" ILIKE '%Plato%'
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE ab.author = (SELECT idAuthor FROM author WHERE name ilike '%George%Orwell%') ORDER BY b.saleprice ASC LIMIT 1;
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a."name" ilike '%George%Orwell%' ORDER BY b.saleprice ASC LIMIT 1;
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE ab.author = (SELECT idAuthor FROM author WHERE name ilike '%Plato%') AND b.saleprice < (SELECT AVG(saleprice) FROM book);
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE ab.author = (SELECT idAuthor FROM author WHERE name ilike '%Plato%') AND b.saleprice < (SELECT AVG(saleprice) FROM book);
SELECT a.name FROM Author a JOIN Book b ON a.idAuthor = b.author WHERE b.title ilike '%Pride%and%Prejudice%'
SELECT a.name FROM Author a JOIN Book b ON a.idAuthor = b.author WHERE b.title ilike '%Pride%and%Prejudice%'
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name ilike '%Plato%'
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name ilike '%Plato%' ORDER BY b.title NULLS LAST;
SELECT COUNT(*) FROM Books_Order bo JOIN Order o ON bo.idOrder = o.idOrder WHERE bo.ISBN = '978-0-553-19325-3';
SELECT COUNT(*) FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.idOrder WHERE bo.ISBN = '9780140449695';
SELECT DISTINCT o.idorder FROM orders o JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%' AND b.title ilike '%The%Little%Prince%'
SELECT DISTINCT o.idorder FROM orders o JOIN books_order bo ON o.idorder = bo.idorder WHERE bo.isbn IN ('0-7181-57970-7', '0-7181-57972-3', '0-7181-57971-X')
SELECT DISTINCT b.ISBN FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN JOIN Orders o ON bo.idOrder = o.IdOrder WHERE o.IdClient IN ('Peter Doe', 'James Smith') GROUP BY b.ISBN HAVING COUNT(DISTINCT o.IdClient) >= 2;
SELECT DISTINCT b.ISBN FROM Books_Order bo JOIN Orders o ON bo.idOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient JOIN Book b ON bo.ISBN = b.ISBN WHERE c.Name ilike '%Peter%Doe%' AND c.Name ilike '%James%Smith%'
SELECT DISTINCT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN orders o ON ab.isbn = o.idclient WHERE o.idclient IN (SELECT c.idclient FROM client c WHERE c.name ilike '%Peter%Doe%' AND c.name not ilike '%James%Smith%') ORDER BY b.title NULLS LAST;
SELECT DISTINCT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN orders o ON ab.isbn = o.idclient WHERE o.idclient IN (SELECT idorder FROM orders WHERE idclient = 'Peter Doe') AND o.idclient NOT IN (SELECT idorder FROM orders WHERE idclient = 'James Smith');
SELECT c.name FROM Client c JOIN Orders o ON c.idclient = o.idclient JOIN Books_Order bo ON o.idorder = bo.idorder JOIN Book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%'
SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%'
SELECT COUNT(b.book_id) FROM book b;
SELECT b.title FROM book b ORDER BY b.title ASC;
SELECT b.title FROM book b ORDER BY b.pages DESC;
SELECT b.type, b.release FROM book b ORDER BY b.type NULLS LAST;
SELECT b.title, MIN(b.chapters) AS min_chapters, MAX(b.chapters) AS max_chapters FROM book b GROUP BY b.title;
SELECT b.title FROM book b WHERE b.type != 'Poet';
SELECT AVG(r.rating) AS average_rating FROM review r;
SELECT b.title, r.rating FROM book b JOIN review r ON b.book_id = r.book_id;
SELECT b.title, r.rating FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY b.chapters DESC LIMIT 1;
SELECT b.title, b.pages, rank() OVER (ORDER BY b.pages ASC) AS rank FROM book b ORDER BY rank NULLS LAST;
SELECT b.title FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY r.rank DESC LIMIT 1;
SELECT AVG(r.Readers_in_Million) AS Average_Readers FROM book b JOIN review r ON b.Book_ID = r.Book_ID WHERE b.Type = 'Novel';
SELECT b.type, COUNT(b.book_id) AS number_of_books FROM book b GROUP BY b.type ORDER BY number_of_books DESC NULLS LAST;
SELECT b.type FROM book b GROUP BY b.type ORDER BY COUNT(b.type) DESC LIMIT 1;
SELECT b.type FROM book b GROUP BY b.type HAVING COUNT(b.book_id) >= 3;
SELECT b.title FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY r.rating ASC;
SELECT b.title, b.audio FROM book b JOIN review r ON b.book_id = r.book_id WHERE r.readers_in_million IS NOT NULL ORDER BY r.readers_in_million DESC;
SELECT COUNT(DISTINCT b.book_id) AS num_books FROM book b LEFT JOIN review r ON b.book_id = r.book_id WHERE r.book_id IS NULL
SELECT b.type FROM book b WHERE b.chapters > 75 AND b.chapters < 50 GROUP BY b.type;
SELECT COUNT(DISTINCT b.type) FROM book b;
SELECT b.type, b.title FROM book b LEFT JOIN review r ON b.book_id = r.book_id WHERE r.rating IS NULL;
SELECT COUNT(c.customer_id) FROM customer c;
SELECT COUNT(c.customer_id) FROM customer c;
SELECT c.name FROM customer c ORDER BY c.level_of_membership ASC;
SELECT c.name FROM customer c ORDER BY c.level_of_membership ASC;
SELECT c.name, c.nationality, c.card_credit FROM customer c;
SELECT c.name, c.nationality, c.card_credit FROM customer c;
SELECT c.name FROM customer c WHERE c.nationality ilike '%England%' OR c.nationality ilike '%Australia%';
SELECT c.name FROM customer c WHERE c.nationality ilike '%England%' OR c.nationality ilike '%Australia%';
SELECT AVG(c.card_credit) FROM customer c WHERE c.level_of_membership > 1;
SELECT AVG(c.card_credit) FROM customer c WHERE c.level_of_membership > 1;
SELECT c.name, c.card_credit FROM customer c WHERE c.level_of_membership = (SELECT MAX(c2.level_of_membership) FROM customer c2);
SELECT c.name, c.card_credit FROM customer c ORDER BY c.level_of_membership DESC NULLS LAST LIMIT 1;
SELECT c.nationality, COUNT(c.customer_id) AS customer_count FROM customer c GROUP BY c.nationality ORDER BY customer_count DESC NULLS LAST;
SELECT c.nationality, COUNT(c.customer_id) AS customer_count FROM customer c GROUP BY c.nationality ORDER BY customer_count DESC NULLS LAST;
SELECT c.nationality FROM customer c GROUP BY c.nationality ORDER BY COUNT(c.nationality) DESC LIMIT 1;
SELECT c.nationality, COUNT(c.customer_id) AS number_of_customers FROM customer c GROUP BY c.nationality ORDER BY number_of_customers DESC LIMIT 1;
SELECT c.nationality FROM customer c WHERE c.card_credit < 50 AND c.card_credit > 75 GROUP BY c.nationality;
SELECT c.nationality FROM customer c WHERE c.card_credit > 50 AND c.card_credit < 75 GROUP BY c.nationality;
SELECT c.name AS customer_name, co.dish_name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id;
SELECT c.name AS customer_name, co.dish_name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id;
SELECT c.name AS customer_name, co.dish_name, co.quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id ORDER BY co.quantity DESC;
SELECT c.name AS customer_name, co.dish_name, co.quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id ORDER BY co.quantity DESC;
SELECT c.name, SUM(co.quantity) AS total_quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name ORDER BY total_quantity DESC NULLS LAST;
SELECT c.name, SUM(co.quantity) AS total_quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name ORDER BY total_quantity DESC NULLS LAST;
SELECT c.name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name HAVING SUM(co.quantity) > 1;
SELECT c.name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name HAVING SUM(co.quantity) > 1;
SELECT DISTINCT b.manager FROM branch b;
SELECT DISTINCT b.manager FROM branch b;
SELECT c.name FROM customer c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM customer_order co);
SELECT c.name FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;
SELECT COUNT(m.member_id) FROM member m;
SELECT m.name FROM member m ORDER BY m.age ASC;
SELECT m.name, m.nationality FROM member m;
SELECT m.name FROM member m WHERE m.nationality NOT ILIKE '%England%';
SELECT m.name FROM member m WHERE m.age IN (19, 20);
SELECT m.name FROM member m ORDER BY m.age ASC NULLS LAST LIMIT 1;
SELECT m.nationality, COUNT(m.member_id) AS member_count FROM member m GROUP BY m.nationality ORDER BY member_count DESC NULLS LAST;
SELECT m.nationality FROM member m GROUP BY m.nationality ORDER BY COUNT(m.nationality) DESC LIMIT 1;
SELECT m.nationality FROM member m GROUP BY m.nationality HAVING COUNT(m.member_id) >= 2 ORDER BY m.nationality NULLS LAST;
SELECT m.name AS member_name, c.club_name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id JOIN club c ON cl.club_id = c.club_id;
SELECT m.name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id JOIN club c ON cl.club_id = c.club_id WHERE c.overall_ranking > 100;
SELECT m.name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id WHERE cl.year_join < '2018' ORDER BY m.name NULLS LAST;
SELECT c.team_leader FROM club c WHERE c.club_name ilike '%Houston%';
SELECT m.name FROM member m LEFT JOIN club_leader cl ON m.member_id = cl.member_id WHERE cl.member_id IS NULL;
SELECT m.nationality FROM member m GROUP BY m.nationality HAVING COUNT(CASE WHEN m.age > 22 THEN 1 END) > 0 AND COUNT(CASE WHEN m.age < 19 THEN 1 END) > 0;
SELECT AVG(m.age) AS average_age FROM member m JOIN club_leader cl ON m.member_id = cl.member_id;
SELECT c.club_name FROM club c WHERE c.club_name ilike '%state%' ORDER BY c.club_name NULLS LAST;
SELECT c.collection_name, cs.collection_subset_name FROM collections c JOIN collection_subsets cs ON c.collection_id = cs.collection_id;
SELECT c.collection_name, cs.collection_subset_name FROM collections c JOIN collection_subset_members csm ON c.collection_id = csm.related_collection_id JOIN collection_subsets cs ON csm.collection_subset_id = cs.collection_subset_id;
SELECT cs.collecrtion_subset_details FROM collection_subsets cs WHERE cs.collection_subset_name = 'Top collection';
SELECT c.Collection_Name, c.Collection_Description FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Related_Collection_ID = c.Collection_ID WHERE cs.Collection_Subset_Name = 'Top collection';
SELECT d.document_subset_name FROM document_subsets d;
SELECT d.document_subset_name FROM document_subsets d;
SELECT d.document_subset_details FROM document_subsets d WHERE d.document_subset_name ilike '%Best%for%2000%'
SELECT d.document_subset_details FROM document_subsets d WHERE d.document_subset_name ilike '%Best%for%2000%' ORDER BY d.document_subset_details NULLS LAST;
SELECT d.Document_Object_ID FROM Documents_in_Collections AS d;
SELECT d.document_object_id FROM documents_in_collections AS d;
SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin' AND d.Parent_Document_Object_ID IS NOT NULL;
SELECT d.document_object_id FROM document_objects d WHERE d.owner ilike '%Marlin%' ORDER BY d.document_object_id NULLS LAST;
SELECT d.owner FROM Document_Objects d WHERE d.description ilike '%Braeden%Collection%'
SELECT d.owner FROM Document_Objects d JOIN Documents_in_Collections di ON d.document_object_id = di.document_object_id JOIN Collections c ON di.collection_id = c.collection_id WHERE c.collection_name ilike '%Braeden%Collection%'
SELECT d.owner FROM Document_Objects d WHERE d.owner ilike '%Marlin%'
SELECT d.owner AS parent_document_owner FROM Document_Objects d WHERE d.owner ilike '%Marlin%'
SELECT d.description FROM document_objects d WHERE d.parent_document_object_id IS NULL;
SELECT d.description FROM Document_Objects d WHERE d.parent_document_object_id IS NULL;
SELECT COUNT(*) FROM Document_Objects WHERE Owner ILIKE '%Marlin%';
SELECT COUNT(*) FROM Document_Objects WHERE Owner ILIKE '%Marlin%';
SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NULL
SELECT d.document_object_id FROM document_objects d WHERE d.parent_document_object_id IS NULL;
SELECT d.document_id, COUNT(d.document_id) AS number_of_children FROM documents d JOIN document_objects do ON d.document_id = do.parent_document_object_id GROUP BY d.document_id ORDER BY number_of_children DESC NULLS LAST;
SELECT d.document_object_id AS parent_document_id, COUNT(d.document_object_id) AS child_documents_count FROM document_objects d GROUP BY d.document_object_id ORDER BY child_documents_count DESC NULLS LAST;
SELECT c.Collection_Name FROM Collections c ORDER BY c.Collection_Name NULLS LAST;
SELECT c.Collection_Name FROM Collections c;
SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name = 'Best';
SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name ilike '%Best%';
SELECT c.Collection_Name FROM Collections c JOIN Collection_Subsets cs ON c.Collection_ID = cs.Collection_Subset_ID WHERE cs.Collection_Subset_Name ilike '%Nice%' LIMIT 1;
SELECT c.Collection_Name FROM Collections c WHERE c.Collection_Name ilike '%Nice%'
SELECT c.Collection_Name FROM Collections c WHERE c.Collection_ID NOT IN (SELECT p.Collection_ID FROM Collections p);
SELECT c.Collection_Name FROM Collections c WHERE c.Collection_ID NOT IN (SELECT p.Collection_ID FROM Collections p);
SELECT d.Document_ID FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT p.Parent_Document_Object_ID FROM Document_Objects p GROUP BY p.Parent_Document_Object_ID HAVING COUNT(p.Document_Object_ID) > 1);
SELECT d.document_object_id FROM document_objects d WHERE d.document_object_id IN (SELECT p.parent_document_object_id FROM document_objects p GROUP BY p.parent_document_object_id HAVING COUNT(p.document_object_id) > 1);
SELECT COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name ilike '%Best%');
SELECT COUNT(*) FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID WHERE cs.Collection_Subset_Name ilike '%Best%'
SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID WHERE d.Owner ilike '%Ransom%'
SELECT d.document_object_id FROM document_objects d JOIN document_subset_members m ON d.document_object_id = m.related_document_object_id WHERE d.owner ilike '%Ransom%'
SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Related_Collection_ID = c.Collection_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name ORDER BY number_of_collections DESC NULLS LAST;
WITH subset_collections AS (SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(DISTINCT c.collection_id) AS num_collections FROM collection_subsets cs JOIN collections c ON cs.collection_subset_id = c.parent_collection_id GROUP BY cs.collection_subset_id, cs.collection_subset_name) SELECT sc.*, rank() OVER (ORDER BY sc.num_collections DESC) AS rank FROM subset_collections sc ORDER BY rank;
SELECT d.document_id, COUNT(d.document_id) AS total_children FROM documents_in_collections AS d GROUP BY d.document_id ORDER BY total_children DESC LIMIT 1;
SELECT d.document_object_id, COUNT(d.document_object_id) AS child_count FROM document_objects d GROUP BY d.document_object_id ORDER BY child_count DESC NULLS LAST;
SELECT d.Document_Object_ID, COUNT(ds.Related_Document_Object_ID) AS related_document_count FROM Documents_in_Collections d JOIN Document_Subset_Members ds ON d.Document_Object_ID = ds.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY related_document_count ASC LIMIT 1;
SELECT d.document_object_id FROM document_objects d ORDER BY COUNT(d.document_object_id) ASC LIMIT 1;
SELECT d.Document_Object_ID, COUNT(ds.Related_Document_Object_ID) AS related_document_count FROM Documents_in_Collections d JOIN Document_Subset_Members ds ON d.Document_Object_ID = ds.Document_Object_ID GROUP BY d.Document_Object_ID HAVING COUNT(ds.Related_Document_Object_ID) BETWEEN 2 AND 4 ORDER BY related_document_count DESC NULLS LAST;
WITH related_documents AS (SELECT d.document_object_id, COUNT(ds.related_document_object_id) AS related_count FROM documents d JOIN document_subset_members ds ON d.document_object_id = ds.document_object_id GROUP BY d.document_object_id HAVING COUNT(ds.related_document_object_id) BETWEEN 2 AND 4) SELECT rd.document_object_id, rd.related_count FROM related_documents rd ORDER BY rd.related_count DESC NULLS LAST;
SELECT d.owner FROM Document_Objects d JOIN Document_Subset_Members m ON d.document_object_id = m.related_document_object_id WHERE d.owner ilike '%Braeden%'
SELECT DISTINCT d.owner FROM Document_Objects d JOIN Document_Subset_Members m ON d.document_object_id = m.related_document_object_id WHERE d.owner != 'Braeden'
SELECT d.document_subset_name FROM document_objects o JOIN document_subset_members m ON o.document_object_id = m.document_object_id JOIN document_subsets d ON m.document_subset_id = d.document_subset_id WHERE o.owner ilike '%Braeden%' GROUP BY d.document_subset_name;
SELECT d.document_subset_name FROM document_objects d WHERE d.owner ilike '%Braeden%' ORDER BY d.document_subset_name NULLS LAST;
SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT doc.document_object_id) AS num_documents FROM document_subsets d JOIN document_objects doc ON d.document_subset_id = doc.owner GROUP BY d.document_subset_id, d.document_subset_name ORDER BY num_documents DESC NULLS LAST;
SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT m.related_document_object_id) AS num_documents FROM document_subsets d JOIN document_subset_members m ON d.document_subset_id = m.document_subset_id GROUP BY d.document_subset_id, d.document_subset_name ORDER BY num_documents DESC NULLS LAST;
SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT m.related_document_object_id) AS num_distinct_documents FROM document_subset_members m JOIN document_subsets d ON m.document_subset_id = d.document_subset_id GROUP BY d.document_subset_id, d.document_subset_name ORDER BY num_distinct_documents DESC LIMIT 1;
SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT m.related_document_object_id) AS num_distinct_documents FROM document_subsets d JOIN document_subset_members m ON d.document_subset_id = m.document_subset_id GROUP BY d.document_subset_id, d.document_subset_name ORDER BY num_distinct_documents DESC LIMIT 1;
SELECT d.Document_ID FROM Document_Subsets s JOIN Document_Subset_Members m ON s.Document_Subset_ID = m.Document_Subset_ID JOIN Document_Objects o ON m.Document_Object_ID = o.Document_Object_ID WHERE s.Document_Subset_Name ilike '%Best%for%2000%'
SELECT d.Document_ID FROM Document_Subsets s JOIN Document_Subset_Members m ON s.Document_Subset_ID = m.Document_Subset_ID JOIN Document_Objects o ON m.Document_Object_ID = o.Document_Object_ID WHERE s.Document_Subset_Name ilike '%Best%for%2000%'
SELECT d.document_id, ds.document_subset_name FROM documents d JOIN document_subset_members dsm ON d.document_id = dsm.related_document_object_id JOIN document_subsets ds ON dsm.document_subset_id = ds.document_subset_id;
SELECT d.document_id, ds.document_subset_name FROM documents d JOIN document_subset_members dsm ON d.document_id = dsm.related_document_object_id JOIN document_subsets ds ON dsm.document_subset_id = ds.document_subset_id;
SELECT c.Collection_Name FROM Document_Objects d JOIN Documents_in_Collections di ON d.Document_Object_ID = di.Document_Object_ID JOIN Collections c ON di.Collection_ID = c.Collection_ID WHERE d.Owner ilike '%Ransom%'
SELECT c.Collection_Name FROM Document_Objects d JOIN Documents_in_Collections di ON d.Document_Object_ID = di.Document_Object_ID JOIN Collections c ON di.Collection_ID = c.Collection_ID WHERE d.Owner = 'Ransom';
SELECT d.document_id, COUNT(DISTINCT c.collection_id) AS number_of_collections FROM documents_in_collections dc JOIN Documents d ON dc.document_object_id = d.document_id JOIN Collections c ON dc.collection_id = c.collection_id GROUP BY d.document_id ORDER BY number_of_collections DESC NULLS LAST;
SELECT d.document_object_id, COUNT(DISTINCT c.collection_id) AS number_of_collections FROM documents_in_collections d JOIN collections c ON d.collection_id = c.collection_id GROUP BY d.document_object_id ORDER BY number_of_collections DESC NULLS LAST;
SELECT COUNT(DISTINCT d.Document_Object_ID) AS number_of_documents FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(DISTINCT d.document_object_id) AS number_of_documents FROM documents_in_collections d JOIN collections c ON d.collection_id = c.collection_id WHERE c.collection_name ilike '%Best%';
SELECT d.Document_Object_ID FROM Documents_in_Collections dc JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(DISTINCT d.document_object_id) AS number_of_document_object_ids FROM documents_in_collections d JOIN collections c ON d.collection_id = c.collection_id WHERE c.collection_name ilike '%Best%';
SELECT c.collection_name, c.collection_id, COUNT(d.document_object_id) AS document_count FROM collections c JOIN documents_in_collections d ON c.collection_id = d.collection_id GROUP BY c.collection_name, c.collection_id ORDER BY document_count DESC LIMIT 1;
SELECT c.Collection_Name, c.Collection_ID, COUNT(d.Document_Object_ID) AS total_documents FROM Collections c JOIN Documents_in_Collections d ON c.Collection_ID = d.Collection_ID WHERE c.Collection_Name ILIKE '%Best%' GROUP BY c.Collection_Name, c.Collection_ID ORDER BY total_documents DESC LIMIT 1;
SELECT d.Document_Object_ID FROM Document_Subset_Members m JOIN Document_Subsets s ON m.Document_Subset_ID = s.Document_Subset_ID JOIN Documents_in_Collections c ON m.Document_Object_ID = c.Document_Object_ID WHERE s.Document_Subset_Name = 'Best' AND EXTRACT(YEAR FROM TO_DATE(m.Related_Document_Object_ID::TEXT, 'YYYY')) = 2000 AND c.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');
SELECT DISTINCT d.document_object_id FROM document_subsets s JOIN document_subset_members m ON s.document_subset_id = m.document_subset_id JOIN documents_in_collections c ON m.related_document_object_id = c.document_object_id WHERE s.document_subset_name ilike '%Best%for%2000%' AND c.collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best');
SELECT d.Document_Object_ID FROM Documents_in_Collections AS d JOIN Collection_Subsets AS c ON d.Collection_ID = c.Collection_Subset_ID WHERE c.Collection_Subset_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best')) AND EXTRACT(YEAR FROM TO_DATE(d.Description, 'YYYY')) = 2000;
SELECT d.document_object_id FROM documents_in_collections AS d JOIN collections AS c ON d.collection_id = c.collection_id WHERE c.collection_name = 'Best' AND d.document_object_id NOT IN (SELECT m.related_document_object_id FROM document_subset_members AS m JOIN document_subsets AS s ON m.document_subset_id = s.document_subset_id WHERE s.document_subset_name = 'Best for 2000') ORDER BY d.document_object_id NULLS LAST;
SELECT d.Document_Object_ID FROM Document_Subset_Members m JOIN Document_Subsets s ON m.Document_Subset_ID = s.Document_Subset_ID JOIN Document_Objects o ON m.Document_Object_ID = o.Document_Object_ID WHERE s.Document_Subset_Name = 'Best' OR o.Description = 'Best' UNION SELECT c.Collection_ID FROM Collection_Subset_Members cm JOIN Collection_Subsets cs ON cm.Collection_Subset_ID = cs.Collection_Subset_ID JOIN Collections c ON cm.Collection_ID = c.Collection_ID WHERE cs.Collecrtion_Subset_Name = 'Best' OR c.Collection_Name = 'Best';
SELECT DISTINCT d.document_object_id FROM documents_in_collections AS d JOIN document_subset_members AS ds ON d.document_object_id = ds.related_document_object_id WHERE ds.document_subset_id IN (SELECT document_subset_id FROM document_subsets WHERE document_subset_name ilike '%Best%for%2000%' OR document_subset_name ilike '%Best%')
SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name ilike '%Best%') ORDER BY c.Collection_Name NULLS LAST;
SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name ilike '%Best%')
SELECT COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name ILIKE '%Best%');
SELECT COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Related_Collection_ID = c.Collection_ID WHERE cs.Collection_Subset_Name ilike '%Best%';
SELECT c.collection_name, cs.collection_subset_name FROM collections c JOIN collection_subset_members csm ON c.collection_id = csm.related_collection_id JOIN collection_subsets cs ON csm.collection_subset_id = cs.collection_subset_id WHERE c.collection_name ilike '%Best%'
SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID WHERE csm.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');
SELECT COUNT(s.id) FROM songs s WHERE s.name ilike '%Love%';
SELECT s.name FROM songs s ORDER BY s.name ASC;
SELECT s.name, s.language FROM songs s;
SELECT MAX(ps.voice_sound_quality) AS max_voice_sound_quality, MIN(ps.voice_sound_quality) AS min_voice_sound_quality FROM performance_score ps;
SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE p.name ilike '%Freeway%';
SELECT s.id, s.language, s.original_artist FROM songs s WHERE s.name not ilike '%Love%';
SELECT s.name, s.original_artist FROM songs s WHERE s.english_translation ilike '%All%the%streets%of%love%'
SELECT DISTINCT p.stage_presence FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English';
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name HAVING COUNT(ps.songs_id) >= 2 ORDER BY p.name NULLS LAST;
SELECT p.id, p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name, p.popularity ORDER BY COUNT(ps.songs_id) DESC;
SELECT p.id, p.name FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5;
SELECT ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.name ilike '%The Balkan Girls%' AND s.language ilike '%English%';
SELECT s.id AS song_id, s.name AS song_name, COUNT(ps.participant_id) AS number_of_participants FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY number_of_participants DESC LIMIT 1;
SELECT COUNT(*) FROM performance_score ps WHERE (ps.stage_presence < 7 OR ps.stage_presence > 9);
SELECT COUNT(DISTINCT s.id) AS unperformed_songs FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.participant_id IS NULL
SELECT s.language, AVG(ps.rhythm_tempo) AS average_rhythm_tempo FROM performance_score ps JOIN songs s ON ps.songs_id = s.id GROUP BY s.language ORDER BY average_rhythm_tempo DESC NULLS LAST;
SELECT DISTINCT p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English';
SELECT p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language IN ('Croatian', 'English') GROUP BY p.name, p.popularity HAVING COUNT(DISTINCT s.language) = 2 ORDER BY p.popularity DESC NULLS LAST;
SELECT s.name FROM songs s WHERE s.name ilike '%Is%';
SELECT s.original_artist FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC;
SELECT COUNT(c.city_code) FROM City c;
SELECT COUNT(c.city_code) FROM City c;
SELECT DISTINCT c.state FROM City c;
SELECT DISTINCT c.state FROM City c;
SELECT COUNT(DISTINCT c.country) FROM City c;
SELECT COUNT(DISTINCT c.country) FROM City c;
SELECT c.city_name, c.city_code, c.state, c.country FROM City c;
SELECT c.city_name, c.city_code, c.state, c.country FROM City c;
SELECT c.latitude, c.longitude FROM City c WHERE c.city_name ilike '%Baltimore%';
SELECT c.latitude, c.longitude FROM City c WHERE c.city_name ilike '%Baltimore%';
SELECT c.city_name FROM City c WHERE c.state = 'PA';
SELECT c.city_name FROM City c WHERE c.state = 'PA';
SELECT COUNT(*) FROM City WHERE country ILIKE '%Canada%';
SELECT COUNT(*) FROM City WHERE country = 'Canada';
SELECT c.city_name FROM City c WHERE c.country = 'USA' ORDER BY c.latitude NULLS LAST;
SELECT c.city_name FROM City c WHERE c.country = 'United States' ORDER BY c.latitude NULLS LAST;
SELECT c.state, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.state ORDER BY city_count DESC NULLS LAST;
SELECT c.state, COUNT(c.city_code) AS number_of_cities FROM City c GROUP BY c.state ORDER BY number_of_cities DESC NULLS LAST;
SELECT c.country, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.country ORDER BY city_count DESC NULLS LAST;
SELECT c.country, COUNT(c.city_code) AS number_of_cities FROM City c GROUP BY c.country ORDER BY number_of_cities DESC NULLS LAST;
SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) >= 2;
SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) >= 2;
SELECT c.state, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.state ORDER BY city_count DESC LIMIT 1;
SELECT c.state, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.state ORDER BY city_count DESC LIMIT 1;
SELECT c.country, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.country ORDER BY city_count ASC LIMIT 1;
SELECT c.country, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.country ORDER BY city_count ASC LIMIT 1;
SELECT s.fname, s.lname FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.state = 'MD';
SELECT s.fname, s.lname FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.state = 'MD';
SELECT COUNT(*) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China';
SELECT COUNT(*) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China';
SELECT s.fname, s.major FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.city_name ilike '%Baltimore%' ORDER BY s.fname NULLS LAST;
SELECT s.fname, m.major_name FROM Student s JOIN Major m ON s.major = m.major_id JOIN City c ON s.city_code = c.city_code WHERE c.city_name ilike '%Baltimore%'
SELECT c.country, COUNT(s.stuid) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY total_students DESC NULLS LAST;
SELECT c.country, COUNT(s.stuid) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY number_of_students DESC NULLS LAST;
SELECT c.city_name, COUNT(s.stu_id) AS total_students FROM student s JOIN city c ON s.city_code = c.city_code GROUP BY c.city_name ORDER BY total_students DESC NULLS LAST;
SELECT c.city_name, COUNT(s.stu_id) AS number_of_students FROM student s JOIN city c ON s.city_code = c.city_code GROUP BY c.city_name ORDER BY number_of_students DESC NULLS LAST;
SELECT c.state, COUNT(s.stuid) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state ORDER BY total_students DESC LIMIT 1;
SELECT c.state, COUNT(s.stuid) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state ORDER BY total_students DESC LIMIT 1;
SELECT c.country, COUNT(s.stuid) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY total_students ASC LIMIT 1;
SELECT c.country, COUNT(s.stuid) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY number_of_students ASC LIMIT 1;
SELECT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.stu_id) >= 3;
SELECT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.stu_id) >= 3;
SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) > 5;
SELECT c.state FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.state HAVING COUNT(s.stu_id) > 5;
SELECT s.stu_id FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.country != 'United States';
SELECT s.stu_id FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.country != 'United States';
SELECT s.stuid FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.sex = 'F' AND c.state = 'PA';
SELECT s.stuid FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.sex = 'F' AND c.state = 'PA';
SELECT s.stuid FROM student s JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'M' AND c.country != 'United States';
SELECT s.stuid FROM student s JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'M' AND c.country != 'United States';
SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI';
SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI';
SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BOS' AND d.city2_code = 'NJK';
SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BOS' AND d.city2_code = 'NJK';
SELECT AVG(d.distance) AS average_distance, MIN(d.distance) AS minimum_distance, MAX(d.distance) AS maximum_distance FROM Direct_distance d;
SELECT AVG(d.distance) AS average_distance, MIN(d.distance) AS minimum_distance, MAX(d.distance) AS maximum_distance FROM Direct_distance d;
SELECT d.city1_code, d.city2_code FROM Direct_distance d ORDER BY d.distance DESC LIMIT 2;
SELECT d.city1_code, d.city2_code, d.distance FROM Direct_distance d ORDER BY d.distance DESC LIMIT 2;
WITH avg_dist AS (SELECT AVG(distance) FROM Direct_distance) SELECT c.city_code, d.city_code, d.distance FROM Direct_distance d JOIN City c ON d.city1_code = c.city_code WHERE d.distance > (SELECT distance FROM avg_dist) LIMIT 2;
WITH avg_dist AS (SELECT AVG(distance) AS avg_distance FROM Direct_distance) SELECT d.city1_code, d.city2_code FROM Direct_distance d JOIN avg_dist a ON d.distance > a.avg_distance;
SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance < 1000;
SELECT d.city1_code FROM Direct_distance d WHERE d.distance < 1000;
SELECT SUM(d.distance) AS total_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%BAL%' JOIN City c2 ON d.city2_code = c2.city_code;
SELECT SUM(d.distance) AS total_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%Baltimore%' JOIN City c2 ON d.city2_code = c2.city_code;
SELECT AVG(d.distance) AS average_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%Boston%' JOIN City c2 ON d.city2_code = c2.city_code;
SELECT AVG(d.distance) AS average_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%Boston%' JOIN City c2 ON d.city2_code = c2.city_code;
SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = 'CHI' ORDER BY d.distance ASC LIMIT 1;
SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = 'CHI' ORDER BY d.distance ASC LIMIT 1;
SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = 'BOS' ORDER BY d.distance DESC LIMIT 1;
SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE c.city_code = 'BOS' ORDER BY d.distance DESC LIMIT 1;
SELECT c.city_code, SUM(d.distance) AS total_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_code ORDER BY total_distance DESC NULLS LAST;
WITH total_distances AS (SELECT city1_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city1_code) SELECT c.city_code, t.total_distance FROM City c JOIN total_distances t ON c.city_code = t.city1_code;
WITH avg_dist AS (SELECT city1_code, AVG(distance) AS avg_distance FROM direct_distance GROUP BY city1_code) SELECT c.city_name, ad.avg_distance FROM city c JOIN avg_dist ad ON c.city_code = ad.city1_code;
WITH avg_dist AS (SELECT city1_code, AVG(distance) AS avg_distance FROM direct_distance GROUP BY city1_code) SELECT c.city_name, ad.avg_distance FROM city c JOIN avg_dist ad ON c.city_code = ad.city1_code;
SELECT d.distance FROM Student s1 JOIN Student s2 ON s1.city_code = s2.city_code JOIN Direct_distance d ON s1.city_code = d.city1_code AND s2.city_code = d.city2_code WHERE s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim';
SELECT d.distance FROM Student s1 JOIN Student s2 ON s1.city_code = s2.city_code JOIN Direct_distance d ON s1.city_code = d.city1_code AND s2.city_code = d.city2_code WHERE s1.fname = 'Linda' AND s2.fname = 'Tracy';
SELECT s.fname, s.lname FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code WHERE s.fname ilike '%Linda%' AND s.lname ilike '%Smith%' ORDER BY d.distance DESC LIMIT 1;
SELECT s.fname, s.lname FROM Student s JOIN Direct_distance d ON s.city_code = d.city2_code WHERE s.fname = 'Linda' AND s.lname = 'Smith' ORDER BY d.distance DESC LIMIT 1;
SELECT s.state FROM Student s WHERE s.fname = 'Linda';
SELECT c.state FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.fname = 'Linda';
SELECT s.sid, s.name, s.rating, s.age FROM Sailors s WHERE s.age > 30;
SELECT s.name FROM Sailors s WHERE s.age > 30;
SELECT s.name, s.age FROM Sailors s WHERE s.age < 30;
SELECT s.name, s.age FROM Sailors s WHERE s.age < 30;
SELECT b.name FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = 1;
SELECT DISTINCT r.bid FROM Reserves r WHERE r.sid = 1;
SELECT s.name FROM Reserves r JOIN Sailors s ON r.sid = s.sid WHERE r.bid = 102;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102;
SELECT DISTINCT r.bid FROM Reserves r;
SELECT DISTINCT r.bid FROM Reserves r;
SELECT s.name FROM Sailors s WHERE s.name ilike '%e%';
SELECT s.name FROM Sailors s WHERE s.name ilike '%e%';
SELECT s.sid FROM Sailors s WHERE s.age > ANY (SELECT age FROM Sailors);
SELECT s.sid FROM Sailors s WHERE s.age != (SELECT MIN(age) FROM Sailors);
SELECT s.name FROM Sailors s WHERE s.age > (SELECT MAX(s2.age) FROM Sailors s2 WHERE s2.rating > 7);
SELECT s.name FROM Sailors s WHERE s.age > (SELECT AVG(s2.age) FROM Sailors s2 WHERE s2.rating > 7);
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name, s.sid HAVING COUNT(r.bid) >= 1 ORDER BY s.name NULLS LAST;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name, s.sid HAVING COUNT(r.bid) >= 1 ORDER BY s.name NULLS LAST;
SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid, s.name HAVING COUNT(r.bid) > 1;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name HAVING COUNT(r.bid) >= 2;
SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%'
SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');
SELECT s.name, r.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%';
SELECT s.name, r.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%';
SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');
SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%'
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%' ORDER BY s.name NULLS LAST;
SELECT s.name, r.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color ilike '%red%' OR b.color ilike '%blue%'
SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.name, s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.name, s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name ILIKE '%Luis%');
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name ILIKE '%Luis%');
SELECT s.name FROM Sailors s WHERE s.rating > ALL (SELECT s2.rating FROM Sailors s2 WHERE s2.name ILIKE '%Luis%');
SELECT s.name FROM Sailors s WHERE s.name ilike '%Luis%' AND s.rating < (SELECT AVG(s2.rating) FROM Sailors s2 WHERE s2.name ilike '%Luis%');
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating > 2;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating >= 3;
SELECT s.name, s.age FROM Sailors s ORDER BY s.age ASC NULLS LAST LIMIT 1;
SELECT s.name, s.age FROM Sailors s ORDER BY s.age DESC NULLS LAST LIMIT 1;
SELECT COUNT(s.sid) AS total_sailors FROM Sailors s;
SELECT COUNT(*) FROM Sailors s;
SELECT AVG(s.age) FROM Sailors s WHERE s.rating = 7;
SELECT AVG(s.age) FROM Sailors s WHERE s.rating = 7;
SELECT COUNT(*) FROM Sailors s WHERE s.name ilike 'D%';
SELECT COUNT(*) FROM Sailors s WHERE s.name ilike 'D%';
SELECT AVG(s.rating) AS average_rating, MAX(s.age) AS maximum_age FROM Sailors s;
SELECT AVG(s.rating) AS average_rating, MAX(s.age) AS maximum_age FROM Sailors s;
SELECT b.name, COUNT(r.bid) AS number_of_reserves FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;
SELECT b.name, COUNT(r.sid) AS number_of_reserves FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;
SELECT b.name, COUNT(r.bid) AS number_of_reserves FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE b.bid > 50 GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;
SELECT b.name, COUNT(r.sid) AS number_of_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE b.bid > 50 GROUP BY b.name ORDER BY number_of_reservations DESC NULLS LAST;
SELECT b.name, COUNT(r.sid) AS number_of_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name HAVING COUNT(r.sid) > 1 ORDER BY number_of_reservations DESC NULLS LAST;
SELECT b.name AS boat_name, COUNT(r.sid) AS number_of_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name HAVING COUNT(r.sid) > 1 ORDER BY number_of_reservations DESC NULLS LAST;
SELECT b.name AS boat_name, COUNT(r.sid) AS number_of_reserves FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid > 1 GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;
SELECT b.name AS boat_name, COUNT(*) AS number_of_reserves FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid > 1 GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;
SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating DESC, s.age ASC;
SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating DESC, s.age ASC;
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats b WHERE b.color ilike '%red%';
SELECT COUNT(*) FROM Boats b WHERE b.color ilike '%red%';
SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE r.sid IN (SELECT s.sid FROM Sailors s WHERE s.age BETWEEN 20 AND 30);
SELECT b.name AS boat_name, s.name AS sailor_name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30;
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT AVG(s2.rating) FROM Sailors s2 JOIN Reserves r ON s2.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red');
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT AVG(s2.rating) FROM Sailors s2 JOIN Reserves r ON s2.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red');
SELECT MAX(s.rating) AS maximum_rating FROM Sailors s;
SELECT MAX(s.rating) AS max_rating FROM Sailors s;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name ilike '%Melon%'
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name ilike '%Melon%'
SELECT s.name, s.age, s.rating FROM Sailors s ORDER BY s.rating DESC;
SELECT s.name, s.age, s.rating FROM Sailors s ORDER BY s.rating DESC;
SELECT h.model FROM headphone h ORDER BY h.price DESC NULLS LAST LIMIT 1;
SELECT h.model FROM headphone h ORDER BY h.price DESC NULLS LAST LIMIT 1;
SELECT DISTINCT h.model FROM headphone h ORDER BY h.model ASC;
SELECT DISTINCT h.model FROM headphone h ORDER BY h.model ASC;
SELECT h.class, COUNT(h.class) AS frequency FROM headphone h GROUP BY h.class ORDER BY frequency DESC LIMIT 1;
SELECT h.class, SUM(s.quantity) AS total_quantity FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.class ORDER BY total_quantity DESC LIMIT 1;
SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.headphone_id) > 2;
SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.headphone_id) <= 2;
SELECT h.class, COUNT(*) FROM headphone h WHERE h.price > 200 GROUP BY h.class ORDER BY COUNT(*) DESC NULLS LAST;
SELECT h.class, COUNT(*) FROM headphone h WHERE h.price > 200 GROUP BY h.class ORDER BY COUNT(*) DESC NULLS LAST;
SELECT COUNT(DISTINCT h.earpads) FROM headphone h;
SELECT COUNT(DISTINCT h.earpads) FROM headphone h;
SELECT h.earpads, COUNT(h.earpads) AS COUNT FROM headphone h GROUP BY h.earpads ORDER BY COUNT DESC NULLS LAST LIMIT 2;
SELECT h.earpads, COUNT(h.earpads) AS count FROM headphone h GROUP BY h.earpads ORDER BY count DESC NULLS LAST LIMIT 2;
SELECT h.model, h.class, h.construction FROM headphone h ORDER BY h.price ASC LIMIT 1;
SELECT h.model, h.class, h.construction FROM headphone h ORDER BY h.price ASC LIMIT 1;
SELECT h.construction, AVG(h.price) AS average_price FROM headphone h GROUP BY h.construction ORDER BY average_price DESC NULLS LAST;
SELECT h.construction, AVG(h.price) AS average_price FROM headphone h GROUP BY h.construction ORDER BY average_price DESC NULLS LAST;
SELECT h.class FROM headphone h WHERE h.earpads ilike '%Bowls%' AND h.earpads ilike '%Comfort%Pads%' GROUP BY h.class;
SELECT h.class FROM headphone h WHERE h.earpads ilike '%Bowls%' AND h.class IN (SELECT h2.class FROM headphone h2 WHERE h2.earpads ilike '%Comfort Pads%')
SELECT h.model FROM headphone h WHERE h.construction not ilike '%plastic%' AND h.earpads IS NOT NULL;
SELECT h.model FROM headphone h WHERE h.construction not ilike '%plastic%' AND h.earpads IS NOT NULL;
SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);
SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);
SELECT s.name FROM store s ORDER BY s.date_opened NULLS LAST;
SELECT s.name FROM store s ORDER BY s.date_opened NULLS LAST;
SELECT s.name, s.parking FROM store s WHERE s.neighborhood ilike '%Tarzana%' ORDER BY s.name NULLS LAST;
SELECT s.name, s.parking FROM store s WHERE s.neighborhood ilike '%Tarzana%' ORDER BY s.name NULLS LAST;
SELECT COUNT(DISTINCT s.neighborhood) AS number_of_neighborhoods FROM store s;
SELECT COUNT(DISTINCT s.neighborhood) FROM store s;
SELECT s.neighborhood, COUNT(s.store_id) AS store_count FROM store s GROUP BY s.neighborhood ORDER BY store_count DESC NULLS LAST;
SELECT s.neighborhood, COUNT(s.store_id) AS number_of_stores FROM store s GROUP BY s.neighborhood ORDER BY number_of_stores DESC NULLS LAST;
SELECT s.name, SUM(st.quantity) AS total_quantity FROM stock st JOIN store s ON st.store_id = s.store_id GROUP BY s.name ORDER BY total_quantity DESC LIMIT 1;
SELECT s.name AS store_name, SUM(s.quantity) AS total_quantity FROM stock s GROUP BY s.store_id, s.name ORDER BY total_quantity DESC NULLS LAST;
SELECT s.name FROM store s LEFT JOIN stock st ON s.store_id = st.store_id AND st.quantity > 0 WHERE st.store_id IS NULL;
SELECT s.name FROM store s LEFT JOIN stock st ON s.store_id = st.store_id AND st.quantity > 0 WHERE st.store_id IS NULL ORDER BY s.name NULLS LAST;
SELECT h.model FROM headphone h WHERE h.headphone_id NOT IN (SELECT s.headphone_id FROM stock s);
SELECT h.model FROM headphone h WHERE h.headphone_id NOT IN (SELECT s.headphone_id FROM stock s);
SELECT h.model, SUM(s.quantity) AS total_quantity FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.model ORDER BY total_quantity DESC LIMIT 1;
SELECT h.model, SUM(s.quantity) AS total_quantity FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.model ORDER BY total_quantity DESC LIMIT 1;
SELECT SUM(s.Quantity) AS total_quantity FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE st.Name = 'Woodman';
SELECT SUM(s.Quantity) AS total_quantity FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE st.Name = 'Woodman';
SELECT s.neighborhood FROM store s LEFT JOIN stock st ON s.store_id = st.store_id AND st.quantity > 0 WHERE st.store_id IS NULL ORDER BY s.neighborhood NULLS LAST;
SELECT s.neighborhood FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.store_id = s.store_id);
SELECT COUNT(DISTINCT a.author_id) AS number_of_authors FROM Author a;
SELECT COUNT(DISTINCT a.author_id) AS total_authors FROM Author a;
SELECT COUNT(p.paper_id) FROM Paper p;
SELECT COUNT(p.paper_id) AS total_papers FROM Paper p;
SELECT COUNT(DISTINCT a.affiliation_id) AS number_of_affiliations FROM Affiliation a;
SELECT COUNT(DISTINCT a.affiliation_id) AS total_affiliations FROM Affiliation a;
SELECT COUNT(*) FROM Paper p WHERE p.venue = 'NAACL 2000';
SELECT COUNT(*) FROM Paper p WHERE p.venue = 'NAACL 2000';
SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.year = 2009 AND a.name = 'Columbia University';
SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Columbia University%' AND p.year = 2009;
SELECT a.name AS affiliation_name, a.address FROM Affiliation a ORDER BY a.name NULLS LAST;
SELECT a.name, a.address FROM Affiliation a;
SELECT p.venue, p.year FROM Paper p ORDER BY p.year NULLS LAST;
SELECT DISTINCT p.venue, p.year FROM Paper p ORDER BY p.year;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Harvard%' ORDER BY p.title NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Harvard%University%'
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name ilike '%Mckeown%');
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name ilike '%Mckeown%');
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name IN ('Stanford University', 'Columbia University')
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name IN ('Stanford University', 'Columbia University') GROUP BY p.title, p.paper_id HAVING COUNT(DISTINCT a.affiliation_id) >= 2;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name IN ('Mckeown', 'Kathleen', 'Rambow', 'Owen')) ORDER BY p.title NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name ilike '%Mckeown%Kathleen%' OR a.name ilike '%Rambow%Owen%') GROUP BY p.title, p.paper_id;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ILIKE '%Mckeown%' AND a.name NOT ILIKE '%Rambow%'
SELECT p.title, a.paper_id FROM Author a JOIN Paper p ON a.paper_id = p.paper_id WHERE a.name = 'Mckeown' AND a.name != 'Rambow' ORDER BY p.title NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ilike '%Mckeown%' OR a.name ilike '%Kathleen%' OR a.name ilike '%Rambow%' OR a.name ilike '%Owen%' ORDER BY p.title NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ilike '%Mckeown%' OR a.name ilike '%Kathleen%' OR a.name ilike '%Rambow%' OR a.name ilike '%Owen%' ORDER BY p.title NULLS LAST;
SELECT a."name", COUNT(al.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a."name" ORDER BY paper_count DESC;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.name ORDER BY paper_count DESC;
SELECT a.affiliation_id, a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id, a.name ORDER BY paper_count ASC;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.name ORDER BY paper_count DESC;
SELECT a.name FROM Author a JOIN (SELECT al.author_id FROM Author_list al GROUP BY al.author_id HAVING COUNT(al.paper_id) > 50) AS subquery ON a.author_id = subquery.author_id;
SELECT a.name FROM Author a JOIN (SELECT al.author_id FROM Author_list al GROUP BY al.author_id HAVING COUNT(al.paper_id) > 50) AS subquery ON a.author_id = subquery.author_id;
SELECT a."name" FROM Author a JOIN (SELECT al.author_id FROM Author_list al GROUP BY al.author_id HAVING COUNT(al.paper_id) = 1) AS subquery ON a.author_id = subquery.author_id;
SELECT a."name" FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) = 1;
SELECT p.venue, p.year, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue, p.year ORDER BY publication_count DESC LIMIT 1;
SELECT p.venue, p.year, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue, p.year ORDER BY publication_count DESC LIMIT 1;
SELECT p.venue, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue ORDER BY publication_count ASC LIMIT 1;
SELECT p.venue, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue ORDER BY publication_count ASC LIMIT 1;
SELECT COUNT(DISTINCT c.paper_id) AS number_of_papers FROM Citation c WHERE c.cited_paper_id = 'A00-1002';
SELECT COUNT(DISTINCT c.paper_id) AS num_papers FROM Citation c WHERE c.cited_paper_id = 'A00-1002';
SELECT COUNT(DISTINCT c.cited_paper_id) AS number_of_reference_papers FROM Citation c WHERE c.paper_id = 'D12-1027';
SELECT COUNT(DISTINCT c.cited_paper_id) AS reference_count FROM Citation c WHERE c.paper_id = 'D12-1027';
SELECT p.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 1;
SELECT p.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 1;
SELECT p.title FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.title ORDER BY COUNT(c.cited_paper_id) DESC LIMIT 1;
SELECT p.title FROM Paper p JOIN (SELECT c.cited_paper_id, COUNT(*) AS citation_count FROM Citation c GROUP BY c.cited_paper_id ORDER BY citation_count DESC LIMIT 1) AS mc ON p.paper_id = mc.cited_paper_id;
SELECT p.title, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.title ORDER BY citation_count DESC LIMIT 10;
SELECT p.title, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.title ORDER BY citation_count DESC LIMIT 10;
SELECT COUNT(*) AS number_of_citations FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown%Kathleen%');
SELECT COUNT(*) AS citation_count FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown%Kathleen%');
SELECT COUNT(DISTINCT c.cited_paper_id) AS number_of_papers FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id AND c.cited_paper_id = al.author_id JOIN Author a ON al.author_id = a.author_id WHERE a."name" ILIKE '%Mckeown%Kathleen%'
SELECT COUNT(DISTINCT c.cited_paper_id) AS number_of_papers FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id AND c.cited_paper_id = al.author_id JOIN Author a ON al.author_id = a.author_id WHERE a."name" ILIKE '%Mckeown%Kathleen%'
SELECT a."name", COUNT(c.paper_id) AS citation_count FROM Author a JOIN Citation c ON a.author_id = c.cited_paper_id GROUP BY a."name" ORDER BY citation_count DESC LIMIT 1;
SELECT a."name", COUNT(c.paper_id) AS citation_count FROM Author a JOIN Citation c ON a.author_id = c.cited_paper_id GROUP BY a."name" ORDER BY citation_count DESC LIMIT 1;
SELECT DISTINCT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name ilike '%Mckeown%Kathleen%')
SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT a.author_id FROM Author a WHERE a.name ilike '%Mckeown%' OR a.name ilike '%Kathleen%')
SELECT DISTINCT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Columbia%University%'
SELECT DISTINCT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University'
SELECT a."name", COUNT(p.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a."name" ORDER BY paper_count DESC LIMIT 1;
SELECT a."name", COUNT(p.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a."name" ORDER BY paper_count DESC LIMIT 1;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC NULLS LAST LIMIT 3;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC LIMIT 3;
SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Columbia%' AND p.year <= 2009;
SELECT COUNT(p.paper_id) AS total_papers FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ILIKE '%Columbia University%' AND (p.year >= 2009 OR p.year IS NULL);
SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Stanford%' AND p.year BETWEEN 2000 AND 2009;
SELECT COUNT(p.paper_id) AS number_of_papers FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name ilike '%Stanford%' AND p.year BETWEEN 2000 AND 2009;
SELECT p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id GROUP BY p.title ORDER BY COUNT(al.author_id) DESC LIMIT 1;
SELECT p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id GROUP BY p.title ORDER BY COUNT(al.author_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT a.author_id) AS number_of_collaborators FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%')
SELECT COUNT(DISTINCT a.author_id) AS total_collaborators FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%')
SELECT a.name AS author_name, COUNT(*) AS paper_count FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%')) GROUP BY a.name ORDER BY paper_count DESC LIMIT 1;
SELECT a.name AS co_author_name, COUNT(*) AS paper_count FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%' ) GROUP BY a.name ORDER BY paper_count DESC LIMIT 1;
SELECT p.paper_id FROM Paper p WHERE p.title ilike '%translation%';
SELECT p.paper_id FROM Paper p WHERE p.title ilike '%translation%';
SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c);
SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c);
SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name HAVING COUNT(al.paper_id) MAX;
SELECT a.name FROM Affiliation a WHERE a.address ilike '%China%' ORDER BY COUNT(p.paper_id) DESC LIMIT 1;
SELECT p.year, COUNT(*) AS total_papers FROM Paper p GROUP BY p.year ORDER BY p.year
SELECT p.venue, p.year, COUNT(p.paper_id) AS number_of_papers FROM Paper p GROUP BY p.venue, p.year ORDER BY p.venue, p.year
SELECT a.affiliation_id, COUNT(p.paper_id) AS total_papers FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id ORDER BY total_papers DESC NULLS LAST;
SELECT a.affiliation_id, COUNT(p.paper_id) AS number_of_papers FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id ORDER BY number_of_papers DESC NULLS LAST;
SELECT p.title FROM Paper p WHERE p.paper_id IN (SELECT c.cited_paper_id FROM Citation c GROUP BY c.cited_paper_id HAVING COUNT(c.cited_paper_id) > 50);
SELECT p.title FROM Paper p WHERE p.paper_id IN (SELECT c.cited_paper_id FROM Citation c GROUP BY c.cited_paper_id HAVING COUNT(c.cited_paper_id) > 50);
SELECT COUNT(DISTINCT a.author_id) AS num_authors FROM Author a LEFT JOIN Paper p ON a.author_id = p.authors_id WHERE p.paper_id IS NULL OR (SELECT COUNT(*) FROM Citation c WHERE c.paper_id = p.paper_id) <= 50;
SELECT COUNT(DISTINCT a.author_id) AS number_of_authors FROM Author a LEFT JOIN (SELECT c.paper_id, COUNT(*) AS num_citations FROM Citation c GROUP BY c.paper_id HAVING COUNT(*) > 50) AS o ON a.author_id IN (SELECT author_id FROM Author_list WHERE paper_id = o.paper_id) WHERE o.paper_id IS NULL;
SELECT DISTINCT a."name" FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 AND (p.venue ilike '%NAACL%' OR p.venue ilike '%ACL%')
SELECT DISTINCT a."name" FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 AND p.venue IN ('NAACL', 'ACL')
SELECT a."name" FROM Author a LEFT JOIN Paper p ON a.author_id = p.authors WHERE p.venue != 'ACL' ORDER BY a."name" NULLS LAST;
SELECT a."name" FROM Author a LEFT JOIN Paper p ON a.author_id = p.authors WHERE p.venue != 'ACL' ORDER BY a."name" NULLS LAST;
SELECT COUNT(c.Conference_ID) FROM conference c;
SELECT COUNT(c.Conference_ID) AS total_conferences FROM conference c;
SELECT DISTINCT c.conference_name FROM conference c;
SELECT DISTINCT c.Conference_Name FROM conference c;
SELECT c.conference_name, c.year, c.location FROM conference c;
SELECT c.conference_name, c.year, c.location FROM conference c;
SELECT c.conference_name, COUNT(c.conference_id) AS number_of_conferences FROM conference c GROUP BY c.conference_name ORDER BY number_of_conferences DESC NULLS LAST;
SELECT c.conference_name, COUNT(c.conference_name) AS number_of_times FROM conference c GROUP BY c.conference_name ORDER BY number_of_times DESC NULLS LAST;
SELECT c.year, COUNT(c.conference_id) AS number_of_conferences FROM conference c GROUP BY c.year ORDER BY c.year NULLS LAST;
SELECT c.year, COUNT(c.conference_id) AS number_of_conferences FROM conference c GROUP BY c.year ORDER BY c.year;
SELECT c.year FROM conference c GROUP BY c.year ORDER BY COUNT(c.conference_id) ASC LIMIT 1;
SELECT MIN(c.year) AS earliest_year FROM conference c;
SELECT c.location FROM conference c GROUP BY c.location HAVING COUNT(c.conference_id) >= 2;
SELECT c.location FROM conference c GROUP BY c.location HAVING COUNT(c.conference_id) >= 2;
SELECT i.institution_name, i.location, i.founded FROM institution i;
SELECT i.institution_name, i.location, i.founded FROM institution i;
SELECT COUNT(i.Institution_ID) FROM institution i WHERE i.Founded BETWEEN 1850 AND 1900;
SELECT COUNT(i.institution_id) FROM institution i WHERE i.founded BETWEEN 1850 AND 1900;
SELECT i.institution_name, i.location FROM institution i ORDER BY i.founded DESC LIMIT 1;
SELECT i.institution_name, i.location FROM institution i ORDER BY i.founded DESC LIMIT 1;
SELECT i.institution_name, COUNT(s.staff_id) AS total_staff FROM institution i JOIN staff s ON i.institution_id = s.institution_id WHERE i.founded > 1800 GROUP BY i.institution_name ORDER BY total_staff DESC NULLS LAST;
SELECT i.institution_id, COUNT(s.staff_id) AS number_of_staff, array_agg(s.name) AS staff_names FROM institution i JOIN staff s ON i.institution_id = s.institution_id WHERE i.founded > 1800 GROUP BY i.institution_id ORDER BY number_of_staff DESC NULLS LAST;
SELECT i.institution_name FROM institution i WHERE i.institution_id NOT IN (SELECT s.institution_id FROM staff s);
SELECT i.institution_name FROM institution i WHERE i.institution_id NOT IN (SELECT s.institution_id FROM staff s);
SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(s2.age) FROM staff s2);
SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(s2.age) FROM staff s2);
SELECT MAX(s.age) AS max_age, MIN(s.age) AS min_age FROM staff s WHERE s.nationality ILIKE '%United%States%'
SELECT MIN(s.age) AS min_age, MAX(s.age) AS max_age FROM staff s;
SELECT c.conference_name FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id JOIN staff s ON cp.staff_id = s.staff_id WHERE s.nationality ilike '%Canadian%' ORDER BY c.conference_name NULLS LAST;
SELECT DISTINCT c.conference_name FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id JOIN staff s ON cp.staff_id = s.staff_id WHERE s.nationality ILIKE '%Canadian%'
SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_id = cp1.staff_id JOIN conference_participation cp2 ON s.staff_id = cp2.staff_id WHERE cp1.role ilike '%speaker%' AND cp2.role ilike '%sponsor%';
SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_id = cp1.staff_id JOIN conference_participation cp2 ON s.staff_id = cp2.staff_id WHERE cp1.role ilike '%speaker%' AND cp2.role ilike '%sponsor%';
SELECT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_id = cp1.staff_id AND cp1.role ilike '%ACL%' JOIN conference_participation cp2 ON s.staff_id = cp2.staff_id AND cp2.role ilike '%Naccl%';
SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_id = cp1.staff_id JOIN conference_participation cp2 ON s.staff_id = cp2.staff_id WHERE cp1.conference_id IN (SELECT conference_id FROM conference WHERE conference_name ilike '%ACL%') AND cp2.conference_id IN (SELECT conference_id FROM conference WHERE conference_name ilike '%NACCL%');
SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year IN (2003, 2004);
SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year IN (2003, 2004) ORDER BY s.name NULLS LAST;
SELECT c.conference_name, c.year, COUNT(cp.staff_id) AS total_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name, c.year ORDER BY total_participants DESC NULLS LAST;
WITH total_participants AS (SELECT c.conference_id, COUNT(c.staff_id) AS num_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_id) SELECT c.conference_id, c.conference_name, c.year, tp.num_participants FROM conference c JOIN total_participants tp ON c.conference_id = tp.conference_id;
SELECT c.conference_name, COUNT(cp.staff_id) AS total_attendees FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name ORDER BY total_attendees DESC NULLS LAST LIMIT 2;
SELECT c.conference_name, COUNT(cp.staff_id) AS total_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name ORDER BY total_participants DESC NULLS LAST LIMIT 2;
SELECT s.name, s.nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_id = cp.staff_id AND cp.conference_id = 757071 WHERE cp.staff_id IS NULL;
SELECT s.name, s.nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_id = cp.staff_id AND cp.conference_id = 757071 WHERE cp.staff_id IS NULL;
SELECT i.institution_name, i.location FROM institution i LEFT JOIN (SELECT s.institution_id FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id WHERE cp.conference_id IN (SELECT conference_id FROM conference WHERE YEAR = 2004)) AS subquery ON i.institution_id = subquery.institution_id AND subquery.institution_id IS NULL;
SELECT i.institution_name, i.location FROM institution i LEFT JOIN conference_participation cp ON i.institution_id = cp.staff_id AND cp.year = 2004 WHERE cp.staff_id IS NULL;
SELECT ps.pilot_name FROM PilotSkills ps ORDER BY ps.age ASC LIMIT 1;
SELECT ps.pilot_name FROM PilotSkills ps ORDER BY ps.age ASC LIMIT 1;
SELECT p.pilot_name FROM PilotSkills p WHERE p.age < (SELECT AVG(p.age) FROM PilotSkills) ORDER BY p.age NULLS LAST;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age < (SELECT AVG(ps2.age) FROM PilotSkills ps2) ORDER BY ps.age ASC;
SELECT * FROM PilotSkills p WHERE p.age < 30;
SELECT * FROM PilotSkills p WHERE p.age < 30;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.age < 35;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age < 35 AND ps.plane_name = 'Piper Cub';
SELECT h.location FROM Hangar h WHERE h.plane_name = 'F-14 Fighter';
SELECT h.location FROM Hangar h WHERE h.plane_name = 'F-14 Fighter';
SELECT h.location, COUNT(*) AS number_of_planes FROM Hangar h GROUP BY h.location
SELECT COUNT(DISTINCT h.location) FROM Hangar h;
SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name = 'Jones' AND ps.age = 32;
SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name ilike '%Jones%' AND ps.age = 32;
SELECT COUNT(*) FROM PilotSkills WHERE age > 40;
SELECT COUNT(*) FROM PilotSkills p WHERE p.age > 40;
SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age < 35 AND ps.plane_name = 'B-52 Bomber';
SELECT COUNT(*) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age < 35 AND h.location ILIKE '%B-52%Bomber%';
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1;
SELECT h.plane_name FROM Hangar h GROUP BY h.plane_name ORDER BY COUNT(h.plane_name) DESC LIMIT 1;
SELECT ps.plane_name FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY COUNT(ps.plane_name) DESC LIMIT 1;
SELECT h.plane_name FROM Hangar h GROUP BY h.plane_name ORDER BY COUNT(h.plane_name) ASC LIMIT 1;
SELECT ps.plane_name FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY COUNT(ps.plane_name) ASC LIMIT 1;
SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Chicago%';
SELECT COUNT(DISTINCT ps.pilot_name) AS pilot_count FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Chicago%';
SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name ilike '%Smith%' AND ps.age = 41;
SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name ilike '%Smith%' AND ps.age = 41;
SELECT COUNT(DISTINCT ps.plane_name) AS total_distinct_planes FROM PilotSkills ps;
SELECT COUNT(DISTINCT ps.plane_name) AS total_unique_planes FROM PilotSkills ps;
SELECT COUNT(DISTINCT ps.plane_name) AS number_of_planes FROM PilotSkills ps WHERE ps.pilot_name ILIKE '%Smith%';
SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.pilot_name ILIKE '%Smith%'
SELECT COUNT(DISTINCT ps.plane_name) AS number_of_planes FROM PilotSkills ps WHERE ps.age > 40;
SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.age > 40;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age BETWEEN 30 AND 40 ORDER BY ps.age ASC;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age BETWEEN 30 AND 40 ORDER BY ps.age ASC;
SELECT p.pilot_name FROM PilotSkills p ORDER BY p.age DESC;
SELECT p.pilot_name FROM PilotSkills p ORDER BY p.age DESC;
SELECT h.location, h.plane_name FROM Hangar h ORDER BY h.plane_name NULLS LAST;
SELECT h.plane_name, h.location FROM Hangar h ORDER BY h.plane_name NULLS LAST;
SELECT DISTINCT ps.plane_name FROM PilotSkills ps ORDER BY ps.plane_name ASC;
SELECT DISTINCT ps.plane_name FROM PilotSkills ps ORDER BY ps.plane_name ASC;
SELECT COUNT(*) FROM PilotSkills p WHERE (p.age > 40 OR p.age < 30);
SELECT COUNT(*) FROM PilotSkills p WHERE p.age > 40 OR p.age < 30;
SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE (ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30);
SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE (ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30);
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.pilot_name NOT IN (SELECT h.pilot_name FROM Hangar h WHERE h.plane_name = 'B-52 Bomber');
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.pilot_name NOT IN (SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'B-52 Bomber');
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'B-52 Bomber');
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT ps.plane_name) = 2;
SELECT AVG(ps.age) AS average_age, MIN(ps.age) AS minimum_age FROM PilotSkills ps;
SELECT AVG(ps.age) AS average_age, MIN(ps.age) AS minimum_age FROM PilotSkills ps;
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' AND ps.plane_name IN (SELECT plane_name FROM Hangar WHERE location ilike '%Boston%')
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' OR h.location ilike '%Boston%';
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'F-14 Fighter');
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'F-14 Fighter');
SELECT ps.plane_name, AVG(ps.age) AS average_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY average_age DESC NULLS LAST;
SELECT ps.plane_name, AVG(ps.age) AS average_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY average_age DESC NULLS LAST;
SELECT h.location, COUNT(*) AS number_of_planes FROM Hangar h GROUP BY h.location;
SELECT ps.plane_name, COUNT(*) AS COUNT FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY COUNT DESC;
SELECT p.plane_name, MIN(p.age) AS min_age FROM PilotSkills p GROUP BY p.plane_name ORDER BY p.plane_name NULLS LAST;
SELECT p.plane_name, MIN(p.age) AS min_age FROM PilotSkills p GROUP BY p.plane_name ORDER BY p.plane_name NULLS LAST;
SELECT ps.plane_name, MIN(ps.age) AS min_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY min_age ASC;
SELECT p.plane_name, ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name JOIN Plane p ON h.plane_name = p.plane_name ORDER BY p.plane_name NULLS LAST;
SELECT ps.pilot_name, MAX(ps.age) AS max_age FROM PilotSkills ps GROUP BY ps.pilot_name ORDER BY max_age DESC NULLS LAST;
SELECT p.pilot_name, MAX(p.age) AS max_age FROM PilotSkills p GROUP BY p.pilot_name ORDER BY max_age DESC;
SELECT h.location AS city, COUNT(DISTINCT ps.pilot_name) AS total_pilots, AVG(ps.age) AS average_age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY h.location ORDER BY total_pilots DESC NULLS LAST;
SELECT h.location, COUNT(DISTINCT p.pilot_name) AS number_of_pilots, AVG(p.age) AS average_age FROM Hangar h JOIN PlaneSkills p ON h.plane_name = p.plane_name GROUP BY h.location ORDER BY number_of_pilots DESC NULLS LAST;
SELECT h.plane_name, COUNT(ps.pilot_name) AS number_of_pilots FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY h.plane_name HAVING AVG(ps.age) < 35 ORDER BY number_of_pilots DESC NULLS LAST;
SELECT ps.plane_name, COUNT(ps.pilot_name) AS number_of_pilots FROM PilotSkills ps GROUP BY ps.plane_name HAVING AVG(ps.age) < 35 ORDER BY number_of_pilots DESC NULLS LAST;
SELECT h.location FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name ORDER BY ps.age ASC LIMIT 1;
SELECT h.location FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name ORDER BY ps.age ASC LIMIT 1;
SELECT ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' ORDER BY ps.pilot_name NULLS LAST;
SELECT ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' ORDER BY ps.pilot_name NULLS LAST;
SELECT p.pilot_name FROM PilotSkills p WHERE p.age > (SELECT MAX(ps.age) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.plane_name = 'Piper Cub') ORDER BY p.pilot_name ASC;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age > (SELECT MAX(ps2.age) FROM PilotSkills ps2 JOIN Hangar h ON ps2.plane_name = h.plane_name WHERE h.plane_name = 'Piper Cub') ORDER BY ps.pilot_name ASC;
SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age < (SELECT MIN(ps2.age) FROM PilotSkills ps2 WHERE ps2.plane_name = 'F-14 Fighter');
SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age < (SELECT MIN(ps2.age) FROM PilotSkills ps2 JOIN Hangar h ON ps2.plane_name = h.plane_name WHERE h.plane_name = 'F-14 Fighter');
SELECT DISTINCT ps.plane_name FROM PilotSkills ps WHERE ps.plane_name ILIKE '%Bomber%';
SELECT DISTINCT ps.plane_name FROM PilotSkills ps WHERE ps.plane_name ILIKE '%Bomber%';
SELECT COUNT(*) FROM PilotSkills ps1 JOIN PilotSkills ps2 ON ps1.age > ps2.age AND ps2.plane_name = 'Piper Cub';
SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > (SELECT MIN(ps2.age) FROM PilotSkills ps2 JOIN Hangar h ON ps2.plane_name = h.plane_name WHERE h.plane_name = 'Piper Cub');
SELECT d.name FROM district d ORDER BY d.area_km DESC NULLS LAST LIMIT 1;
SELECT d.name, d.area_km, d.government_website FROM district d ORDER BY d.population ASC LIMIT 1;
SELECT d.name, d.population FROM district d WHERE d.area_km > (SELECT AVG(d2.area_km) FROM district d2);
SELECT d.name, MAX(d.area_km) AS max_area, AVG(d.area_km) AS avg_area FROM district d GROUP BY d.name ORDER BY max_area DESC NULLS LAST;
SELECT SUM(d.Population) AS total_population FROM (SELECT d.Population FROM district d ORDER BY d.Area_km DESC NULLS LAST LIMIT 3) AS subquery;
SELECT d.district_id, d.name, d.government_website FROM district d ORDER BY d.population DESC NULLS LAST;
SELECT d.name FROM district d WHERE d.government_website like '%.gov';
SELECT d.district_id, d.name FROM district d WHERE (d.population > 4000 OR d.area_km > 3000);
SELECT s.name AS spokesman_name, s.speach_title FROM spokesman s;
SELECT AVG(s.points), AVG(s.age) FROM spokesman s WHERE s.rank_position = 1;
SELECT s.name, s.points FROM spokesman s WHERE s.age < 40 ORDER BY s.points DESC NULLS LAST;
SELECT s.name FROM spokesman s ORDER BY s.age ASC NULLS LAST LIMIT 1;
SELECT s.name FROM spokesman s WHERE s.points < (SELECT AVG(s2.points) FROM spokesman s2);
SELECT d.name FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name ORDER BY COUNT(sd.spokesman_id) DESC LIMIT 1;
SELECT s.name FROM spokesman s JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id WHERE sd.start_year < '2004' ORDER BY s.name NULLS LAST;
SELECT d.name AS district_name, COUNT(s.spokesman_id) AS total_spokesmen FROM district d JOIN spokesman_district s ON d.district_id = s.district_id GROUP BY d.name ORDER BY total_spokesmen DESC NULLS LAST;
SELECT d.name FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE s.rank_position IN (1, 2) GROUP BY d.name HAVING COUNT(DISTINCT s.rank_position) = 2;
SELECT d.name FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name HAVING COUNT(sd.spokesman_id) > 1;
SELECT COUNT(DISTINCT d.district_id) AS num_districts FROM district d LEFT JOIN spokesman_district sd ON d.district_id = sd.district_id WHERE sd.district_id IS NULL;
SELECT s.name FROM spokesman s LEFT JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id WHERE sd.spokesman_id IS NULL;
SELECT d.name, SUM(d.population) AS total_population, AVG(d.population) AS average_population FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name ORDER BY total_population DESC NULLS LAST;
SELECT s.title FROM Sculptures s WHERE s.year = EXTRACT(YEAR FROM CURRENT_DATE) ORDER BY s.title NULLS LAST LIMIT 1;
SELECT s.title FROM Sculptures s ORDER BY s.year DESC LIMIT 1;
SELECT p.title, p.location FROM Paintings p ORDER BY p.year ASC LIMIT 1;
SELECT p.title, p.location FROM Paintings p ORDER BY p.year ASC LIMIT 1;
SELECT s.title FROM Sculptures s WHERE s.location = 'gallery 226';
SELECT s.title FROM Sculptures s WHERE s.location = 'gallery 226';
SELECT p.title, p.location FROM Paintings p;
SELECT p.title, p.location FROM Paintings p;
SELECT s.title, s.location FROM Sculptures s;
SELECT s.title, s.location FROM Sculptures s;
SELECT p.medium FROM Paintings p WHERE p.paintingID = 80;
SELECT p.medium FROM Paintings p WHERE p.paintingID = 80;
SELECT a.fname, a.lname FROM Artists a WHERE a.birthYear > 1850;
SELECT a."first name", a."last name" FROM artists a WHERE a.birthyear > 1850;
SELECT s.title, s.year FROM Sculptures s WHERE s.location != 'gallery 226';
SELECT s.title, TO_CHAR(TO_DATE(s.year::TEXT, 'YYYY'), 'YYYY') AS year_created FROM Sculptures s WHERE s.location NOT ILIKE '%gallery%226%' ORDER BY year_created NULLS LAST;
SELECT DISTINCT a."first name", a."last name" FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.year < 1900;
SELECT DISTINCT a."first name", a."last name" FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.year < 1900;
SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920;
SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920;
SELECT a."first name", a."last name" FROM artists a ORDER BY (a.deathyear - a.birthyear) DESC LIMIT 1;
SELECT a."first name", a."last name" FROM artists a ORDER BY (a.deathyear - a.birthyear) DESC LIMIT 1;
SELECT a.age FROM (SELECT artistID, EXTRACT(YEAR FROM CURRENT_DATE) - MIN(birthYear) AS age FROM artists GROUP BY artistID) AS a ORDER BY age ASC LIMIT 1;
SELECT a.fname, a.lname, (a.deathYear - a.birthYear) AS age FROM Artists a ORDER BY age ASC LIMIT 1;
SELECT a."fname", (a.deathyear - a.birthyear) AS age FROM artists a ORDER BY age DESC LIMIT 1;
SELECT a."fname", EXTRACT(YEAR FROM CURRENT_DATE) - a.birthYear AS age FROM Artists a ORDER BY age DESC LIMIT 1;
SELECT COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.location = 'gallery 240';
SELECT COUNT(p.paintingID) AS total_paintings FROM Paintings p WHERE p.location = 'gallery 240';
SELECT COUNT(p.paintingID) AS number_of_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a."deathYear" - a."birthYear" = (SELECT MAX(a2."deathYear" - a2."birthYear") FROM Artists a2);
SELECT a."lname", COUNT(p.paintingID) AS number_of_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a."lname" ORDER BY number_of_paintings DESC LIMIT 1;
SELECT p.title, p.year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a."fname" ilike '%Mary%';
SELECT p.title, p.year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a."fname" ilike '%Mary%';
SELECT p.width_mm FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850;
SELECT AVG(p.width_mm) FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850;
SELECT p.location, p.medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a."fname" ilike '%Pablo%';
SELECT p.location, p.medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a."fname" ilike '%Pablo%';
SELECT a."first name", a."last name" FROM artists a JOIN paintings p ON a.artistid = p.painterid JOIN sculptures s ON a.artistid = s.sculptorid;
SELECT a."first name", a."last name" FROM artists a JOIN paintings p ON a.artistid = p.painterid JOIN sculptures s ON a.artistid = s.sculptorid;
SELECT DISTINCT a."first name", a."last name" FROM artists a JOIN paintings p1 ON a.artistid = p1.painterid JOIN paintings p2 ON a.artistid = p2.painterid WHERE p1.medium = 'oil' AND p2.medium = 'lithographic';
SELECT a."first name", a."last name" FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' AND p.mediumon = 'lithography';
SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884 AND p.mediumOn = 'canvas';
SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884;
SELECT DISTINCT a."fname" FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'gallery 241';
SELECT DISTINCT a."fname" FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'gallery 241';
SELECT p.medium, COUNT(p.paintingID) AS number_of_works FROM Paintings p GROUP BY p.medium ORDER BY number_of_works DESC NULLS LAST;
SELECT p.medium, COUNT(p.paintingID) AS number_of_works FROM Paintings p GROUP BY p.medium ORDER BY number_of_works DESC NULLS LAST;
SELECT p.medium, AVG(p.height_mm) AS average_height FROM Paintings p GROUP BY p.medium ORDER BY average_height DESC NULLS LAST;
SELECT p.medium, AVG(p.height_mm) AS average_height FROM Paintings p GROUP BY p.medium ORDER BY average_height DESC NULLS LAST;
SELECT p.location, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY p.location ORDER BY number_of_paintings DESC NULLS LAST;
SELECT p.location, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY p.location ORDER BY number_of_paintings DESC NULLS LAST;
SELECT p.title FROM Paintings p WHERE p.year > 1910 AND p.medium = 'oil';
SELECT p.title FROM Paintings p WHERE p.year > 1910 AND p.medium = 'oil';
SELECT DISTINCT p.painterID FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 240';
SELECT DISTINCT p.painterID FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 240';
SELECT DISTINCT p.title FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2);
SELECT p.title FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2);
SELECT DISTINCT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p.year) FROM Paintings WHERE p.location = 'gallery 240');
SELECT DISTINCT p.paintingID FROM Paintings p JOIN Paintings p2 ON p.year < p2.year AND p2.location = 'gallery 240';
SELECT p.paintingID FROM Paintings p ORDER BY p.year ASC LIMIT 1;
SELECT MIN(p.paintingID) AS min_painting_id FROM Paintings p;
SELECT a."first name", a."last name" FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.title ilike '%female%'
SELECT a."first name", a."last name" FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.title ilike '%female%'
SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC;
SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC;
SELECT p.title FROM Paintings p ORDER BY LENGTH(p.title) DESC NULLS LAST;
SELECT p.title FROM Paintings p ORDER BY p.height_mm ASC NULLS LAST;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON p.year = s.year WHERE p.year BETWEEN 1900 AND 1950;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON p.year = s.year WHERE p.year BETWEEN 1900 AND 1950;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Artists ar JOIN Paintings p ON ar.artistID = p.painterID JOIN Sculptures s ON ar.artistID = s.sculptorID WHERE ar.artistID = 222;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Artists ar JOIN Paintings p ON ar.artistID = p.painterID JOIN Sculptures s ON ar.artistID = s.sculptorID WHERE ar.artistID = 222;
SELECT a.artistID FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year < 1900 GROUP BY a.artistID ORDER BY COUNT(p.paintingID) DESC NULLS LAST LIMIT 1;
SELECT a.artistID FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year < 1900 GROUP BY a.artistID ORDER BY COUNT(p.paintingID) DESC LIMIT 1;
SELECT a."fname", COUNT(s.sculptureID) AS num_sculptures FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID GROUP BY a."fname" ORDER BY num_sculptures DESC LIMIT 1;
SELECT a."fname", COUNT(s.sculptureID) AS num_works FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID GROUP BY a."fname" ORDER BY num_works DESC LIMIT 1;
SELECT p.title FROM Paintings p WHERE (p.width_mm < 600 OR p.height_mm > 800);
SELECT p.title FROM Paintings p WHERE (p.width_mm < 600 OR p.height_mm > 800);
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;
SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.height_mm < 2000;
SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.width_mm < 2000;
SELECT p.location FROM Paintings p WHERE p.medium = 'panel' AND p.mediumOn = 'canvas';
SELECT DISTINCT p.location FROM Paintings p WHERE p.medium = 'panel' OR p.medium = 'canvas';
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.year > 1930;
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;
SELECT AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 241';
SELECT AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 241';
SELECT MAX(p.height_mm) AS max_height, MAX(p.paintingID) AS max_id FROM Paintings p WHERE p.year < 1900;
SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.year < 1900 ORDER BY p.height_mm DESC NULLS LAST LIMIT 1;
SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year ORDER BY p.year NULLS LAST;
SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year ORDER BY p.year NULLS LAST;
SELECT AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width, a."lname", a."fname" FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY a."lname", a."fname" ORDER BY a."lname" ASC, a."fname" ASC;
SELECT AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width, a."lname", a."fname" FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY a."lname", a."fname" ORDER BY a."lname" ASC, a."fname" ASC;
WITH artwork AS (SELECT p.painterID FROM Paintings p GROUP BY p.painterID HAVING COUNT(p.paintingID) >= 2) SELECT a."first name", COUNT(aw.painterID) AS num_artworks FROM Artists a JOIN artwork aw ON a.artistID = aw.painterID GROUP BY a."first name";
WITH artwork_nums AS (SELECT p.painterID, COUNT(p.paintingID) AS artwork_num FROM Paintings p GROUP BY p.painterID) SELECT a."first name", an.artwork_num FROM Artists a JOIN artwork_nums an ON a.artistID = an.painterID WHERE an.artwork_num >= 2;
SELECT a.deathYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID, a.deathYear HAVING COUNT(p.paintingID) <= 3;
SELECT a.lname, a.fname, MIN(a.deathYear) AS earliest_year_of_death FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.lname, a.fname HAVING COUNT(p.paintingID) < 4 ORDER BY earliest_year_of_death NULLS LAST;
SELECT a."death year" FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid GROUP BY a.artistid, a."death year" ORDER BY COUNT(s.sculptureid) ASC LIMIT 1;
SELECT a.lname, a.fname, MIN(a.deathYear) AS earliest_death_year FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.lname, a.fname ORDER BY earliest_death_year NULLS LAST LIMIT 1;
SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240');
SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.width_mm = (SELECT MAX(width_mm) FROM Paintings);
SELECT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p.year) FROM Paintings WHERE gallery = 240);
SELECT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p.year) FROM Paintings WHERE location = 'gallery 240');
SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.year > 1900);
SELECT p.paintingID FROM Paintings p WHERE p.year > 1900 AND p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.year > 1900);
SELECT a."lname", a."fname", COUNT(p.paintingID) AS number_of_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.medium = 'oil' GROUP BY a."lname", a."fname" ORDER BY number_of_paintings DESC NULLS LAST LIMIT 3;
SELECT a."lname", a."fname", COUNT(p.paintingID) AS number_of_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.medium = 'oil' GROUP BY a."lname", a."fname" ORDER BY number_of_paintings DESC;
SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE p.medium = 'oil' ORDER BY p.year NULLS LAST;
SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE p.medium = 'oil' ORDER BY p.year ASC;
SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title NULLS LAST;
SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.year NULLS LAST, p.location NULLS LAST, p.title NULLS LAST;
SELECT a."first name", a."last name" FROM artists a LEFT JOIN paintings p ON a.artistid = p.painterid AND p.painterid IS NULL LEFT JOIN sculptures s ON a.artistid = s.sculptorid AND s.sculptorid IS NULL WHERE p.painterid IS NOT NULL;
SELECT a."first name", a."last name" FROM artists a LEFT JOIN Sculptures s ON a.artistid = s.sculptorid LEFT JOIN Paintings p ON a.artistid = p.painterid WHERE s.sculptorid IS NULL AND p.painterid IS NOT NULL;
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.mediumOn IS NULL;
SELECT p.title FROM Paintings p WHERE p.year < 1885 AND p.mediumOn IS NOT NULL;
SELECT COUNT(r.Road) AS number_of_races FROM race r;
SELECT COUNT(r.Road) AS total_races FROM race r;
SELECT d.Driver_name, r.Winning_team FROM driver d JOIN race r ON d.Driver_id = r.Driver_id ORDER BY r.Winning_team ASC;
SELECT d.Driver_name, r.Winning_team FROM driver d JOIN race r ON d.Driver_id = r.Driver_id ORDER BY r.Winning_team ASC;
SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position != 'Junior Strous' AND r.Winning_driver = d.Driver_Name;
SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Winning_driver = d.Driver_Name AND r.Pole_Position != 'Junior Strous' ORDER BY d.Driver_Name NULLS LAST;
SELECT d.constructor FROM driver d ORDER BY d.age ASC;
SELECT d.constructor FROM driver d ORDER BY d.age ASC;
SELECT d.entrant FROM driver d WHERE d.age >= 20 ORDER BY d.entrant NULLS LAST;
SELECT d.entrant FROM driver d WHERE d.age >= 20 ORDER BY d.entrant NULLS LAST;
SELECT MAX(d.age) AS max_age, MIN(d.age) AS min_age FROM driver d;
SELECT MAX(d.age) AS max_age, MIN(d.age) AS min_age FROM driver d;
SELECT d.engine FROM driver d WHERE d.age > 30 OR d.age < 20 GROUP BY d.engine ORDER BY COUNT(d.engine) DESC NULLS LAST;
SELECT d.engine, COUNT(d.engine) FROM driver d WHERE (d.age > 30 OR d.age < 20) GROUP BY d.engine ORDER BY COUNT(d.engine) DESC NULLS LAST;
SELECT d.driver_name FROM driver d ORDER BY d.driver_name DESC;
SELECT d.driver_name FROM driver d ORDER BY d.driver_name DESC;
SELECT d.driver_name, r.race_name FROM driver d JOIN race r ON d.driver_id = r.driver_id;
SELECT d.driver_name, r.race_name FROM driver d JOIN race r ON d.driver_id = r.driver_id;
SELECT d.Driver_Name, COUNT(r.Road) AS race_count FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name ORDER BY race_count DESC NULLS LAST;
SELECT d.Driver_Name, COUNT(r.Road) AS race_count FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name ORDER BY race_count DESC NULLS LAST;
SELECT d.age FROM driver d JOIN race r ON d.driver_id = r.driver_id GROUP BY d.age ORDER BY COUNT(r.road) DESC LIMIT 1;
SELECT d.age FROM driver d JOIN (SELECT r.Driver_ID, COUNT(r.Road) AS race_count FROM race r GROUP BY r.Driver_ID ORDER BY race_count DESC LIMIT 1) AS mr ON d.Driver_ID = mr.Driver_ID;
SELECT d.Driver_Name, d.Age FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name, d.Age HAVING COUNT(r.Road) >= 2;
SELECT d.Driver_Name, d.Age FROM driver d JOIN race r1 ON d.Driver_ID = r1.Driver_ID JOIN race r2 ON d.Driver_ID = r2.Driver_ID WHERE r1.Road != r2.Road GROUP BY d.Driver_Name, d.Age HAVING COUNT(r1.Road) >= 2;
SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26;
SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26;
SELECT d.Driver_Name FROM driver d WHERE d.Constructor NOT ILIKE '%Bugatti%';
SELECT d.Driver_Name FROM driver d WHERE d.Constructor NOT ILIKE '%Bugatti%';
SELECT d.constructor, COUNT(d.driver_id) AS total_drivers FROM driver d GROUP BY d.constructor ORDER BY total_drivers DESC NULLS LAST;
SELECT d.constructor, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.constructor ORDER BY number_of_drivers DESC NULLS LAST;
SELECT d.engine FROM driver d GROUP BY d.engine ORDER BY COUNT(d.engine) DESC LIMIT 1;
SELECT d.engine FROM driver d GROUP BY d.engine ORDER BY COUNT(d.engine) DESC LIMIT 1;
SELECT d.engine FROM driver d GROUP BY d.engine HAVING COUNT(d.driver_id) >= 2;
SELECT d.engine FROM driver d GROUP BY d.engine HAVING COUNT(d.driver_id) >= 2;
SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r);
SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r);
SELECT d.constructor FROM driver d WHERE d.age < 20 AND d.age > 30 GROUP BY d.constructor;
SELECT d.constructor FROM driver d WHERE d.age < 20 AND d.age > 30 GROUP BY d.constructor HAVING COUNT(d.driver_id) >= 2;
SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Road) > 1 ORDER BY COUNT(r.Road) DESC NULLS LAST;
SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Road) > 1;
SELECT d.driver_name FROM driver d JOIN race r1 ON d.driver_id = r1.driver_id AND r1.pole_position ilike '%James%Hinchcliffe%' JOIN race r2 ON d.driver_id = r2.driver_id AND r2.pole_position ilike '%Carl%Skerlong%' WHERE d.driver_name NOT IN ('James Hinchcliffe', 'Carl Skerlong');
SELECT d.driver_name FROM driver d JOIN race r1 ON d.driver_id = r1.driver_id AND r1.pole_position ilike '%James%Hinchcliffe%' JOIN race r2 ON d.driver_id = r2.driver_id AND r2.pole_position ilike '%Carl%Skerlong%';
SELECT d.Driver_Name FROM driver d WHERE d.Driver_Name NOT IN (SELECT r.Pole_Position FROM race r WHERE r.Pole_Position ilike '%James%Hinchcliffe%');
SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position not ilike '%James%Hinchcliffe%' ORDER BY d.Driver_Name NULLS LAST;
SELECT COUNT(DISTINCT l.id) AS number_of_languages FROM languages l;
SELECT COUNT(DISTINCT l.id) AS language_count FROM "languages" l;
SELECT l.name FROM languages l ORDER BY l.name ASC;
SELECT l.name FROM languages l ORDER BY l.name ASC;
SELECT l.name FROM languages l WHERE l.name ilike '%ish%' ORDER BY l.name NULLS LAST;
SELECT l.name FROM languages l WHERE l.name ilike '%ish%' ORDER BY l.name NULLS LAST;
SELECT c.name FROM countries c ORDER BY c.overall_score DESC;
SELECT c.name FROM countries c ORDER BY c.overall_score DESC;
SELECT AVG(c.justice_score) AS average_justice_score FROM countries c;
SELECT AVG(c.justice_score) AS average_justice_score FROM countries c;
SELECT MIN(c.health_score) AS min_health_score, MAX(c.health_score) AS max_health_score FROM countries c WHERE c.name != 'Norway';
SELECT MIN(c.health_score) AS min_health_score, MAX(c.health_score) AS max_health_score FROM countries c WHERE c.name != 'Norway';
SELECT COUNT(DISTINCT l.id) AS number_of_languages FROM languages l JOIN official_languages ol ON l.id = ol.language_id;
SELECT COUNT(DISTINCT l.id) AS number_of_languages FROM languages l JOIN official_languages ol ON l.id = ol.language_id;
SELECT c.name FROM countries c ORDER BY c.education_score DESC;
SELECT c.name FROM countries c ORDER BY c.education_score DESC;
SELECT c.name FROM countries c ORDER BY c.politics_score DESC NULLS LAST LIMIT 1;
SELECT c.name FROM countries c ORDER BY c.politics_score DESC NULLS LAST LIMIT 1;
WITH country_languages AS (SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id) SELECT cl.country_name, cl.language_name FROM country_languages cl;
WITH country_languages AS (SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id) SELECT cl.country_name, cl.language_name FROM country_languages cl;
SELECT l.name AS language_name, COUNT(DISTINCT o.country_id) AS country_count FROM "languages" l JOIN "official_languages" o ON l.id = o.language_id GROUP BY l.name ORDER BY country_count DESC NULLS LAST;
SELECT l.name AS language_name, COUNT(DISTINCT o.country_id) AS country_count FROM "languages" l JOIN "official_languages" o ON l.id = o.language_id GROUP BY l.name ORDER BY country_count DESC NULLS LAST;
SELECT l.name, COUNT(o.country_id) AS country_count FROM "languages" l JOIN "official_languages" o ON l.id = o.language_id GROUP BY l.name ORDER BY country_count DESC LIMIT 1;
SELECT l.name FROM languages l JOIN (SELECT ol.language_id, COUNT(*) AS frequency FROM official_languages ol GROUP BY ol.language_id ORDER BY frequency DESC LIMIT 1) AS ml ON l.id = ml.language_id;
SELECT l.name FROM "languages" l JOIN (SELECT ol.language_id FROM "official_languages" ol GROUP BY ol.language_id HAVING COUNT(DISTINCT ol.country_id) >= 2) AS subquery ON l.id = subquery.language_id;
SELECT l.name FROM languages l JOIN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2) AS subquery ON l.id = subquery.language_id;
SELECT AVG(c.overall_score) AS average_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id WHERE l.name = 'English';
SELECT AVG(c.overall_score) AS average_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IN (SELECT id FROM languages WHERE name ilike '%English%');
SELECT l.name FROM languages l JOIN (SELECT language_id, COUNT(*) AS frequency FROM official_languages GROUP BY language_id ORDER BY frequency DESC LIMIT 3) AS subquery ON l.id = subquery.language_id;
SELECT l.name FROM languages l JOIN (SELECT language_id, COUNT(*) AS country_count FROM official_languages GROUP BY language_id ORDER BY country_count DESC LIMIT 3) AS subquery ON l.id = subquery.language_id;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY c.overall_score DESC;
SELECT l.name AS language_name, AVG(c.overall_score) AS average_score FROM "languages" l JOIN "official_languages" o ON l.id = o.language_id JOIN "countries" c ON o.country_id = c.id GROUP BY l.name ORDER BY average_score DESC;
SELECT c.name FROM countries c JOIN (SELECT ol.country_id, COUNT(ol.language_id) AS language_count FROM official_languages ol GROUP BY ol.country_id ORDER BY language_count DESC LIMIT 1) AS mc ON c.id = mc.country_id;
SELECT c.name FROM countries c JOIN (SELECT language_id, COUNT(*) AS language_count FROM official_languages GROUP BY language_id) lc ON c.id = lc.language_id ORDER BY lc.language_count DESC LIMIT 1;
SELECT l.name FROM "languages" l LEFT JOIN "official_languages" o ON l.id = o.language_id WHERE o.language_id IS NULL;
SELECT l.name FROM languages l WHERE l.id NOT IN (SELECT o.language_id FROM official_languages o);
SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT o.country_id FROM official_languages o);
SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT o.country_id FROM official_languages o);
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE (c.overall_score > 95 AND c.overall_score < 100) OR (c.overall_score < 90 AND c.overall_score >= 0) GROUP BY l.name;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95 OR c.overall_score < 90 ORDER BY l.name NULLS LAST;
SELECT DISTINCT a.country, a.town_city FROM Addresses a;
SELECT a.country, a.town_city FROM Addresses a;
SELECT p.property_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id;
SELECT p.property_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id;
SELECT f.feature_description FROM Features f WHERE f.feature_name = 'rooftop';
SELECT f.feature_description FROM Features f WHERE f.feature_name = 'rooftop';
SELECT f.feature_name, f.feature_description FROM Features f JOIN (SELECT pf.feature_id, COUNT(*) AS feature_count FROM Property_Features pf GROUP BY pf.feature_id ORDER BY feature_count DESC LIMIT 1) AS mf ON f.feature_id = mf.feature_id;
SELECT f.feature_name, f.feature_description FROM Features f JOIN Property_Features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_name, f.feature_description ORDER BY COUNT(pf.feature_id) DESC LIMIT 1;
SELECT MIN(p.room_count) AS min_rooms FROM Properties p;
SELECT MIN(p.room_count) AS min_room_count FROM Properties p;
SELECT COUNT(*) FROM Properties p WHERE (p.parking_lots = '1' OR p.garage_yn = 'Y')
SELECT COUNT(*) FROM Properties p WHERE (p.parking_lots = '1' OR p.garage_yn = 'Y')
SELECT u.age_category_code FROM Users u WHERE u.other_user_details ilike '%Mother%'
SELECT DISTINCT u.age_category_code FROM Users u WHERE u.other_user_details ilike '%Mother%';
SELECT u.first_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.first_name ORDER BY COUNT(p.property_id) DESC LIMIT 1;
SELECT u.first_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.first_name ORDER BY COUNT(p.property_id) DESC LIMIT 1;
SELECT AVG(cast(p.room_count AS FLOAT)) FROM Properties p WHERE p.garage_yn = 'Y';
SELECT AVG(CAST(p.room_count AS FLOAT)) FROM Properties p JOIN Property_Features f ON p.property_id = f.property_id WHERE f.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'garden');
SELECT DISTINCT p.property_address_id AS address_id, a.town_city FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id WHERE EXISTS (SELECT 1 FROM Property_Features f WHERE f.property_id = p.property_id AND f.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool'));
SELECT DISTINCT a.town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features f ON p.property_id = f.property_id WHERE f.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool')
SELECT p.property_id, p.vendor_requested_price FROM Properties p ORDER BY p.vendor_requested_price ASC LIMIT 1;
SELECT p.property_id, p.vendor_requested_price FROM Properties p ORDER BY p.vendor_requested_price ASC LIMIT 1;
SELECT AVG(cast(p.room_count AS FLOAT)) FROM Properties p;
SELECT AVG(cast(p.room_count AS FLOAT)) AS average_rooms FROM Properties p;
SELECT COUNT(DISTINCT r.room_size) AS number_of_room_sizes FROM Rooms r;
SELECT COUNT(DISTINCT r.room_size) AS number_of_different_room_sizes FROM Rooms r;
SELECT u.user_id, s.search_string FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id, s.search_string HAVING COUNT(s.search_seq) >= 2;
SELECT u.user_id, s.search_seq FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id, s.search_seq HAVING COUNT(s.search_id) >= 2 ORDER BY u.user_id, s.search_seq NULLS LAST;
SELECT u.user_id, MAX(us.search_datetime) AS last_search_time FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id;
SELECT MAX(u.search_datetime) AS latest_search_time FROM User_Searches u;
SELECT u.user_id, s.search_string, row_number() OVER(PARTITION BY u.user_id ORDER BY s.search_string DESC) AS recent_search_rank FROM Users u JOIN User_Searches s ON u.user_id = s.user_id;
SELECT u.user_id, s.search_string, s.search_datetime FROM Users u JOIN User_Searches s ON u.user_id = s.user_id ORDER BY s.search_string DESC;
SELECT DISTINCT p.zip_postcode FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE (SELECT COUNT(*) FROM Properties pr WHERE pr.owner_user_id = u.user_id) > 2;
SELECT DISTINCT p.zip_postcode FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE (SELECT COUNT(*) FROM Properties pr WHERE pr.owner_user_id = u.user_id) <= 2
SELECT u.user_category_code, u.user_id FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_category_code, u.user_id HAVING COUNT(s.search_seq) = 1;
SELECT u.user_id, u.age_category_code FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id, u.age_category_code HAVING COUNT(s.search_seq) = 1;
SELECT u.age_category_code FROM Users u JOIN User_Searches s ON u.user_id = s.user_id ORDER BY s.search_seq ASC LIMIT 1;
SELECT u.age_category_code FROM Users u JOIN User_Searches s ON u.user_id = s.user_id ORDER BY s.search_datetime ASC LIMIT 1;
SELECT u.login_name, u.first_name FROM Users u WHERE u.age_category_code = 'SENIOR' ORDER BY u.first_name ASC;
SELECT u.login_name FROM Users u WHERE u.age_category_code = 'Senior Citizen' ORDER BY u.first_name ASC;
SELECT SUM(u.search_count) AS total_searches FROM (SELECT u.user_id, COUNT(*) AS search_count FROM Users u WHERE u.is_buyer = 'Y' GROUP BY u.user_id) AS u;
SELECT COUNT(*) FROM User_Searches u WHERE u.is_buyer = 'Y';
SELECT u.date_registered FROM Users u WHERE u.login_name = 'ratione';
SELECT u.date_registered FROM Users u WHERE u.login_name = 'ratione';
SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM Users u WHERE u.is_seller = '1';
SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM Users u WHERE u.is_seller = 'Y';
SELECT u.first_name, u.last_name, a.line_1_number_building, a.line_2_number_street, a.town_city FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE u.age_category_code = 'Senior Citizen';
SELECT a.line_1_number_building, a.line_2_number_street, a.line_3_area_locality FROM Addresses a JOIN Users u ON a.address_id = u.user_address_id WHERE u.age_category_code = 'Senior Citizen';
SELECT COUNT(*) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(pf.feature_id) >= 2;
SELECT COUNT(*) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(pf.feature_id) >= 2;
SELECT p.property_id, COUNT(pp.photo_id) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id ORDER BY photo_count DESC NULLS LAST;
SELECT p.property_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id ORDER BY photo_count DESC NULLS LAST;
SELECT u.user_id, COUNT(pp.photo_id) AS total_photos FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY u.user_id ORDER BY total_photos DESC NULLS LAST;
SELECT p.owner_user_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id ORDER BY photo_count DESC NULLS LAST;
SELECT SUM(p.price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.age_category_code IN ('S', 'M') AND u.user_category_code IN ('SM', 'SO');
SELECT SUM(p.price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.age_category_code IN ('S', 'M') AND u.user_category_code IN ('U', 'S');
SELECT u.user_id, p.property_name, row_number() OVER(PARTITION BY u.user_id ORDER BY h.datestamp DESC) AS recent_history_rank FROM User_Property_History h JOIN Properties p ON h.property_id = p.property_id JOIN Users u ON h.user_id = u.user_id;
SELECT u.user_id, p.property_name, row_number() OVER(PARTITION BY u.user_id ORDER BY ph.datestamp DESC) AS recent_event_rank FROM User_Property_History ph JOIN Properties p ON ph.property_id = p.property_id JOIN Users u ON ph.user_id = u.user_id;
SELECT r.property_type_description, r.property_type_code FROM Ref_Property_Types r GROUP BY r.property_type_description, r.property_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT r.property_type_code, r.property_type_description FROM Ref_Property_Types r GROUP BY r.property_type_code, r.property_type_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT r.age_category_description FROM Ref_Age_Categories r WHERE r.age_category_code = 'Over 60';
SELECT r.age_category_description FROM Ref_Age_Categories r WHERE r.age_category_code = 'Over 60';
SELECT r.room_size, COUNT(*) AS COUNT FROM Rooms r GROUP BY r.room_size ORDER BY COUNT DESC;
SELECT r.room_size, COUNT(*) AS room_count FROM Rooms r GROUP BY r.room_size ORDER BY r.room_size NULLS LAST;
SELECT u.country FROM Users u WHERE u.first_name = 'Robbie';
SELECT u.country FROM Users u WHERE u.first_name ilike '%Robbie%';
SELECT u.first_name, u.middle_name, u.last_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_id = p.owner_user_id;
SELECT u.first_name || ' ' || u.last_name AS user_full_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id;
SELECT u.user_id, u.first_name, u.last_name, s.search_string FROM Users AS u LEFT JOIN Properties AS p ON u.user_id = p.owner_user_id LEFT JOIN User_Searches AS s ON u.user_id = s.user_id WHERE p.owner_user_id IS NULL;
SELECT u.user_id, u.first_name, u.last_name, s.search_string FROM Users AS u LEFT JOIN Properties AS p ON u.user_id = p.owner_user_id LEFT JOIN User_Searches AS s ON u.user_id = s.user_id WHERE p.owner_user_id IS NULL;
SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE EXISTS (SELECT 1 FROM User_Property_History h WHERE h.user_id = u.user_id GROUP BY h.user_id HAVING COUNT(h.property_id) >= 2) AND EXISTS (SELECT 1 FROM User_Searches s WHERE s.user_id = u.user_id GROUP BY s.user_id HAVING COUNT(s.search_seq) <= 2);
SELECT u.user_id, u.last_name FROM Users u JOIN User_Searches s ON u.user_id = s.user_id WHERE s.search_seq <= 2 AND u.user_id IN (SELECT p.owner_user_id FROM Properties p GROUP BY p.owner_user_id HAVING COUNT(p.property_id) >= 2);
SELECT COUNT(*) FROM bike WHERE weight > 780;
SELECT b.product_name, b.weight FROM bike b ORDER BY b.price ASC;
SELECT c.heat, c.name, c.nation FROM cyclist c ORDER BY c.heat NULLS LAST;
SELECT MAX(b.weight) AS max_weight, MIN(b.weight) AS min_weight FROM bike b;
SELECT AVG(b.price) FROM bike b WHERE b.material ilike '%Carbon%CC%';
SELECT c.name, c.result FROM cyclist c WHERE c.nation != 'Russian';
SELECT DISTINCT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes c ON b.id = c.bike_id WHERE c.purchase_year > 2015;
SELECT b.id AS bike_id, b.product_name FROM bike b JOIN (SELECT c.bike_id FROM cyclists_own_bikes c GROUP BY c.bike_id HAVING COUNT(c.cyclist_id) >= 4) AS subquery ON b.id = subquery.bike_id WHERE b.product_name ilike '%racing%';
SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes co ON c.id = co.cyclist_id GROUP BY c.id, c.name ORDER BY COUNT(co.bike_id) DESC LIMIT 1;
SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes c ON b.id = c.bike_id JOIN cyclist cy ON c.cyclist_id = cy.id WHERE cy.nation IN ('Russian', 'British')
SELECT COUNT(DISTINCT c.heat) FROM cyclist c;
SELECT COUNT(DISTINCT c.id) FROM cyclist c LEFT JOIN cyclists_own_bikes cb ON c.id = cb.cyclist_id AND cb.purchase_year > 2015 WHERE cb.cyclist_id IS NULL;
SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result > 4.21558 AND b.category = 'racing';
SELECT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes cob1 ON b.id = cob1.bike_id JOIN cyclists_own_bikes cob2 ON cob1.cyclist_id = cob2.cyclist_id WHERE cob1.cyclist_id IN (SELECT id FROM cyclist WHERE name ilike '%Bradley%Wiggins%') AND cob2.cyclist_id IN (SELECT id FROM cyclist WHERE name ilike '%Antonio%Tauler%');
SELECT c.name, c.nation, c.result FROM cyclist c LEFT JOIN cyclists_own_bikes co ON c.id = co.cyclist_id AND co.purchase_year IS NOT NULL WHERE co.cyclist_id IS NULL;
SELECT b.product_name FROM bike b WHERE b.material ilike '%fiber%';
SELECT c.id AS cyclist_id, COUNT(bo.bike_id) AS number_of_bikes FROM cyclist c JOIN cyclists_own_bikes bo ON c.id = bo.cyclist_id GROUP BY c.id ORDER BY c.id NULLS LAST;
SELECT g.flavor, g.price FROM goods g ORDER BY g.price DESC LIMIT 1;
SELECT g.id, g.flavor FROM goods g ORDER BY g.price DESC LIMIT 1;
SELECT g.flavor FROM goods g ORDER BY g.price ASC LIMIT 1;
SELECT g.id, g.flavor FROM goods g ORDER BY g.price ASC LIMIT 1;
SELECT g.id FROM goods g WHERE g.flavor ilike '%apple%';
SELECT g.id FROM goods g WHERE g.flavor ilike '%apple%';
SELECT g.id FROM goods g WHERE g.price < 3;
SELECT g.id FROM goods g WHERE g.price < 3;
SELECT DISTINCT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receipt = i.receipt WHERE i.item = 'lemon';
SELECT DISTINCT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receipt = i.receipt WHERE i.item = 'lemon';
SELECT g.food, COUNT(DISTINCT c.id) AS number_of_customers FROM goods g JOIN items i ON g.id = i.item JOIN receipts r ON i.receipt = r.receiptnumber JOIN customers c ON r.customerid = c.id GROUP BY g.food ORDER BY number_of_customers DESC NULLS LAST;
SELECT g.food, COUNT(DISTINCT r.customerid) AS number_of_customers FROM goods g JOIN items i ON g.id = i.item JOIN receipts r ON i.receipt = r.receiptnumber GROUP BY g.food ORDER BY number_of_customers DESC NULLS LAST;
SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customer_id GROUP BY c.id HAVING COUNT(r.receipt_number) >= 15;
SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customerid GROUP BY c.id HAVING COUNT(r.receiptnumber) >= 15;
SELECT c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id GROUP BY c.last_name HAVING COUNT(r.receipt_number) > 10;
SELECT c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id GROUP BY c.last_name HAVING COUNT(r.receipt_number) > 10;
SELECT COUNT(DISTINCT g.Food) AS number_of_cake_types FROM goods g WHERE g.Food ILIKE '%Cake%';
SELECT COUNT(DISTINCT g.Food) AS number_of_cake_types FROM goods g;
SELECT DISTINCT g.flavor FROM goods g WHERE g.food = 'Croissant';
SELECT DISTINCT g.flavor FROM goods g WHERE g.food ILIKE '%croissant%' ORDER BY g.flavor NULLS LAST;
SELECT DISTINCT i.item FROM items i JOIN receipts r ON i.receipt = r.receiptnumber WHERE r.customerid = 15;
SELECT DISTINCT i.item FROM items i JOIN receipts r ON i.receipt = r.receiptnumber WHERE r.customerid = 15;
SELECT g.food, AVG(g.price) AS average_price, MAX(g.price) AS max_price, MIN(g.price) AS min_price FROM goods g GROUP BY g.food;
SELECT g.food, AVG(g.price) AS average_price, MIN(g.price) AS minimum_price, MAX(g.price) AS maximum_price FROM goods g GROUP BY g.food;
SELECT DISTINCT r.ReceiptNumber FROM items i1 JOIN items i2 ON i1.Receipt = i2.Receipt AND i1.Ordinal + 1 = i2.Ordinal JOIN goods g1 ON i1.Item = g1.Id JOIN goods g2 ON i2.Item = g2.Id JOIN receipts r ON i1.Receipt = r.ReceiptNumber WHERE g1.Food = 'Cake' AND g2.Food = 'Cookie';
SELECT DISTINCT r.ReceiptNumber FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE i.Item ilike '%cake%' AND i.Item ilike '%cookie%';
SELECT r.ReceiptNumber FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName ilike '%LOGAN%' AND g.Food ilike '%Croissant%';
SELECT r.ReceiptNumber FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName ilike '%Logan%' AND g.Food ilike '%croissant%';
SELECT r.ReceiptNumber, r.Date, g.Flavor, g.Food, g.Price FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1;
SELECT r.ReceiptNumber, r.Date, g.Flavor, g.Food, g.Price FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1;
SELECT i.item FROM items i GROUP BY i.item ORDER BY COUNT(i.item) ASC LIMIT 1;
SELECT i.item FROM items i GROUP BY i.item ORDER BY COUNT(i.item) ASC LIMIT 1;
SELECT g.food, COUNT(g.id) AS number_of_goods FROM goods g GROUP BY g.food ORDER BY number_of_goods DESC NULLS LAST;
SELECT g.food, COUNT(g.id) AS COUNT FROM goods g GROUP BY g.food ORDER BY COUNT DESC NULLS LAST;
SELECT g.food, AVG(g.price) AS average_price FROM goods g GROUP BY g.food ORDER BY average_price DESC NULLS LAST;
SELECT g.food, AVG(g.price) AS average_price FROM goods g GROUP BY g.food ORDER BY average_price DESC NULLS LAST;
SELECT g.id FROM goods g WHERE g.flavor ilike '%Apricot%' AND g.price < 5;
SELECT g.id FROM goods g WHERE g.flavor ilike '%Apricot%' AND g.price < 5;
SELECT g.flavor FROM goods g WHERE g.price > 10;
SELECT g.flavor FROM goods g WHERE g.price > 10;
SELECT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(g2.price) FROM goods g2);
SELECT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(g2.price) FROM goods g2);
SELECT DISTINCT g.id FROM goods g WHERE g.price < (SELECT MIN(g2.price) FROM goods g2 WHERE g2.flavor = 'Tart');
SELECT DISTINCT g.id FROM goods g WHERE g.price < (SELECT MIN(g2.price) FROM goods g2 WHERE g2.flavor ILIKE '%Tart%');
SELECT DISTINCT r.ReceiptNumber FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber JOIN goods g ON i.Item = g.Id WHERE g.Price > 13;
SELECT DISTINCT r.ReceiptNumber FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber JOIN goods g ON i.Item = g.Id WHERE g.Price > 13;
SELECT r.Date FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15;
SELECT r.date FROM receipts r JOIN items i ON r.receiptnumber = i.receipt WHERE i.item::real > 15;
SELECT g.id FROM goods g WHERE g.id ilike '%APP%';
SELECT g.id FROM goods g WHERE g.id ilike '%APP%';
SELECT g.price FROM goods g WHERE g.id ilike '%70%';
SELECT g.id, g.price FROM goods g WHERE g.id ilike '%70%';
SELECT c.last_name FROM customers c ORDER BY c.last_name ASC;
SELECT c.last_name FROM customers c ORDER BY c.last_name ASC;
SELECT g.id FROM goods g ORDER BY g.id NULLS LAST;
SELECT DISTINCT g.id FROM goods g ORDER BY g.id NULLS LAST;
SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE (g.Flavor ilike '%apple%' AND g.Food ilike '%pie%') OR (r.CustomerId = 12);
SELECT DISTINCT r.ReceiptNumber FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE i.Item IN (SELECT g.Id FROM goods g WHERE g.Flavor ilike '%apple%pie%') OR r.CustomerId = 12;
SELECT r.ReceiptNumber, r.Date FROM receipts r ORDER BY r.Date DESC LIMIT 1;
SELECT r.ReceiptNumber, TO_DATE(r.Date, 'YYYY-MM-DD') AS Date FROM receipts r ORDER BY TO_DATE(r.Date, 'YYYY-MM-DD') DESC LIMIT 1;
SELECT r.ReceiptNumber, r.Date, c.LastName, c.FirstName FROM receipts r JOIN customers c ON r.CustomerId = c.Id WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND (g.Price > 10 OR g.Price IS NULL)) ORDER BY r.Date ASC;
SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 10 OR r.Date = (SELECT MIN(r2.Date) FROM receipts r2) ORDER BY r.ReceiptNumber NULLS LAST;
SELECT g.id FROM goods g WHERE g.price BETWEEN 3 AND 7 AND g.food IN ('Cookie', 'Cake');
SELECT g.id FROM goods g WHERE g.price BETWEEN 3 AND 7;
SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id ORDER BY r.date ASC LIMIT 1;
SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id ORDER BY r.date ASC LIMIT 1;
SELECT AVG(g.price) FROM goods g WHERE g.flavor ilike '%blackberry%' OR g.flavor ilike '%blueberry%';
SELECT AVG(g.price) FROM goods g WHERE g.flavor ilike '%blackberry%' OR g.flavor ilike '%blueberry%';
SELECT MIN(g.price) AS min_price FROM goods g WHERE g.flavor ilike '%cheese%';
SELECT g.id, g.flavor, g.food, g.price FROM goods g WHERE g.flavor ilike '%cheese%' ORDER BY g.price ASC NULLS LAST LIMIT 1;
SELECT g.flavor, MAX(g.price) AS max_price, MIN(g.price) AS min_price, AVG(g.price) AS avg_price FROM goods g GROUP BY g.flavor ORDER BY g.flavor NULLS LAST;
SELECT g.flavor, MAX(g.price) AS max_price, MIN(g.price) AS min_price, AVG(g.price) AS avg_price FROM goods g GROUP BY g.flavor ORDER BY g.flavor NULLS LAST;
SELECT g.food, MIN(g.price) AS min_price, MAX(g.price) AS max_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
SELECT g.Food, MIN(g.Price) AS min_price, MAX(g.Price) AS max_price FROM goods g GROUP BY g.Food ORDER BY min_price NULLS LAST;
SELECT r.date, COUNT(r.receiptnumber) AS number_of_receipts FROM receipts r GROUP BY r.date ORDER BY number_of_receipts DESC NULLS LAST LIMIT 3;
SELECT r.date, COUNT(r.receiptnumber) AS number_of_receipts FROM receipts r GROUP BY r.date ORDER BY number_of_receipts DESC NULLS LAST LIMIT 3;
SELECT c.firstname, c.lastname, COUNT(*) AS total_purchases FROM receipts r JOIN customers c ON r.customerid = c.id GROUP BY c.firstname, c.lastname ORDER BY total_purchases DESC LIMIT 1;
SELECT c.id, COUNT(r.customerid) AS purchase_count FROM customers c JOIN receipts r ON c.id = r.customerid GROUP BY c.id ORDER BY purchase_count DESC LIMIT 1;
SELECT r.date, COUNT(DISTINCT c.id) AS unique_customer_count FROM receipts r JOIN customers c ON r.customerid = c.id GROUP BY r.date ORDER BY r.date NULLS LAST;
SELECT r.date, COUNT(DISTINCT r.customerid) AS number_of_customers FROM receipts r GROUP BY r.date ORDER BY r.date NULLS LAST;
SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receipt = i.receipt WHERE i.item = 'Tart' AND i.ordinal = 1;
SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receipt = i.receipt WHERE i.item = 'Tarts' AND i.ordinal = 1 AND i.item = 'Apple';
SELECT c.id FROM cookies c JOIN croissants cr ON c.price < cr.price;
SELECT c.id FROM customers c JOIN items i ON c.id = i.item WHERE i.item = 'croissant' ORDER BY c.price ASC NULLS LAST LIMIT 1;
SELECT c.id FROM goods c WHERE c.price >= (SELECT AVG(g.price) FROM goods g WHERE g.food = 'Tart');
SELECT g.id FROM goods g WHERE g.price >= (SELECT AVG(g2.price) FROM goods g2 WHERE g2.food = 'Tart');
SELECT g.id FROM goods g WHERE g.price > (SELECT AVG(g2.price) * 2 FROM goods g2);
SELECT g.id FROM goods g WHERE g.price > 2 * (SELECT AVG(g2.price) FROM goods g2);
SELECT g.id, g.flavor, g.food FROM goods g ORDER BY g.price NULLS LAST;
SELECT g.id, g.flavor, g.food, g.price FROM goods g ORDER BY g.price NULLS LAST;
SELECT g.id, g.flavor FROM goods g ORDER BY g.flavor NULLS LAST;
SELECT g.id, g.flavor FROM goods g ORDER BY g.flavor NULLS LAST;
SELECT i.item FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor ilike '%chocolate%' GROUP BY i.item HAVING COUNT(i.receipt) <= 10;
SELECT i.item FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor ilike '%chocolate%' GROUP BY i.item HAVING COUNT(i.receipt) <= 10;
SELECT DISTINCT c.flavor FROM goods c JOIN items i ON c.id = i.item WHERE c.food = 'Cake' AND NOT EXISTS (SELECT 1 FROM items i2 WHERE i2.item = c.id AND i2.item != i.item AND i2.item LIKE '%Tart%') ORDER BY c.flavor NULLS LAST;
SELECT DISTINCT g.flavor FROM goods g WHERE g.food != 'Tart' ORDER BY g.flavor NULLS LAST;
SELECT g.Food, COUNT(i.Item) AS Count FROM items i JOIN goods g ON i.Item = g.Id GROUP BY g.Food ORDER BY COUNT DESC LIMIT 3;
SELECT i.item, COUNT(*) AS frequency FROM items i GROUP BY i.item ORDER BY frequency DESC LIMIT 3;
SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customer_id WHERE SUM(g.price) > 150 GROUP BY c.id;
SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customer_id WHERE SUM(g.price) > 150 GROUP BY c.id;
WITH customer_spend AS (SELECT c.id AS customer_id, g.id AS good_id, SUM(i.price) AS total_spend FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id GROUP BY c.id, g.id), avg_spend_per_good AS (SELECT cs.good_id, AVG(cs.total_spend) AS avg_spend FROM customer_spend cs GROUP BY cs.good_id) SELECT cs.customer_id, ag.good_id, ag.avg_spend FROM customer_spend cs JOIN avg_spend_per_good ag ON cs.good_id = ag.good_id WHERE ag.avg_spend > 5;
WITH customer_spend AS (SELECT c.id AS customer_id, g.id AS good_id, SUM(g.price) AS total_spend FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receipt = i.receipt JOIN goods g ON i.item = g.id GROUP BY c.id, g.id), avg_spend_per_good AS (SELECT g.id, AVG(total_spend) AS avg_spend FROM customer_spend cs JOIN goods g ON cs.good_id = g.id GROUP BY g.id) SELECT cs.customer_id, g.id AS good_id FROM customer_spend cs JOIN avg_spend_per_good ag ON cs.total_spend > ag.avg_spend WHERE ag.avg_spend > 5;
SELECT r.date FROM receipts r WHERE SUM(g.price) > 100 GROUP BY r.date ORDER BY COUNT(*) DESC LIMIT 1;
SELECT r.date FROM receipts r JOIN items i ON r.receiptnumber = i.receipt WHERE SUM(g.price) > 100 GROUP BY r.date HAVING COUNT(*) > 1;
SELECT COUNT(d.Driver_ID) FROM driver d;
SELECT COUNT(d.Driver_ID) AS total_drivers FROM driver d;
SELECT t.make, COUNT(d.driver_id) AS num_drivers FROM driver d JOIN team_driver td ON d.driver_id = td.driver_id JOIN team t ON td.team_id = t.team_id WHERE CAST(d.points AS INT) > 150 GROUP BY t.make ORDER BY num_drivers DESC NULLS LAST;
SELECT t.make, COUNT(d.driver_id) AS driver_count FROM team t JOIN team_driver td ON t.team_id = td.team_id JOIN driver d ON td.driver_id = d.driver_id WHERE CAST(d.points AS INT) > 150 GROUP BY t.make ORDER BY driver_count DESC NULLS LAST;
SELECT t.make, AVG(d.age) AS average_age FROM driver d JOIN team_driver td ON d.driver_id = td.driver_id JOIN team t ON td.team_id = t.team_id GROUP BY t.make ORDER BY average_age DESC NULLS LAST;
SELECT d.make, AVG(d.age) AS average_age FROM driver d GROUP BY d.make ORDER BY average_age DESC NULLS LAST;
SELECT AVG(d.laps) FROM driver d WHERE d.age < 20;
SELECT AVG(d.laps) FROM driver d WHERE d.age < 20;
SELECT t.manager, t.sponsor, t.car_owner FROM team t ORDER BY t.car_owner NULLS LAST;
SELECT t.team, t.manager, t.sponsor, t.car_owner FROM team t ORDER BY t.car_owner NULLS LAST;
SELECT t.make FROM team t GROUP BY t.make HAVING COUNT(t.team_id) > 1;
SELECT t.make FROM team t GROUP BY t.make HAVING COUNT(t.team_id) > 1;
SELECT t.make FROM team t WHERE t.car_owner ilike '%Buddy%Arrington%'
SELECT t.make FROM team t WHERE t.car_owner ilike '%Buddy%Arrington%'
SELECT MAX(d.points) AS max_points, MIN(d.points) AS min_points FROM driver d;
SELECT MAX(d.Points) AS Maximum_points, MIN(d.Points) AS Minimum_points FROM driver d;
SELECT COUNT(*) FROM driver d WHERE CAST(d.points AS integer) < 150;
SELECT COUNT(*) FROM driver d WHERE CAST(d.points AS INT) < 150;
SELECT d.driver FROM driver d ORDER BY d.age ASC;
SELECT d.driver FROM driver d ORDER BY d.age ASC;
SELECT d.driver FROM driver d ORDER BY d.points DESC;
SELECT d.driver, d.points FROM driver d ORDER BY d.points DESC;
SELECT d.driver, c.country FROM driver d JOIN country c ON d.country = c.country_id;
SELECT d.driver, c.country FROM driver d JOIN country c ON d.country = c.country_id;
SELECT MAX(d.points::int) AS max_points FROM driver d JOIN country c ON d.country = c.country_id WHERE c.capital ilike '%Dublin%';
SELECT MAX(d.points) FROM driver d JOIN country c ON d.country = c.country_id WHERE c.capital ilike '%Dublin%';
SELECT AVG(d.age) FROM driver d JOIN country c ON d.country = c.country_id WHERE c.official_native_language ilike '%English%';
SELECT AVG(d.age) FROM driver d JOIN country c ON d.country = c.country_id WHERE c.official_native_language ilike '%English%';
SELECT c.country FROM country c JOIN driver d ON c.country_id = d.country WHERE CAST(d.points AS integer) > 150;
SELECT c.country FROM country c JOIN driver d ON c.country_id = d.country WHERE CAST(d.points AS integer) > 150 GROUP BY c.country;
SELECT c.capital FROM country c JOIN driver d ON c.country_id = d.country WHERE d.points = (SELECT MAX(points) FROM driver);
SELECT c.capital FROM driver d JOIN country c ON d.country = c.country_id ORDER BY d.points DESC LIMIT 1;
SELECT t.make, COUNT(DISTINCT d.driver_id) AS number_of_drivers FROM team t JOIN team_driver td ON t.team_id = td.team_id JOIN driver d ON td.driver_id = d.driver_id GROUP BY t.make ORDER BY number_of_drivers DESC NULLS LAST;
SELECT d.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.make ORDER BY number_of_drivers DESC NULLS LAST;
SELECT t.make, COUNT(td.driver_id) AS driver_count FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.make ORDER BY driver_count DESC LIMIT 1;
SELECT t.make, COUNT(DISTINCT d.driver_id) AS driver_count FROM team t JOIN team_driver td ON t.team_id = td.team_id JOIN driver d ON td.driver_id = d.driver_id GROUP BY t.make ORDER BY driver_count DESC LIMIT 1;
SELECT d.make FROM driver d JOIN team_driver t ON d.driver_id = t.driver_id GROUP BY d.make HAVING COUNT(DISTINCT t.driver_id) >= 3;
SELECT t.make FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.make HAVING COUNT(td.driver_id) >= 3;
SELECT t.team FROM team t WHERE t.team NOT IN (SELECT d.team FROM driver d);
SELECT t.team FROM team t WHERE t.team NOT IN (SELECT d.team FROM driver d);
SELECT c.country FROM country c JOIN driver d1 ON c.country_id = d1.country JOIN driver d2 ON c.country_id = d2.country WHERE d1.make ilike '%Dodge%' AND d2.make ilike '%Chevrolet%' GROUP BY c.country;
SELECT c.country FROM country c JOIN driver d1 ON c.country_id = d1.country WHERE d1.make ilike '%Dodge%' AND EXISTS (SELECT 1 FROM driver d2 WHERE d2.country = c.country_id AND d2.make ilike '%Chevrolet%') ORDER BY c.country NULLS LAST;
SELECT SUM(d.points::int) AS total_points, AVG(d.points::int) AS average_points FROM driver d;
SELECT d.driver, SUM(d.points::int) AS total_points, AVG(d.points::int) AS average_points FROM driver d GROUP BY d.driver;
SELECT c.country FROM country c WHERE c.country NOT IN (SELECT d.country FROM driver d) ORDER BY c.country NULLS LAST;
SELECT c.country FROM country c WHERE c.country NOT IN (SELECT d.country FROM driver d) ORDER BY c.country NULLS LAST;
SELECT t.manager, t.sponsor FROM team t JOIN (SELECT td.team_id, COUNT(td.driver_id) AS driver_count FROM team_driver td GROUP BY td.team_id ORDER BY driver_count DESC LIMIT 1) AS mt ON t.team_id = mt.team_id;
SELECT t.manager, t.sponsor FROM team t JOIN (SELECT td.team_id, COUNT(td.driver_id) AS num_drivers FROM team_driver td GROUP BY td.team_id ORDER BY num_drivers DESC LIMIT 1) AS m ON t.team_id = m.team_id;
SELECT t.manager, t.car_owner FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.manager, t.car_owner HAVING COUNT(td.driver_id) >= 2;
SELECT t.manager, t.car_owner FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.manager, t.car_owner HAVING COUNT(td.driver_id) >= 2;
SELECT COUNT(DISTINCT i.institution_id) FROM institution i;
SELECT COUNT(DISTINCT i.institution_id) FROM institution i;
SELECT i.name FROM institution i ORDER BY i.name ASC;
SELECT i.name FROM institution i ORDER BY i.name ASC;
SELECT i.name FROM institution i ORDER BY i.founded ASC;
SELECT i.name FROM institution i ORDER BY i.founded NULLS LAST;
SELECT i.city, i.province FROM institution i;
SELECT i.city, i.province FROM institution i;
SELECT MIN(i.enrollment) AS min_enrollment, MAX(i.enrollment) AS max_enrollment FROM institution i;
SELECT MIN(i.enrollment) AS min_enrollment, MAX(i.enrollment) AS max_enrollment FROM institution i;
SELECT i.affiliation FROM institution i WHERE i.city != 'Vancouver';
SELECT DISTINCT i.affiliation FROM institution i WHERE i.city NOT ILIKE '%Vancouver%'
SELECT i.Stadium FROM institution i ORDER BY i.Capacity DESC;
SELECT i.stadium FROM institution i ORDER BY i.capacity DESC;
SELECT i.stadium FROM institution i ORDER BY i.enrollment DESC NULLS LAST LIMIT 1;
SELECT i.stadium FROM institution i WHERE i.enrollment = (SELECT MAX(enrollment) FROM institution);
SELECT i.name, c.nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id;
SELECT i.name, c.nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id;
SELECT i.Nickname FROM Institution i ORDER BY i.Enrollment ASC NULLS LAST LIMIT 1;
SELECT c.Nickname FROM Championship c ORDER BY c.Enrollment ASC LIMIT 1;
SELECT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC;
SELECT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC;
SELECT DISTINCT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id;
SELECT DISTINCT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id WHERE c.number_of_championships >= 1 ORDER BY i.name NULLS LAST;
SELECT SUM(c.number_of_championships) AS total_championships FROM championship c JOIN institution i ON c.institution_id = i.institution_id WHERE i.affiliation ilike '%public%';
SELECT SUM(c.Number_of_Championships) AS total_championships FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation ilike '%Public%';
SELECT i.affiliation, COUNT(i.affiliation) AS number_of_institutions FROM institution i GROUP BY i.affiliation ORDER BY number_of_institutions DESC NULLS LAST;
SELECT i.affiliation, COUNT(i.institution_id) AS number_of_institutions FROM institution i GROUP BY i.affiliation ORDER BY number_of_institutions DESC NULLS LAST;
SELECT i.affiliation FROM institution i GROUP BY i.affiliation ORDER BY COUNT(i.affiliation) DESC LIMIT 1;
SELECT i.affiliation FROM institution i GROUP BY i.affiliation ORDER BY COUNT(i.affiliation) DESC LIMIT 1;
SELECT EXTRACT(YEAR FROM TO_DATE(i.founded::text, 'YYYY')) AS YEAR, COUNT(*) AS number_of_institutions FROM institution i GROUP BY YEAR HAVING COUNT(*) > 1 ORDER BY YEAR NULLS LAST;
SELECT EXTRACT(YEAR FROM TO_DATE(i.founded, 'YYYY')) AS YEAR, COUNT(*) AS institutions_founded FROM institution i GROUP BY YEAR HAVING COUNT(*) > 1 ORDER BY YEAR NULLS LAST;
SELECT c.Nickname FROM Championship c ORDER BY c.Capacity DESC;
SELECT i.name, c.nickname, i.capacity FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY i.capacity DESC;
SELECT SUM(i.enrollment) AS total_enrollment FROM institution i WHERE i.city IN ('Vancouver', 'Calgary');
SELECT i.enrollment FROM institution i WHERE i.city IN ('Vancouver', 'Calgary');
SELECT DISTINCT i.province FROM institution i WHERE i.founded < 1920 AND i.founded > 1950;
SELECT DISTINCT i.province FROM institution i WHERE i.founded < 1920 AND i.founded > 1950 ORDER BY i.province NULLS LAST;
SELECT COUNT(DISTINCT i.province) FROM institution i;
SELECT COUNT(DISTINCT i.province) FROM institution i;
SELECT * FROM Warehouses w;
SELECT * FROM Warehouses w;
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location ilike '%New York%'
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location ilike '%New York%' ORDER BY b.Contents NULLS LAST;
SELECT b.Contents FROM Boxes b WHERE b.Value > 150;
SELECT b.Contents FROM Boxes b WHERE b.Value > 150;
SELECT b.warehouse, AVG(b.value) AS average_value FROM boxes b GROUP BY b.warehouse ORDER BY average_value DESC NULLS LAST;
SELECT b.warehouse, AVG(b.value) AS average_value FROM boxes b GROUP BY b.warehouse ORDER BY average_value DESC NULLS LAST;
SELECT AVG(b.Value) AS Average_value, SUM(b.Value) AS Total_value FROM Boxes b;
SELECT AVG(b.Value) AS Average_value, SUM(b.Value) AS Total_value FROM Boxes b;
SELECT AVG(w.capacity) AS average_capacity, SUM(w.capacity) AS total_capacity FROM warehouses w;
SELECT AVG(w.capacity) AS average_capacity, SUM(w.capacity) AS total_capacity FROM warehouses w;
SELECT b.contents, AVG(b.value) AS average_value, MAX(b.value) AS max_value FROM boxes b GROUP BY b.contents;
SELECT b.contents, AVG(b.value) AS average_value, MAX(b.value) AS max_value FROM Boxes b GROUP BY b.contents;
SELECT b.Contents, SUM(b.Value) AS Total_Value FROM Boxes b GROUP BY b.Contents ORDER BY Total_Value DESC LIMIT 1;
SELECT b.Contents, b.Value FROM Boxes b ORDER BY b.Value DESC NULLS LAST LIMIT 1;
SELECT AVG(b.Value) AS Average_Value FROM Boxes b;
SELECT AVG(b.Value) FROM Boxes b;
SELECT DISTINCT b.Contents FROM Boxes b;
SELECT b.contents FROM boxes b GROUP BY b.contents ORDER BY COUNT(b.contents) DESC;
SELECT COUNT(DISTINCT b.Contents) AS total_distinct_contents FROM Boxes b;
SELECT COUNT(DISTINCT b.Contents) AS number_of_distinct_contents FROM Boxes b;
SELECT DISTINCT w.location FROM Warehouses w;
SELECT DISTINCT w.location FROM Warehouses w;
SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%' OR w.location ilike '%New York%';
SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%' OR w.location ilike '%New York%';
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York');
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York');
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location ilike '%Chicago%' OR w.Location ilike '%New York%';
SELECT b.contents FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%' AND w.location ilike '%New York%';
SELECT b.contents FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location != 'New York' ORDER BY b.contents NULLS LAST;
SELECT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location not ilike '%New York%'
SELECT w.location FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse WHERE b.contents ilike '%Rocks%' AND b.contents not ilike '%Scissors%' ORDER BY w.location NULLS LAST;
SELECT DISTINCT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents ilike '%Rock%' AND b.Contents not ilike '%Scissors%';
SELECT DISTINCT w.code, w.location FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE b.contents ilike '%Rocks%' OR b.contents ilike '%Scissors%';
SELECT DISTINCT b.warehouse FROM boxes b WHERE b.contents ilike '%Rocks%' OR b.contents ilike '%Scissors%';
SELECT DISTINCT w.location FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code WHERE b.contents ilike '%Rocks%' OR b.contents ilike '%Scissors%';
SELECT DISTINCT w.location FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code WHERE b.contents ilike '%Rocks%Scissors%'
SELECT b.code, b.contents, b.value FROM boxes b ORDER BY b.value DESC;
SELECT b.code, b.contents, b.value FROM boxes b ORDER BY b.value DESC;
SELECT b.code, b.contents FROM boxes b ORDER BY b.value ASC LIMIT 1;
SELECT b.code, b.contents FROM boxes b ORDER BY b.value ASC LIMIT 1;
SELECT b.contents FROM boxes b WHERE b.value > (SELECT AVG(b2.value) FROM boxes b2);
SELECT b.contents FROM Boxes b WHERE b.value > (SELECT AVG(b2.value) FROM Boxes b2);
SELECT b.contents FROM boxes b GROUP BY b.contents ORDER BY b.contents NULLS LAST;
SELECT b.contents FROM boxes b ORDER BY b.contents ASC;
SELECT b.code FROM boxes b WHERE b.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Rocks');
SELECT b.code FROM Boxes b WHERE b.value > (SELECT MAX(b2.value) FROM Boxes b2 WHERE b2.contents ilike '%Rocks%');
SELECT b.code, b.contents, b.value FROM boxes b WHERE b.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Scissors');
SELECT b.code, b.contents, b.value FROM Boxes b WHERE b.value > (SELECT MAX(b2.value) FROM Boxes b2 WHERE b2.contents ilike '%Scissors%');
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Capacity = (SELECT MAX(w.Capacity) FROM Warehouses);
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Capacity = (SELECT MAX(w.Capacity) FROM Warehouses);
SELECT w.code, AVG(b.value) AS average_value FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code HAVING AVG(b.value) > 150 ORDER BY average_value DESC NULLS LAST;
SELECT AVG(b.Value) AS Average_Box_Value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE b.Value > 150 GROUP BY w.Code;
SELECT b.contents, SUM(b.value) AS total_value, COUNT(b.code) AS total_boxes FROM boxes b GROUP BY b.contents ORDER BY total_value DESC;
SELECT b.contents, SUM(b.value) AS total_value, COUNT(b.code) AS total_boxes FROM boxes b GROUP BY b.contents ORDER BY total_value DESC;
SELECT w.location, SUM(w.capacity) AS total_capacity, AVG(w.capacity) AS average_capacity, MAX(w.capacity) AS max_capacity FROM Warehouses w GROUP BY w.location;
SELECT w.location, SUM(w.capacity) AS total_capacity, AVG(w.capacity) AS average_capacity, MAX(w.capacity) AS max_capacity FROM Warehouses w GROUP BY w.location;
SELECT SUM(w.Capacity) AS Total_Capacity FROM Warehouses w;
SELECT SUM(w.Capacity) AS total_capacity FROM Warehouses w;
SELECT w.location, MAX(b.value) AS max_value FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code GROUP BY w.location ORDER BY max_value DESC;
SELECT w.location, MAX(b.value) AS max_value FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code GROUP BY w.location ORDER BY max_value DESC NULLS LAST;
SELECT w.code, COUNT(b.code) AS number_of_boxes FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code ORDER BY number_of_boxes DESC NULLS LAST;
SELECT b.warehouse, COUNT(*) AS number_of_boxes FROM boxes b GROUP BY b.warehouse ORDER BY number_of_boxes DESC NULLS LAST;
SELECT COUNT(DISTINCT w.location) FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse WHERE b.contents ilike '%Rock%';
SELECT COUNT(DISTINCT b.warehouse) FROM boxes b WHERE b.contents ilike '%Rock%';
SELECT b.code, w.location FROM boxes b JOIN warehouses w ON b.warehouse = w.code;
SELECT b.code, w.location FROM boxes b JOIN warehouses w ON b.warehouse = w.code;
SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%'
SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%'
SELECT b.warehouse, COUNT(*) AS total_boxes FROM boxes b GROUP BY b.warehouse ORDER BY total_boxes DESC NULLS LAST;
SELECT b.warehouse, COUNT(*) AS number_of_boxes FROM boxes b GROUP BY b.warehouse ORDER BY number_of_boxes DESC NULLS LAST;
SELECT b.warehouse, COUNT(DISTINCT b.contents) AS num_distinct_types FROM boxes b GROUP BY b.warehouse ORDER BY num_distinct_types DESC NULLS LAST;
SELECT b.warehouse, COUNT(DISTINCT b.contents) AS number_of_distinct_contents FROM boxes b GROUP BY b.warehouse ORDER BY number_of_distinct_contents DESC NULLS LAST;
SELECT w.code FROM Warehouses w WHERE w.capacity < (SELECT COUNT(*) FROM Boxes b WHERE b.warehouse = w.code);
SELECT w.code FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code HAVING COUNT(b.code) > w.capacity;
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location != 'Chicago';
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location != 'Chicago';
SELECT u.university_name, u.city, u.state FROM university u ORDER BY u.university_name NULLS LAST;
SELECT u.university_name, u.city, u.state FROM university u ORDER BY u.university_name ASC;
SELECT COUNT(*) FROM university u WHERE u.state IN ('Illinois', 'Ohio');
SELECT COUNT(DISTINCT u.University_ID) FROM university u WHERE u.State IN ('Illinois', 'Ohio');
SELECT MAX(u.enrollment) AS max_enrollment, AVG(u.enrollment) AS avg_enrollment, MIN(u.enrollment) AS min_enrollment FROM university u;
SELECT MAX(u.enrollment) AS max_enrollment, AVG(u.enrollment) AS avg_enrollment, MIN(u.enrollment) AS min_enrollment FROM university u;
SELECT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(enrollment) FROM university);
SELECT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(u2.enrollment) FROM university u2);
SELECT DISTINCT u.home_conference FROM university u;
SELECT DISTINCT u.home_conference FROM university u;
SELECT u.home_conference, COUNT(u.university_id) AS university_count FROM university u GROUP BY u.home_conference ORDER BY university_count DESC NULLS LAST;
SELECT u.home_conference, COUNT(u.university_id) AS number_of_universities FROM university u GROUP BY u.home_conference ORDER BY number_of_universities DESC NULLS LAST;
SELECT u.state, COUNT(u.university_id) AS university_count FROM university u GROUP BY u.state ORDER BY university_count DESC LIMIT 1;
SELECT u.state, COUNT(u.university_id) AS university_count FROM university u GROUP BY u.state ORDER BY university_count DESC LIMIT 1;
SELECT u.home_conference FROM university u WHERE AVG(u.enrollment) > 2000 GROUP BY u.home_conference ORDER BY COUNT(u.enrollment) DESC NULLS LAST;
SELECT u.home_conference FROM university u WHERE AVG(u.enrollment) > 2000 GROUP BY u.home_conference;
SELECT u.home_conference, SUM(u.enrollment) AS total_enrollment FROM university u GROUP BY u.home_conference ORDER BY total_enrollment ASC LIMIT 1;
SELECT u.home_conference, MIN(u.enrollment) AS min_enrollment FROM university u GROUP BY u.home_conference ORDER BY min_enrollment ASC NULLS LAST LIMIT 1;
SELECT m.major_name, m.major_code FROM major m ORDER BY m.major_code NULLS LAST;
SELECT m.major_name, m.major_code FROM major m ORDER BY m.major_code NULLS LAST;
SELECT m.major_name, r.rank FROM major m JOIN major_ranking r ON m.major_id = r.major_id WHERE m.university_name ilike '%Augustana%College%' ORDER BY r.rank NULLS LAST;
SELECT m.major_name, r.rank FROM major m JOIN major_ranking r ON m.major_id = r.major_id WHERE r.university_id = 1055973;
SELECT u.University_Name, u.City, u.State FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') ORDER BY mr.Rank ASC LIMIT 1;
SELECT u.University_Name, u.City, u.State FROM university u JOIN major m ON u.University_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' ORDER BY rank NULLS LAST LIMIT 1;
SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Rank = 1 GROUP BY u.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;
SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Rank = 1 GROUP BY u.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;
SELECT u.University_Name FROM university u LEFT JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Rank IS NULL OR mr.Rank != 1 ORDER BY u.University_Name NULLS LAST;
SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Rank = 1);
SELECT DISTINCT u.University_Name FROM university u JOIN major_ranking mr1 ON u.University_ID = mr1.University_ID JOIN major_ranking mr2 ON u.University_ID = mr2.University_ID WHERE mr1.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND mr2.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education');
SELECT DISTINCT u.University_Name FROM university u JOIN major_ranking mr1 ON u.University_ID = mr1.University_ID JOIN major_ranking mr2 ON u.University_ID = mr2.University_ID WHERE mr1.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND mr2.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education');
SELECT u.university_name, o.rank FROM university u JOIN overall_ranking o ON u.university_id = o.university_id WHERE u.state = 'Wisconsin' ORDER BY o.rank NULLS LAST;
SELECT u.university_name, o.rank FROM university u JOIN overall_ranking o ON u.university_id = o.university_id WHERE u.state = 'Wisconsin' ORDER BY o.rank NULLS LAST;
SELECT u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Research_point DESC NULLS LAST LIMIT 1;
SELECT u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Research_point DESC LIMIT 1;
SELECT u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Reputation_point ASC;
SELECT u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Reputation_point ASC;
SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND mr.Rank >= 3;
SELECT u.University_Name FROM university u JOIN major m ON u.University_ID = m.Major_ID JOIN major_ranking r ON m.Major_ID = r.Major_ID WHERE m.Major_Name = 'Accounting' AND r.Rank >= 3 ORDER BY r.Rank NULLS LAST;
SELECT SUM(u.enrollment) AS total_enrollment FROM university u JOIN overall_ranking r ON u.university_id = r.university_id WHERE r.rank <= 5;
SELECT SUM(u.enrollment) AS total_students FROM overall_ranking r JOIN university u ON r.university_id = u.university_id WHERE r.rank <= 5;
SELECT u.University_Name, o.Citation_point FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID WHERE o.Reputation_point >= 10 ORDER BY o.Reputation_point DESC NULLS LAST LIMIT 3;
SELECT u.university_name, o.citation_point FROM overall_ranking o JOIN university u ON o.university_id = u.university_id ORDER BY o.reputation_point DESC NULLS LAST LIMIT 3;
SELECT u.state FROM university u WHERE u.enrollment < 3000 GROUP BY u.state HAVING COUNT(u.university_id) > 2;
SELECT u.state FROM university u WHERE u.enrollment < 3000 GROUP BY u.state HAVING COUNT(u.university_id) > 2;
SELECT m.title FROM Movies m WHERE m.rating IS NULL
SELECT m.Title FROM Movies m WHERE m.Rating IS NULL
SELECT m.title FROM movies m WHERE m.rating ilike '%G%';
SELECT m.title FROM movies m WHERE m.rating ilike '%G%';
SELECT m.title FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE mt.name = 'Odeon';
SELECT m.title FROM Movies m JOIN MovieTheaters t ON m.code = t.movie WHERE t.name ilike '%Odeon%' ORDER BY m.title NULLS LAST;
SELECT m.title AS movie_name, t.name AS theater_name FROM Movies m JOIN MovieTheaters t ON m.code = t.movie;
SELECT m.title AS movie_name, t.name AS theater_name FROM Movies m JOIN MovieTheaters t ON m.code = t.movie;
SELECT COUNT(*) FROM Movies m WHERE m.Rating ilike '%G%';
SELECT COUNT(*) FROM Movies m WHERE m.Rating ilike '%G%';
SELECT COUNT(DISTINCT mt.movie) AS total_movies FROM movie_theaters mt;
SELECT COUNT(DISTINCT mt.Movie) AS number_of_movies FROM MovieTheaters mt;
SELECT COUNT(DISTINCT m.code) AS number_of_movies FROM MovieTheaters m;
SELECT COUNT(DISTINCT m.code) AS number_of_movies FROM MovieTheaters mt JOIN Movies m ON mt.movie = m.code;
SELECT COUNT(DISTINCT mt.Name) FROM MovieTheaters mt;
SELECT COUNT(DISTINCT mt.Name) FROM MovieTheaters mt;
SELECT m.Rating FROM Movies m WHERE m.Title ilike '%Citizen%';
SELECT m.Rating FROM Movies m WHERE m.Title ilike '%Citizen%';
SELECT mt.name FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE m.rating ilike '%G%' OR m.rating ilike '%PG%';
SELECT mt.name FROM movietheaters mt JOIN movies m ON mt.movie = m.code WHERE m.rating ilike '%G%' OR m.rating ilike '%PG%';
SELECT m.title FROM movies m JOIN movie_theaters t ON m.code = t.movie WHERE t.name IN ('Odeon', 'Imperial')
SELECT m.title FROM Movies m JOIN MovieTheaters t ON m.code = t.movie WHERE t.name IN ('Odeon', 'Imperial')
SELECT m.title FROM movies m JOIN movie_theaters o ON m.code = o.movie WHERE o.name ilike '%Odeon%' AND EXISTS (SELECT 1 FROM movie_theaters i WHERE i.movie = m.code AND i.name ilike '%Imperial%') ORDER BY m.title NULLS LAST;
SELECT m.title FROM movies m JOIN movie_theaters mt1 ON m.code = mt1.movie JOIN movie_theaters mt2 ON m.code = mt2.movie WHERE mt1.name = 'Odeon' AND mt2.name = 'Imperial';
SELECT m.title FROM movies m LEFT JOIN movie_theaters mt ON m.code = mt.movie WHERE mt.name != 'Odeon' ORDER BY m.title NULLS LAST;
SELECT m.Title FROM Movies m WHERE m.Code NOT IN (SELECT t.Movie FROM MovieTheaters t WHERE t.Name = 'Odeon')
SELECT m.title FROM movies m ORDER BY m.title ASC;
SELECT m.title FROM movies m ORDER BY m.title ASC;
SELECT m.title FROM Movies m ORDER BY m.rating DESC;
SELECT m.title FROM movies m ORDER BY m.rating DESC;
SELECT mt.name FROM movie_theaters mt GROUP BY mt.name ORDER BY COUNT(mt.movie) DESC LIMIT 1;
SELECT mt.name FROM movie_theaters mt GROUP BY mt.name ORDER BY COUNT(mt.movie) DESC LIMIT 1;
SELECT m.title FROM movies m JOIN (SELECT mt.movie, COUNT(*) AS num_theaters FROM movie_theaters mt GROUP BY mt.movie ORDER BY num_theaters DESC LIMIT 1) AS mt ON m.code = mt.movie;
SELECT m.title FROM movies m JOIN movie_theaters mt ON m.code = mt.movie GROUP BY m.title ORDER BY COUNT(mt.name) DESC LIMIT 1;
SELECT m.rating, COUNT(*) AS movie_count FROM Movies m GROUP BY m.rating ORDER BY movie_count DESC;
SELECT m.rating, COUNT(*) AS number_of_movies FROM Movies m GROUP BY m.rating ORDER BY number_of_movies DESC NULLS LAST;
SELECT COUNT(*) FROM Movies m WHERE m.Rating IS NOT NULL;
SELECT COUNT(*) FROM Movies m WHERE m.Rating IS NOT NULL;
SELECT mt.name FROM movietheaters mt WHERE mt.movie IS NOT NULL;
SELECT DISTINCT mt.name FROM MovieTheaters mt;
SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NULL
SELECT mt.name FROM movie_theaters mt WHERE mt.movie IS NULL
SELECT mt.name FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE m.rating ilike '%G%';
SELECT m.title, t.name AS theater_name FROM movies m JOIN movie_theaters t ON m.code = t.movie WHERE m.rating = 'G';
SELECT m.title FROM movies m;
SELECT m.title FROM movies m;
SELECT DISTINCT m.Rating FROM Movies m;
SELECT m.rating FROM Movies m GROUP BY m.rating ORDER BY COUNT(m.rating) DESC;
SELECT m.code, m.title FROM Movies m WHERE m.rating IS NULL
SELECT m.code, m.title FROM Movies m WHERE m.rating IS NULL
SELECT m.title FROM movies m WHERE m.code NOT IN (SELECT t.movie FROM movie_theaters t);
SELECT m.Title FROM Movies m WHERE m.Code NOT IN (SELECT t.Movie FROM MovieTheaters t);
SELECT e.name, p.contents, p.weight FROM employee e JOIN shipment s ON e.employeeid = s.manager JOIN planet pl ON s.planet = pl.planetid JOIN package p ON s.shipmentid = p.shipment WHERE p.weight = (SELECT MAX(weight) FROM package);
SELECT c.name AS client_name, p.shipment AS shipment_id, p.package_number AS package_number, p.contents AS contents, p.weight AS weight FROM client c JOIN package p ON c.account_number = p.recipient ORDER BY weight DESC LIMIT 1;
SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';
SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';
SELECT e.position FROM Employee e WHERE e.name ilike '%Amy%Wong%' LIMIT 1;
SELECT e.position FROM Employee e WHERE e.name ilike '%Amy%Wong%'
SELECT e.salary, e.position FROM Employee e WHERE e.name ilike '%Turanga%Leela%'
SELECT e.salary, e.position FROM Employee e WHERE e.name ilike '%Turanga%Leela%' LIMIT 1;
SELECT AVG(e.salary) FROM employee e WHERE e.position ilike '%intern%';
SELECT AVG(e.salary) FROM employee e WHERE e.position ilike '%intern%';
SELECT h.level FROM has_clearance h WHERE h.employee = (SELECT e.employeeid FROM employee e WHERE e.position ilike '%Physician%');
SELECT h.level FROM Has_Clearance h WHERE h.employee = 757071 AND h.planet = 3;
SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';
SELECT COUNT(*) FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';
SELECT p.package_number FROM employee e JOIN shipment s ON e.employee_id = s.manager JOIN package p ON s.shipment_id = p.shipment_ WHERE e.name ilike '%Leo%Wong%' ORDER BY p.package_number NULLS LAST;
SELECT p.package_number FROM employee e JOIN shipment s ON e.employee_id = s.manager JOIN package p ON s.shipment_id = p.shipment_ WHERE e.name ilike '%Leo%Wong%' ORDER BY p.package_number NULLS LAST;
SELECT p.shipment, p.package_number, p.contents, p.weight, e.name AS sender_name, c.name AS recipient_name FROM package p JOIN client e ON p.sender = e.account_number JOIN client c ON p.recipient = c.account_number WHERE e.name ilike '%Leo%Wong%' OR c.name ilike '%Leo%Wong%';
SELECT p.package_number FROM package p JOIN client c ON p.sender = c.account_number WHERE c.name ilike '%Leo%Wong%' UNION SELECT p.package_number FROM package p JOIN client c ON p.recipient = c.account_number WHERE c.name ilike '%Leo%Wong%' ORDER BY p.package_number NULLS LAST;
SELECT COUNT(*) FROM Package p WHERE p.Sender = (SELECT e.AccountNumber FROM Employee e WHERE e.Name ilike '%Ogden%Wernstrom%') AND p.Recipient = (SELECT e.AccountNumber FROM Employee e WHERE e.Name ilike '%Leo%Wong%');
SELECT COUNT(*) FROM Package p WHERE p.Sender = (SELECT e.AccountNumber FROM Employee e WHERE e.Name = 'Ogden Wernstrom') AND p.Recipient = (SELECT e.AccountNumber FROM Employee e WHERE e.Name = 'Leo Wong');
SELECT p.Contents FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name ilike '%John%Zoidfarb%'
SELECT p.Contents FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name ilike '%John%Zoidfarb%' ORDER BY p.Contents NULLS LAST;
SELECT p.package_number, p.weight FROM client c JOIN shipment s ON c.account_number = s.manager JOIN package p ON s.shipment_id = p.shipment_id WHERE c.name ilike '%John%' ORDER BY p.weight DESC LIMIT 1;
SELECT p.package_number, p.weight FROM package p JOIN client c ON p.sender = c.account_number WHERE c.name ilike '%John%' ORDER BY p.weight DESC LIMIT 1;
SELECT p.package_number, p.weight FROM package p ORDER BY p.weight ASC NULLS LAST LIMIT 3;
SELECT p.package_number, p.weight FROM package p ORDER BY p.weight ASC NULLS LAST LIMIT 3;
SELECT c.name AS client_name, COUNT(p.package_number) AS total_packages FROM package p JOIN client c ON p.sender = c.account_number GROUP BY c.name ORDER BY total_packages DESC LIMIT 1;
SELECT c.name, COUNT(p.packageid) AS total_packages FROM client c JOIN package p ON c.accountnumber = p.sender GROUP BY c.name ORDER BY total_packages DESC LIMIT 1;
SELECT c.name, COUNT(p.package_number) AS package_count FROM client c JOIN package p ON c.account_number = p.recipient GROUP BY c.name ORDER BY package_count ASC LIMIT 1;
SELECT c.Name AS client_name, COUNT(p.PackageNumber) AS total_packages FROM Client c JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.Name ORDER BY total_packages ASC LIMIT 1;
SELECT c.name FROM client c JOIN package p ON c.accountnumber = p.sender GROUP BY c.name HAVING COUNT(p.packageid) > 1;
SELECT c.name FROM client c JOIN (SELECT s.sender FROM shipment s GROUP BY s.sender HAVING COUNT(s.shipmentid) > 1) AS subquery ON c.accountnumber = subquery.sender;
SELECT p.coordinates FROM planet p WHERE p.name = 'Mars';
SELECT p.coordinates FROM planet p WHERE p.name ilike '%Mars%';
SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;
SELECT p.name, p.coordinates FROM planet p ORDER BY p.name ASC;
SELECT s.shipmentid FROM shipment s WHERE s.manager = (SELECT e.employeeid FROM employee e WHERE e.name ilike '%Phillip%J%Fry%');
SELECT s.shipmentid FROM shipment s WHERE s.manager = (SELECT e.employeeid FROM employee e WHERE e.name ilike '%Phillip%J%Fry%');
SELECT s.date FROM shipment s ORDER BY s.date NULLS LAST;
SELECT s.date FROM shipment s ORDER BY s.date NULLS LAST;
SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name ilike '%Mars%';
SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name ilike '%Mars%';
SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name ilike '%Mars%' AND s.manager = (SELECT employeeid FROM employee e WHERE e.name ilike '%Turanga%Leela%');
SELECT s.shipmentid FROM shipment s JOIN employee e ON s.manager = e.employeeid JOIN planet p ON s.planet = p.planetid WHERE e.name ilike '%Turanga%Leela%' AND p.name ilike '%Mars%';
SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name ilike '%Mars%' OR s.manager = (SELECT employeeid FROM employee e WHERE e.name ilike '%Turanga%Leela%');
SELECT s.shipmentid FROM shipment s JOIN employee e ON s.manager = e.employeeid JOIN planet p ON s.planet = p.planetid WHERE e.name ilike '%Turanga%Leela%' AND p.name ilike '%Mars%';
SELECT p.name AS planet_name, COUNT(s.shipmentid) AS total_shipments FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.name ORDER BY total_shipments DESC NULLS LAST;
SELECT p.name AS planet_name, COUNT(s.shipmentid) AS number_of_shipments FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.name ORDER BY number_of_shipments DESC NULLS LAST;
SELECT p.name FROM Planet p JOIN (SELECT s.planet, COUNT(*) AS num_shipments FROM Shipment s GROUP BY s.planet ORDER BY num_shipments DESC LIMIT 1) AS m ON p.planetid = m.planet LIMIT 1;
SELECT p.name FROM planet p JOIN (SELECT s.planet, COUNT(*) AS num_shipments FROM shipment s GROUP BY s.planet) AS ps ON p.planetid = ps.planet ORDER BY ps.num_shipments DESC LIMIT 1;
SELECT e.name, COUNT(s.shipmentid) AS number_of_shipments FROM employee e JOIN shipment s ON e.employeeid = s.manager GROUP BY e.name;
SELECT e.name, COUNT(s.shipmentid) AS number_of_shipments FROM employee e JOIN shipment s ON e.employeeid = s.manager GROUP BY e.name ORDER BY number_of_shipments DESC NULLS LAST;
SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE pl.Name = 'Mars';
SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE pl.Name = 'Mars';
SELECT p.name AS planet_name, SUM(w.weight) AS total_weight FROM Package w JOIN Shipment s ON w.shipment = s.shipmentid JOIN Planet p ON s.planet = p.planetid GROUP BY p.name ORDER BY total_weight DESC NULLS LAST;
SELECT p.name AS planet_name, SUM(w.weight) AS total_package_weight FROM Package w JOIN Shipment s ON w.shipment = s.shipmentid JOIN Planet p ON s.planet = p.planetid GROUP BY p.name ORDER BY total_package_weight DESC NULLS LAST;
SELECT p.name FROM Planet p JOIN Shipment s ON p.planetid = s.planet WHERE SUM(s.date::INTEGER) > 30;
SELECT p.name FROM planet p JOIN (SELECT s.planet, SUM(p.weight) AS total_weight FROM package p GROUP BY s.planet HAVING SUM(p.weight) > 30) AS subquery ON p.planetid = subquery.planet;
SELECT p.package_number FROM package p JOIN shipment s ON p.shipment = s.shipment_id JOIN client c ON p.sender = c.account_number WHERE s.planet = (SELECT planet_id FROM planet WHERE name = 'Omicron Persei 8') AND c.name = 'Zapp Brannigan';
SELECT COUNT(*) FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Employee e ON s.Manager = e.EmployeeID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE e.Name ilike '%Zapp%Brannigan%' AND pl.Name ilike '%Omicron%Persei%8%';
SELECT p.package_number FROM package p JOIN shipment s ON p.shipment = s.shipment_id WHERE s.planet = (SELECT planet_id FROM planet WHERE name = 'Omicron Persei 8') OR p.sender = (SELECT account_number FROM client WHERE name = 'Zapp Brannigan');
SELECT COUNT(DISTINCT p.PackageNumber) AS total_packages FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID WHERE s.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8') OR p.Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan');
SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight BETWEEN 10 AND 30;
SELECT p.package_number, p.weight FROM package p WHERE p.weight BETWEEN 10 AND 30;
SELECT e.name FROM Employee e LEFT JOIN Has_Clearance hc ON e.employeeid = hc.employee AND hc.planet = (SELECT planetid FROM planet WHERE name = 'Mars') WHERE hc.employee IS NULL;
SELECT e.name FROM employee e LEFT JOIN has_clearance hc ON e.employeeid = hc.employee AND hc.planet = (SELECT planetid FROM planet WHERE name = 'Mars') WHERE hc.employee IS NULL;
SELECT e.name FROM employee e JOIN has_clearance hc ON e.employeeid = hc.employee WHERE hc.planet = (SELECT planetid FROM planet WHERE name = 'Omega III');
SELECT e.name FROM employee e JOIN has_clearance hc ON e.employeeid = hc.employee WHERE hc.planet = (SELECT planetid FROM planet WHERE name = 'Omega III');
SELECT p.name FROM planet p JOIN (SELECT h.planet FROM has_clearance h GROUP BY h.planet HAVING COUNT(h.employee) = 1) AS subquery ON p.planetid = subquery.planet;
SELECT p.name AS planet_name, e.name AS employee_name FROM Planet p JOIN Shipment s ON p.planetid = s.planet JOIN Employee e ON s.manager = e.employeeid WHERE EXISTS (SELECT 1 FROM Has_Clearance hc WHERE hc.employee = e.employeeid AND hc.planet = p.planetid);
SELECT e.name FROM employee e WHERE e.salary BETWEEN 5000 AND 10000;
SELECT e.name FROM employee e WHERE e.salary BETWEEN 5000 AND 10000 ORDER BY e.name NULLS LAST;
SELECT e.name FROM employee e WHERE e.salary > (SELECT AVG(e2.salary) FROM employee e2) OR e.salary > 5000;
SELECT e.name FROM employee e WHERE e.salary > (SELECT AVG(e2.salary) FROM employee e2) OR e.salary > 5000;
SELECT COUNT(*) FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee WHERE hc.Planet IS NULL OR hc.Planet != (SELECT PlanetID FROM Planet WHERE Name = 'Mars');
SELECT COUNT(*) FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee WHERE hc.Planet IS NULL OR hc.Planet != (SELECT PlanetID FROM Planet WHERE Name = 'Mars');
SELECT COUNT(g.game_id) AS total_games FROM game g;
SELECT COUNT(g.game_id) AS total_games FROM game g;
SELECT g.title, g.developers FROM game g ORDER BY g.units_sold_millions DESC;
SELECT g.title, g.developers FROM game g ORDER BY g.units_sold_millions DESC;
SELECT AVG(g.units_sold_millions) AS average_units_sold FROM game g WHERE g.developers NOT ILIKE '%Nintendo%';
SELECT AVG(g.units_sold_millions) FROM game g WHERE g.developers NOT ILIKE '%Nintendo%';
SELECT p.platform_name, p.market_district FROM platform p;
SELECT p.platform_name, p.market_district FROM platform p;
SELECT p.platform_name, p.platform_id FROM platform p WHERE p.download_rank = 1 ORDER BY p.platform_name NULLS LAST;
SELECT p.platform_name, p.platform_id FROM platform p WHERE p.download_rank = 1 ORDER BY p.platform_name NULLS LAST;
SELECT MIN(p.rank_of_the_year) AS min_rank, MAX(p.rank_of_the_year) AS max_rank FROM player p;
SELECT MIN(p.rank_of_the_year) AS min_rank, MAX(p.rank_of_the_year) AS max_rank FROM player p;
SELECT COUNT(*) FROM player p WHERE p.rank_of_the_year < 3;
SELECT COUNT(*) FROM player p WHERE p.rank_of_the_year <= 3;
SELECT p.player_name FROM player p ORDER BY p.player_name ASC;
SELECT p.player_name FROM player p ORDER BY p.player_name ASC;
SELECT p.player_name, p.college FROM player p ORDER BY p.rank_of_the_year DESC;
SELECT p.player_name, p.college FROM player p ORDER BY p.rank_of_the_year DESC;
SELECT p.player_name, p.rank_of_the_year FROM player p JOIN game_player gp ON p.player_id = gp.player_id WHERE gp.if_active = TRUE AND gp.game_id IN (SELECT game_id FROM game WHERE title ilike '%Super%Mario%World%');
SELECT p.player_name, g.title, rank() OVER (PARTITION BY g.title ORDER BY p.player_id) AS rank FROM player p JOIN game_player gp ON p.player_id = gp.player_id JOIN game g ON gp.game_id = g.game_id WHERE g.title ilike '%Super%Mario%World%' ORDER BY g.title, rank NULLS LAST;
SELECT DISTINCT g.developers FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college ilike '%Auburn%'
SELECT DISTINCT g.developers FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college ilike '%Auburn%'
SELECT AVG(g.units_sold_millions) AS average_units_sold FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard';
SELECT AVG(g.units_sold_millions) AS average_units_sold_millions FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard';
SELECT g.title, p.platform_name FROM game g JOIN platform p ON g.platform_id = p.platform_id;
SELECT g.title, p.platform_name FROM game g JOIN platform p ON g.platform_id = p.platform_id;
SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district IN ('Asia', 'USA');
SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district ilike '%Asia%' OR p.market_district ilike '%USA%';
SELECT g.franchise, COUNT(g.game_id) AS game_count FROM game g GROUP BY g.franchise ORDER BY game_count DESC NULLS LAST;
SELECT g.franchise, COUNT(g.game_id) AS number_of_games FROM game g GROUP BY g.franchise ORDER BY number_of_games DESC NULLS LAST;
SELECT g.franchise, COUNT(g.game_id) AS game_count FROM game g GROUP BY g.franchise ORDER BY game_count DESC LIMIT 1;
SELECT g.franchise, COUNT(g.game_id) AS game_count FROM game g GROUP BY g.franchise ORDER BY game_count DESC LIMIT 1;
SELECT g.franchise FROM game g GROUP BY g.franchise HAVING COUNT(g.game_id) >= 2;
SELECT g.franchise FROM game g GROUP BY g.franchise HAVING COUNT(g.game_id) >= 2;
SELECT p.player_name FROM player p LEFT JOIN game_player gp ON p.player_id = gp.player_id WHERE gp.player_id IS NULL;
SELECT p.player_name FROM player p WHERE p.player_id NOT IN (SELECT g.player_id FROM game_player g);
SELECT DISTINCT g.title FROM game g JOIN game_player p1 ON g.game_id = p1.game_id JOIN game_player p2 ON g.game_id = p2.game_id WHERE p1.player_id IN (SELECT player_id FROM player WHERE college ilike '%Oklahoma%') AND p2.player_id IN (SELECT player_id FROM player WHERE college ilike '%Auburn%');
SELECT DISTINCT g.title FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college ilike '%Oklahoma%' OR p.college ilike '%Auburn%';
SELECT DISTINCT g.franchise FROM game g;
SELECT DISTINCT g.franchise FROM game g;
SELECT g.title FROM game g WHERE g.game_id NOT IN (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard');
SELECT g.title FROM game g WHERE g.game_id NOT IN (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard') ORDER BY g.title NULLS LAST;
SELECT p.name FROM press p ORDER BY p.year_profits_billion DESC;
SELECT p.name FROM press p ORDER BY p.year_profits_billion DESC;
SELECT p.name FROM press p WHERE (p.year_profit_billion > 15 OR p.month_profit_billion > 1) ORDER BY p.name NULLS LAST;
SELECT p.name FROM press p WHERE (p.year_profits_billion > 15 OR p.month_profits_billion > 1);
SELECT p.year_profits_billion AS max_profit, AVG(p.month_profits_billion) AS avg_profit FROM press p GROUP BY p.year_profits_billion ORDER BY max_profit DESC NULLS LAST;
SELECT p.name AS press_name, EXTRACT(YEAR FROM b.release_date::DATE) AS YEAR, AVG(p.month_profits_billion) AS avg_profit, MAX(p.year_profits_billion) AS max_profit FROM book b JOIN press p ON b.press_id = p.press_id GROUP BY p.name, YEAR ORDER BY YEAR NULLS LAST;
SELECT p.name FROM press p ORDER BY p.month_profits_billion DESC NULLS LAST LIMIT 1;
SELECT p.name FROM press p ORDER BY p.month_profits_billion DESC NULLS LAST LIMIT 1;
SELECT p.name FROM press p ORDER BY ABS(p.month_profits_billion) DESC LIMIT 1;
SELECT p.name, SUM(p.month_profits_billion) AS total_month_profit FROM press p GROUP BY p.name ORDER BY total_month_profit DESC LIMIT 1;
SELECT COUNT(*) FROM author WHERE age < 30;
SELECT COUNT(*) FROM author WHERE age < 30;
SELECT a.gender, AVG(a.age) AS average_age FROM author a GROUP BY a.gender;
SELECT a.gender, AVG(a.age) AS average_age FROM author a GROUP BY a.gender ORDER BY average_age DESC NULLS LAST;
SELECT a.gender, COUNT(*) FROM author a WHERE a.age > 30 GROUP BY a.gender;
SELECT a.gender, COUNT(*) FROM author a WHERE a.age > 30 GROUP BY a.gender;
SELECT b.title FROM book b ORDER BY b.release_date DESC;
SELECT b.title FROM book b ORDER BY b.release_date DESC;
SELECT b.book_series, COUNT(b.book_id) AS book_count FROM book b GROUP BY b.book_series ORDER BY book_count DESC NULLS LAST;
SELECT b.book_series, COUNT(b.book_id) AS COUNT FROM book b GROUP BY b.book_series ORDER BY COUNT DESC NULLS LAST;
SELECT b.title, b.release_date FROM book b ORDER BY b.sale_amount DESC NULLS LAST LIMIT 5;
SELECT b.title, b.release_date FROM book b ORDER BY b.sale_amount DESC NULLS LAST LIMIT 5;
SELECT b.book_series FROM book b WHERE CAST(b.sale_amount AS INT) > 1000 AND CAST(b.sale_amount AS INT) < 500 GROUP BY b.book_series;
SELECT b.book_series FROM book b WHERE CAST(b.sale_amount AS INT) > 1000 AND CAST(b.sale_amount AS INT) < 500 GROUP BY b.book_series;
SELECT DISTINCT a."Name" FROM author a JOIN book b ON a."Author_ID" = b.Author_ID WHERE b.Book_Series ilike '%MM%' AND b.Book_Series ilike '%LT%';
SELECT DISTINCT a."Name" FROM book b JOIN author a ON b.Author_ID = a.Author_ID WHERE b.Book_Series IN ('MM', 'LT')
SELECT a."Name", a."Age" FROM "author" a LEFT JOIN "book" b ON a."Author_ID" = b.Author_ID WHERE b.Author_ID IS NULL;
SELECT a."Name" FROM "author" a LEFT JOIN book b ON a."Author_ID" = b.Author_ID WHERE b.Author_ID IS NULL;
SELECT a."Name" FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Name HAVING COUNT(b.Book_ID) > 1;
SELECT a."Name" FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Name HAVING COUNT(b.Book_ID) > 1;
SELECT b.title, a."name", p.name AS press_name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY sale_amount DESC NULLS LAST LIMIT 3;
SELECT b.title, a."name", p."name" FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY sale_amount DESC NULLS LAST LIMIT 3;
SELECT p.name AS press_name, SUM(b.sale_amount::int) AS total_sales FROM book b JOIN press p ON b.press_id = p.press_id GROUP BY p.name ORDER BY total_sales DESC NULLS LAST;
SELECT p.name AS press_name, SUM(b.sale_amount::int) AS total_sales FROM book b JOIN press p ON b.press_id = p.press_id GROUP BY p.name ORDER BY total_sales DESC NULLS LAST;
SELECT p.name AS press_name, COUNT(*) AS book_count FROM book b JOIN press p ON b.press_id = p.press_id WHERE CAST(b.sale_amount AS INT) > 1000 GROUP BY p.name ORDER BY book_count DESC NULLS LAST;
SELECT p.name AS press_name, COUNT(b.book_id) AS num_books FROM book b JOIN press p ON b.press_id = p.press_id WHERE CAST(b.sale_amount AS FLOAT) > 1000 GROUP BY p.name ORDER BY num_books DESC NULLS LAST;
SELECT a."Name" FROM book b JOIN author a ON b.Author_ID = a.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1;
SELECT a."Name" FROM book b JOIN author a ON b.Author_ID = a.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1;
SELECT a."Name", a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a."Name", a.Gender ORDER BY COUNT(b.Book_ID) DESC LIMIT 1;
SELECT a."Name", a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a."Name", a.Gender ORDER BY COUNT(b.Book_ID) DESC LIMIT 1;
SELECT a."Name" FROM author a LEFT JOIN book b ON a."Author_ID" = b.Author_ID AND b.Press_ID = (SELECT Press_ID FROM press WHERE Name ilike '%Accor%') WHERE b.Author_ID IS NULL;
SELECT a."Name" FROM "author" a LEFT JOIN book b ON a."Author_ID" = b.Author_ID AND b.Press_ID = 1 WHERE b.Author_ID IS NULL
SELECT p.name AS press_name, EXTRACT(YEAR FROM b.release_date::DATE) AS YEAR, SUM(p.month_profits_billion) OVER (PARTITION BY p.name ORDER BY EXTRACT(YEAR FROM b.release_date::DATE)) AS cumulative_profit FROM book b JOIN press p ON b.press_id = p.press_id GROUP BY p.name, YEAR HAVING COUNT(b.book_id) > 2;
SELECT p.name, SUM(p.year_profits_billion) AS total_yearly_profit FROM press p JOIN book b ON p.press_id = b.press_id GROUP BY p.name HAVING COUNT(b.book_id) > 2;
SELECT COUNT(DISTINCT a.author_name) AS number_of_authors FROM Authors a;
SELECT a.author_name FROM Authors a;
SELECT a.author_name, a.other_details FROM Authors a;
SELECT a.other_details FROM Authors a WHERE a.author_name = 'Addison Denesik';
SELECT COUNT(d.document_id) AS total_documents FROM Documents d;
SELECT d.author_name FROM Documents d WHERE d.document_id = 4;
SELECT d.author_name FROM Documents d WHERE d.document_name ilike '%Travel%to%Brazil%'
SELECT COUNT(d.document_id) FROM Documents d WHERE d.author_name ILIKE '%Era%Kerluke%'
SELECT d.document_name, d.document_description FROM Documents d;
SELECT d.document_id, d.document_name FROM Documents d WHERE d.author_name ILIKE '%Bianka%Cummings%' ORDER BY d.document_id NULLS LAST;
SELECT d.author_name, d.other_details FROM Documents d WHERE d.document_name ilike '%Travel%to%China%'
SELECT a.author_name, COUNT(d.document_id) AS document_count FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name ORDER BY document_count DESC NULLS LAST;
SELECT a.author_name, COUNT(d.document_id) AS document_count FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name ORDER BY document_count DESC LIMIT 1;
SELECT a.author_name FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name HAVING COUNT(d.document_id) >= 2;
SELECT COUNT(*) FROM Business_Processes bp;
SELECT bp.next_process_id, bp.process_name, bp.process_description FROM Business_Processes bp WHERE bp.process_id = 9;
SELECT bp.process_name FROM Business_Processes bp WHERE bp.process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9);
SELECT COUNT(DISTINCT po.process_outcome_code) AS total_process_outcomes FROM Process_Outcomes po;
SELECT po.process_outcome_code, po.process_outcome_description FROM Process_Outcomes po ORDER BY po.process_outcome_code NULLS LAST;
SELECT po.process_outcome_description FROM Process_Outcomes po WHERE po.process_outcome_code = 'working';
SELECT ps.process_status_code, COUNT(*) AS COUNT FROM Process_Status ps GROUP BY ps.process_status_code ORDER BY COUNT DESC NULLS LAST;
SELECT ps.process_status_code, ps.process_status_description FROM Process_Status ps ORDER BY ps.process_status_code NULLS LAST;
SELECT ps.process_status_description FROM Process_Status ps WHERE ps.process_status_code = 'ct';
SELECT COUNT(*) FROM Staff s;
SELECT s.staff_id, s.staff_details FROM Staff s ORDER BY s.staff_id NULLS LAST;
SELECT s.staff_details FROM Staff s WHERE s.staff_id = 100;
SELECT COUNT(DISTINCT r.staff_role_code) AS total_roles FROM Ref_Staff_Roles r;
SELECT r.staff_role_code, r.staff_role_description FROM ref_staff_roles r ORDER BY r.staff_role_code NULLS LAST;
SELECT r.staff_role_description FROM ref_staff_roles r WHERE r.staff_role_code = 'HR';
SELECT COUNT(DISTINCT dp.document_id) AS number_of_documents FROM Documents_Processes dp;
SELECT DISTINCT bp.process_id FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id;
SELECT d.document_id FROM Documents d WHERE d.document_id NOT IN (SELECT doc.document_id FROM Documents_Processes doc);
SELECT bp.process_id FROM Business_Processes bp LEFT JOIN Documents_Processes dp ON bp.process_id = dp.process_id WHERE dp.process_id IS NULL;
SELECT dp.process_outcome_description, ps.process_status_description FROM Documents_Processes dp JOIN Process_Outcomes po ON dp.process_outcome_code = po.process_outcome_code JOIN Process_Status ps ON dp.process_status_code = ps.process_status_code WHERE dp.document_id = 0;
SELECT bp.process_name FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id WHERE dp.document_id = (SELECT document_id FROM Documents WHERE document_name ilike '%Travel%to%Brazil%');
SELECT bp.process_id, COUNT(dp.document_id) AS document_count FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id ORDER BY bp.process_id NULLS LAST;
SELECT COUNT(DISTINCT s.staff_id) AS number_of_staff FROM Staff_in_Processes s JOIN Documents_Processes dp ON s.document_id = dp.document_id AND s.process_id = dp.process_id WHERE dp.document_id = 0 AND dp.process_id = 9;
SELECT s.staff_id, COUNT(d.document_id) AS total_documents FROM Staff s JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id JOIN Documents_Processes dp ON sp.document_id = dp.document_id AND sp.process_id = dp.process_id JOIN Documents d ON dp.document_id = d.document_id GROUP BY s.staff_id ORDER BY total_documents DESC NULLS LAST;
SELECT s.staff_role_code, COUNT(d.document_id) AS num_documents FROM Staff s JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id JOIN Documents_Processes dp ON sp.document_id = dp.document_id AND sp.process_id = dp.process_id JOIN Documents d ON dp.document_id = d.document_id GROUP BY s.staff_role_code ORDER BY num_documents DESC NULLS LAST;
SELECT COUNT(DISTINCT s.staff_role_code) FROM Staff_in_Processes s WHERE s.staff_id = 3;
SELECT COUNT(DISTINCT a.agency_id) AS number_of_agencies FROM Agencies a;
SELECT COUNT(*) FROM Agencies;
SELECT a.agency_id, a.agency_details FROM Agencies a;
SELECT a.agency_id, a.agency_details FROM Agencies a;
SELECT COUNT(DISTINCT c.client_id) AS total_clients FROM Clients c;
SELECT COUNT(DISTINCT c.client_id) AS total_clients FROM Clients c;
SELECT c.client_id, c.client_details FROM Clients c;
SELECT c.client_id, c.client_details FROM Clients c;
SELECT a.agency_id, COUNT(c.client_id) AS client_count FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id ORDER BY client_count DESC NULLS LAST;
SELECT a.agency_id, COUNT(c.client_id) AS number_of_clients FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id ORDER BY number_of_clients DESC NULLS LAST;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(c.client_id) DESC LIMIT 1;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(c.client_id) DESC LIMIT 1;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details HAVING COUNT(c.client_id) >= 2 ORDER BY a.agency_id NULLS LAST;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details HAVING COUNT(c.client_id) >= 2;
SELECT a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id WHERE c.client_details ilike '%Mac%';
SELECT c.client_id, c.agency_id, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id WHERE c.client_details ilike '%Mac%';
WITH client_info AS (SELECT c.client_id, c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id), staff_info AS (SELECT s.staff_id, s.staff_details, ci.agency_details FROM Staff s JOIN client_info ci ON s.agency_id = ci.agency_id) SELECT i.invoice_id, i.invoice_status, si.staff_details, ci.client_details FROM Invoices i JOIN staff_info si ON i.client_id = si.staff_id JOIN client_info ci ON ci.client_id = i.client_id;
SELECT c.client_id, c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT c.sic_code, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.sic_code ORDER BY client_count DESC NULLS LAST;
SELECT c.sic_code, COUNT(c.client_id) AS number_of_clients FROM Clients c GROUP BY c.sic_code ORDER BY number_of_clients DESC NULLS LAST;
SELECT c.client_id, c.client_details FROM Clients c WHERE c.sic_code ilike '%Bad%';
SELECT c.client_id, c.client_details FROM Clients c WHERE c.sic_code ilike '%Bad%';
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id;
SELECT a.agency_id FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id WHERE c.agency_id IS NULL;
SELECT a.agency_id FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id WHERE c.agency_id IS NULL;
SELECT COUNT(*) FROM Invoices i;
SELECT COUNT(*) FROM Invoices i;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i;
SELECT c.client_id, COUNT(i.invoice_id) AS total_invoices FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ORDER BY total_invoices DESC NULLS LAST;
SELECT c.client_id, COUNT(i.invoice_id) AS number_of_invoices FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ORDER BY number_of_invoices DESC NULLS LAST;
SELECT c.client_id, c.client_details, COUNT(i.invoice_id) AS total_invoices FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id, c.client_details ORDER BY total_invoices DESC LIMIT 1;
SELECT c.client_id, c.client_details FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id, c.client_details ORDER BY COUNT(i.invoice_id) DESC LIMIT 1;
SELECT c.client_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id HAVING COUNT(i.invoice_id) >= 2;
SELECT c.client_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id HAVING COUNT(i.invoice_id) >= 2;
SELECT i.invoice_status, COUNT(*) AS COUNT FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT DESC;
SELECT i.invoice_status, COUNT(*) AS number_of_invoices FROM Invoices i GROUP BY i.invoice_status ORDER BY number_of_invoices DESC NULLS LAST;
SELECT i.invoice_status, COUNT(*) AS COUNT FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT DESC LIMIT 1;
SELECT i.invoice_status, COUNT(*) AS COUNT FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT DESC LIMIT 1;
SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT m.meeting_type, m.other_details FROM Meetings m ORDER BY m.meeting_type NULLS LAST;
SELECT m.meeting_type, m.other_details FROM Meetings m;
SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m;
SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m;
SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status ilike '%Working%';
SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status ilike '%Working%';
SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL;
SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL;
SELECT COUNT(*) FROM Payments p;
SELECT COUNT(*) AS total_payments FROM Payments p;
SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p;
SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p;
SELECT i.invoice_id, p.payment_details, i.invoice_status FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id;
SELECT DISTINCT p.invoice_id, i.invoice_status FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id;
SELECT i.invoice_id, COUNT(p.payment_id) AS number_of_payments FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id ORDER BY i.invoice_id NULLS LAST;
SELECT p.invoice_id, COUNT(*) AS number_of_payments FROM Payments p GROUP BY p.invoice_id ORDER BY number_of_payments DESC NULLS LAST;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN (SELECT p.invoice_id, COUNT(*) AS num_payments FROM Payments p GROUP BY p.invoice_id ORDER BY num_payments DESC LIMIT 1) AS m ON i.invoice_id = m.invoice_id;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN (SELECT p.invoice_id, COUNT(*) AS payment_count FROM Payments p GROUP BY p.invoice_id ORDER BY payment_count DESC LIMIT 10) AS m ON i.invoice_id = m.invoice_id;
SELECT COUNT(DISTINCT s.staff_id) AS total_staff FROM Staff s;
SELECT COUNT(DISTINCT s.staff_id) AS total_staff FROM Staff s;
SELECT a.agency_id, COUNT(s.staff_id) AS total_staff FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id ORDER BY total_staff DESC NULLS LAST;
SELECT a.agency_id, COUNT(s.staff_id) AS total_staff FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id ORDER BY total_staff DESC NULLS LAST;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(s.staff_id) DESC LIMIT 1;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(s.staff_id) DESC LIMIT 1;
SELECT m.meeting_outcome, COUNT(*) AS COUNT FROM Meetings m GROUP BY m.meeting_outcome ORDER BY COUNT DESC;
SELECT m.meeting_outcome, COUNT(*) AS number_of_meetings FROM Meetings m GROUP BY m.meeting_outcome ORDER BY number_of_meetings DESC NULLS LAST;
SELECT c.client_id, COUNT(m.meeting_id) AS total_meetings FROM Clients c JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id ORDER BY total_meetings DESC NULLS LAST;
SELECT m.client_id, COUNT(*) AS number_of_meetings FROM Meetings m GROUP BY m.client_id ORDER BY number_of_meetings DESC NULLS LAST;
SELECT m.client_id, m.meeting_type, COUNT(*) AS total_meetings FROM Meetings m GROUP BY m.client_id, m.meeting_type ORDER BY total_meetings DESC;
SELECT m.meeting_type, COUNT(*) AS number_of_meetings FROM Meetings m GROUP BY m.meeting_type ORDER BY number_of_meetings DESC NULLS LAST;
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id;
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m JOIN Clients AS c ON m.client_id = c.client_id;
SELECT m.meeting_id, COUNT(sm.staff_id) AS total_staff FROM Meetings m JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id GROUP BY m.meeting_id ORDER BY total_staff DESC NULLS LAST;
SELECT m.meeting_id, COUNT(sm.staff_id) AS total_staff FROM Meetings m JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id GROUP BY m.meeting_id ORDER BY total_staff DESC NULLS LAST;
SELECT s.staff_id, COUNT(m.meeting_id) AS number_of_meetings FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id JOIN Meetings m ON sm.meeting_id = m.meeting_id GROUP BY s.staff_id ORDER BY number_of_meetings ASC LIMIT 1;
SELECT s.staff_id FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id GROUP BY s.staff_id HAVING COUNT(sm.meeting_id) > 0 ORDER BY COUNT(sm.meeting_id) ASC LIMIT 1;
SELECT COUNT(DISTINCT sm.staff_id) AS number_of_staff FROM Staff_in_Meetings sm;
SELECT COUNT(DISTINCT s.staff_id) AS total_staff FROM Staff_in_Meetings s;
SELECT COUNT(*) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.staff_id IS NULL;
SELECT COUNT(*) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.staff_id IS NULL;
SELECT c.client_id, c.client_details FROM Clients c JOIN Meetings m ON c.client_id = m.client_id OR c.client_id = m.client_id JOIN Invoices i ON c.client_id = i.client_id;
SELECT c.client_id, c.client_details FROM Clients c JOIN Meetings m ON c.client_id = m.client_id OR c.client_id = m.client_id JOIN Invoices i ON c.client_id = i.client_id WHERE m.meeting_type IS NOT NULL OR i.invoice_status IS NOT NULL;
SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE s.staff_details ilike '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sm.meeting_id) >= 1;
SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE s.staff_details ilike '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sm.meeting_id) >= 1;
SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id, c.sic_code, c.agency_id HAVING COUNT(DISTINCT m.meeting_id) >= 1;
SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id, c.sic_code, c.agency_id HAVING COUNT(DISTINCT m.meeting_id) >= 1;
SELECT m.start_date_time, m.end_date_time, c.client_details AS client_info, s.staff_details AS staff_info FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;
SELECT m.meeting_id, c.client_details AS client_name, s.staff_details AS staff_name, m.start_date_time, m.end_date_time FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;
