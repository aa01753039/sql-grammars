[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": "How many clubs are there?",
    "answer": "SELECT \n        GROUP BY club.Club_ID , Club_ID ORDER BY Name LIMIT 2;"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": "Count the number of clubs.",
    "answer": "SELECT * FROM soccer_3.club;"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": "List the name of clubs in ascending alphabetical order.",
    "answer": "SELECT Club_ID ,  FROM (SELECT Club_ID ,  FROM soccer_3.club) AS T ORDER BY club.Name LIMIT 5;"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered alphabetically?",
    "answer": "SELECT * FROM soccer_3.club ORDER BY club.Name LIMIT 14;"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": "What are the managers and captains of clubs?",
    "answer": "SELECT Events_number \n     \n       \n  \n      \n     LEFT JOIN (SELECT club.Club_ID , Club_ID FROM soccer_3.club) AS club ON Events_number = club.Events_number ;"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": "Return the managers and captains of all clubs.",
    "answer": "SELECT Club_ID , \n    FROM (SELECT club.Club_ID  \n\tFROM (SELECT club.Club_ID FROM (SELECT club.Club_ID ORDER BY club.Club_ID ) AS club)  AS subq) AS team;"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": "List the name of clubs whose manufacturer is not \"Nike\"",
    "answer": "SELECT club.Club_ID FROM (SELECT Club_ID , Name FROM (SELECT Club_ID FROM (SELECT club.Club_ID FROM (SELECT club.Club_ID WHERE club.Club_ID <> 'Nike')\n     AS club) AS club)) GROUP BY club.Club_ID ;"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": "What are the names of clubs who do not have the manufacturer Nike?",
    "answer": "SELECT Name FROM (SELECT DISTINCT Club_ID ,  FULL JOIN (SELECT * FROM (SELECT Club_ID ) AS T1)\n    AS CLUBS ON club.Club_ID = club.Name   ORDER BY Club_ID );"
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": "What are the names of players in ascending order of wins count?",
    "answer": "SELECT Player_ID FROM (SELECT Player_ID , Name ORDER BY Wins_count ) AS Subquery\n  WHERE player.Player_ID = 'asc';"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": "Return the names of players in order of count of wins, ascending.",
    "answer": "SELECT player.Name FROM (SELECT Player_ID , Country FROM (SELECT Player_ID  FROM (SELECT Player_ID ) AS T1 GROUP BY Player_ID ORDER BY Country  \n     LIMIT 2)LIMIT 648095);"
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": "What is the name of the player with the highest earnings?",
    "answer": "SELECT player.Player_ID , \n     FROM (SELECT Player_ID FROM (SELECT DISTINCT RIGHT JOIN (SELECT ORDER BY player.Player_ID ) ON Manager  = 0 ORDER BY Country LIMIT -1)) AS player;"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": "Return the name of the player who earns the most money.",
    "answer": "SELECT Player_ID FROM (SELECT Player_ID , Name ) ORDER BY Sponsor   LIMIT 1;"
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": "What are the distinct countries of players with earnings higher than 1200000?",
    "answer": "SELECT DISTINCT Country FROM soccer_3.player WHERE Earnings > 1200000;"
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": "From which countries are players who make more than 1200000 from?",
    "answer": "SELECT * FROM (SELECT DISTINCT Sponsor ,  INNER JOIN (SELECT Country ,  FROM (SELECT DISTINCT Name ,  FROM (SELECT GROUP BY Wins_count ) AS Current_Season WHERE Name = 1935) AS Current_Season WHERE Wins_count = ' + @.m.GetBytes().Result + \"') AS ALL_YEARS ON Sponsor  = Coun"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
    "answer": "SELECT DISTINCT club.Club_ID , \n   \t   FROM (SELECT DISTINCT RIGHT JOIN (SELECT * FROM (SELECT * ORDER BY Wins_count ) AS T1) AS subqueryingRIGHTJOIND ON club.Club_ID = club.Club_ID INNER JOIN (SELECT club.Country , club.Club_ID  \n \t"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
    "answer": "SELECT INNER JOIN (SELECT player.Country FROM (SELECT Player_ID ,  GROUP BY Country ORDER BY Wins_count  \n    LIMIT 1) AS T1  INNER JOIN (SELECT Player_ID FROM (SELECT Player_ID FROM (SELECT Player_ID WHERE Wins_count =2)) AS T3\n    \n\nINNER JOIN (SELECT  GROUP BY Player_ID ) AS t4"
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": "Show names of players and names of clubs they are in.",
    "answer": "SELECT club.Player_ID FROM (SELECT player.Name ,  RIGHT JOIN (SELECT player.Club_ID ,  FROM (SELECT club.Name ,  WHERE club.Name  = 'so' ORDER BY club.Name  DESC) AS club) ON club.Club_ID = player.Club_ID ) GROUP BY player.Player_ID ;"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": "What are the names of players and the corresponding clubs that they are in?",
    "answer": "SELECT player.Player_ID ,  ORDER BY player.Club_ID ;"
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": "Show names of clubs that have players with more than 2 win counts.",
    "answer": "SELECT Name FROM soccer_3.club WHERE club.Sponsor = '+str(row[\"win\"])>;\n<jupyter-text>\nOr, alternately you could use the following SQL query to get this: SELECT nameFROM CluBaTbO267Clu'ORDER BY Country   LIMIT 50.149387 OFFSET +1.14;"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that have players who have won more than twice?",
    "answer": "SELECT \n    FROM (SELECT   WHERE Country >=21486579) AS TEMP_NEW_TABLE;"
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": "Show names of players from the club with manager \"Sam Allardyce\".",
    "answer": "SELECT player.Name FROM (SELECT Player_ID , Name FROM (SELECT Player_ID FROM (SELECT Player_ID FROM (SELECT DISTINCT Manager ) AS Teams)   AS Player))\n    WHERE Club_ID = 2078431;"
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": "What are the names of players from the club managed by Sam Allardyce?",
    "answer": "SELECT DISTINCT Name FROM (SELECT Name ,  FULL JOIN (SELECT ) AS Cloct ON Club_ID = Club_ID ORDER BY Player_ID ), soccer_3.club, soccer_3.club\n        LIMIT 1;"
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": "Show names of clubs in descending order of average earnings of players belonging.",
    "answer": "SELECT club.Name ,  AS CROSS_APPLOINT_CLU\n     INNER JOIN (SELECT club.Name ,  AS club2  \nINNER JOIN soccer_3.player \n      AS player ON player.Club_ID = club.Club_ID ) AS dstemnt685901clubnamein ON soccer_3.player."
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
    "answer": "SELECT club.Name ,  AS FROM  \n     INNER JOIN (SELECT club.Name ,  RIGHT JOIN (SELECT Club_ID FROM (SELECT club.Name ) AS subsidi) ON club.Club_ID =soccer_3.club.Club_ID GROUP BY club.Name ORDER BY Earnings  \n \n\n\n\n   \n  \n\n\n\n    \n  \n\n\n\n     \n"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": "Show different manufacturers and the number of clubs they are associated with.",
    "answer": "SELECT * \n    FROM (SELECT DISTINCT Manufacturer ,  GROUP BY Manufacturer ORDER BY Club_ID ) AS TEMP;"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": "How many clubs use each manufacturer?",
    "answer": "SELECT Manager , \t  \n    GROUP BY Manufacturer ORDER BY Manufacturer ;"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": "Please show the most common manufacturer of clubs.",
    "answer": "SELECT club.Name , \n    GROUP BY Manufacturer   ORDER BY Country  DESC LIMIT 1;"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": "Which manufacturer is most common among clubs?",
    "answer": "SELECT  RIGHT JOIN (SELECT Manufacturer ,  FROM (SELECT DISTINCT Manufacturer  \n        FROM (SELECT Manufacturer FROM (SELECT Manufacturer FROM (SELECT Club_ID INNER JOIN (SELECT FROM (SELECT club.Club_ID ) AS Clubs WHERE club.Club_ID = ' + RAND()*2965318+ NULL\n    GROUP BY CLUBS)AS CLUBS ON"
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": "List the manufacturers that are associated with more than one club.",
    "answer": "SELECT DISTINCT Manufacturer FROM (SELECT RIGHT JOIN (SELECT * FROM (SELECT Club_ID ) AS T1 INNER JOIN (SELECT * FROM (SELECT Club_ID , \n                                                    FROM (SELECT Club_ID ORDER BY Manufacturer  \n      LIMIT 4) AS T2) AS T3 WHERE club.Club_ID  = Country ) ON Club_ID = Manufacturer GROUP BY Manufacturer"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": "Which manufacturers work for more than 1 club?",
    "answer": "SELECT Manufacturer FROM (SELECT Manufacturer ,  WHERE Manufacturer  =  13675) ORDER BY Wins_count LIMIT 2;"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": "List the country that have more than one player.",
    "answer": "SELECT DISTINCT Country FROM soccer_3.player;"
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": "Which countries have produced more than one player?",
    "answer": "SELECT DISTINCT Name FROM (SELECT DISTINCT Sponsor GROUP BY Sponsor ORDER BY Sponsor ) AS RESULT WHERE Sponsor  > 1;"
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": "List the name of clubs that do not have players.",
    "answer": "SELECT \tORDER BY Manager , Name , Club_ID  \n        LIMIT 10;"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that do not have any players?",
    "answer": "SELECT GROUP BY club.Name ORDER BY Club_ID  \n   \n \n \n \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLIMIT 50;"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
    "answer": "SELECT \n    \n    FROM (SELECT Earnings , Player_ID  \n         FROM (SELECT Country , Player_ID , \n                        LIMIT 259683) AS TEMP_TABLE ORDER BY Earnings ) AS DESC;"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
    "answer": "SELECT Name , Country FROM (SELECT DISTINCT player.Name , player.Country FROM (SELECT Player_ID ) AS T1 RIGHT JOIN (SELECT Player_ID FROM (SELECT Name  \n    FROM (SELECT Sponsor ORDER BY Earnings ), (SELECT Name FROM (SELECT Player_ID ORDER BY Earnings ) WHERE Country  = 'USA' ORDER BY Earnings ,"
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": "What is the number of distinct countries of all players?",
    "answer": "SELECT \tRIGHT JOIN (SELECT DISTINCT player.Country FROM (SELECT * FROM (SELECT RIGHT JOIN (SELECT Country ,  AS umpassumNotschONOR \n    FROM (SELECT Player_ID )\n        WHERE Country  =  'France' ORDER BY Country    \n     \n       \n        \n           \n          \n            \n              \n         \n             \n               \n                \n                  \n                 \n"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": "How many different countries are players from?",
    "answer": "SELECT DISTINCT Country FROM soccer_3.player\n    WHERE Player_ID = 21;"
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
    "answer": "SELECT * FROM (SELECT player.Name , \n        RIGHT JOIN (SELECT Earnings FROM (SELECT Player_ID ) AS Player INNER JOIN (SELECT Country FROM (SELECT Country   WHERE Country  = 'Australia') ORDER BY Earnings    LIMIT 10) AS Temp2 ON Player_ID = Player_ID GROUP BY Name LIMIT 3495867.10)\n       "
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
    "answer": "SELECT *FROM (SELECT player.Name , \n        RIGHT JOIN (SELECT Country FROM (SELECT DISTINCT Sponsor ) AS Player) ON Player_ID = Sponsor ORDER BY Earnings LIMIT 5);"
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
    "answer": "SELECT customer_id ,  FULL OUTER JOIN (SELECT customer_id FROM (SELECT customer_id FROM (SELECT customer_id WHERE Shipment_Items.customer_id =\n               (SELECT customer_id FROM (SELECT customer_id FROM (SELECT DISTINCT \n               RIGHT JOIN (SELECT customer_id FROM (SELECT Customer_Payment_Methods.custome"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
    "answer": "SELECT order_id , customer_first_name   FROM (SELECT order_id ORDER BY county   LIMIT 2) AS MULTIPLE_ITEMS_ORDER\n    INNER JOIN (SELECT DISTINCT order_id )  AS FIRST_ORDER ON customer_last_name = 'first_order' GROUP BY Customers.customer_first_name ;"
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
    "answer": "SELECT Orders.order_id ,  ORDER BY product_id  \n    LIMIT 0;"
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
    "answer": "SELECT Order_Items.order_id , \n    GROUP BY product_name , Products.product_price ;"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
    "answer": "SELECT date_order_placed FROM (SELECT order_id , date_order_placed  \n        FROM (SELECT *FROM (SELECT order_id WHERE order_id <= 90) AS subq) AS s) AS firstsub;"
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
    "answer": "SELECT DISTINCT date_order_placed FROM (SELECT order_id , RIGHT JOIN (SELECT order_item_id ) AS T1 ON Orders.order_id  =  town_city  LEFT JOIN (SELECT Customers.date_order_placed ) AS oudt ON Customers.order_id  =    Orders.order_id     LEFT JOIN (SELECT order_item"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
    "answer": "SELECT DISTINCT Customers.order_id \n\tFROM (SELECT customer_id , order_id FROM (SELECT * FROM (SELECT town_city FROM (SELECT customer_id FROM (SELECT )) AS t2) AS t3 GROUP BY customer_id )   AS t4 GROUP BY order_id \n    LIMIT 0);"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
    "answer": "SELECT login_name , \n   \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t \n \n     \t \t  \t  \t  \t  \t  \t  \t  \t  \t  "
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
    "answer": "SELECT * FROM e_commerce.Products WHERE Products.product_id = Products.product_id ORDER BY county  \n \n\n\n\n\n\n\n\n    \n       LIMIT 40;"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
    "answer": "SELECT order_id FROM (SELECT product_id , \n        ORDER BY county ) WHERE county <2;"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": "Which orders have at least 2 products on it? List the order id and date.",
    "answer": "SELECT DISTINCT Orders.order_id ,  ORDER BY Products.date_order_placed ;"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": "What are the ids and dates of the orders with at least two products?",
    "answer": "SELECT order_id , \n    FROM (SELECT order_id ) AS lower_table GROUP BY order_id ORDER BY county   LIMIT 2;"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": "Which product are listed in orders most frequently? List the id, product name and price.",
    "answer": "SELECT product_id , \n    ORDER BY county   LIMIT 5;"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
    "answer": "SELECT order_id , \n    GROUP BY product_id ORDER BY county  DESC LIMIT 10;"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": "Which order have the least sum of the product prices. List the order id and sum.",
    "answer": "SELECT \n    FROM (SELECT order_id ,   INNER JOIN (SELECT Orders.order_id , \n     FROM (SELECT Products.product_id FROM (SELECT Orders.order_item_id INNER JOIN (SELECT product_id ORDER BY product_price ) AS prodcuts ON order_id  =Orders.order_id   GROUP BY Orders."
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": "What is the order that total cost the least , and how much is the total cost ?",
    "answer": "SELECT Orders.order_id , \n     FULL JOIN (SELECT town_city   FROM (SELECT town_city ORDER BY town_city ) GROUP BY Customers.customer_id ORDER BY Shipments.date_order_placed LIMIT -1)\n\n    AS TOTALCUSTOMERCITYNAMEINNYCORRECTLYORDEREDUANTOSC"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": "What is the most popular payment method?",
    "answer": "SELECT payment_method_code FROM (SELECT town_city , payment_method_code )ORDER BY payment_method_code ;"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": "What is the payment method that most customers use?",
    "answer": "SELECT \n    FROM (SELECT payment_method_code , country FROM (SELECT  \n  \n     \n     FROM (SELECT payment_method_code , country  FROM (SELECT town_city ) AS INNER  \n       WHERE town_city  =  'Bathurst' ORDER BY payment_method_code ) AS T1) AS T2 ORDER BY payment_method_code LIMIT "
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": "How many number of products does each gender of customers buy? List the gender and the number",
    "answer": "SELECT country \n    FROM (SELECT gender_code ,  GROUP BY gender_code ORDER BY gender_code ) AS TEMP;"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": "How many products does each gender buy?",
    "answer": "SELECT  GROUP BY product_id ORDER BY county LIMIT 50;"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": "How many orders has each gender of customers placed?",
    "answer": "SELECT GROUP BY gender_code , county  \n        ORDER BY county ;"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": "How many orders has each gender placed?",
    "answer": "SELECT  GROUP BY gender_code ORDER BY country , gender_code  \n       \n   \n       \n  \n      \n  \n     \n    \n           \n             \n            \n        \n          \n         \n               \n                \n              \n                  \n                   \n                 \n                    \n                      \n                         \n                          LIMIT 25;"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": "List the customers' first name, middle initial, last name and payment methods.",
    "answer": "SELECT Customer_Payment_Methods.customer_first_name , \n       \t  \t  \t  \t \t  \t  \t  \t  \t  \t \t  \t \t    \t  \t  \t  \t  \t   \t  \t   \nFROM (SELECT customer_id , \t \t \t  \t   \n\t\t      \t  \t     \t \t  \t \t   \n\t \t  \t     \t\t\t   \t  \t     \t   \n     \t \t  \t     \t       "
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
    "answer": "SELECT customer_first_name , \n    GROUP BY customer_middle_initial  \nORDER BY customer_last_name ;"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": "List the invoices' status, date and the date of shipment.",
    "answer": "SELECT invoice_status_code , \n\t   INNER JOIN (SELECT invoice_date , invoice_number FROM (SELECT invoice_status_code FROM (SELECT invoice_status_code FROM (SELECT invoice_date ) \n   \nINNER JOIN (SELECT invoice_number FROM (SELECT invoice_status_code FROM (SELECT invoice_status_code FROM (SELECT invoice"
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": "What are the statuses, dates, and shipment dates for all invoices?",
    "answer": "SELECT Invoices.invoice_status_code , \n    INNER JOIN (SELECT Customers.customer_id FROM (SELECT invoice_date   ORDER BY date_order_placed ) AS Invoicing_clauses) ON Customers.customer_id = Invoices.customer_id GROUP BY Customer_Payment_Methods.payment_method_code , customer_id ;"
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": "List the names of the products being shipped and the corresponding shipment date.",
    "answer": "SELECT Products.product_name , \n        WHERE Customer_Payment_Methods.shipment_date  \n   \n    \n\n\n\n   \n\n   \n \n\n     \n\n      \n         \n           \n                \n             \n          \n              \n        \n            \n               \n                       \n                      \n                         \n                          \n                            \n                        \n\n                              \n\n                               \n\n\n\n\n\n                                "
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
    "answer": "SELECT invoice_date  FROM e_commerce.Orders;"
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
    "answer": "SELECT \n    ORDER BY order_status_code , order_id , customer_id   LIMIT 5;"
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
    "answer": "SELECT \n    ORDER BY date_order_placed , order_id   LIMIT 10;"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": "What is the product name and the color of the ordered items which have been shipped?",
    "answer": "SELECT Orders.order_id ,  ORDER BY date_order_placed   LIMIT -1;"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": "What are the names and colors of all products that have been shipped?",
    "answer": "SELECT \n    ORDER BY Products.product_name , shipment_id LIMIT 5;"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "answer": "SELECT \n    \t\t\tORDER BY customer_id , order_status_code  \n   \t \t\t\tLIMIT 10;"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "answer": "SELECT town_city , \n    GROUP BY product_name , town_city ;"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": "What are invoices status of all the orders which have not been shipped?",
    "answer": "SELECT Invoices.invoice_number FROM (SELECT Invoices.invoice_date , \n     INNER JOIN (SELECT order_id  \tFROM (SELECT ORDER BY invoice_date )    WHERE invoice_status_code = '[b;t'\tRIGHT OUTER JOIN (SELECT order_id FROM (SELECT Orders.order_id ORDER BY Invoices.invoic"
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
    "answer": "SELECT Orders.order_status_code , \n     ORDER BY order_status_code   LIMIT 5;"
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
    "answer": "SELECT \tORDER BY date_order_placed   LIMIT 1957642;"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": "For each order, what is its id, date, and total amount paid?",
    "answer": "SELECT Orders.order_id , ORDER BY Order_Items.order_id ;"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": "How many customers have placed any order?",
    "answer": "SELECT country \n    FROM (SELECT customer_id ,   WHERE order_id > 0) AS TEMP;"
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": "How many different customers have ordered things?",
    "answer": "SELECT country ORDER BY customer_id LIMIT 10;"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": "How many item states are there in the orders?",
    "answer": "SELECT country INNER JOIN (SELECT FROM (SELECT GROUP BY order_id ) AS T1)\n    AS T2 ON town_city <> 'USA' ORDER BY order_id ;"
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": "How many different item status codes are there listed in ordered items?",
    "answer": "SELECT country , \n    GROUP BY order_status_code ORDER BY order_id   LIMIT -1;"
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": "How many different payment methods are there?",
    "answer": "SELECT country \n    FROM (SELECT country ,  \n    \tFROM (SELECT DISTINCT country ) AS tem) AS sub;"
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": "How many different payment methods can customers choose from?",
    "answer": "SELECT \n    FROM (SELECT DISTINCT customer_id ,  \n        FROM (SELECT payment_method_code , \n               FROM (SELECT payment_method_code     \t\t      \n                 FROM (SELECT payment_method_code          \n                   FROM (SELECT payment_method_code           \t\t\t\t\t\t\t\t\t\tFROM (SELECT \n                        FULL JOIN (SELECT payment_method_code  \t\t\t\t\t\t\t\t\t   \n                          WHERE payment_method"
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
    "answer": "SELECT address_line_1 FROM (SELECT \nGROUP BY customer_id )INNER JOIN (SELECT address_line_1 , \n    FROM (SELECT DISTINCT *FROM (SELECT address_line_1  \n        FROM (SELECT address_line_1 FROM (SELECT address_line_1 FROM (SELECT address_line_1 INNER JOIN ("
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
    "answer": "SELECT customer_id ,  FROM (SELECT customer_id ) AS Username INNER JOIN (SELECT  FROM (SELECT customer_id  \n            FROM (SELECT )) AS Password) AS Passwordslist ON Customers.customer_id = product_name  ORDER BY product_name ;"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
    "answer": "SELECT * FROM (SELECT Products.product_size , Products.product_name FROM (SELECT DISTINCT product_name , product_size FROM (SELECT * FROM (SELECT address_line_1 , address_line_1  \n        FROM (SELECT product_name , product_size FROM (SELECT Products.product_name ))) AS T2) WHERE Shipments.shipment_id  = 'Dell')"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": "What are the sizes of all products whose name includes the word 'Dell'?",
    "answer": "SELECT \n    \t\t\tWHERE Invoices.product_name \t  \n \t\t\t =\t'Dell - Dell'\t\t\tORDER BY product_size   \n       \t\t\tLIMIT 1;"
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": "What are the product price and the product size of the products whose price is above average?",
    "answer": "SELECT \n     RIGHT JOIN (SELECT town_city , \n    FROM (SELECT Products.product_price ) AS A) AS B ON Products.product_price  =  \n        Customers.product_name ;"
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": "What are the prices and sizes of all products whose price is above the mean?",
    "answer": "SELECT Products.product_name ,  AS INTELLIGENTE, Products.product_price FROM (SELECT product_price FROM (SELECT DISTINCT product_price FROM (SELECT Products.product_name FROM (SELECT product_name FROM (SELECT product_name ) AS products)\n \t \t   AS sel1)) AS all_p GROUP BY product_name ORDER BY product_price LIMIT"
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": "How many kinds of products have not been sold?",
    "answer": "SELECT county , \n    FROM (SELECT town_city )WHERE product_size  = 1;"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": "What is the number of products that have not been ordered yet?",
    "answer": "SELECT country ORDER BY product_id \n    LIMIT 10;"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": "How many customers do not have any payment method?",
    "answer": "SELECT county FROM (SELECT DISTINCT town_city INNER JOIN (SELECT Customer_Payment_Methods.customer_id , customer_id  \n     FROM (SELECT * FROM (SELECT DISTINCT ) AS Customerpayments)) ON Customers.customer_id = payment_method_code GROUP BY customer_id ORDER BY Shipment_I"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": "How many customers do not have a listed payment method?",
    "answer": "SELECT county , \n    FROM (SELECT DISTINCT customer_id ) AS T1  \n   INNER JOIN (SELECT payment_method_code FROM (SELECT *FROM (SELECT town_city ORDER BY payment_method_code ), e_commerce.Customers) AS custsctuemrzT1gXO0RHNOC\n   WHERE Customer"
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": "What are all the order status and all the dates of orders?",
    "answer": "SELECT date_order_placed , \n    ORDER BY customer_id , customer_first_name LIMIT 10;"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": "What are the status codes and dates placed for all of the orders?",
    "answer": "SELECT ORDER BY date_order_placed LIMIT 2;"
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": "List the address, town and county information of the customers who live in the USA.",
    "answer": "SELECT * FROM (SELECT DISTINCT town_city FROM (SELECT address_line_1 , \n        FROM (SELECT address_line_1  \n     FROM (SELECT address_line_1  \n    FROM (SELECT address_line_1 , \n      \t\t\tFROM (SELECT address_line_1  \n     \t\t\t FROM (SELECT address_line_1 )) AS B \n       "
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
    "answer": "SELECT \n\t\t\tFULL JOIN (SELECT * FROM (SELECT DISTINCT RIGHT JOIN (SELECT * FROM (SELECT address_line_1 , \n   \t\t\t \t\t  \t  WHERE customer_id  = 'Ship' ORDER BY customer_id ) AS T3) AS T1 ON customer_id = town_city ) AS t4) AS T5 ON county  = country ;"
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": "List all the pairs of buyer first names and product names.",
    "answer": "SELECT \n     FULL JOIN (SELECT town_city FROM (SELECT DISTINCT \n              FROM (SELECT \n                     FULL JOIN (SELECT \n                       RIGHT JOIN (SELECT FROM (SELECT \n                       INNER JOIN (SELECT \n                        ORDER BY Products.product_name ) AS Products ON Customers.customer_id  =  \n                          Customers.customer_id ) WHERE Customer"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
    "answer": "SELECT \n    FULL JOIN (SELECT ORDER BY Customer_Payment_Methods.customer_id ) AS CTE1 ON customer_id = order_id ORDER BY order_id LIMIT 0;"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": "How many items are shipped?",
    "answer": "SELECT * FROM (SELECT country , shipment_date FROM (SELECT country WHERE country = 'United States') AS t)\n    INNER JOIN (SELECT DISTINCT shipment_date ) AS T2 ON Shipment_Items.shipment_id  =  105;"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": "How many products have been shipped?",
    "answer": "SELECT  WHERE product_id = 'prod.01827ebcd03ecf'\n    RIGHT JOIN (SELECT town_city , Products.product_id ) AS prodc ON Products.product_id  =  Customers.customer_id    \n\tGROUP BY product_id ;"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": "What is the product average price?",
    "answer": "SELECT FROM (SELECT Customer_Payment_Methods.customer_id INNER JOIN (SELECT FROM e_commerce.Products) AS SElected ON customer_id = Products.customer_id )\n    RIGHT JOIN e_commerce.Customers ON EXISTS (SELECT Customer_Payment_Methods.payment"
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": "How much do the products cost on average?",
    "answer": "SELECT \n        RIGHT JOIN (SELECT product_id ,  \n    FROM (SELECT DISTINCT Products.product_id ) AS tmp1 INNER JOIN (SELECT town_city ORDER BY Products.order_id LIMIT 5) AS Tm2 ON Products.order_id = '\n\nI'GROUP BY product_id , product_name , order_id ORDER BY order"
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": "What is the average price of the products being ordered?",
    "answer": "SELECT DISTINCT county FROM (SELECT \n    ORDER BY Products.product_id , order_status_code ) WHERE product_name = 'Products' GROUP BY Products.product_id ORDER BY Products.product_id ;"
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": "What is the price of all products being ordered on average?",
    "answer": "SELECT Customer_Payment_Methods.address_line_1  FROM (SELECT order_id , product_price ) AS T1 GROUP BY Products.product_id ORDER BY Products.product_price   \n        LIMIT +450;"
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": "What are the email address, town and county of the customers who are of the least common gender?",
    "answer": "SELECT town_city , county ,  GROUP BY gender_code ORDER BY gender_code LIMIT 1;"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
    "answer": "SELECT gender_code ,  GROUP BY gender_code , order_status_code ORDER BY gender_code ;"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
    "answer": "SELECT customer_id ,  \n     FROM (SELECT customer_id ORDER BY Customers.order_id ) AS subquery;"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
    "answer": "SELECT DISTINCT Orders.order_id , \n    FROM (SELECT order_id   FROM (SELECT DISTINCT order_id ) AS T1 INNER JOIN (SELECT ORDER BY Customers.customer_id  \t               \t   \t       \t     \t       \t \n\t\t               LIMIT 2)    \t \t \t       \t     \t      \t                 \t       \t       \t            \t     \t       \t    \t       \t \t     \t        \t                \t       \t     \t         \t       \t           \t"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": "What is the most uncommon order status?",
    "answer": "SELECT WHERE Orders.order_status_code = 2;"
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": "What is the least common order status?",
    "answer": "SELECT county FROM (SELECT DISTINCT county ORDER BY Customers.order_status_code ) AS Info;"
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": "For all the products sold for more than 3 times, list their id and description.",
    "answer": "SELECT Products.product_id , \n  \t    \t    FROM (SELECT DISTINCT product_id , \n    \t\t    FROM (SELECT product_description , \n    \t\t\t        FROM (SELECT product_name , \n    \t\t\t\t      WHERE product_price > 3) AS subq)) AS products;"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": "For all products sold more than 3 times, what are their ids and descriptions?",
    "answer": "SELECT product_id , country , \n    FROM (SELECT Products.product_id  \nFROM (SELECT Products.product_id ,  GROUP BY Products.county ) ORDER BY order_id LIMIT 5) AS sub;"
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
    "answer": "SELECT INNER JOIN (SELECT DISTINCT INNER JOIN (SELECT date_order_placed , order_id FROM (SELECT *FROM e_commerce.Invoices) AS T1 WHERE town_city  =  'Indian') AS NATALIA_ID ON e_commerce.Customers.customer_id = Invoices.customer_id INNER JOIN (SELECT DISTINCT"
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
    "answer": "SELECT Shipments.shipment_id , Invoices.invoice_date FROM (SELECT town_city WHERE Invoices.customer_id  =  '15')\n        INNER JOIN (SELECT invoice_date FROM (SELECT invoice_number FROM (SELECT shipment_id ) ORDER BY invoice_date LIMIT 2)) AS two_closestInvoices ON Invoices"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": "what are all shipment tracking numbers and shipment dates?",
    "answer": "SELECT \n    WHERE Customer_Payment_Methods.customer_id  =  '23' ORDER BY Shipment_Items.shipment_date ;"
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": "What are the tracking numbers and dates for all shipments listed?",
    "answer": "SELECT shipment_tracking_number FROM e_commerce.Order_Items, e_commerce.Orders WHERE order_status_code = 3426 ORDER BY order_id LIMIT -1 OFFSET +50;"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": "What are the color, description and size of the products priced below the maximum price.",
    "answer": "SELECT product_description , \n   \t\t\t  \t    \t    \t    FROM (SELECT product_id , \n      \t    \t    \t    \t \t     \t    \t \t        WHERE product_id < \n       \t    \t    \t    \t    \t     \t   \t   \t    \t     \t     \t    \t       3) AS MaxPrice_products;"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
    "answer": "SELECT town_city  FROM (SELECT product_description , town_city , country , town_city ) AS T1 WHERE product_description  =  'Men'\n    LIMIT 5;"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": "Return the names of directors who are older than the average age.",
    "answer": "SELECT Name FROM (SELECT director_admin.Name ,  AS INTERVAL\n     FULL JOIN (SELECT Title , \n    FROM (SELECT director_admin.Name \n    FROM (SELECT Name FROM (SELECT Name INNER JOIN (SELECT Name , Age )   AS director_admi ON director_admin.Name = director_admin.Name )), (SELECT Age FROM (SELECT Age FROM bbc_c"
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": "Find the the name of the oldest director.",
    "answer": "SELECT Title FROM (SELECT DISTINCT \n                 FROM (SELECT DISTINCT Title ,  RIGHT JOIN (SELECT  \n   \n               ORDER BY Director_ID ) AS directors_table ON Director_ID = Director_ID ORDER BY director.Title , director_admin.Title , director_admin.Director_ID LIMIT 1)\n                WHERE"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": "How many channels have the word 'bbc' in their internet link?",
    "answer": "SELECT channel.Name FROM bbc_channels.director AS chan WHERE channel.Name = ''');\n</code>\nasp;mysql -u userid _ScrewSpot_:)C3nce240716-bottle,you+MustDiveIntoTheLing(#%&#^&amp;)InYellowSubstackPowYouDoNotUnderstand. 9"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": "How many different digital terrestrial channels are there?",
    "answer": "SELECT * FROM bbc_channels.channel WHERE channel.Name = 'Digital TV'\n    LIMIT 1;"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": "List all program titles in the order of starting year. List the most recent one first.",
    "answer": "SELECT DISTINCT Program_ID , \n    GROUP BY Title ORDER BY Start_Year LIMIT 1;"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": "Which director is in charge of the most programs?",
    "answer": "SELECT Director_ID FROM (SELECT DISTINCT Internet , INNER JOIN (SELECT director_admin.Director_ID , \n                FROM (SELECT Title , Program_ID ) AS director GROUP BY Director_ID ORDER BY Title   LIMIT 1)   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": "Find the name and age of the director who is in charge of the most programs?",
    "answer": "SELECT Title , \n    FROM (SELECT Program_ID  \n INNER JOIN bbc_channels.program AS t1 ON bbc_channels.program.Title  = 'actor' ORDER BY program.Name  LIMIT 4) AS subq;"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": "Return the title of the program that began most recently.",
    "answer": "SELECT Title FROM (SELECT Title ,  \n    RIGHT JOIN (SELECT * FROM (SELECT Title  ORDER BY Title LIMIT 2) AS B) AS A1 ON Program_ID  = Age ) WHERE Start_Year =(SELECT Channel_ID INNER JOIN (SELECT Title WHERE Channel_ID = 374908   RIGHT OUTER JOIN (SELECT * FROM (SELECT DISTINCT Title"
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": "Find the name and website link of the channels that have more than one program.",
    "answer": "SELECT channel.Name , \n    FULL JOIN (SELECT channel.Name FROM (SELECT channel.Name FROM (SELECT Channel_ID FROM (SELECT Channel_ID FROM (SELECT Title , Channel_ID   FROM (SELECT Title , Channel_ID FROM (SELECT Channel_ID WHERE Name  = 'Lauw Wuoto') AS One)) AS ONE) AS TWO GROUP BY channel.Name"
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": "Find the number of programs for each channel. Return the name of each channel as well.",
    "answer": "SELECT \n    ORDER BY Channel_ID , Channel_ID ;"
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": "Find the number of channels that do not run any program.",
    "answer": "SELECT \n    FROM (SELECT DISTINCT Title , Channel_ID  \n   FROM (SELECT channel.Title , Channel_ID ) AS T1 WHERE Title     =  'Moving Platform')    \n            INNER JOIN (SELECT Title , Channel_ID       FROM (SELECT channel.Title        RIGHT JOIN bbc_channels.channel ON channel.Channel_ID  =  "
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": "What is the name of the director who is in the \"Dracula\" program?",
    "answer": "SELECT * FROM (SELECT DISTINCT *)\n    WHERE director_admin.Program_ID = 'Dracula'\n \nINNER JOIN (SELECT Program_ID , INNER JOIN (SELECT Title ,  AS ID_number, Name FROM (SELECT DISTINCT * FROM (SELECT director_admin.Program_ID   WHERE director_admin.Program_ID  ='Dracula')) AS t1)\n    AS id"
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": "Find the name and internet web of the channel that is directed by the most directors.",
    "answer": "SELECT DISTINCT channel.Name ,  INNER JOIN (SELECT Channel_ID FROM (SELECT channel.Name , channel.Internet ,  FROM (SELECT channel.Name  FROM (SELECT channel.Name , channel.Internet ) AS T1) GROUP BY channel.Channel_ID ORDER BY director.Name LIMIT 1))\n \t\t\t AS T2 ON channel.Channel_ID =T"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": "Find the name of the directors whose age is between 30 and 60.",
    "answer": "SELECT director_admin.Name FROM (SELECT Name FROM (SELECT Name FROM (SELECT Name FROM (SELECT Director_ID ,  \n                FROM (SELECT Name WHERE Director_ID = Director_ID ) AS Director))), bbc_channels.director)WHERE director.Age <=60;"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
    "answer": "SELECT Title , Name FROM (SELECT DISTINCT  GROUP BY Director_ID ) AS RESULT\nGROUP BY Title ORDER BY Name ;"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
    "answer": "SELECT \n    \n    FROM bbc_channels.channel AS t1 INNER JOIN bbc_channels.channel AS t2 ON Title  = 2;"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": "How many radios are there?",
    "answer": "SELECT Transmitter \n        FROM (SELECT DISTINCT Radio_ID , Radio_MHz   WHERE Transmitter = 'The name of the transmitters') AS TABLENAME;"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": "List the transmitters of radios in ascending order of erp kw .",
    "answer": "SELECT GROUP BY RnaG_MHz \n         ORDER BY Transmitter LIMIT 4500 OFFSET +12386.97;"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": "What are the names and original air dates of tv shows?",
    "answer": "SELECT Transmitter , 2FM_MHz ,  RIGHT JOIN tv_shows.tv_show\n    AS name  \t    \n\t\t     \t\t\n      \t \t \t  \n        \n         \t \t       \t  \n       \t \t   \n\t     \n          \n\t\t\t\n                 \t \n              \n               \n                  \n                \n             \n            \n           \n            \n \n\n  \n  \n  \n  \n   "
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": "List the station names of city channels whose affiliation is not \"ABC\".",
    "answer": "SELECT * FROM tv_shows.city_channel WHERE Affiliation \n<> 'ABC' ORDER BY Station_name ;"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
    "answer": "SELECT radio.ERP_kW LIMIT 26498279;"
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": "What is the transmitter of the radio with the largest ERP_kW?",
    "answer": "SELECT 2FM_MHz FROM (SELECT Transmitter ,   LIMIT 140) AS ST GROUP BY Transmitter ORDER BY Lyric_FM_MHz LIMIT 3;"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": "What is the average ERP across all radios?",
    "answer": "SELECT Affiliation FROM (SELECT DISTINCT Affiliation , RIGHT JOIN (SELECT DISTINCT Affiliation ) ON Radio_ID = radio.Radio_ID  \n        GROUP BY Radio_ID ORDER BY Radio_ID LIMIT 3) AS AVg;"
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
    "answer": "SELECT city_channel_radio.Affiliation ,  GROUP BY Affiliation ORDER BY Affiliation ;"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": "Please show the most common affiliation for city channels.",
    "answer": "SELECT Affiliation FROM (SELECT DISTINCT Affiliation , \n    GROUP BY Affiliation ORDER BY city_channel_radio.Affiliation ) AS T1;"
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": "List the affiliations shared by more than three city channels.",
    "answer": "SELECT DISTINCT Affiliation , \n     FULL JOIN (SELECT Transmitter ORDER BY Affiliation ) AS Affilieation_Channels ON Affiliation >3;"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
    "answer": "SELECT City ,  GROUP BY Station_name ORDER BY City  \n    LIMIT 15;"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
    "answer": "SELECT radio.Transmitter ,  GROUP BY city_channel.ID ;"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
    "answer": "SELECT radio.Transmitter , \n     GROUP BY radio.Transmitter , 2FM_MHz , 2FM_MHz , 2FM_MHz ORDER BY 2FM_MHz ;"
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
    "answer": "SELECT * FROM (SELECT radio.Transmitter ,  GROUP BY city_channel.Radio_ID ) AS Table1 INNER JOIN (SELECT Transmitter , City_channel_ID  \n     FROM (SELECT Radio_ID , RIGHT JOIN (SELECT DISTINCT radio.Transmitter    FROM (SELECT * FROM (SELECT radio.Radio_ID ORDER BY radio.Radio_ID ) AS Table1"
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
    "answer": "SELECT tv_shows.tv_show_name , \n                FROM tv_shows.radio WHERE tv_shows.city_channel_tv_show.tv_show_name  =  'The Mystery at the Cradle' ORDER BY city_channel_radio.Transmitter LIMIT 1;"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
    "answer": "SELECT Total_Production ,   FROM vehicle_driver.vehicle WHERE Power > 5983;"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
    "answer": "SELECT * FROM (SELECT Total_Production  \n            FROM (SELECT Model , \n                RIGHT JOIN (SELECT Top_Speed FROM vehicle_driver.vehicle) AS Top_Speed ON Top_Speed = Driver_ID ) GROUP BY Model LIMIT 1);"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": "What are the names of the drivers who are citizens of the 'United States'?",
    "answer": "SELECT driver.Name FROM vehicle_driver.driver WHERE Citizenship = (SELECT Name  FROM (SELECT DISTINCT ORDER BY Citizenship ) AS U)\n    INNER JOIN vehicle_driver.driver ON vehicle_driver.Driver_ID  = Total_Production   GROUP BY Citizenship ORDER BY Name     \n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers with citizenship from the United States.",
    "answer": "SELECT Name FROM (SELECT DISTINCT Name , \n    LIMIT 2019) AS ALL_USDA_DRIVERS;"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
    "answer": "SELECT  RIGHT JOIN (SELECT Total_Production , driver.Driver_ID FROM vehicle_driver.driver) AS DRIVER ON Vehicle_ID  = \n   15;"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
    "answer": "SELECT Driver_ID FROM (SELECT DISTINCT driver.Driver_ID , \n        FULL JOIN (SELECT *FROM (SELECT Total_Production ) AS drver) ON driver.Driver_ID = driver.Driver_ID ORDER BY driver.Total_Production );"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
    "answer": "SELECT \n        RIGHT JOIN (SELECT Total_Production ,   FROM vehicle_driver.vehicle_driver) AS zhuszhoor ON vehicle_driver.vehicle_driver.Vehicle_ID = vehicle_driver.Vehicle_ID ;"
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
    "answer": "SELECT \n\t  \t\t\tRIGHT JOIN (SELECT DISTINCT RIGHT JOIN (SELECT * FROM vehicle_driver.vehicle) AS A1 ON Builder = 'Zhuzhou' ORDER BY Power ) ON Name = Driver_ID \n    ORDER BY Power LIMIT 3;"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
    "answer": "SELECT vehicle_driver.driver.Driver_ID FROM (SELECT Vehicle_ID , \n        RIGHT JOIN (SELECT DISTINCT driver.Driver_ID   FROM (SELECT Driver_ID ORDER BY Total_Production   LIMIT 1) AS LEASTESTS) ON vehicle.Vehicle_ID = driver.Driver_ID )GROUP BY Citizensh"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": "Return the id of the vehicle that has been driven the fewest times.",
    "answer": "SELECT \n    \t\t\tFROM vehicle_driver.driver ORDER BY driver.Driver_ID LIMIT 1;"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
    "answer": "SELECT Top_Speed , Power FROM vehicle_driver.vehicle WHERE Model = 'China'\n    LIMIT 2;"
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": "Return the top speed and power of the vehicle that was built in the year 1996.",
    "answer": "SELECT Top_Speed , Power FROM vehicle_driver.vehicle ORDER BY Build_Year LIMIT 0;"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": "What are the build year, model name and builder of the vehicles?",
    "answer": "SELECT Total_Production , \n      FROM (SELECT Build_Year ) AS Builder_ID  \n   INNER JOIN (SELECT Model    FROM vehicle_driver.vehicle)     AS ModelName ON vehicle_driver.Build_Year  = Vehicle_ID ;"
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": "Give the build year, model, and builder of each vehicle.",
    "answer": "SELECT * FROM vehicle_driver.vehicle;"
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": "How many drivers have driven vehicles built in 2012?",
    "answer": "SELECT DISTINCT Total_Production , Driver_ID FROM vehicle_driver.driver GROUP BY Driver_ID ORDER BY Total_Production   LIMIT -5;"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": "Count the number of different drivers who have driven vehicles built in 2012.",
    "answer": "SELECT Driver_ID FROM vehicle_driver.driver GROUP BY driver.Driver_ID ;"
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": "How many drivers have raced in 'NASCAR'?",
    "answer": "SELECT Name FROM (SELECT DISTINCT Name , LEFT OUTER JOIN (SELECT RIGHT JOIN (SELECT DISTINCT Name , LEFT OUTER JOIN (SELECT Total_Production FROM (SELECT *FROM (SELECT Total_Production INNER JOIN (SELECT \n   INNER JOIN (SELECT DISTINCT Total_Production"
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have raced in NASCAR.",
    "answer": "SELECT Total_Production FROM (SELECT DISTINCT Racing_Series INNER JOIN (SELECT DISTINCT Name FROM vehicle_driver.vehicle) AS TOTAL_PRODUCTIOE ON Driver_ID = Name ) WHERE Citizenship = 2014\n\t\t\tORDER BY Total_Production   LIMIT"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": "What is the average top speed of vehicles?",
    "answer": "SELECT Total_Production FROM vehicle_driver.vehicle_driver\n  WHERE Top_Speed = (SELECT Top_Speed FROM vehicle_driver.vehicle_driver) GROUP BY Vehicle_ID ORDER BY Driver_ID ;"
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": "Return the average top speed across all vehicles.",
    "answer": "SELECT Total_Production FROM vehicle_driver.vehicle;"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
    "answer": "SELECT *FROM vehicle_driver.driver WHERE vehicle_driver.vehicle.Driver_ID = vehicle_driver.vehicle.Driver_ID ;"
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers who have driven vehicles with power over 5000.",
    "answer": "SELECT Top_Speed FROM vehicle_driver.driver WHERE Top_Speed > 5000;"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": "Which car models have total production larger than 100 or top speed higher than 150?",
    "answer": "SELECT * FROM vehicle_driver.vehicle_driver;"
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
    "answer": "SELECT * FROM vehicle_driver.vehicle, vehicle_driver.driver\n  WHERE vehicle.Total_Production  >  2346789 ORDER BY driver.Name LIMIT 1;"
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
    "answer": "SELECT Total_Production , \n                RIGHT JOIN (SELECT Model , Name FROM vehicle_driver.vehicle) AS a ON Vehicle_ID = Name GROUP BY Model ;"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": "Return the model and build year of cars that include \"DJ\" in their model names.",
    "answer": "SELECT \t  \n    FULL JOIN (SELECT Model ,  INNER JOIN (SELECT Build_Year FROM (SELECT * FROM (SELECT Model ,  AS ount FROM (SELECT DISTINCT Model ) AS T1 RIGHT JOIN (SELECT Model ,  AS mname, GROUP BY Racing_Series  \n                ORDER BY Racing_Series \n                         LIMIT 30) AS T2 ON T"
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": "What are the models which have not been driven by any drivers?",
    "answer": "SELECT \n    FROM (SELECT *FROM vehicle_driver.vehicle) AS t1 WHERE EXISTS (SELECT driver.Driver_ID   FROM (SELECT Driver_ID     FROM (SELECT DISTINCT driver.Driver_ID      FROM (SELECT Total_Production       INNER JOIN (SELECT Driver_ID       \tFROM (SELECT driver.Driver_ID    FROM (SELECT Driver_ID         FROM vehicle_driver."
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": "Return the models of vehicles that have never been driven.",
    "answer": "SELECT \n    \t  \t  \t  \t  \t   \t  \t \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  "
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
    "answer": "SELECT * FROM vehicle_driver.driver WHERE driver.Name = 'Ziyang'\n        INNER JOIN vehicle_driver.vehicle ON Vehicle_ID  = Driver_ID ;"
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
    "answer": "SELECT Total_Production , \n    \t\t\tINNER JOIN (SELECT Driver_ID FROM vehicle_driver.vehicle) AS DRIVERS_INSIDE_CHECKS ON driver.Driver_ID = vehicle.Driver_ID ORDER BY Total_Production  \n           \t\t\tLIMIT 2;"
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
    "answer": "SELECT DISTINCT Top_Speed , Model FROM vehicle_driver.driver GROUP BY Driver_ID ORDER BY Total_Production   LIMIT 1;"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
    "answer": "SELECT vehicle_driver.driver.Driver_ID , vehicle_driver.vehicle_driver.Vehicle_ID FROM (SELECT driver.Driver_ID , RIGHT JOIN vehicle_driver.vehicle_driver ON Driver_ID = vehicle_driver.vehicle_driver.Driver_ID ) GROUP BY vehicle_driver.Vehicle_ID \n       \n    LIMIT 2;"
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": "How many vehicles have maximum top speed?",
    "answer": "SELECT \n        RIGHT JOIN (SELECT vehicle_driver.vehicle_driver.Driver_ID , \n  \tFROM vehicle_driver.vehicle_driver) AS T1 ON driver.Driver_ID = Total_Production GROUP BY driver.Driver_ID ;"
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
    "answer": "SELECT Total_Production , \n    RIGHT JOIN (SELECT * FROM vehicle_driver.vehicle) AS v ON driver.Total_Production = Vehicle_ID INNER JOIN vehicle_driver.driver AS d ON Driver_ID  = driver.Driver_ID \n  ORDER BY Driver_ID , Driver_ID ;"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": "Show all driver names in the alphabetical order.",
    "answer": "SELECT Name FROM (SELECT DISTINCT Name , Driver_ID \nFROM (SELECT DISTINCT Name , Driver_ID FROM (SELECT Name FROM (SELECT Name WHERE Name <> 'Pierre'))) AS T1) ORDER BY Name   LIMIT 5;"
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": "What are the names of drivers, returned in alphbetical order?",
    "answer": "SELECT Total_Production ORDER BY Citizenship \n   \n  \n    \n     \n      \n       \n           \n         \n            \n          \n              \n             \n               \n                 \n                \n                  \n                   \n                    \n                     \n                        \n                         \n                           \n                              \n                                \n\n\n\n\n\n\n                                          \n\n\n\n                                              \n                                             "
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": "How many drivers have been racing in each racing series?",
    "answer": "SELECT Total_Production , \n     RIGHT JOIN (SELECT driver.Name FROM vehicle_driver.vehicle) AS DRIVER ON Vehicle_ID = Driver_ID ;"
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers that have raced in each series.",
    "answer": "SELECT Racing_Series , \n        GROUP BY Racing_Series ORDER BY Racing_Series ;"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
    "answer": "SELECT DISTINCT Name , Citizenship FROM vehicle_driver.driver WHERE Driver_ID = (SELECT driver.Driver_ID FROM vehicle_driver.vehicle WHERE Vehicle_ID = 'DJ1')\n  ORDER BY Name ;"
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
    "answer": "SELECT \t  \n   \t  \t  \t    \t  FROM vehicle_driver.driver AS T2 INNER JOIN vehicle_driver.driver AS T1 ON Total_Production  =   \t  Driver_ID  \t   \t  \t  LEFT JOIN vehicle_driver.vehicle ON driver.Citizenship =  \t  \t  \t  Driver_ID  "
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": "How many drivers have not driven any cars?",
    "answer": "SELECT Total_Production \nFROM (SELECT DISTINCT Driver_ID FROM (SELECT * FROM vehicle_driver.driver) AS Subquery1 WHERE Driver_ID <> 'Car') GROUP BY driver.Driver_ID ORDER BY Driver_ID LIMIT +5;"
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have not driven any vehicles.",
    "answer": "SELECT  \n        FROM (SELECT driver.Driver_ID ,    ORDER BY Driver_ID ) AS TEMP_TABLE ORDER BY Driver_ID ;"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": "How many exams are there?",
    "answer": "SELECT * FROM (SELECT DISTINCT Type_of_Question_Code , \n\t   RIGHT JOIN (SELECT Question_ID FROM online_exams.Questions) AS Q ON Questions.Question_ID = Questions.Type_of_Question_Code ) WHERE Type_of_Question_Code  ='Multiplication';"
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": "Count the number of exams.",
    "answer": "SELECT Type_of_Question_Code , \n    FROM (SELECT Question_ID  \tFROM (SELECT * FROM (SELECT Question_ID FROM (SELECT Question_ID ORDER BY Question_ID ) AS T1) AS T2 WHERE Type_of_Question_Code  = 'TYC')    \n    GROUP BY Type_of_Question_Code  \tORDER BY Date_of_Answer "
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": "List the distinct subject code of exams in ascending alphabetical order .",
    "answer": "SELECT \n    \t  \t  \t  \t   \n \t      \t  FROM (SELECT DISTINCT Subject_Code , Subject_Code FROM online_exams.Exams) AS A ORDER BY Subject_Code  \n\n\n\n\n\n\n   \n\n\n\n  \t    \t  \t  \t   \n      \t  LIMIT 10;"
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
    "answer": "SELECT DISTINCT Subject_Code FROM (SELECT * FROM online_exams.Exams ORDER BY Subject_Code )\n   \n   INNER JOIN (SELECT LIMIT 10) ON Type_of_Question_Code = 'FIRE' ORDER BY Assessment  DESC;"
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
    "answer": "SELECT \n    FROM (SELECT Subject_Code , Subject_Code   INNER JOIN (SELECT Type_of_Question_Code LIMIT -219.054) AS SubjecTcode ON Exams.Subject_Code  = Questions.Subject_Code )\n   AS ex WHERE EXISTS (SELECT DISTINCT Question_Text FROM (SE"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
    "answer": "SELECT Type_of_Question_Code , \n    \n    FROM (SELECT Type_of_Question_Code  \n          FROM (SELECT Question_Text , \n                    RIGHT JOIN (SELECT Subject_Code ,  \n LEFT JOIN (SELECT Exam_Name ,       \n                                                     LEFT JOIN (SELECT Date_of_Answer \n                                                               FROM (SELECT DISTINCT Student_ID ,   \n"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
    "answer": "SELECT Type_of_Question_Code , \n     FROM (SELECT  AS DATES,   FROM (SELECT Type_of_Question_Code ) WHERE Subject_Code  = 'DATA') AS TEMP ORDER BY Date_of_Answer ;"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
    "answer": "SELECT \n    \t\tFROM (SELECT * FROM (SELECT *  \t\t\n    FROM (SELECT DISTINCT Subject_Code , Subject_Code , Date_of_Answer , Date_of_Answer , Assessment ) AS T1  \n    WHERE Last_Name  =  'P') AS T2) AS T3;"
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": "What are the type of questions and their counts?",
    "answer": "SELECT  AS UserID,  \n        GROUP BY Date_of_Answer ORDER BY Type_of_Question_Code LIMIT 10;"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": "For each question type, return its type code and its count of occurrence.",
    "answer": "SELECT Type_of_Question_Code , \n    FROM (SELECT Type_of_Question_Code ) AS QuestionTypeGrouping;"
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": "What are the distinct student answer texts that received comments \"Normal\"?",
    "answer": "SELECT *FROM (SELECT Type_of_Question_Code , \n         RIGHT JOIN (SELECT Assessment   FROM (SELECT Comments FULL OUTER JOIN (SELECT Student_ID ) AS C ON Middle_Name ='C') WHERE Comments  = 'NORMAL NISS\nCREATE TABLE Student.student; CREATE table student..scoredcards as"
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
    "answer": "SELECT DISTINCT Type_of_Question_Code , \n\t  \t  \t  FROM (SELECT DISTINCT Student_ID , \t\t    ORDER BY Student_Answer_Text LIMIT -1) AS T;"
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": "How many different comments are there for student answers?",
    "answer": "SELECT Type_of_Question_Code , \n        GROUP BY Question_ID   ORDER BY Comments ;"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": "Count the number of different comments for student answers.",
    "answer": "SELECT Type_of_Question_Code , \n        GROUP BY Type_of_Question_Code ;"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": "List all the student answer texts in descending order of count.",
    "answer": "SELECT Type_of_Question_Code , \n     GROUP BY Type_of_Question_Code ;"
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
    "answer": "SELECT * FROM (SELECT DISTINCT * FROM (SELECT DISTINCT Middle_Name , \n    RIGHT JOIN (SELECT Student_ID FROM online_exams.Students) AS ANNOTATION ON Students.Student_ID =  1025))ORDER BY First_Name LIMIT 3;"
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": "Please show the first names of students and the dates of their answers.",
    "answer": "SELECT Question_ID , \n    GROUP BY Date_of_Answer ORDER BY Assessment ;"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": "For each student answer, find the first name of the student and the date of the answer.",
    "answer": "SELECT \n    FULL JOIN (SELECT  INNER JOIN (SELECT Type_of_Question_Code , \n   FROM (SELECT Question_ID , \n  FROM (SELECT Question_ID FROM (SELECT Question_ID FROM (SELECT Question_ID ) ORDER BY Date_of_Answer LIMIT 15)) AS T1) AS T2 WHERE Type_of_Question_Code  = 'STU') AS"
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
    "answer": "SELECT Email_Adress ,  INNER JOIN (SELECT DISTINCT Date_of_Answer FROM (SELECT Email_Adress  \n    FROM (SELECT * FROM (SELECT Email_Adress FROM (SELECT Type_of_Question_Code )WHERE Type_of_Question_Code  ='+ str + '') GROUP BY Date_of_Answer) DESCENDING ORDER NULLS LAST"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
    "answer": "SELECT Email_Adress , \n    FROM (SELECT Student_ID   ORDER BY Date_of_Answer ) AS WeirdoTsOrders;"
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": "Please show the least common assessment for students.",
    "answer": "SELECT * FROM (SELECT  AS min_common,  \n    LEFT JOIN (SELECT Student_ID ,  AS COMMON INNER JOIN (SELECT Student_ID )     AS student_tested ON Satisfactory_YN     \n        \n         \n       \n          \n               \n             \n           \n              \n            \n      \n  \n   \n\n         \n  \n  \n\n \n\n\n\n\n\n"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": "Which assessment has the smallest frequency count?",
    "answer": "SELECT Assessment   FROM (SELECT Assessment ,  FULL JOIN (SELECT Assessment ,  AS uffreein FROM (SELECT Assessment )\n    AS X) AS T1 ON Middle_Name = Type_of_Question_Code GROUP BY Type_of_Question_Code ORDER BY Question_Text LIMIT 4 OFFSET 526709);"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": "Please show the first names of the students that have at least two answer records.",
    "answer": "SELECT Students.First_Name FROM (SELECT Type_of_Question_Code , Question_Text ) AS Questions\n    INNER JOIN (SELECT *  \n     FULL JOIN (SELECT Student_ID , First_Name ORDER BY First_Name ) AS Students ON Type_of_Question_Code  = Student_Assessments.Type_of_Question_Code \n    INNER JOI"
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": "Which students have 2 or more answer records? Give me their first names.",
    "answer": "SELECT online_exams.Exam_ID FROM (SELECT Type_of_Question_Code , Question_Text WHERE Question_Text  = \n    'This student is not allowed to speak in general') AS t1 LEFT JOIN (SELECT Type_of_Question_Code , Home_Phone FROM (SELECT Question_ID FROM online_exams"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": "What is the most common valid answer text?",
    "answer": "SELECT \n    FROM (SELECT Type_of_Question_Code , Subject_Code ) AS QUESTION;"
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": "Find the valid answer text that appeared most frequently.",
    "answer": "SELECT \n        RIGHT JOIN (SELECT DISTINCT Question_ID FROM (SELECT  AS question))   AS oubt ON Type_of_Question_Code ='RXNM' ORDER BY First_Name LIMIT +1;"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is not \"M\".",
    "answer": "SELECT \n     LIMIT 2;"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": "What are the last names of the students with gender other than \"M\"?",
    "answer": "SELECT  LIMIT 45629781031.8364;"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": "List each gender and the corresponding number of students.",
    "answer": "SELECT  GROUP BY Gender_MFU \n        ORDER BY Student_ID , Student_Address ;"
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": "For each gender, return the gender code and the number of students who identify as that gender.",
    "answer": "SELECT * FROM (SELECT Gender_MFU ,  FULL OUTER JOIN (SELECT Type_of_Question_Code ) AS ithueme_Gendercodein_fromstudents_blockchain_cloakosurectivedinstancethefuscheidthegenderauditmaxtogreenandblockexplorerimonjfMUltimacloud"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is \"F\" or \"M\".",
    "answer": "SELECT Type_of_Question_Code FROM (SELECT Gender_MFU ,  FULL JOIN (SELECT Type_of_Question_Code )\n      AS SELECTED_COLUMNs_FROM ON Assessment \n       \n      \n    \n \n\n\n\n   \n  \n\n\n\n   \n\n  \n \n\n \n           \n          \n        \n         \n            \n             \n              \n"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
    "answer": "SELECT \n    GROUP BY Student_ID ORDER BY Type_of_Question_Code   LIMIT 5;"
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": "List the first names of the students who do not have any answers.",
    "answer": "SELECT DISTINCT Type_of_Question_Code , \nFROM (SELECT Question_ID FROM (SELECT Question_ID FROM (SELECT Question_Text ORDER BY Date_of_Answer ) AS TEMP)   GROUP BY Type_of_Question_Code    \n    LIMIT 4201835697.61);"
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": "Which students do not have any answers? Find their first names.",
    "answer": "SELECT \n    \t  \t  \t  \t \t  \t  \t  \t \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  "
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
    "answer": "SELECT * FROM (SELECT * \n    FROM (SELECT *   FROM (SELECT  AS COMMENTS, RIGHT JOIN (SELECT Student_ID ,  AS ounceage ORDER BY Students.Student_ID ) \n  AS ME ON Comments \n      \n      \n        \n    \n            \n           \n       \n   \n         \n  \n             \n          \n              \n                 \n               \n                   \n                    \n                \n                  \n                     "
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
    "answer": "SELECT *FROM (SELECT Student_ID , Student_Answer_Text FROM (SELECT Student_ID FROM (SELECT Student_ID FROM (SELECT Student_Answer_Text WHERE Comments = '%Normal') INNER JOIN (SELECT Student_ID FROM (SELECT Student_Answer_Text WHERE Comments = 'Absent')) AS T1 ON Type_of_Question_Code = Type_of_Question_Code ) GROUP"
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": "Show the types of questions that have at least three questions.",
    "answer": "SELECT DISTINCT \n   \n  \nFROM (SELECT Question_ID ,  FULL OUTER JOIN (SELECT Question_Text FROM (SELECT Type_of_Question_Code LIMIT 20090) AS TQ WHERE Question_Text  IN (SELECT \n   \n      RIGHT JOIN (SELECT Question_ID ,  \n      \n        FROM (SELECT Question_Text , \n"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": "Which types of questions have 3 or more questions? Return the questions type code.",
    "answer": "SELECT Questions_in_Exams.Question_ID , Exams.Question_Text FROM (SELECT Type_of_Question_Code , Question_ID FROM (SELECT Type_of_Question_Code WHERE Question_ID  = 1802) AS Questions INNER JOIN (SELECT Type_of_Question_Code WHERE EXISTS (SELECT    WHERE Question_Text = '"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": "Show all information on students.",
    "answer": "SELECT * FROM (SELECT * \n    FROM (SELECT * FROM (SELECT \n    LIMIT 10) AS TEMP1 ORDER BY Subject_Code ) WHERE Student_ID = 2);"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": "What is al the available information of each student?",
    "answer": "SELECT DISTINCT \n    LIMIT +20.5 OFFSET -1943678;"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": "How many addresses do we have?",
    "answer": "SELECT Addresses.address_id FROM (SELECT DISTINCT address_id WHERE address_details <> '410 SANDYSHOOTER ST., 2963 STARDWOOD, +'\n    GROUP BY Addresses.address_id ) AS Morethanone;"
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": "Count the number of addresses.",
    "answer": "SELECT * FROM customers_and_orders.Customers;"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": "List all address ids and address details.",
    "answer": "SELECT Addresses.address_id , \n  \t    \t      \t  FROM (SELECT DISTINCT address_id   \t   \t      FROM (SELECT Addresses.address_id       \t       \tFROM customers_and_orders.Addresses      INNER JOIN customers_and_orders.Customers ON customers_and_orders.Customer_Orders.address_id = Customers.address_id )"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": "What are all the address ids and address details?",
    "answer": "SELECT address_id ,  FROM (SELECT DISTINCT address_details   INNER JOIN customers_and_orders.Customers ON customer_address = address_details ) AS d\n  WHERE Customers.customer_address =  address_id ORDER BY address_details , order_date ;"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": "How many products do we have?",
    "answer": "SELECT \n        WHERE Products.product_name  =  'The D'RIGHT OUTER JOIN (SELECT Products.product_id FROM customers_and_orders.Customers) AS CUSD ON Customers.customer_id = Customer_Orders.customer_id INNER JOIN customers_and_orders.Customers \n    AS CUROTORO"
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": "Count the number of products.",
    "answer": "SELECT product_name , \n    RIGHT JOIN (SELECT GROUP BY product_id ORDER BY product_id ) AS T1 ON product_id = Products.product_id   LIMIT 2;"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": "Show all product ids, product type codes, and product name.",
    "answer": "SELECT * FROM customers_and_orders.Products WHERE Products.product_type_code  =  'P102' ORDER BY Products.product_id , Customer_Orders.order_id ;"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": "What are the ids, type codes, and names for all products?",
    "answer": "SELECT Products.product_id , \n    \t   INNER JOIN (SELECT * FROM customers_and_orders.Order_Items) AS T1 ON Order_Items.order_item_id = Products.product_id ;"
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": "What is the price for the product with name Monitor?",
    "answer": "SELECT \n     FROM (SELECT   WHERE Customers.customer_id  = '5' INNER JOIN customers_and_orders.Customer_Orders ON Customers.customer_id = Customer_Orders.order_id ) AS Customer_Order;"
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": "Give the price of the Monitor product.",
    "answer": "SELECT Products.product_price FROM customers_and_orders.Products WHERE Products.product_id = 'Product ID YOU ARE SEARCHING FOR';"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": "Show the minimum, average, maximum price for all products.",
    "answer": "SELECT * FROM (SELECT \n    RIGHT JOIN (SELECT Products.product_name , Products.product_price  \n    FROM (SELECT product_name , product_price FROM customers_and_orders.Products) AS T1 \n    \t INNER JOIN customers_and_orders.Order_Items ON Order_Items.order_id  = customer_name ) AS T2 ON Products.product"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": "What are the minimum, average, and maximum prices across all products?",
    "answer": "SELECT product_id , \n        GROUP BY product_id ORDER BY Addresses.address_id LIMIT 1;"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": "What is the average price for products with type Clothes?",
    "answer": "SELECT Addresses.address_id , \n   FROM customers_and_orders.Products WHERE product_type_code = 'Clothe' ORDER BY Products.product_price ;"
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": "Return the average price of Clothes.",
    "answer": "SELECT Addresses.address_id WHERE address_id  = 4\n    INNER JOIN (SELECT DISTINCT Addresses.address_id ,  FROM (SELECT Products.product_price ) AS Products) \n      AS Products ON Addresses.address_id  = Products.address_id ;"
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": "How many hardware type products do we have?",
    "answer": "SELECT \n\t\tWHERE product_type_code  =  'hardware' ORDER BY product_name LIMIT 1;"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": "Count the number of products of the type Hardware.",
    "answer": "SELECT \n\t  \t \t    \t \t  \t  \t \t  \t    \t \t \t  \t      \t  \t \t \t \t \t \t  \t \t \t \t \t \t  \t \t \t \t     \t \t \t \t \t \t \t    \t   \t\t \t  \t \t \t \t \t \t \t \t        \t \t \t \n       \t \t  \t  \t \t  \t  \t  \t  \t  \t \t \t \t \t      \t  \t \t \t \t \t "
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": "Show all product names with price higher than the average.",
    "answer": "SELECT product_name FROM (SELECT DISTINCT product_name , \n                RIGHT JOIN (SELECT Addresses.product_name  \n    FROM (SELECT Products.product_name FROM (SELECT Addresses.product_name FROM customers_and_orders.Products) AS ProductosNAMOSCACAJESKILHORIFICONSORELAZIONEOFINTEGER\n    GROUP"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have a price above the average for all products.",
    "answer": "SELECT Products.product_name FROM (SELECT Addresses.product_name , \n    RIGHT JOIN (SELECT product_name , \n       RIGHT JOIN (SELECT Products.product_name INNER JOIN (SELECT product_name   WHERE product_type_code  = 43) AS Product_Type_43 ON product_name  \n      = product_name ) ON product_type_code"
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": "Show all hardware product names with price higher than the average price of hardware type products.",
    "answer": "SELECT DISTINCT Products.product_name , \n    FROM (SELECT Addresses.address_id ) AS Avgpriceofhardwareproducts GROUP BY Products.product_name ORDER BY product_type_code ;"
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": "What are the names of Hardware product with prices above the average price of Hardware products.",
    "answer": "SELECT DISTINCT Products.product_name FROM (SELECT Addresses.address_id  INNER JOIN customers_and_orders.Customer_Orders ON Addresses.address_id  =  Customers.customer_address ) AS Shiift;"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": "What is the name of the most expensive product with type Clothes?",
    "answer": "SELECT \n        FROM (SELECT Products.product_name , Products.product_price  \n                             FROM (SELECT * FROM customers_and_orders.Products) AS Products   \n WHERE Products.product_type_code = 'cl' ORDER BY product_price )GROUP BY product_id LIMIT 1;"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": "Give the name of the most expensive Clothes product.",
    "answer": "SELECT Products.product_name FROM (SELECT Products.product_price ,  RIGHT JOIN (SELECT * FROM customers_and_orders.Products) AS Orders ON customer_id = order_id ) GROUP BY Products.product_name ORDER BY product_price   LIMIT 1;"
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": "What is the product id and product name for the cheapest Hardware type product?",
    "answer": "SELECT \n     RIGHT JOIN (SELECT * FROM customers_and_orders.Products ORDER BY Products.product_type_code , Products.product_name ) AS T1 ON Customers.customer_id = Order_Items.order_item_id LEFT OUTER JOIN customers_and_orders.Order_Items ON EXISTS (SELECT * FROM customers_and_orders.Products WHERE"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": "Give the id and name of the cheapest Hardware product.",
    "answer": "SELECT \n    \n    FROM (SELECT product_name , product_type_code  \n           FROM (SELECT LIMIT 10) AS T1 WHERE EXISTS (SELECT Products.product_name ))        \n    ORDER BY product_price LIMIT 1;"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": "List all product names in descending order of price.",
    "answer": "SELECT \n    \nFROM (SELECT Products.product_name , Products.product_price FROM customers_and_orders.Products) AS T1 ORDER BY Addresses.customer_address   LIMIT 5;"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": "What are the names of the products, sorted by descending price?",
    "answer": "SELECT Products.product_name FROM (SELECT DISTINCT product_name ,  RIGHT JOIN (SELECT DISTINCT product_id ) ON Products.product_id =  2 GROUP BY order_date , Customers.customer_address ORDER BY Customers.customer_id ), customers_and_orders.Products WHERE Order_Items.product_name  <> 'Sony' ORDER BY product_price"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": "Show all hardware type products in ascending order of price.",
    "answer": "SELECT * FROM (SELECT DISTINCT product_name , \n        RIGHT JOIN (SELECT Products.product_name , Products.product_type_code , \n                FROM customers_and_orders.Products) AS T1 ON customers_and_orders.Products.product_name  =  customer_id ) ORDER BY product_price ;"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": "What are the names of all Hardware products, sorted by price ascending?",
    "answer": "SELECT  LIMIT 4503617982;"
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": "List all product type codes and the number of products in each type.",
    "answer": "SELECT customer_id , \n \t  GROUP BY customer_id ORDER BY order_date LIMIT 1;"
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": "How many products are there for each product type?",
    "answer": "SELECT \n\t   ORDER BY Products.product_type_code , Products.product_name ;"
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": "Show all product type codes and the average price for each type.",
    "answer": "SELECT Products.product_type_code ,  AS CROSS \n    GROUP BY Products.product_type_code ;"
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": "What is the average price of products for each product type?",
    "answer": "SELECT payment_method_code , \n     RIGHT JOIN (SELECT product_type_code   FROM (SELECT product_type_code INNER JOIN customers_and_orders.Products AS P ON product_type_code = product_type_code ) GROUP BY product_type_code ORDER BY product_"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": "What are the product type code with at least two products?",
    "answer": "SELECT Products.product_type_code , \n    GROUP BY Products.product_type_code ;"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": "Give the product type codes of product types that have two or more products.",
    "answer": "SELECT Products.product_type_code FROM (SELECT DISTINCT * \n\tFROM customers_and_orders.Order_Items) AS T1 WHERE Products.product_type_code  = 0;"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": "What is the product type code with most number of products?",
    "answer": "SELECT Products.product_type_code , \n    FROM (SELECT DISTINCT product_type_code  \n      FROM (SELECT Products.product_type_code ) AS O ORDER BY Products.product_type_code ), customers_and_orders.Order_Items INNER JOIN customers_and_orders.Order_Items ON Customer_Orders.order_id = customers_and_orders"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": "What is the most frequent product type code?",
    "answer": "SELECT FULL JOIN (SELECT DISTINCT Products.product_type_code , \n        RIGHT JOIN (SELECT FROM customers_and_orders.Order_Items) AS Orders ON order_id = order_item_id )  \t      \t\t\t        \t\t    \t \t   \t       \t\t   \t     \t             \t     \t           \t \n     \t       \t     AS products ON Products.product_type_"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": "How many customers do we have?",
    "answer": "SELECT Customers.customer_id FROM customers_and_orders.Customer_Orders WHERE Customer_Orders.customer_id = 'Mike';"
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers.",
    "answer": "SELECT  \n        FROM customers_and_orders.Customer_Orders AS cn INNER JOIN customers_and_orders.Order_Items ON customers_and_orders.Customers.customer_id = order_item_id ;"
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids and customer names.",
    "answer": "SELECT customer_id , \n     FROM customers_and_orders.Customer_Orders;"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": "What are the ids and names of all customers?",
    "answer": "SELECT \n\t\tLIMIT 10;"
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": "What is the customer address, customer phone, and customer email for Jeromy?",
    "answer": "SELECT *FROM customers_and_orders.Order_Items;"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": "Give the address, phone, and email for customers with the name Jeromy.",
    "answer": "SELECT order_status_code \n    FROM customers_and_orders.Customers;"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": "Show all payment method codes and the number of customers in each code.",
    "answer": "SELECT payment_method_code , \n   \t  \t  \t  \t \t   \t  \t  \t  \t\t \t   FROM customers_and_orders.Customer_Orders;"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": "How many customers use each payment method?",
    "answer": "SELECT  \n        ORDER BY Customers.customer_id \n   \n    \n\n   \n  \n\n  \n      \n     \n        \n         \n           \n             \n                \n              \n          \n            \n               \n                  \n                     \n                    \n                        \n                      \n                         \n                          \n                            \n                                                   \n                              \n\n                               \n\n\n\n\n\n\n\n\n\n\n                                                 "
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": "What is the payment method code used by most number of customers?",
    "answer": "SELECT \n    FROM customers_and_orders.Customers AS ct ORDER BY payment_method_code LIMIT 1;"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": "Give the code of the payment method that is most commonly used.",
    "answer": "SELECT payment_method_code FROM customers_and_orders.Order_Items;"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": "Show all customer names with the  payment method code used by least number of customers.",
    "answer": "SELECT customer_name FROM (SELECT customer_id FROM customers_and_orders.Customers GROUP BY customer_name ORDER BY customers_and_orders.customer_id )\n    \n    INNER JOIN customers_and_orders.Order_Items ON Customer_Orders.customer_id = customers_and_orders.Order_Items.customer_id GROUP BY Customer_Orders.order_item"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": "What are the names of customers who use the least common payment method?",
    "answer": "SELECT Customer_Orders.customer_id , \n    GROUP BY customer_id ORDER BY customers_and_orders.customer_id LIMIT 1;"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": "What is the payment method and customer number for customer named Jeromy?",
    "answer": "SELECT \n     FULL JOIN (SELECT payment_method_code , \n     \t\t  \t \t  \t     \t  \t  \t     \t  \t     \t  \t     \t  \t     \t  \t     \t  \t     \t  \t     \t  \t     \t  \t     \t  \t     \t  \t     \t  \t     \t  \t     \t  \t     \t     \t  \t     \t  \t     \t    ORDER BY payment_method_code  ASC)\n   \t      AS payment_methods_by_customer"
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": "Give the payment method code and customer number corresponding to the customer named Jeromy.",
    "answer": "SELECT payment_method_code , \n   \t \t  \t \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t     \n\t\t FROM customers_and_orders.Customer_Orders;"
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": "What are the distinct payment methods used by customers?",
    "answer": "SELECT \n    FROM customers_and_orders.Order_Items;"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": "Give the different payment method codes that customers use.",
    "answer": "SELECT * FROM customers_and_orders.Order_Items;"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": "Show the id and the product type for all products, order by product name.",
    "answer": "SELECT * FROM (SELECT Products.product_id , \n   \t  \t   \t \t\t\t    \t     \t\t     \n   \t  \t   \t \t\t\t     \n   \t  \t   \t \n   \t  \t   \t      \n   \t  \t   \t      \n   \t  \t   \t      \n   \t  \t   \t     \n   \t  \t FROM (SELECT Products.product_id , Products.product_type_code  FROM customers_and_orders.Products"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": "What are the ids and product types for all products, sorted alphabetically by product name?",
    "answer": "SELECT DISTINCT \n    LIMIT 302578.19468 OFFSET 1;"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": "What is the product type with least number of products?",
    "answer": "SELECT payment_method_code , \n                FROM (SELECT payment_method_code   FROM customers_and_orders.Customer_Orders) AS sub1;"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": "What is the code of the product type that is least common?",
    "answer": "SELECT DISTINCT product_type_code FROM (SELECT * FULL JOIN (SELECT customers_and_orders.product_type_code , product_type_code ORDER BY product_name )\n      AS productTypeRanks ON customer_id = product_type_code GROUP BY Customers.customer_id  LIMIT 1)   OR"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": "How many customer orders do we have?",
    "answer": "SELECT Customers.customer_id , \n\t   ORDER BY order_date LIMIT 5;"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": "Count the number of customer orders.",
    "answer": "SELECT customer_id FROM customers_and_orders.Order_Items;"
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy.",
    "answer": "SELECT ORDER BY customers_and_orders.order_id \n\t\t\tLIMIT 10;"
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": "What were the ids, dates, and status codes for orders made by Jeromy?",
    "answer": "SELECT \n        FROM (SELECT order_id ,  ORDER BY Order_Items.order_date ) AS TEMP;"
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": "Show all customer names, ids and the number of orders by each customer.",
    "answer": "SELECT customers_and_orders.customer_name , \n            GROUP BY customers_and_orders.customer_id ;"
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": "What are the names, ids, and number of orders made for each customer?",
    "answer": "SELECT order_id , \n    GROUP BY order_id ;"
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": "What is the customer id, name, phone, and email for the customer with most orders?",
    "answer": "SELECT Customer_Orders.customer_id ,  GROUP BY Customer_Orders.customer_id ORDER BY customer_id LIMIT 1;"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders.",
    "answer": "SELECT \n\t\tORDER BY customers_and_orders.customer_id , customers_and_orders.order_id ;"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": "Show all order status and the number of orders in each status.",
    "answer": "SELECT \n        ORDER BY Order_Items.order_id  \n   \n   \n  \n  \n     \n  \n         \n   \n    \n  \n      \n        \n          \n\n   \n               \n             \n            \n           \n              \n                \n                  \n                     \n                   \n                    \n                        LIMIT 5;"
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "question": "How many orders have each order status code?",
    "answer": "SELECT ORDER BY Order_Items.order_status_code , Order_Items.customer_id ;"
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "question": "What is the order status code that is most common?",
    "answer": "SELECT \n    ORDER BY Customer_Orders.order_status_code   LIMIT 1;"
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "question": "Give the order status code that is most frequent across customer orders.",
    "answer": "SELECT customer_id , \n     GROUP BY order_status_code ORDER BY customer_id   LIMIT 1;"
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "question": "How many customers do not have an order?",
    "answer": "SELECT customers_and_orders.customer_id , \n            GROUP BY customer_id   ORDER BY order_date LIMIT -1;"
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers who have not made an order.",
    "answer": "SELECT  \n       \t\t\tFROM customers_and_orders.Order_Items ORDER BY customer_id ;"
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "question": "Show all product names without an order.",
    "answer": "SELECT * FROM customers_and_orders.Products WHERE Order_Items.customer_id = Customers.customer_id ORDER BY Products.product_name \n    LIMIT 1;"
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have not been ordered?",
    "answer": "SELECT Products.product_name FROM (SELECT DISTINCT Products.product_id ) AS T1 INNER JOIN customers_and_orders.Order_Items ON product_type_code = 'Product'\n        ORDER BY order_date ;"
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "question": "How many products named Monitor have been ordered?",
    "answer": "SELECT \n\t   ORDER BY Customer_Orders.customer_id , product_name ;"
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "question": "What is the total number of Monitor products that have been ordered?",
    "answer": "SELECT DISTINCT \n    ORDER BY Products.product_id , Order_Items.order_item_id ;"
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "question": "How many customers have ordered the product named Monitor?",
    "answer": "SELECT \t  \n   \n \nFROM customers_and_orders.Order_Items;"
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "question": "Count the number of different customers who have bought a Monitor Product.",
    "answer": "SELECT customer_id FROM customers_and_orders.Customers\n  WHERE customers_and_orders.Order_Items.product_name  =  'Monitor' GROUP BY Customers.customer_id ;"
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "question": "How many customers have an order?",
    "answer": "SELECT customer_id FROM (SELECT DISTINCT address_id , order_id ) AS TEMP_TABLE ORDER BY Customers.customer_id ;"
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "question": "Count the number of differnt customers who have made an order.",
    "answer": "SELECT customer_id FROM (SELECT DISTINCT *FROM customers_and_orders.Order_Items) AS T1;"
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids without an order.",
    "answer": "SELECT Customer_Orders.customer_id FROM customers_and_orders.Order_Items;"
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "question": "What are the ids of customers who have not made an order?",
    "answer": "SELECT Customers.customer_id FROM (SELECT customer_id , \n    RIGHT JOIN (SELECT DISTINCT Customer_Orders.order_id  \n  FROM customers_and_orders.Customer_Orders) AS SubQ ON customers_and_orders.Customers.customer_id  = Customers.customer_id )  GROUP BY customer_id ;"
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
    "answer": "SELECT order_id , \n    FROM (SELECT DISTINCT ORDER BY Products.order_id ) AS TEMP_TABLE ORDER BY Order_Items.product_id ;"
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?",
    "answer": "SELECT * FROM customers_and_orders.Order_Items AS T1 WHERE customer_id = '8' ORDER BY Customer_Orders.order_item_id , Customer_Orders.order_date ;"
  },
  {
    "id": 315,
    "db_id": "region_building",
    "question": "How many buildings are there?",
    "answer": "SELECT \t\tFROM (SELECT * FROM (SELECT Number_of_Stories INNER JOIN (SELECT Building_ID ) ON building.Building_ID = Number_of_Stories  \n    GROUP BY building.Number_of_Stories ORDER BY Number_of_Stories )) AS Totalnumber;"
  },
  {
    "id": 316,
    "db_id": "region_building",
    "question": "Count the number of buildings.",
    "answer": "SELECT building.Building_ID ;"
  },
  {
    "id": 317,
    "db_id": "region_building",
    "question": "List the names of buildings in ascending order of number of stories.",
    "answer": "SELECT building.Name FROM (SELECT building.Name , \n  LIMIT 10) AS Building_with_limit;"
  },
  {
    "id": 318,
    "db_id": "region_building",
    "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
    "answer": "SELECT DISTINCT Name , \n    FULL JOIN (SELECT Building_ID FROM (SELECT Building_ID   WHERE Number_of_Stories = -1) AS T1 GROUP BY Number_of_Stories ) ON building.Building_ID  = building.Building_ID ORDER BY Name \n\n\nLIMIT 3;"
  },
  {
    "id": 319,
    "db_id": "region_building",
    "question": "List the addresses of buildings in descending order of building completion year.",
    "answer": "SELECT Address FROM (SELECT * \nFROM (SELECT Building_ID , Address , Completed_Year ) AS T1 ORDER BY Completed_Year   LIMIT 5) AS T2;"
  },
  {
    "id": 320,
    "db_id": "region_building",
    "question": "Sort the buildings in descending order of building completion year, and return the building addresses.",
    "answer": "SELECT * FROM (SELECT DISTINCT building.Building_ID ,  ORDER BY building.Completed_Year  \n    LIMIT 3) AS ThreeOldest;"
  },
  {
    "id": 321,
    "db_id": "region_building",
    "question": "What is the maximum number of stories of buildings not completed in 1980?",
    "answer": "SELECT RIGHT JOIN (SELECT building.Building_ID , Building_ID FROM (SELECT DISTINCT * FROM (SELECT Building_ID  \n        FROM (SELECT DISTINCT building.Building_ID FROM (SELECT Building_ID ORDER BY Building_ID ) AS T1)       GROUP BY building.Building_ID LIMIT 345))     \n    ORDER BY Build"
  },
  {
    "id": 322,
    "db_id": "region_building",
    "question": "Among the buildings not completed in 1980, what is the maximum number of stories?",
    "answer": "SELECT * FROM (SELECT RIGHT JOIN (SELECT building.Name , building.Number_of_Stories  \n    FROM (SELECT Name , Number_of_Stories     FROM (SELECT Name , Number_of_Stories      WHERE building.Completed_Year  <=  1980) AS T ORDER BY Number_of_Stories ) AS RETURNING RIGHT JOIN (SELECT building.Name ,"
  },
  {
    "id": 323,
    "db_id": "region_building",
    "question": "What is the average population for all regions?",
    "answer": "SELECT Address FROM (SELECT DISTINCT Capital GROUP BY Region_ID ) AS TEMP_TABLE;"
  },
  {
    "id": 324,
    "db_id": "region_building",
    "question": "Compute the average population of a region.",
    "answer": "SELECT Area , \n    FROM (SELECT Area , \n               FROM region_building.region) AS T1;"
  },
  {
    "id": 325,
    "db_id": "region_building",
    "question": "What are the names of regions in ascending alphabetical order?",
    "answer": "SELECT \n     LIMIT -15.04728936 OFFSET +15.04728936;"
  },
  {
    "id": 326,
    "db_id": "region_building",
    "question": "List the names of regions in alphabetical order.",
    "answer": "SELECT DISTINCT region_building.region.Region_ID FROM region_building.region;"
  },
  {
    "id": 327,
    "db_id": "region_building",
    "question": "What are the capitals of the regions with area bigger than 10000?",
    "answer": "SELECT GROUP BY region_building.region.Capital \n    ORDER BY Area   LIMIT 2;"
  },
  {
    "id": 328,
    "db_id": "region_building",
    "question": "Give me the capitals of the regions whose area is larger than 10000.",
    "answer": "SELECT \n    FROM region_building.building;"
  },
  {
    "id": 329,
    "db_id": "region_building",
    "question": "List the capital of the region with the largest population.",
    "answer": "SELECT DISTINCT \n    LIMIT 4507389621;"
  },
  {
    "id": 330,
    "db_id": "region_building",
    "question": "Which region has the largest population? Give me the capital of the region.",
    "answer": "SELECT DISTINCT Region_ID FROM (SELECT RIGHT JOIN region_building.region ON region_building.region.Region_ID = region.Region_ID ) AS T1 ORDER BY Population   LIMIT 2;"
  },
  {
    "id": 331,
    "db_id": "region_building",
    "question": "List the names of the regions with the top 5 largest areas.",
    "answer": "SELECT Region_ID FROM (SELECT DISTINCT region_building.region.Name , RIGHT JOIN region_building.region ON region_building.region.Region_ID = Region_ID ORDER BY Area LIMIT 5)\n    INNER JOIN region_building.building ON building.Building_ID  =  1;"
  },
  {
    "id": 332,
    "db_id": "region_building",
    "question": "What are the names of the 5 largest regions in terms of area?",
    "answer": "SELECT region_building.region.Name FROM region_building.region ORDER BY Area LIMIT 7;"
  },
  {
    "id": 333,
    "db_id": "region_building",
    "question": "Show the names of buildings and the names of regions they are in.",
    "answer": "SELECT Building_ID ,  GROUP BY Region_ID ;"
  },
  {
    "id": 334,
    "db_id": "region_building",
    "question": "For each building, return the name of the building and the name of the region it belongs to.",
    "answer": "SELECT building.Name , \n    FROM (SELECT Name  \nFROM (SELECT building.Name , Building_ID  \nFROM (SELECT Building_ID ORDER BY Address ) AS building INNER JOIN region_building.region ON region.Region_ID = building.Building_ID GROUP BY building.Building_ID LIMIT 1)\nINNER JOIN region_building.building ON buildin"
  },
  {
    "id": 335,
    "db_id": "region_building",
    "question": "Show the names of regions that have more than one building.",
    "answer": "SELECT * FROM (SELECT building.Building_ID , \n        RIGHT JOIN region_building.region ON building.Region_ID  =  Region_ID ) AS T1 WHERE Building_ID <> 923578604 ORDER BY Name  ASC;"
  },
  {
    "id": 336,
    "db_id": "region_building",
    "question": "Which regions have more than one building? Give me the names of the regions.",
    "answer": "SELECT region_building.region.Building_ID \n    FROM (SELECT DISTINCT Region_ID , Building_ID  \n   FROM (SELECT RIGHT JOIN region_building.region AS T1 ON Region_ID  = Building_ID ));"
  },
  {
    "id": 337,
    "db_id": "region_building",
    "question": "Show the capital of the region that has the most buildings.",
    "answer": "SELECT RIGHT JOIN (SELECT DISTINCT region_building.region.Name , \n    \t  \t\t\tFROM region_building.building ORDER BY building.Region_ID LIMIT 1) AS Theme_Most_Buildings ON region_building.Building_ID = Region_ID ;"
  },
  {
    "id": 338,
    "db_id": "region_building",
    "question": "Which region has the largest number of buildings? Show me the capital of the region.",
    "answer": "SELECT Region_ID ,  WHERE Region_ID  = (SELECT region_building.region.Region_ID FROM region_building.building)\n    INNER JOIN region_building.building AS t2 ON region_building.building.Region_ID  = 106345897  GROUP BY Region_ID ORDER BY Region_ID LIMIT 1 OFFSET 1;"
  },
  {
    "id": 339,
    "db_id": "region_building",
    "question": "Show addresses of buildings and the capitals of regions they are in.",
    "answer": "SELECT Address FROM (SELECT building.Address , Building_ID FROM (SELECT Address , Building_ID FROM (SELECT Address   FROM (SELECT Address ORDER BY Address ))) AS SubQuery)\n        INNER JOIN (SELECT DISTINCT Capital , Area FROM region_building.building) AS CAPTAL_INFO ON building.Building_ID = region_building.Capital ;"
  },
  {
    "id": 340,
    "db_id": "region_building",
    "question": "For each building, return the address of the building and the name of the region it belongs to.",
    "answer": "SELECT Address , \n    FROM region_building.building;"
  },
  {
    "id": 341,
    "db_id": "region_building",
    "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
    "answer": "SELECT \n\t   RIGHT JOIN (SELECT building.Name , \n            FROM (SELECT building.Name ) AS T1) AS building_names_table ON building.Building_ID = building.Name ;"
  },
  {
    "id": 342,
    "db_id": "region_building",
    "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
    "answer": "SELECT  RIGHT JOIN (SELECT  \n    FROM (SELECT DISTINCT FROM region_building.building) AS T1 LEFT JOIN region_building.building ON building.Region_ID = region.Region_ID )          AS t2 ON building.Building_ID  =  \n   174986 RIGHT JOIN (SELECT D"
  },
  {
    "id": 343,
    "db_id": "region_building",
    "question": "Please show each completion year and the number of buildings completed in that year.",
    "answer": "SELECT * FROM (SELECT building.Completed_Year , \n    RIGHT JOIN (SELECT Building_ID   FROM (SELECT DISTINCT building.Building_ID ) AS t1) AS subq ON building.Building_ID = building.Building_ID GROUP BY Capital \t  \n     \t\t       \t      \t      \t  \n    \t     \t    \t  \n \n  \t    \t      \t   \t      \t \n   \t    "
  },
  {
    "id": 344,
    "db_id": "region_building",
    "question": "For completion year, return the year and the number of buildings completed.",
    "answer": "SELECT building.Name , \n    RIGHT JOIN (SELECT building.Building_ID FROM (SELECT Name ORDER BY Building_ID LIMIT 5) AS building) ON building.Building_ID =building.Building_ID GROUP BY building.Building_ID ;"
  },
  {
    "id": 345,
    "db_id": "region_building",
    "question": "List the year in which the most buildings are completed.",
    "answer": "SELECT \n\t  \t  \t  \t  \t  \t \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  "
  },
  {
    "id": 346,
    "db_id": "region_building",
    "question": "In which year did the most building constructions complete?",
    "answer": "SELECT DISTINCT Capital GROUP BY Building_ID ORDER BY Completed_Year LIMIT 1;"
  },
  {
    "id": 347,
    "db_id": "region_building",
    "question": "List the names of regions that do not have any buildings.",
    "answer": "SELECT DISTINCT region_building.region.Region_ID FROM (SELECT region_building.region.Region_ID ) AS sub;"
  },
  {
    "id": 348,
    "db_id": "region_building",
    "question": "What are the names of regions in which there are no buildings?",
    "answer": "SELECT Region_ID , \n    GROUP BY region.Region_ID   ORDER BY Region_ID ;"
  },
  {
    "id": 349,
    "db_id": "region_building",
    "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
    "answer": "SELECT Building_ID FROM (SELECT building.Building_ID , \n        RIGHT JOIN (SELECT Building_ID  FROM (SELECT Building_ID FROM (SELECT Building_ID WHERE Completed_Year > 20) AS T3))     \n           \n          \n        \n        AS T1 ON building.Building_ID =  \n   \t    \t    \t    \t \t \t    \t \t    building.Building_ID ) AS TEMP;"
  },
  {
    "id": 350,
    "db_id": "region_building",
    "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
    "answer": "SELECT *FROM (SELECT building.Building_ID , Building_ID FROM (SELECT Name , \n     RIGHT JOIN (SELECT Building_ID   FROM (SELECT Capital GROUP BY Building_ID ) AS BUILDING ORDER BY Building_ID LIMIT 0) \n     \t        \t\t           AS BIULDING_WITHOUT_CITY_GROUPING_AGGREGATIONS_NEEDed_TO_BE"
  },
  {
    "id": 351,
    "db_id": "region_building",
    "question": "Show the distinct addresses of buildings.",
    "answer": "SELECT \n        RIGHT JOIN (SELECT building.Address FROM (SELECT Building_ID FROM (SELECT DISTINCT Building_ID ORDER BY Building_ID ) AS T1) AS building\n               INNER JOIN (SELECT Address FROM (SELECT DISTINCT Address WHERE Building_ID = building.Building_ID )  AS T2)  \n\n      \n        AS ADDRESS ON building.Building_ID = Address     \n          \n        ORDER BY building."
  },
  {
    "id": 352,
    "db_id": "region_building",
    "question": "Give me a list of distinct building addresses.",
    "answer": "SELECT DISTINCT building.Address FROM (SELECT * FROM (SELECT building.Address , \n        RIGHT JOIN (SELECT FROM (SELECT building.Address INNER JOIN (SELECT FROM (SELECT building.Address ) AS b2) ON building.Address  =  building.Address    GROUP BY building.Address ), (SELECT Building_ID INNER JOIN (SELECT Building_ID , Name"
  },
  {
    "id": 353,
    "db_id": "region_building",
    "question": "Show the completed years of buildings in descending order of the number of stories.",
    "answer": "SELECT Building_ID ,  ORDER BY Completed_Year , Number_of_Stories  \n    LIMIT 5;"
  },
  {
    "id": 354,
    "db_id": "region_building",
    "question": "Sort buildings in descending order of the number of stories, and return their completion years.",
    "answer": "SELECT \n    FROM (SELECT building.Name ,  FULL JOIN (SELECT Capital ,  FULL JOIN (SELECT Building_ID   WHERE building.Name  = 'KITCHO') AS building2 ON building.Building_ID = building.Building_ID ) ON building.Building_ID  \n   = building.Building_ID ORDER BY Completed_Year  DESC)GROUP BY Building_ID ;"
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "question": "List details of all the channel in alphabetical order .",
    "answer": "SELECT \n\t\tORDER BY Channel_ID , Channel_Details   LIMIT 10;"
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "question": "What is the list of channel details ordered alphabetically ?",
    "answer": "SELECT  LEFT JOIN (SELECT Customer_Details , Integration_Platform.Customer_ID   FROM (SELECT Channel_Details ORDER BY Channel_Details ) WHERE Services.Channel_Details = 'Channel%s')\n    AS Connections ON Customer_Details  = Channel_Details ORDER BY Service_Details LIMIT 1;"
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "question": "How many services are there?",
    "answer": "SELECT  \n  FROM (SELECT     RIGHT JOIN (SELECT    INNER JOIN (SELECT       GROUP BY Services.Service_ID , Services.Service_Details ) AS T1 ON Service_Details = ' +CASE WHEN NOT MONITOR IS NULL THEN serviceId END) C25049638,\n+ CASE WHEN not monitor is null then FLOOR(7 -  (SELECT count(*) FROM"
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "question": "Count the number of services.",
    "answer": "SELECT * FROM (SELECT DISTINCT Service_ID , RIGHT JOIN (SELECT \n   ORDER BY Service_ID ) AS T1 ON Service_ID = 'A' ORDER BY Service_ID LIMIT 2) AS W;"
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "question": "What is the most common analytical layer type code?",
    "answer": "SELECT \n    FROM (SELECT DISTINCT Customer_ID ) AS FirstName   INNER JOIN (SELECT Customer_ID ,     ORDER BY Customer_ID      LIMIT 5) AS InnerQuery1 ON Customers.Customer_ID = \n    Integration_Platform.Customer_ID ;"
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "question": "Find the analytical layer type code that appears most often.",
    "answer": "SELECT Analytical_Layer_Type_Code FROM (SELECT FULL JOIN (SELECT Analytical_Layer_Type_Code ,  \n        ORDER BY Customers.Customer_ID ) AS T1 ON Customers.Customer_ID  = Customer_Details  GROUP BY Pattern_Recognition    ORDER BY Pattern_Recognition      LIMIT -4)     LIMIT "
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
    "answer": "SELECT * FROM (SELECT DISTINCT Service_ID , \n     FROM (SELECT ORDER BY Customer_Details ) AS T1) AS T2 WHERE Customer_Details  = 'HARDY KUTCH';"
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
    "answer": "SELECT * FROM (SELECT DISTINCT Services_and_Channels_Details , \n     RIGHT JOIN (SELECT Service_Details   FROM (SELECT Service_ID WHERE Customer_Details  = 'Chris Harder') AS t1)    AS T2 ON Customer_Details ='Chris Harchr and Others Respective Servicess..' GROUP BY Services_and_Channels_Detai"
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "question": "Find the details of the services that have been used by more than 3 times .",
    "answer": "SELECT , INNER JOIN (SELECT * FROM (SELECT * FROM (SELECT DISTINCT Services.Service_ID ) AS T1)\n    AS TEMP WHERE Service_Details = 'SELECT')\n  \n    \n     \n    \n  AS TEMP2 ON Service_Details  ='SEL/IN'\n      \n       \n        \n           \n               \n              \n          \n       \n             \n         \n            \n                \n   \n                 "
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "question": "Which services were used by customers by more than 3 times? Give me the service details.",
    "answer": "SELECT * FROM (SELECT DISTINCT Service_Details , \n        RIGHT JOIN (SELECT Services.Service_ID , Services.Services_and_Channels_Details  \n\n    INNER JOIN (SELECT Service_ID ) AS Master_table ON Service_Details = Services_and_Channels_Details ) \n            AS Sub_Table12497869 ON Customer_ID = 530)     AS Final_"
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has used services the most times.",
    "answer": "SELECT * FROM (SELECT DISTINCT Customer_ID , \n        RIGHT JOIN (SELECT DISTINCT Customer_ID  FROM (SELECT Customer_ID ) AS t1 GROUP BY Customer_ID ORDER BY Service_Details )\n    AS T2 ON Customer_ID  = Customer_ID LIMIT 50)ORDER BY Services_and_Channels_Details ;"
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "question": "return the details of the customer with largest count of used services.",
    "answer": "SELECT \n    FROM (SELECT DISTINCT * FROM (SELECT  \n      FULL JOIN (SELECT * FROM (SELECT \n     RIGHT JOIN (SELECT * FROM (SELECT GROUP BY Customers.Customer_ID , Services.Service_ID , Customers.Customer_ID ) AS OF GROUP BY Customer_ID ) AS OSC ON Customer_ID = Service_ID ORDER BY Service_ID LIMIT 2)\n      RIGHT JOIN"
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "question": "Find the name of the customer who has used the most types of services .",
    "answer": "SELECT * FROM (SELECT DISTINCT Customers.Customers_and_Services_Details WHERE Integration_Platform_Details =  \n    (SELECT Customer_ID FROM (SELECT Customer_ID ,  RIGHT JOIN (SELECT \n    \n       INNER JOIN (SELECT Service_Details ) AS T1 ON Customers.Customer_ID  =  \n      (SELECT Customer"
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "question": "Which customer has used the most types of services ? Give me the customer details .",
    "answer": "SELECT DISTINCT Customers.Customer_Details , \n    FROM (SELECT Customer_ID  \nFROM (SELECT Customer_Details , \n      FROM (SELECT Customers.Customer_Details , \n       FROM (SELECT DISTINCT Customers.Customer_Details ) AS T1) \n     WHERE Customers.Customer_Details <> ''') + N) ;  \n\nHow does this work and what are the"
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has never used any services .",
    "answer": "SELECT Customers.Customer_Details WHERE Customer_ID \n<   (SELECT Customer_ID FROM (SELECT Customers.Customer_Details ,  ORDER BY Service_ID ) AS TEMPTABLE GROUP BY Customers.Customer_ID     LIMIT -1)   \nORDER BY Services.Service_Details      LIMIT 3;"
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "question": "Which customers never used any services ? Give me the customer details .",
    "answer": "SELECT \n    FROM (SELECT DISTINCT Customer_ID , Customer_Details )   AS N\n    WHERE Customer_ID = ''')->fetchAll() ;\n    + ';"
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "question": "Find the details of the customers who have used the least-used service .",
    "answer": "SELECT DISTINCT * FROM (SELECT DISTINCT Customers.Customer_ID , \n     FROM (SELECT Customers.Customer_ID FROM (SELECT Customers.Customer_ID WHERE Customers.Customer_ID  = 3) GROUP BY Customer_ID )\n   AS Least_Less_Used_Service);"
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
    "answer": "SELECT * FROM (SELECT DISTINCT Customers.Customers_and_Services_Details ) AS T1 LEFT JOIN (SELECT RIGHT OUTER JOIN (SELECT Service_Details , GROUP BY Customer_ID   ORDER BY Service_Details   \n        \n     \n        LIMIT 3) AS SERVICES ON Customers.Customer_ID"
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "question": "How many distinct customer and services details are there?",
    "answer": "SELECT DISTINCT * FROM (SELECT Customer_Details ,  FROM (SELECT Customer_Details ) AS INTERCEPT)\n    INNER JOIN (SELECT Services_and_Channels_Details   FROM (SELECT Service_Details     GROUP BY Customer_Details ORDER BY Customer_Details ), government_shift.Services) AS STARSUSCINGJOIN"
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "question": "Count the total number of available customers and services details.",
    "answer": "SELECT \n\t  \n   \n   \n    \n\n    \n   \n \n  \n\n       RIGHT JOIN (SELECT Customer_ID ,  FROM (SELECT Customer_Details WHERE Customer_Details = 'NewYork')) AS NYCUSERS ON Customers.Customer_Details  = Customer_ID ;"
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "question": "Find all the customers whose name contains \"Kutch\".",
    "answer": "SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT DISTINCT GROUP BY Customer_ID )\n    AS C) AS T1 WHERE Customer_Details  =  'Mr.') ORDER BY Customer_Details ;"
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "question": "What are the details of the customers who have \"Kutch\" in part of their details?",
    "answer": "SELECT Customers.Customer_Details FROM (SELECT Customer_Details \n\tFROM (SELECT Customer_Details FROM (SELECT DISTINCT * FROM (SELECT Customers.Customer_Details FROM (SELECT Customers.Customer_Details WHERE Customers.Customer_Details  =  'Kutch'))) AS T1)) AS CUSTOMERS;"
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
    "answer": "SELECT * FROM (SELECT DISTINCT Services.Service_ID , Service_Details  \n    FROM (SELECT Customers.Customer_ID , Customer_Details , Customers_and_Services.Customers_and_Services_Details ) AS T1  \n    RIGHT JOIN (SELECT Service_ID , Service_Details WHERE Customer_ID = 'Hardy Kutch') AS Services ON Services.Service_ID  = Custo"
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
    "answer": "SELECT * FROM (SELECT DISTINCT Services_and_Channels_Details , \n     RIGHT JOIN (SELECT Customer_Details ) AS T1 ON Service_Details  =  Customers_and_Services_Details        ORDER BY Services_and_Channels_Details )    GROUP BY Status_Code ;"
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
    "answer": "SELECT \tORDER BY Customers.Customer_ID , Services.Service_ID , Services.Service_Details  \n   \n \n \n  \n\n  \n  \n\n\n\n\n\n\n    \n\n      \n        \n          \n       \n           \n             \n            \n              \n     \n         \n               \n             \n                \n                  \n                 \n                    \n                       \n                        \n                         \n                           \n                            \n                              \n                                                   "
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
    "answer": "SELECT  AS subq106_38597, Service_Details FROM (SELECT *  \n        FROM (SELECT DISTINCT Analytical_Layer_Type_Code , Analytical_Layer_Type_Code  FROM (SELECT Analytical_Layer.Integration_Platform_ID INNER JOIN (SELEC"
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
    "answer": "SELECT * FROM government_shift.Services WHERE Service_ID = 'L04J'\n    \n    INNER JOIN government_shift.Channels AS Ch ON Service_ID  =  Channel_Details  INNER JOIN government_shift.Channels AS X  AS channel_details ON Status_Code  = Customers_and_Services_ID ;"
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
    "answer": "SELECT * FROM (SELECT DISTINCT ORDER BY Service_Details  \n       \t           \t\t      \t \t\t\t    \t   \t     \t   \t       \t     \t        \t          \t\t     \t     \t       \t     \t\t\t\t\t\t\t\t\t   \n                            \t       \t         \t   \t \t   \t     \t \t   \t     \t              \t                \t    \t \t       \t             \t                        \n                          \t               \t            \t\t                    \t                       \t\t    \t                  \t   \t                 \t   \t  \n \t\t      \t\t\t           \t                   \t"
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
    "answer": "SELECT   INNER JOIN (SELECT   ORDER BY Customers.Customer_ID , Customer_Details ) ON Customer_Details = Customers.Customers_and_Services_ID ;"
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
    "answer": "SELECT Customer_ID , Customer_Details FROM (SELECT DISTINCT Integration_Platform.Customer_Details ) AS T1 WHERE Status_Code  =  'Stuck'\n    INNER JOIN (SELECT Service_Details  FROM (SELECT Service_Details FROM (SELECT Service_ID , Channel_Details FROM (SELECT Channel_Details FROM (SELECT DIST"
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "question": "How many integration platforms are successful?",
    "answer": "SELECT * FROM (SELECT \n    FROM (SELECT INNER JOIN government_shift.Integration_Platform AS b ON Analytical_ID = Pattern_Recognition )INNER JOIN government_shift.Integration_Platform AS MP ON Integration_Platform_ID = 345)\n    GROUP BY Integration_Platform_"
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "question": "Count the number of integration platforms that have \"Success\" in the details.",
    "answer": "SELECT * FROM (SELECT DISTINCT Integration_Platform_ID ,  LIMIT 2017) AS T1 WHERE Status_Code  = 3846;"
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "question": "List the details of all the customers who are associated with a failed integration platform .",
    "answer": "SELECT Customers.Customer_ID \n\tFROM (SELECT Customer_ID FROM (SELECT DISTINCT Customer_ID ,  RIGHT JOIN (SELECT  AS DETAILS FROM (SELECT INNER JOIN government_shift.Customer_Interactions ON Customers.Customers_and_Services_ID = government_shift."
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
    "answer": "SELECT Customers_and_Services.Customer_ID FROM (SELECT Customer_Details WHERE Integration_Platform_Details = 'fail') AS t1;"
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "question": "Which service ( s ) has never been used by any customer ? List their details .",
    "answer": "SELECT  \n  FROM (SELECT Service_Details , Customer_ID    WHERE Service_Details = 'Road' ORDER BY Service_Details LIMIT 1) AS NEWTABLE;"
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "question": "Find details of the services that no customer has ever used . Return the service details .",
    "answer": "SELECT \n\t  \t \t\t    \t \t    \t   \t     \t    \t  \t    \t    \t    \t    \t  \t    \t  \t    \t      \t  \t    \t     \t      \t        \t            \t         \t           \n       \nINNER JOIN (SELECT Service_ID , \n\t\t\t   \t   \tFROM (SELECT Service_ID FROM (SELECT Service_ID FROM (SELECT Service_ID FROM (SELECT Service_ID ) AS"
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "question": "Find all the layer type codes with their corresponding usage count.",
    "answer": "SELECT \n    FROM (SELECT LIMIT 1608) WHERE Services_and_Channels_Details  =  'Y' ORDER BY Service_Details ;"
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "question": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
    "answer": "SELECT * FROM (SELECT * FROM (SELECT DISTINCT *) \n            WHERE Analytical_Layer_Type_Code = 'XXX') AS T1;"
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
    "answer": "SELECT DISTINCT * FROM (SELECT DISTINCT Customer_Details , Services.Services_and_Channels_Details \n        FROM (SELECT Customer_Details  \n    FROM (SELECT Customer_Details FROM (SELECT Customer_Details WHERE Customers.Customer_ID = 1097) AS Temp)) AS CUSTOMERS2 INNER JOIN (SELECT Services_and_Channels_Details , Customer_Details FROM (SELECT Services_"
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
    "answer": "SELECT \n    FROM (SELECT DISTINCT FROM (SELECT Customer_Details ) AS customer)  \n   WHERE Customer_Details = 'Unsatisfactory' \n        ORDER BY Service_Details     LIMIT 3;"
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "question": "How many vehicles do we have?",
    "answer": "SELECT Customers.customer_id FROM vehicle_rent.Customers;"
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "question": "Count the number of vehicles.",
    "answer": "SELECT total_hours FROM vehicle_rent.Vehicles;"
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "question": "Show names for all vehicles in descending order of model year.",
    "answer": "SELECT name FROM vehicle_rent.Customers ORDER BY Model_year  DESC;"
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "question": "What are the names of all vehicles, ordered by model year descending?",
    "answer": "SELECT name FROM vehicle_rent.Vehicles ORDER BY Model_year LIMIT 9;"
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "question": "List all distinct types of powertrain of vehicles.",
    "answer": "SELECT name FROM vehicle_rent.Customers;"
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "question": "What are the different types of powertrains?",
    "answer": "SELECT id FROM vehicle_rent.Vehicles ORDER BY Notes LIMIT 189354726;"
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.",
    "answer": "SELECT \t\n    FROM vehicle_rent.Vehicles;"
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
    "answer": "SELECT name ,  \n    FULL JOIN (SELECT * FROM vehicle_rent.Vehicles) AS t1 ON vehicle_rent.vehicles_id = total_hours ;"
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "question": "Show types of powertrain with vehicles both from 2014 and 2013.",
    "answer": "SELECT * FROM vehicle_rent.Renting_history;"
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
    "answer": "SELECT Type_of_powertrain FROM vehicle_rent.Vehicles;"
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "question": "Show all types of powertrain and the number of vehicles in each type.",
    "answer": "SELECT Vehicles.vehicles_id , \n        GROUP BY vehicles_id ;"
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "question": "How many vehicles have each type of powertrain?",
    "answer": "SELECT name , \n    GROUP BY Type_of_powertrain ORDER BY id ;"
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "question": "What is the type of powertrain with most number of vehicles.",
    "answer": "SELECT Type_of_powertrain \n    FROM (SELECT Type_of_powertrain ,  \n  GROUP BY Type_of_powertrain ORDER BY customer_id ) AS train;"
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "question": "Which type of powertrain is most common?",
    "answer": "SELECT Type_of_powertrain FROM (SELECT Type_of_powertrain , Annual_fuel_cost , Renting_history.id ) AS Subquery ORDER BY name LIMIT 1;"
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "question": "Show minimum, maximum, and average annual fuel cost for all vehicles.",
    "answer": "SELECT Type_of_powertrain ,  \n    FROM vehicle_rent.Customers;"
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
    "answer": "SELECT name , \n    GROUP BY Model_year ORDER BY Annual_fuel_cost   LIMIT 1;"
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
    "answer": "SELECT Type_of_powertrain FROM vehicle_rent.Customers WHERE customer_id = (SELECT customer_id  FROM vehicle_rent.Customers ORDER BY Type_of_powertrain , customer_id )\n    ORDER BY Type_of_powertrain   LIMIT -1;"
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?",
    "answer": "SELECT customer_id , \n     FROM (SELECT DISTINCT name , \n \t   FULL JOIN (SELECT name FROM vehicle_rent.Customers) AS custome_id ON customer_id  = Customers.customer_id ) INNER JOIN vehicle_rent.Discount AS D ON Customers.discount_id  =  Discount.dis"
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.",
    "answer": "SELECT \n\t   FROM (SELECT name , \n\t  RIGHT JOIN vehicle_rent.Customers AS customers\n\t    \n\t    AS PKCUSTOMERS ON customer_id  =  Customers.id INNER JOIN vehicle_rent.Customers AS CustomeRs ON Customers.id  = Vehicles.id ) RIGHT JOIN vehicle_rent.Vehicles AS Vehicles"
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?",
    "answer": "SELECT * FROM vehicle_rent.Discount;"
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "question": "Show the name, age, membership credit for all customers?",
    "answer": "SELECT  LIMIT 4567890213;"
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "question": "What are the names, ages, and membership credits for all customers?",
    "answer": "SELECT name , \t  \n    FROM (SELECT name , \t \n            FULL JOIN (SELECT name FROM (SELECT name , \t \n            FROM (SELECT name , \t \n              FROM (SELECT name , age , \n              FROM (SELECT name , age , \n               WHERE id = (SELECT id FROM (SELECT name ) AS B))))) AS T) ON name  = 1.0);"
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "question": "Show the name and age of the customer with maximum membership credit.",
    "answer": "SELECT \n    \t  \t  FROM (SELECT name , \n   \t   \t\t\t      FROM (SELECT name ,  RIGHT JOIN (SELECT name ) ON name = membership_credit )  \t\t\n      \t\t  \t  ORDER BY membership_credit  DESC LIMIT 1) AS result;"
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "question": "What is the name and age of the customer with the most membership credit?",
    "answer": "SELECT FROM (SELECT DISTINCT RIGHT JOIN (SELECT Customers.name , Customers.age FROM (SELECT Customers.id ) AS T1 INNER JOIN (SELECT  \n     FROM (SELECT ORDER BY membership_credit LIMIT 3)    AS t2 WHERE customer_id = id )      AS CUSTOMERS ON Customers.id  = Customers.id ORDER"
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "question": "What is the average age for customers with a membership credit above the average?",
    "answer": "SELECT Annual_fuel_cost FROM (SELECT customer_id ,  \n        RIGHT JOIN (SELECT id , name , \n        \t       RIGHT JOIN (SELECT customer_id , \n              \t   \t  GROUP BY customer_id ) AS GK ON customer_id  = -1) AS DK ON customer_id = 236754908GROUP BY Customers.id  \n        ORDER BY"
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "question": "Return the average age for customers who have membership above the average across all customers.",
    "answer": "SELECT \n   \n    FROM (SELECT Annual_fuel_cost FROM (SELECT LIMIT 10) AS Membership_Levels WHERE membership_credit = 'high')  \n                AS HIGHEST_MEMBERSHIP;"
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "question": "Show all information for all discounts.",
    "answer": "SELECT * FROM (SELECT * \n    FROM (SELECT Discount.discount_id , discount_id  \n INNER JOIN (SELECT id ,  RIGHT JOIN (SELECT Type_of_powertrain FROM vehicle_rent.Customers) AS a ON Customers.customer_id \n        = Customers.customer_id )  \n        AS Discount ON Customers.custom"
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "question": "Return all information about discounts.",
    "answer": "SELECT * FROM (SELECT discount_id , \n    RIGHT JOIN (SELECT name FROM vehicle_rent.Vehicles) AS vehicle ON vehicles_id  = Vehicles.name ) WHERE id <> 15;"
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "question": "Show the name and total hours of renting for each vehicle.",
    "answer": "SELECT \n    ORDER BY Vehicles.name ;"
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "question": "What are the names and total rental hours for each vehicle?",
    "answer": "SELECT \tRIGHT JOIN (SELECT name , total_hours FROM vehicle_rent.Customers) AS Customer ON customer_id = Customers.id RIGHT JOIN vehicle_rent.Vehicles AS V ON customer_id = customer_id RIGHT JOIN vehicle_rent.Renting_history \n   AS H ON customer_id  = Renting_history.customer_id ;"
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "question": "Show the name of vehicles with no renting history.",
    "answer": "SELECT vehicle_rent.customer_id FROM vehicle_rent.Customers INNER JOIN vehicle_rent.Vehicles ON customer_id = vehicles_id ORDER BY Customers.name  \n        LIMIT 5;"
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles that have never been rented?",
    "answer": "SELECT name FROM vehicle_rent.Customers WHERE Customers.id  = \n  (SELECT id FROM (SELECT DISTINCT customer_id ) AS child_of_rented)\n  INNER JOIN vehicle_rent.Customers ON customer_id  = Customers.id ;"
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "question": "Show the name of customer with at least two renting history records.",
    "answer": "SELECT Customers.name FROM (SELECT DISTINCT Customers.id , Customers.name \n     FROM (SELECT DISTINCT Renting_history.customer_id ) AS Customers)  \n    INNER JOIN (SELECT DISTINCT Renting_history.customer_id FROM (SELECT id FROM vehicle_rent.Renting_history) GROUP BY Customers.id ) ON Customers.id"
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "question": "What are the names of customers who have two or more records of rental history?",
    "answer": "SELECT customer_id , \n   GROUP BY Renting_history.customer_id ;"
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "question": "Show the name and model year of the vehicle with most number of renting history records.",
    "answer": "SELECT name , \n    FROM vehicle_rent.Vehicles ORDER BY name LIMIT 1;"
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "question": "What is the name and model year of the vehicle which has been rented the most times?",
    "answer": "SELECT name , \n    LIMIT 1000;"
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "question": "Show the vehicle name with a descending order of total hours of renting.",
    "answer": "SELECT vehicle_rent.vehicles_id , \n    GROUP BY vehicle_rent.vehicles_id ORDER BY total_hours   LIMIT 1;"
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles, sorted descending by total hours of renting?",
    "answer": "SELECT name FROM vehicle_rent.Vehicles ORDER BY total_hours  DESC\n        LIMIT 10;"
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "question": "What is the discount name with most number of renting history records?",
    "answer": "SELECT total_hours , \n      RIGHT JOIN (SELECT * FROM vehicle_rent.Customers) AS T1 ON Customers.id  =  Vehicles.customer_id ;"
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "question": "Return the name of the discount that corresponds to the most rental history records.",
    "answer": "SELECT Notes FROM (SELECT Notes , \n   RIGHT JOIN (SELECT Notes FROM vehicle_rent.Customers) AS C ON Customers.id = Notes ) ORDER BY Discount.age LIMIT 1;"
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours.",
    "answer": "SELECT customer_id , membership_credit FROM (SELECT name FROM (SELECT name , \n        RIGHT JOIN (SELECT name   FROM (SELECT membership_credit ) AS b) AS a ON age  IN (SELECT name WHERE membership_credit ='m') GROUP BY Customers.id ORDER BY name LIMIT +30)\n     \n\nINNER JOIN ("
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?",
    "answer": "SELECT name ,  \n    GROUP BY name ORDER BY Renting_history.total_hours   LIMIT 2;"
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "question": "Find the average city and highway fuel rates for cars with different powertrain types.",
    "answer": "SELECT \n        RIGHT JOIN (SELECT * FROM (SELECT customer_id , \n          FROM (SELECT id , \n           FROM (SELECT customer_id , \n             FROM (SELECT DISTINCT Customers.customer_id )\n           AS Subquery) AS subq1)) AS TableName2\nWHERE Customers.customer_id  =  'Lexus') AS subq"
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?",
    "answer": "SELECT Type_of_powertrain , \n     RIGHT JOIN (SELECT name ,  AS WEON_NAME) AS Subquery1 ON EXISTS (SELECT name FROM (SELECT Type_of_powertrain LIMIT 3.84) AS subQuery2);"
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the average amount of a student loan?",
    "answer": "SELECT Achievements.achievement_id ,  FULL OUTER JOIN (SELECT Teachers.teacher_id  \n    FROM (SELECT teacher_id ), cre_Students_Information_Systems.Classes) AS CLASSESS ON Classes.class_id  = Classes.class_id ;"
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "question": "Compute the average amount of student loans.",
    "answer": "SELECT Achievements.achievement_id , \n      \t  \t  \t  FROM (SELECT Achievements.student_loan_id ORDER BY datetime_detention_end  DESC LIMIT 1) AS avg;"
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
    "answer": "SELECT Students.bio_data , \n   FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT Student_Loans.student_id ) AS t1)    WHERE class_id = student_id ) GROUP BY bio_data ORDER BY bio_data LIMIT 0);"
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
    "answer": "SELECT DISTINCT Teachers.teacher_id , \n   GROUP BY student_id ;"
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
    "answer": "SELECT \n    FROM (SELECT * FROM (SELECT Teachers.teacher_id , \n           INNER JOIN (SELECT * FROM (SELECT \n                 INNER JOIN (SELECT * FROM (SELECT teacher_id  \n                            FROM (SELECT teacher_details \n WHERE teacher_details  = 'data') AS t1)) AS T2 ON Teachers.teacher_id = Transcripts.transcript_"
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
    "answer": "SELECT  AS FROM   RIGHT JOIN (SELECT Teachers.teacher_details ) AS T ON Classes.class_id  =   1094572386LIMIT -1 OFFSET 2;"
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data of the students who never had a detention or student loan .",
    "answer": "SELECT Behaviour_Monitoring.student_id , \n        LIMIT -1;"
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students never had a detention or student loan ? Find their biographical data .",
    "answer": "SELECT student_id ,  FROM (SELECT student_id   WHERE student_loan_id  = (SELECT student_id FROM (SELECT student_id FROM (SELECT  FROM (SELECT  FROM (SELECT  \n                                FROM (SELECT  WHERE student_id = 'C'))) AS t1)))) AS result;"
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
    "answer": "SELECT Achievements.student_id ,  FROM (SELECT student_id ,  FROM (SELECT * FROM (SELECT student_id FROM (SELECT Student_Loans.student_id  \n    WHERE Student_Loans.amount_of_loan >= 2)) AS T1) AS SubQuery) AS LoantList;"
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the amount and date of loan for the students who have two or more achievements.",
    "answer": "SELECT DISTINCT Transcripts.date_of_loan FROM (SELECT *   FROM (SELECT Transcripts.amount_of_loan , Transcripts.date_of_loan    FROM (SELECT Achievements.student_id )    INNER JOIN (SELECT DISTINCT Transcripts.class_id \n  FROM (SELECT Transcripts.amount_of"
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the detail and id of the teacher who teaches the most courses.",
    "answer": "SELECT Teachers.teacher_id , \n    FROM (SELECT Teachers.teacher_id  \n  INNER JOIN (SELECT DISTINCT Teachers.detention_id ,  RIGHT JOIN cre_Students_Information_Systems.Student_Loans ON Teachers.teacher_id = Student_Loans.student_id"
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the detail and id of the teacher who teaches the largest number of courses?",
    "answer": "SELECT \n     WHERE Transcripts.teacher_id  = (SELECT Teachers.teacher_id FROM (SELECT *FROM cre_Students_Information_Systems.Classes) WHERE class_id ='9g417kicd-5f6b320e8')\n   LIMIT 1;"
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the distinct descriptions of all the detentions which have ever happened?",
    "answer": "SELECT DISTINCT LIMIT 3451.208976;"
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the distinct descriptions of all the detentions that have happened.",
    "answer": "SELECT DISTINCT Detention.detention_id , \n        GROUP BY Detention.date_of_transcript ;"
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the personal details and the address type descriptions of all the students.",
    "answer": "SELECT * FROM (SELECT \t  \t    \t   \t   \n\t\t   \t     \t   \t      \t \t    \t    \t    \t  \t  \t    \t   \t   \t   \t   \t   \t   \t       \t   \t              \t             \t   \t   \t   \t   \t   \t   \t   \t                \t         \t     \t   \t   \t   \t   \t   \t   \t           \n        INNER JOIN (SELECT student_id FROM cre_Students_Information_Systems.Student_Loans) AS T1 ON"
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the personal details and the address type descriptions of each student?",
    "answer": "SELECT Student_Loans.teacher_details ,  LIMIT -2014673598.0;"
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the the address details and the biographical information of the students.",
    "answer": "SELECT Transcripts.address_details , \n     \t  \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t   \n   \n  \t   \n  \t   \n  \t \n \t\t \n \t      \t  \t  \n  \t   \n       \n        \t      \t       \n          \t     \n           \t     \n            \t      \t     \n             \n              \t     \n               \t     \n                 \n                \t     \n                  \t     \n                   "
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the address details and biographical information of each student?",
    "answer": "SELECT student_id , \t  \n         FROM (SELECT Student_Loans.student_id , \t\t   \n        \t     \t      \t   \t \t \t      \t \t     \t   \t \t     \t   \t     \t  \t   \t     \t \t     \t     \t     \t    \t   \t     \t     \t    \t     \t     \t       \n           \t    ORDER BY Ref_Address_Types.address_id , Student_Loans.student_id ) AS"
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and the date of the transcript of all the students.",
    "answer": "SELECT bio_data , \n    FROM (SELECT bio_data ,  ORDER BY Ref_Detention_Type.bio_data ) AS tmp_table  \n INNER JOIN (SELECT DISTINCT bio_data   FROM (SELECT bio_data FROM (SELECT bio_data )  WHERE bio_data  <>  'NULL') \n     AS nullcheck2 ORDER BY Transcripts.bio_data   "
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and the date of transcript issuance of each student?",
    "answer": "SELECT student_id , \n      GROUP BY Detention.student_details   ORDER BY Detention.date_of_transcript ;"
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details.",
    "answer": "SELECT Student_Loans.student_id ,  GROUP BY student_loan_id ORDER BY cre_Students_Information_Systems.behaviour_monitoring_details  \n    LIMIT +1;"
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
    "answer": "SELECT \n    FROM (SELECT *FROM (SELECT Transcripts.transcript_id , bio_data   FROM (SELECT  ORDER BY amount_of_loan   LIMIT 1) AS FirstOrderOfMonth), (SELECT ORDER BY amount_of_loan LIMIT 20))\n    GROUP BY transcript_id , bio_"
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
    "answer": "SELECT student_id ,   FROM (SELECT Teachers.student_id ORDER BY Students.other_details ) AS othereaties;"
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
    "answer": "SELECT student_id FROM (SELECT * FROM (SELECT * FROM (SELECT Student_Loans.student_id FROM (SELECT student_loan_id , student_id  \n        FROM cre_Students_Information_Systems.Student_Loans) AS T1 WHERE Classes.class_id  = Classes.class_id )    LIMIT 2))"
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
    "answer": "SELECT DISTINCT Transcripts.student_id ,  LIMIT 30000000078921465;"
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
    "answer": "SELECT Achievements.student_id ,  FULL JOIN (SELECT DISTINCT Teachers.student_id FROM (SELECT *FROM (SELECT achievement_id ORDER BY student_id )\n        WHERE achievement_details  =  'Desire to go on stage') AS Desired_goes) ON Student_Loans.student_id  = Achievements.student_id"
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have gone through any event? List the students' biographical data and event date.",
    "answer": "SELECT event_date , \n        FROM (SELECT *   FROM (SELECT Transcripts.event_date ) AS TEMP_TABLE ORDER BY Ref_Achievement_Type.event_type_code    LIMIT 1) AS subquery;"
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and event date for students who participated in any events.",
    "answer": "SELECT  AS StudentID,  AS Name,  AS BirthDate,  \n    LIMIT 5019876324;"
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
    "answer": "SELECT class_id , \n    GROUP BY class_id   ORDER BY student_address_id LIMIT 1;"
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
    "answer": "SELECT Transcripts.student_address_id FROM (SELECT student_id , teacher_id  \n        FROM cre_Students_Information_Systems.Students) AS T1;"
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "question": "How are all the achievements described? List the achievement detail and the type description.",
    "answer": "SELECT \n    FROM (SELECT *FROM cre_Students_Information_Systems.Achievements) WHERE Achievements.class_details = 'Student Development'   GROUP BY Student_Loans.student_id ;"
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the achievement detail and the type description of each achievements?",
    "answer": "SELECT \n    FROM (SELECT DISTINCT ORDER BY Behaviour_Monitoring.behaviour_monitoring_id , Transcripts.transcript_id ) AS achievement_achievements;"
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many teachers have taught a student who has not won any achievements?",
    "answer": "SELECT teacher_id FROM (SELECT * FROM (SELECT teacher_id , RIGHT JOIN (SELECT achievement_type_code ) ON student_id =  3) AS t1 INNER JOIN (SELECT DISTINCT Teachers.teacher_id WHERE Teachers.teacher_id  =' + CAST (ROW_NUMBER() OVER()) % '\n    GROUP BY teacher_id ) AS t2 ON student"
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of teachers who have taught students who have never won an achievement.",
    "answer": "SELECT teacher_id FROM (SELECT teacher_id , \n        RIGHT JOIN (SELECT student_id FROM (SELECT DISTINCT * FROM (SELECT student_id WHERE Teachers.teacher_id = Students.student_id ORDER BY Student_Loans.student_loan_id ) AS t)   AS Teachers\n        LEFT JOIN (SELECT DISTINCT student_id"
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the date of the transcripts and the transcript details.",
    "answer": "SELECT Transcripts.date_of_transcript , \n  GROUP BY Detention.detention_id ;"
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the date and detail of each transcript?",
    "answer": "SELECT \n    ORDER BY Ref_Achievement_Type.date_to  \n \n    \n     \n      \n         \n        \n       \n           \n          \n             \n            \n               \n              \n                \n                  \n                   \n                    \n                        \n                       \n                          LIMIT -19035287641 OFFSET +1.443;"
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the achievement type code, achievement details and the date of the achievements.",
    "answer": "SELECT transcript_id , achievement_type_code \n    FROM (SELECT * FROM (SELECT transcript_id   FROM (SELECT class_details WHERE Classes.class_id  = Classes.class_id ) AS chalnspectro) AS t1     INNER JOIN (SELECT DISTINCT class_details FROM (SELECT transcript_id ,"
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the type code, details, and date of each achievement?",
    "answer": "SELECT class_id , \n        FULL JOIN (SELECT teacher_id   FROM cre_Students_Information_Systems.Achievements) AS a2 ON bio_data = '1830479' ORDER BY class_id ;"
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the detention start time and end time of the detentions.",
    "answer": "SELECT DISTINCT * FROM (SELECT detention_id , \n         FROM (SELECT Detention.detention_id  \n    FROM (SELECT detention_id     FROM (SELECT detention_id      WHERE detention_type_code  =  '01') AS subquery) AS subtable2)) AS TEMPTABLE;"
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the starting time and ending time of each detention record?",
    "answer": "SELECT Transcripts.transcript_id , \n        GROUP BY date_of_transcript , Transcripts.date_of_transcript ;"
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the biographical information of the students whose details include the substring 'Suite'.",
    "answer": "SELECT * FROM (SELECT DISTINCT Student_Loans.student_id , \n        INNER JOIN (SELECT student_id  \nFROM (SELECT student_id  \nFROM (SELECT student_loan_id , \n        INNER JOIN (SELECT student_id FROM cre_Students_Information_Systems.Students"
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information.",
    "answer": "SELECT Students_Addresses.student_address_id FROM (SELECT DISTINCT \n        ORDER BY cre_Students_Information_Systems.Students_Addresses.student_details ) AS SUITE\n      WHERE student_details  IN (SELECT DISTINCT Teachers.teacher_details FROM (SELECT ORDER BY Students_Add"
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details for all the pairs of teachers and students who are in the same class.",
    "answer": "SELECT teacher_id ,  GROUP BY student_id ;"
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.",
    "answer": "SELECT * FROM (SELECT Teachers.teacher_id ,  INNER JOIN (SELECT teacher_id   FROM (SELECT Teachers.teacher_id FROM (SELECT teacher_id FROM (SELECT Teachers.class_id   ORDER BY class_id ) GROUP BY Classes.class_id   LIMIT 1) AS subq)\n    \t           INNER JOIN (SELECT teacher_id    FROM (SELECT Teachers."
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
    "answer": "SELECT Teachers.teacher_id FROM (SELECT teacher_id ,  RIGHT JOIN (SELECT *FROM cre_Students_Information_Systems.Classes WHERE Classes.class_id  =  1) AS core_sclasses ON Teachers.teacher_id = Classes.teacher_id ) GROUP BY Teachers.teacher_id"
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.",
    "answer": "SELECT teacher_id ,  GROUP BY teacher_id ORDER BY teacher_id LIMIT 1;"
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
    "answer": "SELECT \n    FROM (SELECT student_id ,  \n     INNER JOIN (SELECT Student_Loans.student_id ) AS T1 ON student_loan_id = teacher_id ORDER BY cre_Students_Information_Systems.student_loan_id  DESC LIMIT 2)\n      GROUP BY student_loan_id ORDER"
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.",
    "answer": "SELECT transcript_id ,  FROM (SELECT student_id   FROM (SELECT student_id , datetime_detention_start WHERE transcript_id = 'f3zc9ps0e') AS T2)\n       ORDER BY Detention.student_id ;"
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students take 2 courses? List student id and details.",
    "answer": "SELECT Students_Addresses.student_id , student_address_id   FROM (SELECT DISTINCT Teachers.student_id ) AS TEACHERS_ADDRESES INNER JOIN (SELECT DISTINCT Classes.class_id ) AS CLASSES ON Teachers.class_id  = Classes.class_id  "
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the ids and details of the students who take 2 courses?",
    "answer": "SELECT cre_Students_Information_Systems.Students_Addresses.student_id , \n    FROM cre_Students_Information_Systems.Students_Addresses AS t1 INNER JOIN cre_Students_Information_Systems.Classes AS t2 ON Transcripts.student_id = Classes.student_id"
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the least common detention type? Show the type code and the description.",
    "answer": "SELECT \n    FROM (SELECT DISTINCT Transcripts.detention_type_code , detention_type_description   FROM cre_Students_Information_Systems.Detention) AS TeentatonQuery;"
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the type code and description of the least common detention type.",
    "answer": "SELECT DISTINCT \tFULL JOIN (SELECT Teachers.transcript_id , teacher_details  \n     FROM (SELECT transcript_id    FROM cre_Students_Information_Systems.Transcripts) AS Transcripts \n          INNER JOIN cre_Students_Information_Systems.Transcripts ON Transcripts.transcript_"
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
    "answer": "SELECT student_id ,  AS umanate_birthcity,  AS name,  AS lastname FROM (SELECT student_id ,  AS uma_lunhogotnstalireformedfromeveryclassAZ,  \n      FROM (SELECT student_id ,  AS birthcityFROMstudents) AS a1) AS a3;"
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details for students whose student loan is above the average amount.",
    "answer": "SELECT Addresses.student_id FROM (SELECT Transcripts.date_of_loan , \n    FROM (SELECT date_of_loan ,  FROM (SELECT  FROM (SELECT student_loan_id ) AS Students) AS Transcripts GROUP BY student_loan_id   ORDER BY Addresses.student_id LIMIT 1), (SELECT date_of_loan FROM (SELECT D"
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the earliest date of loan?",
    "answer": "SELECT * FROM (SELECT date_of_loan , \n    RIGHT JOIN (SELECT DISTINCT Transcripts.date_of_loan ) AS Transactions ON Transcripts.date_of_loan  = 2013) ORDER BY date_of_loan LIMIT 5;"
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the earliest date of loan in the record.",
    "answer": "SELECT DISTINCT Transcripts.date_of_loan  FROM (SELECT datetime_detention_start , datetime_detention_end ) AS Loans WHERE Transcripts.date_of_loan = Classes.date_of_loan   GROUP BY Transcripts.date_of_loan ORDER BY date_of_loan LIMIT 1;"
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student has the loan with the minimum value? List the student's biographical information.",
    "answer": "SELECT transcript_id ,  FROM (SELECT student_loan_id  \n        FROM (SELECT student_loan_id FROM (SELECT student_id FROM (SELECT student_id FROM (SELECT DISTINCT student_loan_id WHERE student_loan_id <= 49) AS b ORDER BY Behaviour_Monitoring.student_id )LIMIT 1)) AS a LIMIT 2);"
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical information of the student with the smallest student loan.",
    "answer": "SELECT * FROM (SELECT Transcripts.student_loan_id ) AS shortest_stu GROUP BY student_loan_id ORDER BY student_loan_id LIMIT 1;"
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the transcript issued for the student with loan of maximum value?",
    "answer": "SELECT Transcripts.student_id FROM (SELECT DISTINCT transcript_id , \n     FROM (SELECT * FROM (SELECT Student_Loans.transcript_id ORDER BY amount_of_loan )ORDER BY transcript_id LIMIT 1)) AS T;"
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the transcript issuance date for the student with the largest amount of loan?",
    "answer": "SELECT \n     FROM (SELECT student_id , \n                  LIMIT 992.47306815) AS STUDENT ORDER BY Student_Loans.transcript_id   LIMIT -0.1;"
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details.",
    "answer": "SELECT DISTINCT teacher_id ,  FROM (SELECT *  \n    FROM (SELECT Teachers.teacher_id FROM (SELECT Teachers.student_id FROM (SELECT student_id FROM (SELECT Teachers.teacher_id ORDER BY student_id )ORDER BY student_id LIMIT 1) AS s) AS TEACHERS INNER JOIN (SELECT DISTINCT *FROM (SELECT teacher_"
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance.",
    "answer": "SELECT Teachers.teacher_id ,  GROUP BY Classes.class_id   ORDER BY date_of_transcript    LIMIT 1;"
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "question": "How much total loan does each student have ? List the student ids and the amounts .",
    "answer": "SELECT student_id \n    FROM (SELECT student_id ,   LIMIT 2000) AS TotalLoanAmount;"
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id and the total amount of loan he or she has.",
    "answer": "SELECT Teachers.student_id ,  FROM (SELECT transcript_id  \n     FROM (SELECT transcript_id    FROM (SELECT student_id      ORDER BY student_id ) AS t1 GROUP BY transcript_id   ORDER BY transcript_id LIMIT 2)GROUP BY Transcripts.student_id , Transcripts.amount_"
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses does each student take? List the student id, the student biographical data and the course count.",
    "answer": "SELECT Teachers.teacher_id FROM cre_Students_Information_Systems.Student_Loans AS ST ORDER BY cre_Students_Information_Systems.Teachers.teacher_id  \n        LIMIT 1;"
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
    "answer": "SELECT Student_Events.student_id , \n   \t\t\t  \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t   \n    \t   \t   \t    \t    \t    \t    \t    \t    \t    FROM (SELECT student_id FROM (SELECT teacher_id  \t\t\t\t   \t     \t \t     \t\t\t      \t\t     \t    \t    FROM"
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have gone through a detention?",
    "answer": "SELECT Teachers.teacher_id ,  GROUP BY student_id  \n       \n   \n     \n    \n        \n      \n           \n         \n          \n               \n                 \n              \n                \n             \n            \n                    \n                              \n                        \n                         \n                          \n                             \n                           \n                            \n\n\n\n\n\n\n\n\n\n                                                  \n\n \n\n                                                   \n"
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of students who have a detention record.",
    "answer": "SELECT * FROM (SELECT DISTINCT student_id , bio_data INNER JOIN (SELECT *FROM cre_Students_Information_Systems.Students) AS T1 ON cre_Students_Information_Systems.Students.student_id  =  \n      Teachers.teacher_id"
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the code and description of the most common student address type?",
    "answer": "SELECT \n    FROM (SELECT DISTINCT \n          ORDER BY address_type_code , other_details ) AS LOOKUP_SUBQUERY;"
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the most common student address type? Give me the code and description of the address type.",
    "answer": "SELECT DISTINCT \n    FROM (SELECT Classes.class_id ,   INNER JOIN (SELECT Transcripts.student_address_id ) AS StudentAddressType ON Classes.class_id = Transcripts.student_address_id ORDER BY Classes.detention_type_code LIMIT 1)\n  \n   "
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
    "answer": "SELECT * FROM (SELECT DISTINCT Behaviour_Monitoring.student_loan_id , \n    FROM (SELECT student_details ) AS bm2 WHERE bio_data = 'Seemdly')\n   ORDER BY Student_Loans.date_of_loan LIMIT 4;"
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data.",
    "answer": "SELECT * FROM (SELECT DISTINCT FROM (SELECT student_id ,   INNER JOIN (SELECT *FROM (SELECT DISTINCT FROM (SELECT student_loan_id ) AS B WHERE Achievements.event_id = Transcripts.student_id RIGHT OUTER JOIN cre_Students_Information_Systems.Behaviour_Moni"
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
    "answer": "SELECT Students_Addresses.class_id ,  FROM (SELECT DISTINCT Students_Addresses.class_id  \n        FROM (SELECT * FROM (SELECT Transcripts.student_id ) AS Teachers_IDs INNER JOIN (SELECT DISTINCT Classes.class_id WHERE Classes.class_id  = Transcripts.class_id )    AS Students_Address"
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?",
    "answer": "SELECT student_id ,  \n      FULL JOIN (SELECT DISTINCT Teachers.student_id FROM (SELECT * FROM (SELECT \n        LIMIT 100) AS Students WHERE student_id = 'Gabi' ORDER BY student_id ) \n      AS sampeln) AS RESULTS ON student_id  =  \n      2.5"
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "question": "When did all the detentions start?",
    "answer": "SELECT DISTINCT \n        INNER JOIN (SELECT Classes.class_id , Classes.class_id , class_details   FROM (SELECT class_id ,  WHERE class_details  ='O') AS T1 RIGHT OUTER JOIN (SELECT Classes.class_id INNER JOIN (SELECT Classes.class_id )\n "
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the detention start date for all the detention records.",
    "answer": "SELECT \n\t\tFROM (SELECT * FROM (SELECT DISTINCT Detention.detention_id , \n\t\t\t      \t\t  \t    \t    \t  \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t    \t   \t \n\t\t\t\t          \tFROM (SELECT \t\t       \t    \t     \t    \t     \t    \t     \t    \t    \t     \t    \t     \t"
  },
  {
    "id": 515,
    "db_id": "book_1",
    "question": "List all the author names.",
    "answer": "SELECT idAuthor FROM book_1.Author;"
  },
  {
    "id": 516,
    "db_id": "book_1",
    "question": "What are the names of all the authors?",
    "answer": "SELECT DISTINCT INNER JOIN book_1.Author AS a ON book_1.Book.idAuthor = Author.idAuthor ORDER BY Name LIMIT 3;"
  },
  {
    "id": 517,
    "db_id": "book_1",
    "question": "Show all Client names and their addresses.",
    "answer": "SELECT Client.Name , \n     ORDER BY Address   LIMIT 10;"
  },
  {
    "id": 518,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients?",
    "answer": "SELECT idAuthor , \n        INNER JOIN (SELECT Client.idAuthor ,   \n              FROM (SELECT IdClient  \n                   FROM (SELECT Client.IdClient ORDER BY Client.DateOrder ) AS Child)     ORDER BY DateOrder     \n            LIMIT 10 OFFSET 5) ON EXISTS (SELECT Client.idAuthor , Title LIMIT +4);"
  },
  {
    "id": 519,
    "db_id": "book_1",
    "question": "List all Book titles, ISBNs, and sale prices.",
    "answer": "SELECT \n     LIMIT 350;"
  },
  {
    "id": 520,
    "db_id": "book_1",
    "question": "What are the titles, ISBNs, and sale prices for all books?",
    "answer": "SELECT book_1.Title , book_1.ISBN , book_1.SalePrice FROM book_1.Client ORDER BY Book.Title ;"
  },
  {
    "id": 521,
    "db_id": "book_1",
    "question": "How many books do we have?",
    "answer": "SELECT Title FROM book_1.Books_Order;"
  },
  {
    "id": 522,
    "db_id": "book_1",
    "question": "Count the number of books.",
    "answer": "SELECT \n        FROM book_1.Author;"
  },
  {
    "id": 523,
    "db_id": "book_1",
    "question": "How many authors are there?",
    "answer": "SELECT  RIGHT JOIN (SELECT Title , Author FROM book_1.Author) AS OHHOWEVEREARS ON Book.Author = Author.idAuthor GROUP BY Author.idAuthor  \n    LIMIT 2;"
  },
  {
    "id": 524,
    "db_id": "book_1",
    "question": "Count the number of authors.",
    "answer": "SELECT idAuthor FROM book_1.Author\n    WHERE Author_Book.idAuthor = 3;"
  },
  {
    "id": 525,
    "db_id": "book_1",
    "question": "How many clients are there?",
    "answer": "SELECT Title FROM book_1.Books_Order AS t, (SELECT * FROM book_1.Client)\n    WHERE book_1.Orders.Name = 'How Many Clents' INNER JOIN book_1.Orders ON Orders.idAuthor \n            = Books_Order.IdClient INNER JOIN (SELECT IdClient FROM book_1."
  },
  {
    "id": 526,
    "db_id": "book_1",
    "question": "Return the number of clients.",
    "answer": "SELECT * FROM (SELECT idAuthor ,  \n    INNER JOIN (SELECT IdClient , Client.IdClient ) AS SubQuery2 ON Client.idAuthor = SalePrice ) ORDER BY Client.IdClient ;"
  },
  {
    "id": 527,
    "db_id": "book_1",
    "question": "List names and addresses of all clients in alphabetical order by their names.",
    "answer": "SELECT Client.Name ,  ORDER BY Client.Address  \n    \n            \n    \n          \n      \n           \n        \n             \n              \n         \n               \n                \n                  \n                   \n                     \n                 \n                    \n                           \n                        \n                            \n                             \n                          \n                              \n                                \n                               \n\n\n\n\n\n\n\n \n \n  \n      \n            \n        \n           \n              \n             \n               \n"
  },
  {
    "id": 528,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients, ordered alphabetically by name?",
    "answer": "SELECT idAuthor ,  ORDER BY Name  \n    \n    LIMIT 5;"
  },
  {
    "id": 529,
    "db_id": "book_1",
    "question": "Show all book titles and corresponding author names.",
    "answer": "SELECT \n        FROM book_1.Author;"
  },
  {
    "id": 530,
    "db_id": "book_1",
    "question": "What are the names of all books and their corresponding authors?",
    "answer": "SELECT Books_Order.Author , \n    GROUP BY Books_Order.Author ORDER BY Author LIMIT 5;"
  },
  {
    "id": 531,
    "db_id": "book_1",
    "question": "Show all order ids and their client names.",
    "answer": "SELECT Orders.idAuthor , Orders.Author   FROM (SELECT idAuthor   \n        FROM (SELECT Title , Author_Book.idAuthor WHERE Title  = 'New Book') AS Subquery)      AS AuthorisationAtAll\n    INNER JOIN book_1.Orders ON book_1.Orders.idAuthor  = book_1.idAuthor ;"
  },
  {
    "id": 532,
    "db_id": "book_1",
    "question": "What are the ids of all orders and the corresponding client names?",
    "answer": "SELECT Orders.idAuthor , \n    INNER JOIN (SELECT Client.IdClient   FROM book_1.Orders) AS Orders ON book_1.Orders.idAuthor = Book.idAuthor ;"
  },
  {
    "id": 533,
    "db_id": "book_1",
    "question": "Show all author names and the numbers of books each has written.",
    "answer": "SELECT * FROM book_1.Author ORDER BY Books_Order.Author \n    LIMIT 3;"
  },
  {
    "id": 534,
    "db_id": "book_1",
    "question": "What are the names of all the authors, and how many books has each written?",
    "answer": "SELECT Title , \n    FROM book_1.Author;"
  },
  {
    "id": 535,
    "db_id": "book_1",
    "question": "Show all book isbns and the numbers of orders for each.",
    "answer": "SELECT Book.IdOrder ,  ORDER BY Book.idAuthor  \n       \n   \n        \n         \n       \n      \n     \n    \n    \n           \n              \n                 \n               \n                \n            \n             \n          \n        \n                  \n                    \n                     \n                   \n                      \n                       \n                         \n                        \n                          \n                           \n                            \n                             \n                               \n                                \n\n\n\n\n\n\n\n"
  },
  {
    "id": 536,
    "db_id": "book_1",
    "question": "What are all isbns for each book, and how many times has each been ordered?",
    "answer": "SELECT book_1.Books_Order.ISBN , \n   FROM book_1.Books_Order INNER JOIN book_1.Orders ON Book.Title = Orders.ISBN ;"
  },
  {
    "id": 537,
    "db_id": "book_1",
    "question": "Show all book isbns and the total amount ordered for each.",
    "answer": "SELECT * FROM (SELECT book_1.ISBN , \n    GROUP BY book_1.Orders.idAuthor ORDER BY book_1.Orders.idAuthor ) AS subquery;"
  },
  {
    "id": 538,
    "db_id": "book_1",
    "question": "What are the isbns for all books, and what is the total amount ordered for each?",
    "answer": "SELECT \n    ORDER BY ISBN , amount ;"
  },
  {
    "id": 539,
    "db_id": "book_1",
    "question": "Show the book title corresponding to the book with the most number of orders.",
    "answer": "SELECT * FROM (SELECT book_1.idAuthor , \n\t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  FROM (SELECT book_1.idAuthor ,  \t  \t  FROM (SELECT idAuthor FROM (SELECT LIMIT 0)) AS TEMP1)     AS TEMP2 \n\t\t  INNER JOIN (SELECT book_1.idAuthor FROM (SELECT Id"
  },
  {
    "id": 540,
    "db_id": "book_1",
    "question": "What is the title of the book that has been ordered the greatest number of times?",
    "answer": "SELECT Book.Title FROM (SELECT Book.IdOrder ,  RIGHT JOIN (SELECT Book.Title ) AS Title_of_Books ON Orders.idAuthor = Author.idAuthor ORDER BY Orders.DateOrder LIMIT -1) GROUP BY Orders.DateOrder  \n        LIMIT -1;"
  },
  {
    "id": 541,
    "db_id": "book_1",
    "question": "Show the book title and purchase price of the book that has had the greatest amount in orders.",
    "answer": "SELECT book_1.Books_Order.Title , \n        RIGHT JOIN book_1.Books_Order ON Book.idAuthor = Books_Order.idAuthor ORDER BY Orders.PurchasePrice   LIMIT 2;"
  },
  {
    "id": 542,
    "db_id": "book_1",
    "question": "What is the title and purchase price of the book that has the highest total order amount?",
    "answer": "SELECT \n\t  \n    FROM book_1.Orders;"
  },
  {
    "id": 543,
    "db_id": "book_1",
    "question": "Show the titles of books that have been ordered.",
    "answer": "SELECT idAuthor FROM book_1.Books_Order;"
  },
  {
    "id": 544,
    "db_id": "book_1",
    "question": "What are the different titles of books that have been ordered in the past?",
    "answer": "SELECT book_1.Books_Order.Title FROM book_1.Books_Order ORDER BY Book.Author ;"
  },
  {
    "id": 545,
    "db_id": "book_1",
    "question": "Show the names of clients who have ordered at least once.",
    "answer": "SELECT Client.Name FROM (SELECT DISTINCT Client.Name ,  ORDER BY Orders.DateOrder ) AS ALDER_CLIENTS\n      WHERE Orders.ISBN = '0-395218F'\n    GROUP BY Client.Name  \n     ORDER BY Orders.DateOrder ;"
  },
  {
    "id": 546,
    "db_id": "book_1",
    "question": "What are the names of the different clients who have made an order?",
    "answer": "SELECT idAuthor ,  ORDER BY amount  \n    LIMIT -2108397546.86;"
  },
  {
    "id": 547,
    "db_id": "book_1",
    "question": "Show all client names and the number of orders each has made.",
    "answer": "SELECT amount , \n    FROM (SELECT Client.Name , Orders.NumCC ,  \n     FROM (SELECT Name , NumCC FROM (SELECT Client.Name   FROM (SELECT Client.Name ) AS T1) AS T2 \n     INNER JOIN (SELECT Orders.NumCC FROM (SELECT Orders.NumCC ) AS T1) AS T3 ON Title \n     ="
  },
  {
    "id": 548,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and how many times has each of them ordered?",
    "answer": "SELECT Client.Name , \n        GROUP BY Client.IdOrder \n    \n        \n        \n        \n      \n     \n    ORDER BY Client.idAuthor ;"
  },
  {
    "id": 549,
    "db_id": "book_1",
    "question": "What is the name of the client with the most number of orders?",
    "answer": "SELECT Orders.idAuthor FROM (SELECT DISTINCT Orders.IdClient ,  RIGHT JOIN (SELECT IdOrder  \n    FROM book_1.Orders) AS Subquery ON Book.idAuthor = Title ORDER BY Client.Name ) GROUP BY Client.Name LIMIT 5;"
  },
  {
    "id": 550,
    "db_id": "book_1",
    "question": "Give the name of the client who has made the most orders.",
    "answer": "SELECT Orders.idAuthor FROM (SELECT idAuthor , \n    RIGHT JOIN (SELECT * FROM (SELECT Orders.idAuthor , \n   ORDER BY Orders.amount ) AS one ORDER BY Orders.amount ) AS two ON Orders.idAuthor = Title GROUP BY IdOrder LIMIT 1);"
  },
  {
    "id": 551,
    "db_id": "book_1",
    "question": "Show the client names and their total amounts of books ordered.",
    "answer": "SELECT Client.Name , \n    GROUP BY Client.IdOrder , Client.Name ;"
  },
  {
    "id": 552,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and the total amount of books ordered by each?",
    "answer": "SELECT Client.Name , \n     FROM book_1.Orders   INNER JOIN book_1.Client ON book_1.Orders.idAuthor = Books_Order.idAuthor ;"
  },
  {
    "id": 553,
    "db_id": "book_1",
    "question": "Show the client name who has the most total amount of books ordered.",
    "answer": "SELECT book_1.Client.Name FROM book_1.Orders ORDER BY book_1.Client.Name LIMIT 1;"
  },
  {
    "id": 554,
    "db_id": "book_1",
    "question": "What is the name of the client who has ordered the greatest total amount of books?",
    "answer": "SELECT Client.Name FROM (SELECT Client.IdClient ,  AS SUM_ALL\n     FROM book_1.Orders GROUP BY Orders.DateOrder LIMIT -2) ORDER BY DateOrder ;"
  },
  {
    "id": 555,
    "db_id": "book_1",
    "question": "Show all book titles for books that have no orders.",
    "answer": "SELECT Book.Title FROM book_1.Orders WHERE Orders.idAuthor = 0\n  INNER JOIN book_1.Books_Order ON Books_Order.IdOrder = Orders.IdOrder   LEFT OUTER JOIN book_1.Client AS Client ON Client.idAuthor = Book.Title ORDER BY Orders.DateOrder , book_1.Client.Name LIMIT 2;"
  },
  {
    "id": 556,
    "db_id": "book_1",
    "question": "What are the titles of books that have never been ordered?",
    "answer": "SELECT Title FROM (SELECT DISTINCT amount ,  ORDER BY Book.Title ) AS TEMP_ORDERED_BOOKS_TITLES;"
  },
  {
    "id": 557,
    "db_id": "book_1",
    "question": "Show all client names for clients who have not made orders.",
    "answer": "SELECT Name FROM (SELECT DISTINCT Client.Name , Client.Address , Title ) AS TAJ INNER JOIN (SELECT DISTINCT Orders.Title , Orders.DateOrder  \n        FROM (SELECT * FROM (SELECT DISTINCT Client.Name , Client.Address , Title  FROM (SELECT Client.Name , Client.Address , Books_Order.Title ) AS TA"
  },
  {
    "id": 558,
    "db_id": "book_1",
    "question": "What are the names of clients who have never made an order?",
    "answer": "SELECT Client.Name FROM (SELECT Client.IdOrder  FROM book_1.Client) AS NOVIERSINTO WHERE Book.DateOrder  <>'1930-04-28\")\n</pre>\nThe result is two names, so we can use it for example in a query like below: \"SELECT ClientName FROM ClientsExcludedInOrders;\". This might be useful to know which clients"
  },
  {
    "id": 559,
    "db_id": "book_1",
    "question": "What is the maximum and the minimum sale price?",
    "answer": "SELECT Title , \n    GROUP BY SalePrice   ORDER BY SalePrice LIMIT 1;"
  },
  {
    "id": 560,
    "db_id": "book_1",
    "question": "Give the maximum and minimum sale price of books.",
    "answer": "SELECT Title , \n    FULL JOIN (SELECT SalePrice FROM book_1.Books_Order) AS MaximumOrderPrice ON Book.Title  = Orders.Title   LIMIT 2;"
  },
  {
    "id": 561,
    "db_id": "book_1",
    "question": "What is the average purchase price and the average sale price?",
    "answer": "SELECT Author FROM book_1.Author;"
  },
  {
    "id": 562,
    "db_id": "book_1",
    "question": "Give the average purchase price and average sale price for books.",
    "answer": "SELECT \n        RIGHT JOIN (SELECT Author_Book.Author , \n  FROM book_1.Books_Order) AS Author_Book ON Book.idAuthor = Author_Book.idAuthor ;"
  },
  {
    "id": 563,
    "db_id": "book_1",
    "question": "What is the maximum difference between the sale price and purchase price?",
    "answer": "SELECT \n    RIGHT JOIN (SELECT DISTINCT Title FROM (SELECT LIMIT 12345) AS Temp_Table ORDER BY SalePrice LIMIT -80976) AS Sale_and_Purcahse ON SalePrice = PurchasePrice GROUP BY Title ORDER BY SalePrice   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n \n\nLIMIT 1"
  },
  {
    "id": 564,
    "db_id": "book_1",
    "question": "Return the largest difference in sale price and purchase price.",
    "answer": "SELECT * FROM (SELECT DISTINCT PurchasePrice , \n     LIMIT 50) AS ResultSetIn;"
  },
  {
    "id": 565,
    "db_id": "book_1",
    "question": "List all book titles which have sale prices higher than the average.",
    "answer": "SELECT Title FROM (SELECT Title , \n    FULL JOIN (SELECT Author_Book.Author , Book.Title ) AS OUGNEASOME ON Author = book_1.Author ORDER BY idAuthor LIMIT 2) AS SubqueryAVAR GROUP BY Title LIMIT 0;"
  },
  {
    "id": 566,
    "db_id": "book_1",
    "question": "What are the titles of books with sale prices above the average sale price across all books?",
    "answer": "SELECT Book.Title FROM book_1.Book INNER JOIN (SELECT SalePrice \nFROM book_1.Book GROUP BY SalePrice ) ON book_1.SalePrice = book_1.SalePrice ORDER BY Author.idAuthor ;"
  },
  {
    "id": 567,
    "db_id": "book_1",
    "question": "List all book titles which have the lowest sale price .",
    "answer": "SELECT Book.Title , \n    FROM (SELECT Books_Order.Author , Books_Order.DateOrder , Books_Order.SalePrice  \n      ORDER BY SalePrice ) AS T1 GROUP BY Author LIMIT 0;"
  },
  {
    "id": 568,
    "db_id": "book_1",
    "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?",
    "answer": "SELECT * FROM (SELECT book_1.Books_Order.Author , book_1.Books_Order.DateOrder , book_1.Client.Name \n      FROM book_1.Orders AS Book_Orders)   AS Sale_Price ORDER BY Client.Name LIMIT 2;"
  },
  {
    "id": 569,
    "db_id": "book_1",
    "question": "List all book titles which have highest purchase prices .",
    "answer": "SELECT Title , \n    FROM (SELECT Book.Title , \n \t  ORDER BY PurchasePrice ) AS Result GROUP BY Title ;"
  },
  {
    "id": 570,
    "db_id": "book_1",
    "question": "What are the titles of books with the highest purchase price across all books ?",
    "answer": "SELECT Title ,  GROUP BY Title ORDER BY PurchasePrice   LIMIT 1;"
  },
  {
    "id": 571,
    "db_id": "book_1",
    "question": "What is the average sale price of books written by George Orwell?",
    "answer": "SELECT Address ,  FROM (SELECT book_1.amount   FROM book_1.Client) AS Book;"
  },
  {
    "id": 572,
    "db_id": "book_1",
    "question": "Give the average sale price of books authored by George Orwell.",
    "answer": "SELECT Author.Author ,  AS INNER \n    WHERE Book.IdOrder = 2 GROUP BY Client.idAuthor ORDER BY Client.Name ;"
  },
  {
    "id": 573,
    "db_id": "book_1",
    "question": "What are sale prices of books written by Plato?",
    "answer": "SELECT idAuthor , \n    GROUP BY idAuthor ORDER BY Author , SalePrice ;"
  },
  {
    "id": 574,
    "db_id": "book_1",
    "question": "Return the sale prices of books authored by Plato.",
    "answer": "SELECT * FROM book_1.Author_Book AS fn1, book_1.Books_Order AS Book2 ORDER BY Books_Order.DateExped \n    LIMIT 5;"
  },
  {
    "id": 575,
    "db_id": "book_1",
    "question": "What is the title of the book written by George Orwell that has the lowest sale price?",
    "answer": "SELECT DISTINCT Title FROM book_1.Books_OrderFULL JOIN book_1.Client AS C ON Book.idAuthor = Client.IdClient ORDER BY SalePrice LIMIT 5;"
  },
  {
    "id": 576,
    "db_id": "book_1",
    "question": "Give the title of book by George Orwell that has the lowest saleprice.",
    "answer": "SELECT \n        FROM book_1.Author ORDER BY SalePrice LIMIT 5;"
  },
  {
    "id": 577,
    "db_id": "book_1",
    "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
    "answer": "SELECT Author.Author ,  FROM book_1.Books_Order WHERE Author = 'Plato'\n    LIMIT 2;"
  },
  {
    "id": 578,
    "db_id": "book_1",
    "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.",
    "answer": "SELECT \n        FROM (SELECT book_1.Title , Books_Order.amount ) AS Subquery;"
  },
  {
    "id": 579,
    "db_id": "book_1",
    "question": "Who is the author of the book \"Pride and Prejudice\"?",
    "answer": "SELECT  WHERE ISBN \n<idAuthor ;"
  },
  {
    "id": 580,
    "db_id": "book_1",
    "question": "Give the name of the author who wrote the book titled Pride and Prejudice.",
    "answer": "SELECT Author FROM (SELECT Book.Title ,  AS IN \n        FROM book_1.Book) AS Book WHERE Book.Title  =  'Pride & Prejudice';"
  },
  {
    "id": 581,
    "db_id": "book_1",
    "question": "List titles of all books published by an author whose name contains the string 'Plato'?",
    "answer": "SELECT * FROM book_1.Books_Order WHERE Client.Name ='Plato';"
  },
  {
    "id": 582,
    "db_id": "book_1",
    "question": "What are the titles of all books written by an author with a name that contains Plato?",
    "answer": "SELECT *FROM book_1.Author WHERE Author = (SELECT Title FROM book_1.Author) LIMIT 20;"
  },
  {
    "id": 583,
    "db_id": "book_1",
    "question": "How many orders do we have for \"Pride and Prejudice\"?",
    "answer": "SELECT \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \n \nINNER JOIN (SELECT \t    \t \t INNER JOIN (SELECT  \t       ORDER"
  },
  {
    "id": 584,
    "db_id": "book_1",
    "question": "Return the number of orders received for Pride and Prejudice.",
    "answer": "SELECT Title FROM book_1.Orders;"
  },
  {
    "id": 585,
    "db_id": "book_1",
    "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
    "answer": "SELECT \n     ORDER BY Orders.Name , Orders.IdClient   LIMIT 2;"
  },
  {
    "id": 586,
    "db_id": "book_1",
    "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?",
    "answer": "SELECT * FROM book_1.Orders AS t1 \n    INNER JOIN book_1.Orders AS t2 ON Title = 'Pride' ORDER BY Client.idAuthor   LIMIT 0;"
  },
  {
    "id": 587,
    "db_id": "book_1",
    "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
    "answer": "SELECT Book.Title , \n    FROM (SELECT Orders.PurchasePrice FROM (SELECT Books_Order.IdOrder ) AS Orders  \n            INNER JOIN (SELECT Client.Name , Orders.idAuthor ) AS Clients ON Orders.idAuthor  = Book.idAuthor ) GROUP BY Author ;"
  },
  {
    "id": 588,
    "db_id": "book_1",
    "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?",
    "answer": "SELECT ISBN FROM (SELECT DISTINCT ORDER BY Client.Name , book_1.Client.Name ) WHERE Book.Author = 'Peter' ORDER BY Client.Name \n    LIMIT -205749368;"
  },
  {
    "id": 589,
    "db_id": "book_1",
    "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith.",
    "answer": "SELECT \n        FROM book_1.Orders AS t3 INNER JOIN (SELECT Client.Name , Book.Title  \n    FROM book_1.Client) AS t2 ON Title = 'Peter Doe' ORDER BY Name ;"
  },
  {
    "id": 590,
    "db_id": "book_1",
    "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?",
    "answer": "SELECT \n     ORDER BY Client.Title , Client.Name  \n   \n      \n       \n    \n   \n   \n   \n     \n         \n     \n        \n   \n          \n           \n             \n                \n               \n              \n            \n                   \n                  \n                 \n                      \n                     \n                    \n                        LIMIT 5038269417 OFFSET 2.0"
  },
  {
    "id": 591,
    "db_id": "book_1",
    "question": "Show all client names who have orders for \"Pride and Prejudice\".",
    "answer": "SELECT Client.Name FROM (SELECT * FROM (SELECT ORDER BY Client.Name , Orders.Name  \n   \n    \n     \n      \n          \n        \n       \n           \n         \n              \n             \n                \n            \n               \n                 \n                  \n                   \n                        \n                      \n                         \n                       \n                          \n                            \n                               \n                              \n\n\n\n\n\n\n                                \t\t  \n\n\n"
  },
  {
    "id": 592,
    "db_id": "book_1",
    "question": "What are the names of clients who have ordered Pride and Prejudice?",
    "answer": "SELECT Client.Name FROM (SELECT Title ,  ORDER BY Orders.DateOrder ) AS Subquery\n     WHERE Client.idAuthor = '1' ORDER BY Name ;"
  },
  {
    "id": 593,
    "db_id": "book_review",
    "question": "How many books are there?",
    "answer": "SELECT  RIGHT JOIN (SELECT Book_ID FROM book_review.book) AS t1 ON review.Book_ID = Title ORDER BY Chapters LIMIT +2034567;"
  },
  {
    "id": 594,
    "db_id": "book_review",
    "question": "List the titles of books in ascending alphabetical order.",
    "answer": "SELECT * FROM book_review.book ORDER BY Title ;"
  },
  {
    "id": 595,
    "db_id": "book_review",
    "question": "List the titles of books in descending order of pages.",
    "answer": "SELECT Title FROM (SELECT Title , Pages ) ORDER BY Pages ;"
  },
  {
    "id": 596,
    "db_id": "book_review",
    "question": "What are the types and release dates of books?",
    "answer": "SELECT book_review.book.Book_ID , \n        LEFT JOIN (SELECT Book_ID FROM book_review.review) AS t1 ON review.Review_ID  =   Title ORDER BY Release ;"
  },
  {
    "id": 597,
    "db_id": "book_review",
    "question": "What are the maximum and minimum number of chapters for each book?",
    "answer": "SELECT Title , \n    RIGHT JOIN (SELECT Book_ID   FROM book_review.review ORDER BY Review_ID ) AS Bottom15 ON Review_ID = 26938740;"
  },
  {
    "id": 598,
    "db_id": "book_review",
    "question": "What are the titles of books that are not \"Poet\"?",
    "answer": "SELECT * FROM book_review.book;"
  },
  {
    "id": 599,
    "db_id": "book_review",
    "question": "What is the average rating in reviews?",
    "answer": "SELECT Audio FROM (SELECT Rating \n        FROM (SELECT Book_ID FROM book_review.review) AS T1 WHERE Review_ID >= 340 GROUP BY review.Book_ID ORDER BY review.Rating )GROUP BY book_review.Review_ID ;"
  },
  {
    "id": 600,
    "db_id": "book_review",
    "question": "What are the titles and ratings of books?",
    "answer": "SELECT Title ,  RIGHT JOIN (SELECT Book_ID FROM book_review.review GROUP BY Chapters ORDER BY Chapters ) AS T1 ON book_review.Book_ID = Title  \n        INNER JOIN (SELECT Rank FROM book_review.book WHERE Book_ID  = Book_ID  LIMIT 3) AS T2 ON book_review.Review"
  },
  {
    "id": 601,
    "db_id": "book_review",
    "question": "What is the rating of the book with the largest number of chapters?",
    "answer": "SELECT Audio \n    FROM (SELECT Rating , Book_ID   INNER JOIN (SELECT Title FROM book_review.book) AS B ON Book_ID = Title ) ORDER BY Chapters LIMIT 1;"
  },
  {
    "id": 602,
    "db_id": "book_review",
    "question": "What is the rank of the book with the smallest number of pages?",
    "answer": "SELECT Title ,  RIGHT JOIN (SELECT Pages FROM book_review.book) AS PagesClub ON Book_ID = Pages ;"
  },
  {
    "id": 603,
    "db_id": "book_review",
    "question": "What is the title of the book with the highest rank in the review?",
    "answer": "SELECT DISTINCT \n    RIGHT JOIN (SELECT Title FROM book_review.review) AS B ON Book_ID = Title ORDER BY Rank LIMIT -1;"
  },
  {
    "id": 604,
    "db_id": "book_review",
    "question": "What is the average number of readers for books of type \"Novel\"?",
    "answer": "SELECT Audio FROM (SELECT \n    LIMIT +2048) AS avg_readers WHERE Type = 'Novel' GROUP BY Type , book.Type LIMIT 1;"
  },
  {
    "id": 605,
    "db_id": "book_review",
    "question": "For each book type return the type and the number of books of that type.",
    "answer": "SELECT book_review.book.Book_ID , \n  \t      \t  INNER JOIN book_review.book AS Book ON book_review.book.Chapters = book.Book_ID GROUP BY book.Chapters ORDER BY Book_ID LIMIT 1;"
  },
  {
    "id": 606,
    "db_id": "book_review",
    "question": "What is the most common type of books?",
    "answer": "SELECT \n    FROM book_review.review ORDER BY Type ;"
  },
  {
    "id": 607,
    "db_id": "book_review",
    "question": "What are the types of books that have at least three books belonging to?",
    "answer": "SELECT \n    GROUP BY book_review.book.Book_ID ;"
  },
  {
    "id": 608,
    "db_id": "book_review",
    "question": "List the titles of books in ascending order of the ratings in review?",
    "answer": "SELECT DISTINCT book_review.book.Title ORDER BY book_review.book.Rating \n    LIMIT 10;"
  },
  {
    "id": 609,
    "db_id": "book_review",
    "question": "List the title and audio length for all the books in descending order of the number of readers.",
    "answer": "SELECT Title , \n    GROUP BY Title ORDER BY Rating ;"
  },
  {
    "id": 610,
    "db_id": "book_review",
    "question": "How many books do not have reviews?",
    "answer": "SELECT  RIGHT JOIN (SELECT book_review.book.Book_ID FROM book_review.book) AS No_books ON Book_ID = book.Book_ID GROUP BY review.Book_ID  \n    LIMIT 2;"
  },
  {
    "id": 611,
    "db_id": "book_review",
    "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.",
    "answer": "SELECT \n    \nFROM book_review.review AS T1 WHERE Title = 'Great';"
  },
  {
    "id": 612,
    "db_id": "book_review",
    "question": "How many distinct types of book are there?",
    "answer": "SELECT DISTINCT Type FROM book_review.book;"
  },
  {
    "id": 613,
    "db_id": "book_review",
    "question": "What are the type and title of the books that are not rated?",
    "answer": "SELECT *FROM book_review.review LIMIT 5;"
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "question": "How many customers are there?",
    "answer": "SELECT Customer_ID FROM (SELECT DISTINCT Customer_ID , Customer_ID  \n        FROM (SELECT customer.Customer_ID ) AS subquery);"
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "question": "Count the number of customers.",
    "answer": "SELECT  \n        FROM (SELECT customer_order.Customer_ID ,  ORDER BY Customer_ID ) AS subquery;"
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "question": "List the names of customers in ascending order of level of membership.",
    "answer": "SELECT Customer_ID FROM (SELECT Customer_ID ,  LEFT JOIN (SELECT Level_of_Membership FROM (SELECT DISTINCT Customer_ID ) AS Members)\n    \n\n\n\n\n\n  \n\n   \n   \n   \n\n\n\n     \n\n      \n\n\n\n\n       \n\n        \n         \n          \n           \n             \n             \n              \n                \n                 \n                  \n                    \n                     \n                      \n                       \n"
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
    "answer": "SELECT * FROM (SELECT DISTINCT LEFT JOIN (SELECT Customer_ID ,  ORDER BY Level_of_Membership ) AS T1 ON Customer_ID  = 2)\n    INNER JOIN (SELECT DISTINCT LEFT JOIN (SELECT Customer_ID WHERE Customer_ID  <> 456987032GROUP BY Manager      ORDER BY Level_of_Members"
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "question": "What are the nationalities and card credits of customers?",
    "answer": "SELECT Customer_ID , \n      ORDER BY Card_Credit   LIMIT -21;"
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "question": "Find the nationality and card credit of each customer.",
    "answer": "SELECT Customer_ID , \n    \t  \t \t INNER JOIN (SELECT Customer_ID FROM (SELECT Customer_ID ORDER BY Card_Credit ) AS T1 ORDER BY Nationality LIMIT -2) AS T2 ON customer.Customer_ID = Customer_ID ;"
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers with nationality \"England\" or \"Australia\".",
    "answer": "SELECT Name FROM (SELECT DISTINCT Name , Nationality FROM (SELECT Name , Nationality FROM (SELECT Name   FROM (SELECT Name )\n        WHERE Name  =  'Jim') AS T1) AS T2 ORDER BY Branch_ID LIMIT 5 OFFSET 3.0);"
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
    "answer": "SELECT Customer_ID FROM (SELECT Customer_ID FROM (SELECT DISTINCT customer_order.Customer_ID ,  \n    WHERE Customer_ID = Nationality LIMIT 0) AS englandOrAustraliaCustomers);"
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "question": "What is the average card credit of customers with membership level higher than 1?",
    "answer": "SELECT customer_order.Customer_ID FROM (SELECT customer_order.Customer_ID , RIGHT JOIN (SELECT DISTINCT Customer_ID ) AS CUSTOMER_ORDER ON Customer_ID = Customer_ID  \n    GROUP BY Customer_ID ORDER BY customer_order.Customer_ID LIMIT 1)\n\nINNER JOIN (SELECT customer_order.C"
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "question": "Find the average card credit customers whose membership level is above 1.",
    "answer": "SELECT DISTINCT Customer_ID FROM (SELECT Customer_ID FROM (SELECT customer_order.Customer_ID ,  \n    FROM (SELECT customer_order.Customer_ID ) AS T1) AS T2 WHERE Customer_ID < 50);"
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "question": "What is the card credit of the customer with the highest membership level?",
    "answer": "SELECT Customer_ID , \n      FROM (SELECT Customer_ID ORDER BY Dish_Name LIMIT 1) AS Result;"
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "question": "Find the customer with the highest membership level and return his or her card credit.",
    "answer": "SELECT Customer_ID , \n    FROM (SELECT Customer_ID  \n \t  ORDER BY Manager  DESC LIMIT 1) AS Result;"
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "question": "Show different nationalities of customers, along with the number of customers of each nationality.",
    "answer": "SELECT Customer_ID , \n    FROM (SELECT Customer_ID ) AS Subquery\n     INNER JOIN (SELECT Nationality   FROM (SELECT DISTINCT Nationality FROM (SELECT Customer_ID ORDER BY Nationality LIMIT 5))\n                    AS sub) AS Nationalities ON Customer_ID = Nationality ;"
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "question": "How many customers are associated with each nationality? List the nationality and the number of customers.",
    "answer": "SELECT Nationality , \n        FROM (SELECT Nationality FROM (SELECT DISTINCT *FROM (SELECT Customer_ID   FROM (SELECT customer.Dish_Name ) AS customer) AS sub) AS sub2);"
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "question": "Show the most common nationality of customers.",
    "answer": "SELECT , \n        FROM (SELECT DISTINCT Customer_ID , \n \t  FROM (SELECT customer_order.Customer_ID ) AS TEMP1) AS TEMP2  \n      WHERE customer_order.Customer_ID ='07839456x' \n       ORDER BY Customer_ID LIMIT 1;"
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "question": "Which nationality does the most customers have?",
    "answer": "SELECT \n    FROM (SELECT Customer_ID , Customer_ID  \n        FROM (SELECT  FULL JOIN (SELECT Customer_ID ,  ORDER BY Customer_ID )\n               AS CAUHRIUSINGJOINRECURSIVEQUANTROUSCUSOFTHEAHOLICUSTNAMEOFFELLITSUIAENTONLYTHEFNAMOFCOLLECTIONFIRSTN"
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
    "answer": "SELECT customer_order.Customer_ID FROM (SELECT customer_order.Customer_ID FROM (SELECT customer_order.Customer_ID , FROM (SELECT Customer_ID   FROM (SELECT DISTINCT Card_Credit FROM (SELECT \n  WHERE Nationality = 'Afghanistan')) AS T1) AS T2)) AS t3;"
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
    "answer": "SELECT * FROM (SELECT DISTINCT INNER JOIN restaurant_bills.customer AS customer1 ON customer.Customer_ID  = customer.Customer_ID )\n        INNER JOIN restaurant_bills.customer AS custome2 ON customer.Customer_ID  =  customer.Customer_ID \n            GROUP BY customer.Customer"
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order.",
    "answer": "SELECT customer_order.Customer_ID ,  FROM (SELECT DISTINCT *FROM (SELECT customer_order.Customer_ID ) AS Customer_Order)\n    INNER JOIN (SELECT Customer_ID   FROM (SELECT Customer_ID FROM (SELECT DISTINCT INNER JOIN restaurant_bills.customer_order ON customer_order.Customer_ID = restaur"
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "question": "For each order, return the customer name and the dish name.",
    "answer": "SELECT customer_order.Customer_ID \n    FROM (SELECT DISTINCT customer_order.Customer_ID , \nFROM (SELECT Customer_ID ) AS customer_order INNER JOIN (SELECT Dish_Name   FROM (SELECT Name FROM (SELECT Dish_Name FROM (SELECT * FROM (SELECT Customer_ID GROUP BY customer_order.Customer_ID ORDER BY c"
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
    "answer": "SELECT customer_order.Customer_ID ,  GROUP BY customer_order.Dish_Name ORDER BY customer_order.Quantity ;"
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
    "answer": "SELECT \tORDER BY Customer_ID , Dish_Name  \n   \t  LIMIT 1;"
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "question": "Show each customer name and the total quantities of dishes ordered by that customer.",
    "answer": "SELECT Customer_ID ,  FROM (SELECT Customer_ID  \n    ORDER BY Customer_ID ) AS CTE;"
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
    "answer": "SELECT Customer_ID , \n    ORDER BY Customer_ID ;"
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "question": "Show the customers with total quantity of order bigger than 1.",
    "answer": "SELECT Customer_ID , \n     FROM (SELECT customer_order.Customer_ID  \tFROM (SELECT Customer_ID   \t\t\tFROM (SELECT \t\tFROM (SELECT Customer_ID FROM (SELECT Customer_ID INNER JOIN (SELECT Customer_ID FROM (SELECT Customer_ID ORDER BY Quantity )GROUP BY Customer_ID LIMIT 1)\n      AS C2 ON Custo"
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "question": "Which customers have total order quantity greater than 1? Give me the customer names.",
    "answer": "SELECT Customer_ID FROM (SELECT Customer_ID ,  \n        RIGHT JOIN (SELECT Customer_ID ORDER BY Quantity ) AS T1 ON Manager = (SELECT Customer_ID ORDER BY Quantity LIMIT 2)  LIMIT 5);"
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "question": "Show distinct managers of branches.",
    "answer": "SELECT Manager FROM (SELECT DISTINCT branch.Manager FROM restaurant_bills.branch) AS branch;"
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "question": "Who are the distinct managers of branches?",
    "answer": "SELECT \n    FROM (SELECT DISTINCT Manager FROM (SELECT Manager FROM (SELECT * FROM (SELECT branch.Name ,  \n \tORDER BY branch.Manager ) AS branch)));"
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "question": "List the names of customers that do not have any order.",
    "answer": "SELECT * FROM (SELECT DISTINCT customer_order.Customer_ID ) AS T1 RIGHT JOIN (SELECT   ORDER BY Customer_ID  \n               \t    \t \n\t            \t      \t   \n\t\t\t             \n\t           \n\t    \t    \t\t     \n\t          \t     \n\t    \t    \t      \n\t         \t     \n\t        \t     \n\t\t     \t     \n\t        \t     \n\t        \t    \n\t"
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "question": "Which customers do not have any order? Give me the customer names.",
    "answer": "SELECT Customer_ID FROM (SELECT DISTINCT Customer_ID ) AS Results ORDER BY Customer_ID ;"
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "question": "How many members are there?",
    "answer": "SELECT RIGHT JOIN (SELECT DISTINCT GROUP BY Member_ID )\n   AS AS ON EXISTS (SELECT FROM club_leader.member)     ORDER BY Member_ID ;"
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "question": "List the names of members in ascending order of age.",
    "answer": "SELECT * FROM (SELECT DISTINCT Team_Leader , Team_Leader ,  WHERE Club_ID  =  1354869 ORDER BY Age ) AS TEAMS;"
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "question": "What are the names and nationalities of the members?",
    "answer": "SELECT GROUP BY Name ORDER BY Nationality \n       \n   \n  \n\n   \n   \n   \n      \n     \n        \n    \n          \n         \n           \n             LIMIT 2;"
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "question": "List the names of members whose nationality is not `` England '' .",
    "answer": "SELECT DISTINCT Name \n    FROM (SELECT GROUP BY Member_ID ORDER BY Nationality ) AS T;"
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "question": "Show the names of members whose age is either 19 or 20.",
    "answer": "SELECT member.Name FROM (SELECT DISTINCT member.Name , \n          FULL JOIN (SELECT Team_Leader INNER JOIN club_leader.member ON member.Club_ID = Team_Leader ) ON Club_ID  = 18394) AS Subquery;"
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "question": "What is the name of the oldest member?",
    "answer": "SELECT * FROM club_leader.member ORDER BY Club_ID \n\tLIMIT 1;"
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "question": "Show different nationalities along with the number of members of each nationality.",
    "answer": "SELECT DISTINCT Team_Leader , \n    GROUP BY Team_Leader ORDER BY Team_Leader   LIMIT 1;"
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "question": "Please show the most common nationality of members.",
    "answer": "SELECT Team_Leader , \n            GROUP BY Nationality   ORDER BY Team_Leader LIMIT 1;"
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "question": "Show the nations that have at least two members.",
    "answer": "SELECT Team_Leader , \n        FROM (SELECT Team_Leader FROM (SELECT DISTINCT Team_Leader ) AS Table1) WHERE Team_Leader = ''';\n SQL;\r\necho $sql . \"\\n\";\r\n$result = $db->query(\"Select Teams.teamName From teams INTERSECT SELECT T1.\"  ____\".   \"The.Team\") ;);\"\"); ?></p>'"
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "question": "Show the names of club leaders and the names of clubs they joined.",
    "answer": "SELECT Club_Name FROM club_leader.club_leader INNER JOIN club_leader.club ON club_leader.Club_ID = club_leader.Club_ID ;"
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "question": "Show the names of club leaders of clubs with overall ranking higher than 100.",
    "answer": "SELECT DISTINCT Name FROM club_leader.club WHERE Overall_Ranking  > 100;"
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "question": "Show the names of club leaders that joined their club before 2018.",
    "answer": "SELECT Club_ID FROM club_leader.club_leader WHERE club_leader.Club_ID < '2018'\n    ORDER BY Club_Name , Club_ID ;"
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "question": "Show the name of the leader of the club named \"Houston\".",
    "answer": "SELECT Name FROM club_leader.club_leader WHERE Club_Name = 'Houston';"
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "question": "List the names of members that are not club leaders.",
    "answer": "SELECT Team_Leader , \n\t   FROM (SELECT Team_Leader FROM club_leader.club) AS TEMP;"
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "question": "Show the nations that have both members older than 22 and members younger than 19.",
    "answer": "SELECT Nationality FROM club_leader.club_leader;"
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "question": "What is the average age of all the club leaders?",
    "answer": "SELECT Age FROM club_leader.club_leader GROUP BY Age ORDER BY Club_ID LIMIT 1;"
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "question": "Which club name contains the string 'state'?",
    "answer": "SELECT DISTINCT Club_Name FROM club_leader.club;"
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "question": "List all collections' subset. List the subsets' names.",
    "answer": "SELECT FROM (SELECT DISTINCT *)\n     WHERE Collection_Name = 'YourCollection';"
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection susbset names?",
    "answer": "SELECT Collection_Name FROM (SELECT DISTINCT Collection_Name , Parent_Collection_ID  \n    FROM (SELECT Collections.Collection_Name , Collection_ID FROM (SELECT Collections.Collecrtion_Subset_Details INNER JOIN (SELECT * FROM (SELECT Collections.Collection_Subset_Name  \n    FROM (SELECT Collection_"
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "question": "What is detail of collection subset with name 'Top collection'?",
    "answer": "SELECT * FROM cre_Doc_and_collections.Collection_Subsets WHERE Collection_Name  = \n  'Top collections';"
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "question": "What collection details are there on the subset named 'Top collection'?",
    "answer": "SELECT * FROM (SELECT * FROM cre_Doc_and_collections.Collections) WHERE Collection_Name  = \n  'top-collection';"
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents's subset. List the subset's name.",
    "answer": "SELECT Document_Subset_Name FROM (SELECT Documents_in_Collections.Document_Subset_Name ) AS Subsets\n        WHERE Collections.Collection_ID = 'C31';"
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document subset names?",
    "answer": "SELECT Document_Subset_Name FROM cre_Doc_and_collections.Document_Subsets;"
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the detail of document subset with name 'Best for 2000'?",
    "answer": "SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT  AS MINUS FROM (SELECT * FROM (SELECT * FROM (SELECT  AS docname,  AS sotname) INNER JOIN (SELECT * FROM (SELECT * FROM (SELECT  AS subdataset1, INNER JOIN (SELECT * FROM (SELECT  AS newsdataset2, INNER JOIN (SELECT * FROM (SELECT  AS udataset3, INNER JOIN (SELECT * FROM"
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the details on the document subsets that are named 'Best for 2000'?",
    "answer": "SELECT * FROM cre_Doc_and_collections.Documents_in_Collections WHERE Document_Subset_Name  =  'bestfor2000';"
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "question": "List document id of all documents.",
    "answer": "SELECT \n    \n    FROM (SELECT  RIGHT JOIN (SELECT  ORDER BY Collections.Collection_ID , Collections.Document_Subset_ID  \n            \n                  \n           \n         \n     \n      \n        \n                    \n                \n          \n             \n       \n               \n              \n                         \n    \n   \n                   \n                 \n                            \n                           \n                          \n                                                              \n                        \n\n                             \n                               \n\n\n"
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the object id of the document objects?",
    "answer": "SELECT * FROM (SELECT Owner , \n        INNER JOIN (SELECT cre_Doc_and_collections.Documents_in_Collections.Collection_ID WHERE Collection_Name = 'collection name') AS DocumentsinCollectionsNOVELCOLLECTIONSGROUPBYDOCUMENTSINCOLLECTIONSAFTERDOCUMENTSONEWORSTINCOLLECTIONSELECTEDOB"
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the parent document of document owned by Marlin? List the document id.",
    "answer": "SELECT \n    FROM (SELECT Owner ,   FROM cre_Doc_and_collections.Document_Subset_Members  WHERE Parent_Document_Object_ID = 5496302) AS parentdocuments;"
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the objects owned by Marlin?",
    "answer": "SELECT  \n    FROM (SELECT DISTINCT Owner ,  \n    INNER JOIN (SELECT DISTINCT Document_Object_ID     FROM (SELECT Collections.Collection_Name ,      \n    INNER JOIN (SELECT Document_Object_ID FROM (SELECT * FROM (SELECT Collection_Name LIMIT 5048244)     \n                                                     WHERE Collection_Name  =  '"
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of document with the Description 'Braeden Collection'?",
    "answer": "SELECT Owner FROM (SELECT * FROM (SELECT Owner , \n            LIMIT 0.99462173853) AS Document_With_Description   \n    WHERE Description  =  'Braeden Collectio') AS Subquery;"
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "answer": "SELECT * FROM (SELECT DISTINCT Owner , Collections.Owner FROM cre_Doc_and_collections.Documents_in_Collections AS Documents_in_collections WHERE Collections.Collection_Name = 'Braaden Collection')\n        INNER JOIN (SELECT Document_Object_ID , Owner GROUP BY Collections.Document_Object_ID )  \n"
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "answer": "SELECT DISTINCT \n    ORDER BY Document_Objects.Document_Object_ID   LIMIT 1;"
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "answer": "SELECT \tGROUP BY Owner ORDER BY Owner ;"
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different descriptions of all the parent documents?",
    "answer": "SELECT DISTINCT Description FROM (SELECT * FROM (SELECT Document_Object_ID , Parent_Document_Object_ID \n    FROM (SELECT Document_Object_ID FROM (SELECT * FROM (SELECT Document_Object_ID   WHERE Document_Object_ID  = '123' ORDER BY Related_Collection_ID )LIMIT 5) AS SubQuery)) AS ParentDocumentObjectsInFirstCollection\n\nINN"
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the unique description of every parent document?",
    "answer": "SELECT \n    FROM (SELECT DISTINCT cre_Doc_and_collections.Parent_Document_Object_ID , cre_Doc_and_collections.Collection_Name ) AS TEMP;"
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents owned by Marlin?",
    "answer": "SELECT  WHERE Owner = 'Marlin'\n   \n  INNER JOIN (SELECT Documents_in_Collections.Collection_ID FROM (SELECT DISTINCT Collections.Owner ) AS OwnedCollections) AS OWningDocumentInCollections ON Collection_ID  =  Owner \nGROUP BY Document_Subset_ID ORDER BY Collections.Owner ;"
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the count of documents owned by Marlin?",
    "answer": "SELECT  WHERE Parent_Collection_ID = Document_Subsets.Owner INNER JOIN (SELECT Collection_ID FROM (SELECT Collecrtion_Subset_Details WHERE Owner  = 'MARLIN') AS DocumentsOwnedByMarlin GROUP BY Collection_ID )\n    AS COUNT ON Documents_in_Collections.Document_Subset_Details  = 10234"
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents ids that are not the parent of other documents.",
    "answer": "SELECT * FROM (SELECT DISTINCT cre_Doc_and_collections.Document_Subset_ID , \n   \t  \t  \t    \t  \t \t      \n\t   \t  \t  \t  \t \t     \t             \n       \t          \t         \t           \t       \n     \t        \t       \t       \t\t            \t              \nWHERE cre_Doc_and_collections.Document_Subset_ID \n   \t  ="
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that are not parent documents?",
    "answer": "SELECT DISTINCT Document_Subset_ID FROM (SELECT * INNER JOIN (SELECT Documents_in_Collections.Collection_Name ,  \n        INNER JOIN (SELECT Collection_Name FROM (SELECT Collection_ID ) AS Subquery) ON Collections.Collection_ID  =Documents_in_Collections.Document_Subset_ID ORDER BY Document_Subset_ID LIMIT 50)\n\n\n\n\n\n"
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child documents does each parent document has? List the document id and the number.",
    "answer": "SELECT \n    FROM (SELECT cre_Doc_and_collections.Document_Object_ID ,  \n  \t    \t \t\t     \t\t\t      \t \n        \t   \t      LEFT JOIN (SELECT Document_Objects.Parent_Document_Object_ID ) AS T1 ON Documents_in_Collections.Collection_ID = Parent_Document_Object_ID \n           INNER JOIN (SELECT Collection_"
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
    "answer": "SELECT DISTINCT \n    LIMIT 302576.19844 OFFSET -2;"
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "question": "List the name of all collections.",
    "answer": "SELECT \n    \n   \n   \n   FROM (SELECT DISTINCT Collection_Name , Collection_ID  \n       FROM (SELECT Collections.Collection_Name , \n                RIGHT JOIN (SELECT Collection_ID FROM cre_Doc_and_collections.Collections) AS SubQuery1 ON Collections.Collection_ID = Documents_in_Collections.Collection_ID ));"
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "question": "what are the collection names?",
    "answer": "SELECT cre_Doc_and_collections.Collection_Name FROM cre_Doc_and_collections.Collections;"
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the description of collection named Best?",
    "answer": "SELECT \n     FROM (SELECT DISTINCT Collection_Name ,  RIGHT JOIN (SELECT  FROM (SELECT Collection_ID   FROM (SELECT Collections.Collection_ID WHERE Collections.Collection_Name  = 'Best'))) AS Collection_Name ON Collections.Collection_ID = Collections.Collection_ID )\n    WHERE Collecrtion_Subset_"
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection descriptions that are named as 'Best'?",
    "answer": "SELECT * FROM (SELECT DISTINCT cre_Doc_and_collections.Collection_Description , \n  FROM cre_Doc_and_collections.Collections   WHERE Collection_Name   =  '\"Best\"') AS T;"
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the name of the parent collection of the collection named Nice?",
    "answer": "SELECT \n     FULL JOIN (SELECT * FROM (SELECT cre_Doc_and_collections.Collections.Collection_Description WHERE Collections.Collection_Name  =  'Nice') AS Child)   \n      AS ParentcollectionID ON Collection_Name  ='Nice';"
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of all parent collections of the collection named Nice?",
    "answer": "SELECT \n    \n    FROM (SELECT cre_Doc_and_collections.Parent_Collection_ID  \nFROM cre_Doc_and_collections.Collections     \nWHERE Documents_in_Collections.Document_Subset_ID = 'Nice') AS sub;"
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection is not the parent of other collection? List the collection's name.",
    "answer": "SELECT Parent_Collection_ID FROM (SELECT DISTINCT Collections.Collection_ID , Collections.Collection_Name FROM (SELECT Collection_ID FROM (SELECT FROM cre_Doc_and_collections.Collections WHERE Parent_Collection_ID  = 3) AS ChildRules)\n    AS FillingStage1Rank004974258GroupedByParentid) \n   "
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are not the parent of the other collections?",
    "answer": "SELECT DISTINCT cre_Doc_and_collections.Collection_Name FROM cre_Doc_and_collections.Collections WHERE cre_Doc_and_collections.Other_Details <> 'NA'\n     INNER JOIN (SELECT DISTINCT Collections.Collecrtion_Subset_Details FROM cre_Doc"
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "question": "List document that have more than one child. List the document id.",
    "answer": "SELECT \n\t   FROM (SELECT DISTINCT * FROM (SELECT * FROM (SELECT cre_Doc_and_collections.Collections.Collection_Name FULL OUTER JOIN cre_Doc_and_collections.Documents_in_Collections ON EXISTS (SELECT Document_Objects.Document_Object_ID FROM cre_Doc_and_collections"
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that have more than one child?",
    "answer": "SELECT DISTINCT cre_Doc_and_collections.Document_Subset_ID FROM cre_Doc_and_collections.Documents_in_Collections AS T1 WHERE EXISTS (SELECT *FROM cre_Doc_and_collections.Collections)\n  INNER JOIN cre_Doc_and_collections.Document_Subset_Members ON Document_"
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child collection does the collection named Best has?",
    "answer": "SELECT \n    FROM (SELECT  \n    GROUP BY Collecrtion_Subset_Details , Collection_Name , Parent_Collection_ID ) WHERE Collection_Subset_ID ='28 ';"
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child collections belonging to the collection named Best?",
    "answer": "SELECT  FROM (SELECT  \n    FROM (SELECT ) AS CHILD_COL) WHERE Collection_Name  = 'Best'\n  INNER JOIN (SELECT Parent_Collection_ID , Collection_Name ORDER BY Collections.Parent_Collection_ID LIMIT 2) ON EXISTS (SELECT   FROM (SELECT ) AS COLDULES1 WHERE Related_Collection_ID =Collections"
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document which is related to document owned by Ransom . List the document id .",
    "answer": "SELECT \n\tFROM (SELECT DISTINCT Owner FROM (SELECT Document_Objects.Document_Object_ID INNER JOIN cre_Doc_and_collections.Documents_in_Collections ON Documents_in_Collections.Collecrtion_Subset_Details = Collections.Collection_ID ) WHERE Collection_Subsets.Owner = 1) AS Subquery;"
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the related to the document owned by Ransom ?",
    "answer": "SELECT Document_Object_ID  FROM (SELECT Collection_ID   FROM cre_Doc_and_collections.Document_Objects WHERE Document_Object_ID = '01CF53DOF')\n     AS Docs;"
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "question": "List collection subset id, name and number of collections in each subset.",
    "answer": "SELECT * \n     FROM (SELECT cre_Doc_and_collections.Collections.Collection_Subset_ID , cre_Doc_and_collections.Collections.Collecrtion_Subset_Details ) AS T1;"
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subset ids, names, and number of collections for each subset?",
    "answer": "SELECT * FROM cre_Doc_and_collections.Collections WHERE Collection_Subset_ID = 1;"
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has most of child? List the document id and the number of child.",
    "answer": "SELECT Document_Subset_ID ,  INNER JOIN (SELECT DISTINCT Parent_Document_Object_ID FROM (SELECT * FROM (SELECT  \n        FULL JOIN (SELECT  ORDER BY cre_Doc_and_collections.Description ) AS Child ON Other_Details   \n      = Documents_in_Collections.Collection_ID )) GROUP BY"
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many children do they have?",
    "answer": "SELECT DISTINCT cre_Doc_and_collections.Collection_Name , \n        LEFT JOIN (SELECT Document_Object_ID FROM cre_Doc_and_collections.Document_Objects) AS a ON Documents_in_Collections.Collection_Name = Collection_Name  \t          RIGHT JOIN (SELECT * FROM cre_Doc_and_collections.Documents_in_Collections WHERE Collection_Name  = Documents_"
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has least number of related documents? List the document id and the number of related documents.",
    "answer": "SELECT \n     RIGHT JOIN (SELECT * FROM cre_Doc_and_collections.Documents_in_Collections ORDER BY Document_Subset_ID ) AS AS ON Collections.Document_Subset_ID = Documents_in_Collections.Document_Subset_ID GROUP BY Collections.Collection_Name ORDER BY cre_Doc_and_collections.Documents_in"
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the document object id with the least number of documents ?",
    "answer": "SELECT \n     FROM (SELECT DISTINCT Document_Object_ID , RIGHT JOIN (SELECT Document_Object_ID  FROM cre_Doc_and_collections.Collection_Subsets) AS S ON Collection_Subset_ID = Documents_in_Collections.Document_Subset_ID ) ORDER BY Document_Object_ID LIMIT 1;"
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .",
    "answer": "SELECT Document_Subset_ID , INNER JOIN (SELECT Documents_in_Collections.Document_Subset_ID   FROM (SELECT * FROM cre_Doc_and_collections.Documents_in_Collections) AS T1 WHERE Collections.Collection_ID = 429870635 ORDER BY Collections.Collection_ID )\n    AS COLLECTIONs ON Documents_in"
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?",
    "answer": "SELECT cre_Doc_and_collections.Collection_Name , cre_Doc_and_collections.Document_Subset_ID FROM (SELECT Document_Subset_ID FROM cre_Doc_and_collections.Collection_Subsets GROUP BY Collections.Collection_Name ) AS t1 WHERE EXISTS (SELECT Collection_Subset_ID  \n  FROM cre_Doc_and_"
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "question": "List all owner of documents that is related to documents owned by Braeden.",
    "answer": "SELECT *FROM (SELECT Owner FROM (SELECT Owner FROM cre_Doc_and_collections.Documents_in_Collections WHERE Collection_Name  =  'Braeden')) AS Result\n        INNER JOIN (SELECT Owner FROM cre_Doc_and_collections.Collections) AS Col ON Documents_in_Collections.Collection_ID = Collecrtion_S"
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "answer": "SELECT *FROM (SELECT Owner FROM cre_Doc_and_collections.Documents_in_Collections) AS T1JOINSUBCTUDEWITH\n    INNER JOIN cre_Doc_and_collections.Collections ON Collecrtion_Subset_Details = Collection_ID \nLEFT OUTER JOIN cre_Doc_and_collections.Documents_in_Collections"
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "answer": "SELECT \n    FROM (SELECT DISTINCT *FROM (SELECT GROUP BY Document_Subsets.Document_Subset_Name , Document_Subsets.Document_Subset_Name LIMIT 0) AS SubSETNAMES);"
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subset names of all documents owned by Braeden?",
    "answer": "SELECT * FROM cre_Doc_and_collections.Documents_in_Collections WHERE Collection_Name = 'Braeden'\n        INNER JOIN (SELECT DISTINCT Document_Subset_Name , RIGHT JOIN cre_Doc_and_collections.Document_Objects \n   \t             \t\t\t    \t  AS Objects ON Documents_in_Collections.Document_Subset"
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "question": "List subset id, name and number of different documents in each subset.",
    "answer": "SELECT * FROM (SELECT DISTINCT cre_Doc_and_collections.Collection_Name , \n        INNER JOIN (SELECT Collections.Collection_ID  \n             FROM (SELECT RIGHT JOIN (SELECT Document_Subsets.Document_Subset_ID    FROM (SELECT Documents_in_Collections.Collection_ID     WHERE Collection_"
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the subset id, name, and number of different documents for each subset?",
    "answer": "SELECT DISTINCT \n    LIMIT +3067.1958423391;"
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents .",
    "answer": "SELECT ORDER BY Documents_in_Collections.Collection_ID ;"
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
    "answer": "SELECT \tORDER BY Document_Subset_Name , Documents_in_Collections.Collection_Name , Document_Subset_Name  \n    \n       \n   \n     \n      \n\n      \n   \n \n\n  \n        \n\n           \n          \n            \n               \n              \n             \n                   \n                  \n                 \n                    \n                        \n                      LIMIT 1;"
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "question": "For document subset named 'Best for 2000', List all document id that in this subset.",
    "answer": "SELECT DISTINCT Document_Subset_Name , \n    LIMIT 18594763;"
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?",
    "answer": "SELECT DISTINCT Document_Subset_Name , INNER JOIN (SELECT * FROM (SELECT cre_Doc_and_collections.Document_Subset_Name , Document_Subset_ID  \n               FROM cre_Doc_and_collections.Document_Subset_Members) AS T1 WHERE Collection_ID =2000) \n          AS t2 ON Documents_in"
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
    "answer": "SELECT DISTINCT * FROM (SELECT Collection_Name ,  AS SubsetID INNER JOIN (SELECT Document_Subsets.Document_Subset_ID ) ON Collection_ID = Documents_in_Collections.Collection_ID  \n        GROUP BY Collections.Collection_ID ORDER BY Document_Subsets.Document_Subset_Name LIMIT 201) AS T3;"
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?",
    "answer": "SELECT Documents_in_Collections.Document_Subset_ID \n        FROM (SELECT Document_Subset_ID  \nFROM cre_Doc_and_collections.Documents_in_Collections) AS T1;"
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "answer": "SELECT INNER JOIN (SELECT * FROM (SELECT Collections.Collection_Name , Collections.Collection_ID FROM (SELECT Collection_Name , Collection_ID FROM (SELECT Collection_Name FROM (SELECT Collection_Name )) AS t1) AS t2 WHERE Collection_ID  = '04E96D3-7A5')\n   AS t2 INNER JOIN (SELECT * FROM (SELECT Collections.Collection_Name"
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the collection name of a document owned by 'Ransom'?",
    "answer": "SELECT DISTINCT Collection_Name FROM (SELECT Document_Objects.Collection_Name ,  WHERE Owner = 'Ransom')\n    INNER JOIN (SELECT Collections.Collecrtion_Subset_Details   INNER JOIN cre_Doc_and_collections.Document_Objects ON Collection_Name  = Collecrtion_Subset_Details"
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections does each document belong to? List the count and the document id.",
    "answer": "SELECT \n    ORDER BY Collection_ID   LIMIT -10;"
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many collections does it belong to?",
    "answer": "SELECT Document_Object_ID , \n    GROUP BY Collection_ID  \n\n\n    ORDER BY Related_Collection_ID ;"
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents does collection named 'Best' has?",
    "answer": "SELECT * FROM cre_Doc_and_collections.Collection_Subset_Members WHERE Collection_Name  =  '].\n<nil>]\u2019,\u201910-52348)\n}```; then I got the error message \"Liquid: Unexpected end of file\" and suggested to use {% endif %} or if statement instead. How can this be fixed? The collection name is ''."
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of documents in the collection named 'Best'?",
    "answer": "SELECT \n    FROM (SELECT   RIGHT JOIN (SELECT   LEFT JOIN (SELECT   WHERE cre_Doc_and_collections.Collections.Collection_ID  = Collections.Document_Subset_ID ) AS ccc ON Collection_Name = 'Best')\n    AS DocumentsDONE ON Collection_Name  =  Document_Subset_Name ), cre_Doc_and_"
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "question": "List the document id of all documents in collection named Best.",
    "answer": "SELECT Collection_Name \n    \n     INNER JOIN (SELECT DISTINCT \n        \n     \n     \n      \n     \n       \n      \n       \n        \n        \n        \n         \n        \n          \n     \n        \n        \n        \n        \n        \n        \n       \n       \n        \n        \n        \n        \n       \n        \n        \n       \n           \n   \n  \n    \n \n\n"
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of document object ids in the collection named Best?",
    "answer": "SELECT  \n   \n \tFROM (SELECT \n       \t\t   RIGHT JOIN (SELECT * FROM cre_Doc_and_collections.Collections AS docs) \n        \t    \t   AS collection_name ON cre_Doc_and_collections.Document_Object_ID = Documents_in_Collections.Collection_Name )     \n       \t       RIGHT JOIN (SELECT * FROM cre"
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection have most number of documents? List collection name, id and number of documents.",
    "answer": "SELECT * FROM (SELECT cre_Doc_and_collections.Collection_Name , \n   \t  \t    \t   \t \t      \t   \t\t     \t     \t\t\t      \t\t\t\t\t\t\t\t\t        RIGHT JOIN (SELECT GROUP BY Collection_Name ORDER BY Document_Subset_ID ) ON cre_Doc_and_collections.Collection_ID  = Collections.Collection_ID ), cre_Doc"
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?",
    "answer": "SELECT \t  \n    WHERE Collection_Name ='Best\" , COUNT(*) FROM Collections GROUP BY Collection_Name;//The above query will give us total number by grouping 'GROUP BY Collection_Name LIMIT +1 OFFSET -2.3469857048573215;"
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 and collection named Best.",
    "answer": "SELECT \n            FROM (SELECT * FROM (SELECT * FROM cre_Doc_and_collections.Documents_in_Collections) AS xts) AS X;"
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?",
    "answer": "SELECT * FROM cre_Doc_and_collections.Documents_in_Collections WHERE Collection_Name  = \n    (SELECT Collections.Collection_ID FROM (SELECT DISTINCT Document_Object_ID , Collection_Name  FROM cre_Doc_and_collections.Documents_in_Collections) AS Documents_in_col1)\n     INNER JOIN cre_Doc_a"
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in collection named Best but not in document subset Best for 2000.",
    "answer": "SELECT FROM (SELECT * FROM (SELECT * FROM (SELECT RIGHT JOIN (SELECT  AS Patient_Outline, Other_Details , Parent_Collection_ID  \n     FROM cre_Doc_and_collections.Documents_in_Collections) AS A ON cre_Doc_and_collections.Document_Subset_ID  = cre"
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?",
    "answer": "SELECT ORDER BY Related_Collection_ID , Related_Collection_ID  \n   \n \n\n\n \n\n\n\n\n\n \n\nLIMIT 1;"
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 or in collection named Best.",
    "answer": "SELECT Document_Subset_ID INNER JOIN (SELECT DISTINCT * FROM cre_Doc_and_collections.Documents_in_Collections) AS subquery ON Documents_in_Collections.Document_Subset_ID  =    cre_Doc_and_collections.Document_Subset_ID ;"
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
    "answer": "SELECT Document_Subset_Name , INNER JOIN (SELECT DISTINCT Collection_Name FROM (SELECT Collections.Document_Subset_Name  \n        FROM (SELECT Collections.Collection_Name WHERE Collection_Name  = 'Best')) AS T1) ON Documents_in_Collections.Document_Subset_Name = Document_Subsets.Document_Subset_Name ;"
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "question": "List all name of collections that are related to collection named Best.",
    "answer": "SELECT * \n    FROM (SELECT Collection_Name  \n    FROM (SELECT Collection_Name , Collection_ID  \nFROM (SELECT Collections.Collection_Name , Collections.Collection_ID  \nWHERE Collections.Collection_Name  = 'Best')) AS T1) WHERE Collecrtion_Subset_Details ='Best';"
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are related to the collection named Best?",
    "answer": "SELECT \n    \n    FROM (SELECT cre_Doc_and_collections.Collection_Name ,  \n               INNER JOIN cre_Doc_and_collections.Collections ON cre_Doc_and_collections.Document_Subset_ID = 37926) AS TEMP_TABLE WHERE Document_Subset_ID  = 'Best';"
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections that are related to collection named Best?",
    "answer": "SELECT \tWHERE Collection_Name  =  'Best'\n    \n    INNER JOIN (SELECT * FROM (SELECT Collections.Collection_ID , Collections.Collecrtion_Subset_Details WHERE Collection_Subsets.Collecrtion_Subset_Details = 'Best' GROUP BY Collection_Name ) AS COLLECTIONS1)\n   \n \n  \n      \n    \n"
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "question": "How many different collections are related to the one named 'Best'?",
    "answer": "SELECT DISTINCT Collection_Name FROM (SELECT * FROM (SELECT Collections.Collection_ID , \n        LIMIT 10) AS T1 WHERE Collection_Name  = 2);"
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection subset does collection name Best in? List collection subset name.",
    "answer": "SELECT * FROM (SELECT * \n    FROM (SELECT Collection_Name , RIGHT JOIN (SELECT *   FROM (SELECT Collections.Collection_Name ) AS T1) AS O2 ON Collections.Collection_Name = 'best')\n           WHERE Collection_Name  ='Best');"
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subsets that the collection named 'Best' in?",
    "answer": "SELECT cre_Doc_and_collections.Collection_Name   FROM cre_Doc_and_collections.Collections WHERE Collection_Name  = '\" + name + \"'\n        INNER JOIN (SELECT * FROM cre_Doc_and_collections.Documents_in_Collections) AS T1 ON cre_Doc_and_collections.Document_Objects.Collection_ID"
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "question": "How many songs contain \"Love\" in their names?",
    "answer": "SELECT * FROM sing_contest.songs WHERE songs_id = 140257386\n    INNER JOIN sing_contest.songs ON songs_id = language   LEFT OUTER JOIN sing_contest.songs ON english_translation \n    = songs_id INNER JOIN (SELECT id FROM"
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "question": "List the name of the songs in ascending, lexicographical order.",
    "answer": "SELECT * FROM (SELECT DISTINCT name FROM (SELECT name ORDER BY name ) GROUP BY language \n    LIMIT 10) AS Result;"
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "question": "List the names and languages of the songs .",
    "answer": "SELECT * FROM (SELECT name ,  AS lang_from,  \n         FROM (SELECT name ,  FROM sing_contest.songs ORDER BY name LIMIT 5))ORDER BY language ;"
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "question": "What are the maximum and minimum voice sound quality score of the performances?",
    "answer": "SELECT GROUP BY performance_score.original_artist \n        LIMIT 10;"
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "answer": "SELECT voice_sound_quality , \t   RIGHT JOIN (SELECT DISTINCT \n       RIGHT JOIN (SELECT * FROM (SELECT voice_sound_quality ) AS t1 ORDER BY voice_sound_quality ) AS t2 ON EXISTS (SELECT )) AS t3 ON EXISTS (SELECT WHERE participants.name  = 'Freeway') \t   GROUP BY voice_sound_quality ;"
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
    "answer": "SELECT DISTINCT LIMIT 4506372189.3;"
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
    "answer": "SELECT name ,  GROUP BY original_artist  \n   \n\n \n  \n \nLIMIT 1;"
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
    "answer": "SELECT \n    FROM (SELECT DISTINCT songs.name , \n                RIGHT JOIN (SELECT name , \n                FROM (SELECT language     INNER JOIN (SELECT *FROM (SELECT name   WHERE original_artist = 'Muse') AS MUSUARY)       AS ictyptography ON language     = language )      AS SCAFFALHOUT RIGHT JOIN (SELECT name FROM (SELECT"
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "question": "What are the ids and names of the participants who have performed at least two songs?",
    "answer": "SELECT * FROM sing_contest.performance_score LIMIT 10;"
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?",
    "answer": "SELECT name , \n    FROM (SELECT name , \n             ORDER BY name ) AS temp_table;"
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?",
    "answer": "SELECT DISTINCT ORDER BY participants.id , english_translation  \n    LIMIT -1;"
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
    "answer": "SELECT id , \n    FROM sing_contest.songs WHERE name  =  '\"The Balkan Girl' LIMIT 1;"
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "question": "What are the id and name of the song sung by the most participants?",
    "answer": "SELECT \n    ORDER BY participants.name LIMIT -1;"
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "question": "How many performances have a stage presence score less than 7 or higher than 9?",
    "answer": "SELECT id FROM sing_contest.performance_score WHERE stage_presence >= 7 INNER JOIN sing_contest.performance_score ON performance_score.id = performance_score.id RIGHT JOIN sing_contest.performance_score \n     AS performances AS NOTHINGLEFTJOINsingconteftentwikilkas20134695ON"
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "question": "How many songs listed are not performed?",
    "answer": "SELECT name FROM sing_contest.songs WHERE sing_contest.songs.songs_id <> 'performers'\n    \n   LIMIT -1;"
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "question": "What are the average rhythm scores for the songs in each different language?",
    "answer": "SELECT language ,  AS UMBERS, FROM (SELECT songs.name  \n        FROM sing_contest.songs) AS S INNER JOIN sing_contest.songs ON name = sing_contest.language GROUP BY language ORDER BY language ;"
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "question": "What are the distinct names of the participants who have sung a song in 'English'?",
    "answer": "SELECT DISTINCT name FROM (SELECT DISTINCT * FROM (SELECT language FROM sing_contest.songs) AS language)\n            WHERE language = 'English';"
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
    "answer": "SELECT language ,  GROUP BY songs.name , language  \n        ORDER BY name ;"
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "question": "Which song names have the substring \"Is\"?",
    "answer": "SELECT name FROM (SELECT DISTINCT name FROM (SELECT DISTINCT name FROM (SELECT DISTINCT name FROM (SELECT name FROM (SELECT DISTINCT  AS id_member, name WHERE name = 'Roundhay Seymore')))));"
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .",
    "answer": "SELECT original_artist FROM (SELECT DISTINCT *FROM sing_contest.songs) AS T WHERE voice_sound_quality  =  'above' ORDER BY original_artist \n    LIMIT 2;"
  },
  {
    "id": 761,
    "db_id": "address_1",
    "question": "How many cities do we have?",
    "answer": "SELECT country FROM address_1.Student;"
  },
  {
    "id": 762,
    "db_id": "address_1",
    "question": "Count the number of cities.",
    "answer": "SELECT country FROM (SELECT DISTINCT city_name FROM (SELECT DISTINCT latitude , longitude FROM address_1.City) AS T1 WHERE LName  =  'Chicago')\n    \n      \n    INNER JOIN (SELECT latitude , longitude ) ON address_1.city_name  = longitude ;"
  },
  {
    "id": 763,
    "db_id": "address_1",
    "question": "List all different states .",
    "answer": "SELECT ORDER BY state \n    LIMIT 10;"
  },
  {
    "id": 764,
    "db_id": "address_1",
    "question": "What are all the distinct states?",
    "answer": "SELECT \n    FROM address_1.Student, address_1.City;"
  },
  {
    "id": 765,
    "db_id": "address_1",
    "question": "How many countries do we have?",
    "answer": "SELECT country FROM (SELECT DISTINCT country GROUP BY country )\n    AS Result;"
  },
  {
    "id": 766,
    "db_id": "address_1",
    "question": "Count the number of coutries.",
    "answer": "SELECT country FROM (SELECT DISTINCT country FROM address_1.Student) AS T;"
  },
  {
    "id": 767,
    "db_id": "address_1",
    "question": "Show names, codes, states, countries for all cities.",
    "answer": "SELECT \t\n    FROM (SELECT \t\tLIMIT 5) \tINNER JOIN (SELECT \tFROM (SELECT \tLIMIT 10) \tINNER JOIN (SELECT \tFROM (SELECT \tLIMIT 20) \tINNER JOIN (SELECT \tFROM (SELECT \tLIMIT 30) AS XT WHERE city_name = 'new_york')\n    AS X"
  },
  {
    "id": 768,
    "db_id": "address_1",
    "question": "What are the names, codes, states, and countries for all cities?",
    "answer": "SELECT  LIMIT 45186097322.3;"
  },
  {
    "id": 769,
    "db_id": "address_1",
    "question": "What is the latitude and longitude for Baltimore?",
    "answer": "SELECT  LIMIT 1.65948302703;"
  },
  {
    "id": 770,
    "db_id": "address_1",
    "question": "What latitude and longitude correspond to Baltimore?",
    "answer": "SELECT \n    INNER JOIN (SELECT DISTINCT LName , City.latitude , city_name ) AS Baltimore ON city_name  =  'Baltimore' ORDER BY LName LIMIT 1;"
  },
  {
    "id": 771,
    "db_id": "address_1",
    "question": "Show names for all cities in state PA.",
    "answer": "SELECT \n        ORDER BY City.city_name   LIMIT 20;"
  },
  {
    "id": 772,
    "db_id": "address_1",
    "question": "What are the names of all cities in PA?",
    "answer": "SELECT * FROM (SELECT DISTINCT City.city_name , \n    \tFROM (SELECT city_name FROM (SELECT City.city_name FROM (SELECT DISTINCT city_name FROM (SELECT city1_code FROM (SELECT city2_code FROM (SELECT country ) AS T1 WHERE LName = 'McMahon'))) AS cities)\n \tWHERE LName  ='McMahon"
  },
  {
    "id": 773,
    "db_id": "address_1",
    "question": "How many cities are in Canada?",
    "answer": "SELECT country FROM (SELECT city_name ,  \n    LIMIT -1369.425087) AS T1;"
  },
  {
    "id": 774,
    "db_id": "address_1",
    "question": "Count the number of cities in Canada.",
    "answer": "SELECT country ,  FROM (SELECT DISTINCT city_name ) AS t GROUP BY country  \n   \n\n    \n\n\n\n\n\n\n\n\n\n     \n       ORDER BY country ;"
  },
  {
    "id": 775,
    "db_id": "address_1",
    "question": "Show names for all USA city ordered by latitude.",
    "answer": "SELECT \n\t   FROM (SELECT DISTINCT latitude , longitude ) AS temp_table ORDER BY latitude ;"
  },
  {
    "id": 776,
    "db_id": "address_1",
    "question": "What are all the city names for cities in the USA, ordered by latitude?",
    "answer": "SELECT \tLIMIT 10;"
  },
  {
    "id": 777,
    "db_id": "address_1",
    "question": "Show all states and number of cities in each state.",
    "answer": "SELECT state FROM (SELECT DISTINCT state , \n        LIMIT 0) ORDER BY country   LIMIT 1;"
  },
  {
    "id": 778,
    "db_id": "address_1",
    "question": "How many cities are in each state?",
    "answer": "SELECT \tORDER BY country , city_name  \n    LIMIT 5;"
  },
  {
    "id": 779,
    "db_id": "address_1",
    "question": "Show all countries and number of cities in each .",
    "answer": "SELECT ORDER BY country , country LIMIT 5;"
  },
  {
    "id": 780,
    "db_id": "address_1",
    "question": "How many cities are there in each country?",
    "answer": "SELECT country , \n    GROUP BY country ORDER BY city_name LIMIT 10;"
  },
  {
    "id": 781,
    "db_id": "address_1",
    "question": "List all states with at least two cities.",
    "answer": "SELECT \n        FROM (SELECT state FROM (SELECT city1_code FROM (SELECT DISTINCT state , city2_code FROM (SELECT state , city1_code    FROM (SELECT state , city1_code   FROM (SELECT state , city1_code   FROM (SELECT state , city1_code   FROM (SELECT state , city1_code ) AS te1 WHERE LName = 'AL' ORDER BY"
  },
  {
    "id": 782,
    "db_id": "address_1",
    "question": "Which states have at least two cities?",
    "answer": "SELECT state FROM (SELECT DISTINCT city1_code ,  RIGHT JOIN (SELECT City.state ,  AS iliNATE FROM address_1.City) ON city2_code = city1_code ) ORDER BY state ;"
  },
  {
    "id": 783,
    "db_id": "address_1",
    "question": "Which state has most number of cities?",
    "answer": "SELECT \n    FROM (SELECT DISTINCT state , country FROM (SELECT state ORDER BY country ) AS T1)  \n  WHERE state = 'california';"
  },
  {
    "id": 784,
    "db_id": "address_1",
    "question": "Give the state that has the most cities.",
    "answer": "SELECT * FROM address_1.City GROUP BY City.Sex ORDER BY country LIMIT 1;"
  },
  {
    "id": 785,
    "db_id": "address_1",
    "question": "Which country has fewest number of cities?",
    "answer": "SELECT country , \n    FROM (SELECT DISTINCT city_name ,  \n\tFROM (SELECT * FROM (SELECT city_name , \n\t\t\t     RIGHT JOIN (SELECT city_name , \n\t\t\t\t\t       WHERE country  = 'Afghani'\n\t\t\t\t\t       \t            ORDER BY city_name ) AS t2 ON city_name   =  \n\t\t\t\t\t      LName ) AS t1) AS t3 WHERE country = '"
  },
  {
    "id": 786,
    "db_id": "address_1",
    "question": "Give the country with the fewest number of cities.",
    "answer": "SELECT country FROM (SELECT DISTINCT city_code FROM (SELECT country FROM (SELECT DISTINCT \n        FROM (SELECT country FROM (SELECT DISTINCT country ) AS first_table) AS OTHER_TABLE)));"
  },
  {
    "id": 787,
    "db_id": "address_1",
    "question": "Show the first name and the last name for students living in state MD.",
    "answer": "SELECT \n\t   \t \t   FROM address_1.Student;"
  },
  {
    "id": 788,
    "db_id": "address_1",
    "question": "What are the full names of students living in MD?",
    "answer": "SELECT LName ,  FULL OUTER JOIN (SELECT LName   FROM (SELECT DISTINCT LName ) AS T1)\n    AS STUDENTS_PERSONNELMANE ON Major ='Male'' GROUP BY student.lname; 'FULL OUTER JOIN (SELECT latitude , longitude FULL OUTER JOIN (SELECT LName   FROM (SELECT DISTIN"
  },
  {
    "id": 789,
    "db_id": "address_1",
    "question": "How many students live in China?",
    "answer": "SELECT country ,  FROM (SELECT LName   FROM (SELECT WHERE country = 'China'\n    ORDER BY longitude ) AS t) AS df;"
  },
  {
    "id": 790,
    "db_id": "address_1",
    "question": "Count the number of students living in China.",
    "answer": "SELECT country FROM address_1.Student AS a WHERE city_code  = 0;"
  },
  {
    "id": 791,
    "db_id": "address_1",
    "question": "Return the first name and major of students are living in Baltimore?",
    "answer": "SELECT \n\t\tLIMIT 5;"
  },
  {
    "id": 792,
    "db_id": "address_1",
    "question": "What are the first names and majors of students living in Baltimore?",
    "answer": "SELECT Student.longitude FROM (SELECT DISTINCT Student.state , \n   WHERE city_name = 'Baltimore' GROUP BY Student.state ) AS T1;"
  },
  {
    "id": 793,
    "db_id": "address_1",
    "question": "Show the number of students living in each country.",
    "answer": "SELECT country ,  FROM (SELECT DISTINCT  LIMIT 13972640) AS T ORDER BY country ;"
  },
  {
    "id": 794,
    "db_id": "address_1",
    "question": "How many students live in each country?",
    "answer": "SELECT \n       \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t \n      \t  FROM address_1.Student;"
  },
  {
    "id": 795,
    "db_id": "address_1",
    "question": "Find the number of students living in each city.",
    "answer": "SELECT * FROM (SELECT DISTINCT \n    LIMIT 9412307685), (SELECT City.city_name FROM address_1.City) AS City;"
  },
  {
    "id": 796,
    "db_id": "address_1",
    "question": "How many students live in each city?",
    "answer": "SELECT City.city_name ,  GROUP BY city_name  \n       \n\t   ORDER BY country ;"
  },
  {
    "id": 797,
    "db_id": "address_1",
    "question": "Which state has most number of students?",
    "answer": "SELECT state FROM address_1.Student;"
  },
  {
    "id": 798,
    "db_id": "address_1",
    "question": "Give the state that has the most students.",
    "answer": "SELECT state FROM (SELECT DISTINCT state , \n        RIGHT JOIN (SELECT state FROM (SELECT distance FROM address_1.City ORDER BY Student.Sex ) AS T2) AS T1 ON city_name = 'Chicago' ORDER BY Sex LIMIT 6508497);"
  },
  {
    "id": 799,
    "db_id": "address_1",
    "question": "Which country has least number of students?",
    "answer": "SELECT country ,  GROUP BY country ORDER BY country LIMIT 1.0;"
  },
  {
    "id": 800,
    "db_id": "address_1",
    "question": "Give the country with the fewest students.",
    "answer": "SELECT country ,  ORDER BY country LIMIT 1;"
  },
  {
    "id": 801,
    "db_id": "address_1",
    "question": "Show names for all cities where at least three students live.",
    "answer": "SELECT city_name FROM (SELECT DISTINCT * \n    FROM (SELECT city_name ,  RIGHT JOIN (SELECT country ) AS t1 ON city_name =  country  \n \t\t\tORDER BY LName     LIMIT 0) AS t2 WHERE city_name = 'Las Vegas'\n      ORDER BY longitude  DESC    LIMIT 53) AS t3;"
  },
  {
    "id": 802,
    "db_id": "address_1",
    "question": "What are the names of cities with at least three students?",
    "answer": "SELECT * FROM (SELECT city_name ,  RIGHT JOIN (SELECT city_name  \n    FROM (SELECT city_name FROM (SELECT DISTINCT city1_code , city2_code ) AS T1) AS T2 WHERE City.country = 'Usa')\n    \n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n  \n   \n       \n      \n        \n     \n         \n          \n           "
  },
  {
    "id": 803,
    "db_id": "address_1",
    "question": "Show all states where more than 5 students live.",
    "answer": "SELECT * FROM (SELECT state , country ,  \n    FROM (SELECT state , distance ,  LIMIT 2) AS T1 WHERE distance = (SELECT state INNER JOIN (SELECT distance ) AS T2 ON city_name = 'Lima') ORDER BY Direct_distance.LName LIMIT 6)\n  \n    GROUP BY state ;"
  },
  {
    "id": 804,
    "db_id": "address_1",
    "question": "What are the states with more than 5 students?",
    "answer": "SELECT state , \n    GROUP BY state ;"
  },
  {
    "id": 805,
    "db_id": "address_1",
    "question": "Show ids for all students who don't live in USA.",
    "answer": "SELECT address_1.distance \n     FROM (SELECT DISTINCT address_1.city_name FROM address_1.City INNER JOIN address_1.Student ON address_1.City.city_name  = state  \n   GROUP BY address_1.StuID ) AS Addresses;"
  },
  {
    "id": 806,
    "db_id": "address_1",
    "question": "What the the student ids for students not living in the USA?",
    "answer": "SELECT state \n    FROM address_1.City, address_1.Student WHERE Student.longitude <> '60.435728' ORDER BY state  \t\tLIMIT 9;"
  },
  {
    "id": 807,
    "db_id": "address_1",
    "question": "Show ids for all female (sex is F) students living in state PA.",
    "answer": "SELECT city_code ,  FROM (SELECT city_code ) INNER JOIN (SELECT state   FROM (SELECT state   FROM (SELECT state  FROM (SELECT DISTINCT state   FROM (SELECT state FROM (SELECT Sex   WHERE Sex  = 'F' ORDER BY Sex )) AS A) AS B)))\n  AS SEL12704693GETIDFORFEMALEREMBEDDINGSOFT"
  },
  {
    "id": 808,
    "db_id": "address_1",
    "question": "What are the student ids for female students in the state of PA?",
    "answer": "SELECT FULL OUTER JOIN (SELECT state FROM (SELECT DISTINCT Sex )\n        WHERE city_name  =  'Lex') AS staNameLabeledInUSA ON Student.state  = state ;"
  },
  {
    "id": 809,
    "db_id": "address_1",
    "question": "Show ids for all male students living outside of USA.",
    "answer": "SELECT city_code ,  FROM (SELECT DISTINCT *   FROM (SELECT state   \n        FROM (SELECT state ) AS t1)      WHERE LName ='Male')       ORDER BY state ;"
  },
  {
    "id": 810,
    "db_id": "address_1",
    "question": "What are the ids for male students not in the USA?",
    "answer": "SELECT * FROM (SELECT Student.state , Student.longitude \n    FROM (SELECT DISTINCT address_1.state , City.latitude   FROM address_1.City) AS T1 WHERE City.city_name  = 'Los Angeles') AS T2;"
  },
  {
    "id": 811,
    "db_id": "address_1",
    "question": "What is the distance between BAL and CHI?",
    "answer": "SELECT DISTINCT distance  FROM (SELECT DISTINCT city1_code , City.city2_code  \n    FROM (SELECT City.city1_code , address_1.City.city2_code     INNER JOIN address_1.City ON city1_code  =  city2_code )) AS t1 GROUP BY city2_code ;"
  },
  {
    "id": 812,
    "db_id": "address_1",
    "question": "Give the distance between BAL and CHI?",
    "answer": "SELECT \n    WHERE City.country = 'Baltimore' ORDER BY distance ;"
  },
  {
    "id": 813,
    "db_id": "address_1",
    "question": "Show me the distance between Boston and Newark.",
    "answer": "SELECT \n     LIMIT 270;"
  },
  {
    "id": 814,
    "db_id": "address_1",
    "question": "What is the distance between Boston and Newark?",
    "answer": "SELECT \t\tORDER BY distance \n       \n \t\tLIMIT -140.2867395;"
  },
  {
    "id": 815,
    "db_id": "address_1",
    "question": "What is the average, minimum, maximum distance between two cities?",
    "answer": "SELECT \n        RIGHT JOIN (SELECT city_name , FULL OUTER JOIN (SELECT City.city_name FROM (SELECT city1_code FROM (SELECT city2_code ORDER BY LName LIMIT 5)) AS Temp) ON City.city_name = City.state GROUP BY state )\n \t\t  \t  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 816,
    "db_id": "address_1",
    "question": "Give the average, minimum, and maximum distances between two cities.",
    "answer": "SELECT Age FROM (SELECT city1_code , \n    RIGHT JOIN (SELECT City.city_name , \n       RIGHT JOIN (SELECT city_name , latitude , longitude FROM (SELECT city_name , \n    ORDER BY city_name ) AS M ORDER BY distance LIMIT 2) AS S1 ON city1_code  = state )\n      AS LATT ON City.city_name = state GROUP"
  },
  {
    "id": 817,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with maximum distance.",
    "answer": "SELECT City.state ,  ORDER BY Direct_distance.city1_code , city2_code LIMIT 4;"
  },
  {
    "id": 818,
    "db_id": "address_1",
    "question": "What are the city codes of the cities with the maximum distance?",
    "answer": "SELECT City.city_code FROM (SELECT city1_code ,  AS ouble FROM (SELECT city2_code , \n    FROM (SELECT city1_code   FROM (SELECT DISTINCT city_code ) AS T) AS B WHERE distance =(SELECT city2_code ORDER BY distance LIMIT 3 OFFSET 0)));"
  },
  {
    "id": 819,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance greater than the average.",
    "answer": "SELECT city_code FROM (SELECT City.city_code ,  \n     RIGHT JOIN (SELECT Age FROM (SELECT City.city_code ) AS SubQ)  AS AvgCity ON City.city_code =        Sex   GROUP BY City.city_code );"
  },
  {
    "id": 820,
    "db_id": "address_1",
    "question": "What are the city codes of cities with distance greater than average?",
    "answer": "SELECT DISTINCT City.city_code FROM (SELECT Age FROM (SELECT *FROM (SELECT Age ,  FROM (SELECT Age ) AS middle  \n     WHERE LName = 'Average')))WHERE City.city_code > (SELECT city_code FROM (SELECT DISTINCT City.city_code FROM (SELECT RIGHT JOIN (SELECT RIGHT JOIN (SELECT RIGHT JOIN (SELECT *FROM"
  },
  {
    "id": 821,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance less than 1000.",
    "answer": "SELECT City.city_code FROM (SELECT DISTINCT City.city_code , \n     RIGHT JOIN (SELECT latitude , longitude   FROM (SELECT city_code ) AS T1  INNER JOIN (SELECT city_code  FROM (SELECT city_code ) AS T2)\n             AS S ON state  = 3 ORDER BY LName    LIMIT 50 OFFSET 40)     AS T3 "
  },
  {
    "id": 822,
    "db_id": "address_1",
    "question": "What are the city codes corresponding to cities with distances less than 1000?",
    "answer": "SELECT City.country GROUP BY City.country ORDER BY distance   LIMIT -3975;"
  },
  {
    "id": 823,
    "db_id": "address_1",
    "question": "What is the total distance between city BAL and all other cities.",
    "answer": "SELECT city_name , \n    RIGHT JOIN (SELECT City.city_name FROM (SELECT City.city_name  \n  \tFROM (SELECT city_name FROM (SELECT \n                 FULL JOIN (SELECT city_name FROM (SELECT \n                         FULL JOIN (SELECT city_name FROM (SELECT state GROUP BY state ) AS B \n                         INNER JOIN (SELECT city_name FROM (SELECT state GROUP BY city_name )  \n                        "
  },
  {
    "id": 824,
    "db_id": "address_1",
    "question": "What is the sum of distances between BAL and other cities?",
    "answer": "SELECT city_name , \n    RIGHT JOIN (SELECT * FROM (SELECT City.city_name , \n    FROM (SELECT city1_code   FROM (SELECT City.city_name FROM (SELECT DISTINCT city_name FROM (SELECT city2_code FROM (SELECT  AS dst_pair) GROUP BY state )GROUP BY Student.distance ORDER BY state LIMIT 30))\n    WHERE City"
  },
  {
    "id": 825,
    "db_id": "address_1",
    "question": "What is the average distance between Boston and all other cities.",
    "answer": "SELECT City.Age \n    INNER JOIN (SELECT city1_code ,  AS xtmaximum_elevation   FROM address_1.City) AS City2Info ON Advisor = city1_code ;"
  },
  {
    "id": 826,
    "db_id": "address_1",
    "question": "Give the average distance between Boston and other cities.",
    "answer": "SELECT Age , \n    RIGHT JOIN (SELECT city1_code FROM address_1.City) AS t1 ON City.city2_code = City.city1_code ;"
  },
  {
    "id": 827,
    "db_id": "address_1",
    "question": "What is the name of the city closest to Chicago?",
    "answer": "SELECT DISTINCT \n    FULL JOIN (SELECT City.city_name FROM (SELECT *   WHERE City.city_name = 'Chicago') AS SubQuery) ON Fname    \n     \n \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n      \n        \n       \n          \n         \n           \n   \n             \n            \n               \n              \n  \n                 \n                \n                  \n                   "
  },
  {
    "id": 828,
    "db_id": "address_1",
    "question": "Give the name of the nearest city to Chicago.",
    "answer": "SELECT DISTINCT \n    LIMIT 2018936574;"
  },
  {
    "id": 829,
    "db_id": "address_1",
    "question": "What is the name of the city furthest to Boston?",
    "answer": "SELECT FROM (SELECT DISTINCT LIMIT 2) WHERE City.distance =City.distance   ORDER BY distance LIMIT 1 OFFSET -3;"
  },
  {
    "id": 830,
    "db_id": "address_1",
    "question": "Give the city name of the city with greatest distance from Boston.",
    "answer": "SELECT City.city_name FROM (SELECT DISTINCT address_1.city_name , \n     RIGHT JOIN (SELECT address_1.city_name   FROM address_1.City INNER JOIN address_1.City AS city_1 ON city_name  = 'Boston' ORDER BY distance LIMIT 2) AS adrress_1s ON City.city_name = address_"
  },
  {
    "id": 831,
    "db_id": "address_1",
    "question": "Show all city codes and the total distance to all other cities.",
    "answer": "SELECT * FROM (SELECT latitude , \n   \t  \t  \t    \t    \t    \t    \t     \t\t     \t   \t    \t     \t \t      \t  \t  \t     \t  \t       \t              \t        \t               \t           \t         \t       \t             \n        FROM (SELECT latitude FROM (SELECT latitude FROM address_1.Student LIMIT 4) ORDER BY latitude )\n     \t  AS DATA_FOR_"
  },
  {
    "id": 832,
    "db_id": "address_1",
    "question": "For each city, what is the the city code and sum of distances from each?",
    "answer": "SELECT DISTINCT City.city_code , \n    GROUP BY city_code ;"
  },
  {
    "id": 833,
    "db_id": "address_1",
    "question": "Show all city names and the average distance to all other cities.",
    "answer": "SELECT city_name ,  AS INTERSELECT \n     FROM (SELECT city_name ,  AS new_table   FROM (SELECT city_name )  \n    AS alias_exp) AS sel;"
  },
  {
    "id": 834,
    "db_id": "address_1",
    "question": "What are the city name and average distances from each city?",
    "answer": "SELECT  RIGHT JOIN (SELECT City.city_name , Age FROM address_1.City) AS City ON address_1.country = 'United States'\n        ORDER BY city_name   LIMIT 5;"
  },
  {
    "id": 835,
    "db_id": "address_1",
    "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
    "answer": "SELECT country FROM address_1.City WHERE city_name = 'Linda Kane'\n  ORDER BY distance LIMIT 2;"
  },
  {
    "id": 836,
    "db_id": "address_1",
    "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
    "answer": "SELECT City.city_name , \n     LIMIT +1907264583;"
  },
  {
    "id": 837,
    "db_id": "address_1",
    "question": "What is the first name and last name of the student living furthest to Linda Smith?",
    "answer": "SELECT Sex FROM (SELECT DISTINCT RIGHT JOIN (SELECT * WHERE Student.Sex = 'F' ORDER BY Student.LName ) AS STU2 ON Student.StuID = 1)\n   AS STU1;"
  },
  {
    "id": 838,
    "db_id": "address_1",
    "question": "What is the full name of the student who lives furthest from Linda Smith?",
    "answer": "SELECT LName FROM address_1.City\n        LIMIT 2;"
  },
  {
    "id": 839,
    "db_id": "address_1",
    "question": "Which state does the student whose first name is Linda live in?",
    "answer": "SELECT \t  \n    FROM address_1.Student WHERE state = (SELECT DISTINCT state FROM address_1.Student) INNER JOIN address_1.Student AS S1 ON state  = 'Ind'\n    RIGHT JOIN address_1.Student AS S2 ON LName  = 0;"
  },
  {
    "id": 840,
    "db_id": "address_1",
    "question": "Give the state that the student with first name Linda lives in.",
    "answer": "SELECT * FROM address_1.Student ORDER BY state LIMIT 5;"
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "question": "Return all details of sailors who are older than 30.",
    "answer": "SELECT * FROM boat_1.Sailors WHERE age  >3;"
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "question": "What can you tell me about sailors who are older than age 30?",
    "answer": "SELECT name FROM (SELECT DISTINCT age , name FROM (SELECT age  \n      FROM (SELECT age FROM (SELECT name FROM (SELECT name WHERE name = 'M' ORDER BY Sailors.age ) AS T1)))) AS TEMP;"
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "question": "Return name and age for sailors who are younger than 30.",
    "answer": "SELECT name , \n    FROM boat_1.Sailors WHERE age  = 30\n  RIGHT JOIN boat_1.Sailors ON boat_1.Sailors.name  = boat_1.Sailors.name ;"
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "question": "What is the name and age of every sailor who is younger than age 30?",
    "answer": "SELECT * FROM boat_1.Sailors WHERE age  <  30;"
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "question": "Find boats reserved by Sailor with id 1.",
    "answer": "SELECT rating ORDER BY rating LIMIT 5;"
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "question": "What are the different boat ids reserved by the sailor whose id is 1?",
    "answer": "SELECT boat_1.color FROM (SELECT boat_1.color FROM boat_1.Boats AS BOATS WHERE Boats.sid = 2)\n    INNER JOIN (SELECT color FROM boat_1.Boats) AS COLORGROUPING ON color = 'black' ORDER BY sid ;"
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "question": "Who reserved boat 102?",
    "answer": "SELECT *FROM (SELECT name FROM boat_1.Boats) AS tbl;"
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "question": "What is the name of the sailor who reserved boat 102?",
    "answer": "SELECT Reserves.name FROM (SELECT DISTINCT age ,  GROUP BY Reserves.name ORDER BY age ) AS T ORDER BY age LIMIT 3;"
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "question": "Return the unique boat ids (bid) of all reserved boats.",
    "answer": "SELECT \n\t\tWHERE Boats.bid  = 9851720346;"
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "question": "What are the ids of all boats that are reserved by someone?",
    "answer": "SELECT Reserves.color FROM (SELECT DISTINCT boat_1.Reserves.color \n      FROM (SELECT RIGHT JOIN boat_1.Reserves ON Boats.name = boat_1.Boats.name ) AS reservations) WHERE Reserves.color <> 'SPECIFIC COLOR' ORDER BY color LIMIT 2;"
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "question": "What is the name of sailors whose names contain letter e?",
    "answer": "SELECT DISTINCT name FROM boat_1.Sailors;"
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "question": "What is the name of every sailor whose name contains the letter e?",
    "answer": "SELECT name FROM boat_1.Sailors WHERE name \n<> 'Er' ORDER BY name ;"
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "question": "return the unique ids of sailors who are older than any sailors.",
    "answer": "SELECT FROM boat_1.Boats\n    WHERE age  > (SELECT age FROM boat_1.Sailors)\n  GROUP BY age ORDER BY age ;"
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "question": "What is the different id of every sailor who is not the youngest?",
    "answer": "SELECT \n    FROM boat_1.Sailors WHERE age <> '2';"
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
    "answer": "SELECT name FROM boat_1.Sailors;"
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
    "answer": "SELECT name FROM boat_1.Sailors WHERE age  > (SELECT \n    RIGHT JOIN (SELECT DISTINCT ORDER BY age , rating ) AS T2 ON Boats.age = Sailors.age ORDER BY age  \n  LIMIT 5);"
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "question": "Find the name and id of the sailors who reserved at least one boat?",
    "answer": "SELECT DISTINCT Reserves.sid ,  FROM (SELECT sid WHERE Reserves.sid  =  Boats.sid ) AS Subquery_Sailor GROUP BY Sailors.name ;"
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "question": "What is the name and id of every sailor who reserved one or more boats?",
    "answer": "SELECT \n    FROM boat_1.Sailors AS t2 WHERE EXISTS (SELECT * FROM boat_1.Boats AS t1, boat_1.Sailors) INNER JOIN boat_1.Reserves ON Reserves.sid = Sailors.sid GROUP BY Reserves.bid ORDER BY Boats.bid LIMIT 50 OFFSET 28;"
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "question": "Find the id and name of the sailors who reserved more than one boat.",
    "answer": "SELECT \t\n        GROUP BY boat_1.sid , sid ;"
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who reserved two or more boats ?",
    "answer": "SELECT \n    ORDER BY Boats.color   \n  \n  \n   \n   \n   \n   \n   \n   \n     \n      \n        \n   \n       \n          \n    \n            \n             \n                \n               \n                  \n                   \n                 \n              \n                    \n                        \n                     \n                      \n                        LIMIT 0.26597431 OFFSET 8.2"
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT * FROM boat_1.Sailors WHERE color = 'red' ORDER BY color   LIMIT 5;"
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "question": "What are the sids for sailors who reserved red or blue boats?",
    "answer": "SELECT Sailors.sid \n                FROM (SELECT ORDER BY color ) WHERE color = 'Red' ORDER BY color  \n   \n            \n       \n          \n    \n      \n        \n     \n\n\n\n      \n         \n           \n             \n              \n                \n                  \n                      \n                    \n                        \n                       \n                         \n                            \n                             \n                               \n\n\n\n\n\n\n\n"
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT \tFULL JOIN (SELECT Sailors.sid , RIGHT JOIN boat_1.Boats ON Sailors.sid = boat_1.Boats.sid ) AS RESERVATION ON Reserves.sid = Reserves.sid \n\tLEFT JOIN (SELECT sid FROM boat_1.Boats WHERE color = 'Red')   AS Red_Reservation ON"
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red or blue boats?",
    "answer": "SELECT name ,  ORDER BY Reserves.bid   LIMIT 3;"
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT GROUP BY sid ORDER BY Reserves.rating  DESC LIMIT 1 OFFSET 0;"
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who reserved red and blue boats?",
    "answer": "SELECT sid ,  GROUP BY color ORDER BY Reserves.color LIMIT 3;"
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT \tFULL JOIN (SELECT Sailors.sid , RIGHT JOIN (SELECT Reserves.sid , Boats.bid ) ON Sailors.sid  =  Reserves.sid )\n        \t\t     \t     \t   \t \t   \t    \t \t   \t \t     \t    \t    \t     \t \t \t     \t \t     \t       \t    \t     \t    \t \t \t \t \t \n                           \n                   \n                     \n              \n \n\n   \n"
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red and blue boats?",
    "answer": "SELECT name , boat_1.name FROM boat_1.Reserves WHERE color = 'red' INNER JOIN boat_1.Boats AS boat_1 ON boat_1.Reserves.name = boat_1.name GROUP BY Reserves.color ORDER BY boat_1.name LIMIT 5;"
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "question": "What is the ids of sailors that haven\u2019t reserved a boat?",
    "answer": "SELECT name FROM boat_1.Boats WHERE color  <> 'BLACK';"
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who have not reserved a boat?",
    "answer": "SELECT DISTINCT sid FROM boat_1.Reserves WHERE Reserves.sid = '3'\n  INNER JOIN (SELECT * FROM boat_1.Reserves) AS Reserves2 ON Boats.sid  =  Reserves.sid  ORDER BY sid , boat_1.name ;"
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "question": "what is the name and id of sailors who do not have a reservation of a boat?",
    "answer": "SELECT  WHERE Boats.name  =  'O'\n    ORDER BY Reserves.name  DESC;"
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who do not have boat reservations?",
    "answer": "SELECT name ,  ORDER BY Reserves.name  \n\tLIMIT 20;"
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "question": "Find id for the sailors who do not have a reservation of a boat?",
    "answer": "SELECT name FROM boat_1.Reserves WHERE boat_1.Reserves.sid = (SELECT sid FROM boat_1.Sailors)\n      GROUP BY sid  \n    \n \n   \n       ORDER BY sid ;"
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "question": "What is id about sailors who do not have boat reservations?",
    "answer": "SELECT WHERE Boats.sid = boat_1.bid ORDER BY boat_1.bid LIMIT 3;"
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "question": "What is the name of the sailors who reserved boat with id 103?",
    "answer": "SELECT rating , rating FROM boat_1.Sailors WHERE Reserves.rating = (SELECT )\n        ORDER BY rating   LIMIT 4;"
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "question": "Find the name of the sailors who reserved boat with id 103.",
    "answer": "SELECT * FROM boat_1.Sailors WHERE Reserves.sid = Boats.bid ;"
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "answer": "SELECT DISTINCT sid FROM boat_1.Sailors;"
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "answer": "SELECT name FROM boat_1.Sailors WHERE rating > (SELECT \n     RIGHT JOIN (SELECT DISTINCT name , RIGHT JOIN (SELECT name FROM boat_1.Sailors) AS B2 ON Boats.sid = Boats.name ) AS T1 ON Boats.bid  =   Boats.bid ORDER BY boat_1.sid LIMIT 4);"
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "answer": "SELECT \n     RIGHT JOIN (SELECT DISTINCT name FROM boat_1.Sailors) AS T2 ON boat_1.sid = (SELECT DISTINCT sid FROM boat_1.Sailors ORDER BY rating )   GROUP BY name ;"
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "answer": "SELECT name FROM boat_1.Sailors WHERE rating  > (SELECT  RIGHT JOIN boat_1.Sailors AS t2 ON Sailors.name  = 'Luis')\n    INNER JOIN (SELECT * FROM boat_1.Reserves)\n\n\n\n\n\n\n     \n  \n     AS Ids ON Boats.bid = Reserves.bid GROUP BY"
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
    "answer": "SELECT sid ,  \n    FROM (SELECT * FROM (SELECT name ,  RIGHT JOIN (SELECT name FROM boat_1.Sailors) AS t2 ON Sailors.name = Boats.name ) GROUP BY rating );"
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
    "answer": "SELECT name ,  ORDER BY Reserves.name  \n\t    \t    \t    \t   \n\t    \t \n   \n\n\n\n\n\n\n\n      \n\n          \n                  \n              \n                \n               \n        \t       \n       \t   \t     \n           \n            \n             \t\t     \t\t\t         \t\t\t\t\t\t\t\t\t                 \t       LIMIT 3;"
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "question": "Find the name and age of the oldest sailor.",
    "answer": "SELECT \n        FROM boat_1.Sailors AS t2 WHERE day = (SELECT day   FROM boat_1.Sailors ORDER BY age LIMIT 5)\n   GROUP BY name , age ;"
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "question": "What is the name and age of the sailor with maximum age?",
    "answer": "SELECT name , \n   \t  \t  \t  \t  \t  \tFROM boat_1.Sailors ORDER BY age LIMIT 1;"
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "question": "how many sailors in total?",
    "answer": "SELECT Sailors.name FROM (SELECT name , \n                FROM (SELECT Sailors.name ) AS T1) GROUP BY sid ORDER BY sid ;"
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "question": "How many sailors exist?",
    "answer": "SELECT Sailors.color  WHERE name = 'Bryce Longbottom'\n     ORDER BY name LIMIT 2;"
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "question": "What is the average age of sailors whose rating is 7?",
    "answer": "SELECT name FROM boat_1.Sailors WHERE rating = 7;"
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "question": "What is average age of all sailors who have a rating of 7?",
    "answer": "SELECT DISTINCT RIGHT OUTER JOIN (SELECT Sailors.name , RIGHT OUTER JOIN (SELECT Sailors.rating FROM (SELECT name FROM (SELECT sid  \nFROM (SELECT name ,  AS ulls FROM (SELECT name , age ,  AS mills FROM (SELECT  ORDER BY name , age )))), (SELECT DISTINCT RIGHT OUTER JOIN (SELECT Sailors.rating WHERE"
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "question": "How many sailors whose name starts with letter D exist ?",
    "answer": "SELECT \n    FROM (SELECT name   FROM (SELECT name FROM (SELECT name FULL OUTER JOIN (SELECT FROM boat_1.Sailors) AS X ON Sailors.name = Boats.name ORDER BY sid ) WHERE name  IN (SELECT DISTINCT age ,   RIGHT JOIN boat_1.Sailors AS ALLOWED ON Sailors"
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "question": "What is the count of the sailors whose name starts with letter D ?",
    "answer": "SELECT  WHERE sid  = 2501;"
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "question": "What are the average rating and max age of all sailors?",
    "answer": "SELECT name ,  RIGHT JOIN (SELECT Sailors.name FROM boat_1.Sailors) AS b ON Sailors.name = boat_1.rating ;"
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "question": "Find the average rating and largest age for the sailors",
    "answer": "SELECT rating \n    FROM (SELECT rating , age   FROM boat_1.Sailors) AS t ORDER BY rating LIMIT 2;"
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat.",
    "answer": "SELECT * FROM (SELECT boat_1.name ,  LIMIT 200) AS boat_info INNER JOIN boat_1.Boats ON Reserves.name  = 3584976\n        LIMIT 2;"
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat?",
    "answer": "SELECT Reserves.color , \t   FROM (SELECT color )\n    INNER JOIN (SELECT DISTINCT *FROM boat_1.Reserves) AS BOATS ON Boats.color = Reserves.color GROUP BY color ;"
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with id greater than 50.",
    "answer": "SELECT Boats.color ,  FROM boat_1.Reserves AS Res WHERE Reserves.color  >  97;"
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat with an id greater than 50?",
    "answer": "SELECT Boats.name ,  GROUP BY Reserves.color  \n    \n    \n   \n   \n    \n\n\n\n\n\n\n\n\n       ORDER BY Reserves.color ;"
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with more than 1 reservation.",
    "answer": "SELECT DISTINCT Reserves.color ,  FROM (SELECT Reserves.color ,  FROM (SELECT Reserves.color WHERE Reserves.color  > 2) AS t1 RIGHT JOIN boat_1.Reserves ON Reserves.color = boat_1.Reserves.color )\n        ORDER BY color ;"
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat that has more than 1 reservation already?",
    "answer": "SELECT *FROM boat_1.Reserves\n     GROUP BY name ;"
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
    "answer": "SELECT RIGHT JOIN boat_1.Boats AS b ON age \n<> '3'\n    GROUP BY bid , bid ORDER BY bid ;"
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
    "answer": "SELECT \t\tRIGHT JOIN (SELECT \t\tFROM boat_1.Reserves) AS Reservations ON Reserves.color = boat_1.color ;"
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
    "answer": "SELECT DISTINCT RIGHT JOIN (SELECT rating ,  AS ranking_avg)\n        AS avg_age_of_reds ON rating = age GROUP BY age \n    ORDER BY rating ;"
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
    "answer": "SELECT DISTINCT RIGHT JOIN (SELECT * FROM boat_1.Sailors AS sa LEFT JOIN boat_1.Reserves ON Sailors.sid = Reserves.sid )  \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n  \n    \n\n  \n\n  \n  \n     \n      \n       \n        \n          \n           \n"
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "question": "Find the name, rating and age of all sailors ordered by rating and age.",
    "answer": "SELECT sid ,  RIGHT JOIN (SELECT Sailors.name , rating FROM (SELECT name FROM (SELECT name FROM (SELECT name  \n    FROM (SELECT name FROM (SELECT DISTINCT name )))))) AS SA ON rating = Sailors.rating ORDER BY age ;"
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "question": "What is the name, rating, and age for every sailor? And order them by rating and age.",
    "answer": "SELECT Sailors.name ,  RIGHT JOIN (SELECT * FROM (SELECT FROM boat_1.Boats ORDER BY Reserves.color ) AS T1)\n  AS t2 ON Boats.name  =  Boats.name INNER JOIN boat_1.Reserves ON EXISTS (SELECT Sailors.age , sid FROM bo"
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "question": "Find the total number of boats.",
    "answer": "SELECT * FROM boat_1.Boats;"
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "question": "How many boats are there?",
    "answer": "SELECT \tRIGHT JOIN boat_1.Boats AS t2 ON boat_1.name = 'boat_2'\n    INNER JOIN boat_1.Boats AS X  \n    \n\n\n\n\n   \n\n  \n\n\n\n\n\n\n AS T3 ON Boats.name = Boats.name \nINNER JOIN boat_1.Boats AS Y       \n     \n      \n        "
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "question": "How many boats are red?",
    "answer": "SELECT RIGHT OUTER JOIN boat_1.Boats AS T2 ON boat_1.color = 'red'\n    GROUP BY color ORDER BY name LIMIT 0;"
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "question": "How many red boats exist?",
    "answer": "SELECT RIGHT OUTER JOIN (SELECT Boats.name , Boats.color   FROM boat_1.Boats) AS COLOR ON color = 'red';"
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
    "answer": "SELECT name FROM boat_1.Sailors WHERE age  >=20 INNER JOIN boat_1.Boats ON Sailors.age  <= 30;"
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "question": "What are the names of the boats booked by people between age 20 and 30?",
    "answer": "SELECT name FROM boat_1.Sailors WHERE age >=5 ORDER BY name ;"
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
    "answer": "SELECT name FROM boat_1.Reserves WHERE rating > 759603;"
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
    "answer": "SELECT name FROM boat_1.Sailors WHERE rating  > (SELECT  RIGHT JOIN (SELECT * FROM boat_1.Sailors) AS mididp10708T0R ON rating <> 26);"
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "question": "What is highest rating between sailors?",
    "answer": "SELECT DISTINCT RIGHT JOIN (SELECT * FROM boat_1.Sailors ORDER BY Sailors.name )\n    AS HighestRatingInEachYearOrderByNameClubbingAllSailorsinAlphabeticalOrderNosLessThan3YearsInStaAndFeBoatWomensAsSailorsToRankFirstTherAfterYearsOfJoiningAllSailorNamesShouldBeR"
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "question": "What is the maximum rating for sailors?",
    "answer": "SELECT name , \n    RIGHT JOIN (SELECT rating FROM boat_1.Sailors ORDER BY rating ) AS max ON Sailors.name = boat_1.color ;"
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "question": "Find the names of sailors who reserved boat with the name Melon.",
    "answer": "SELECT Reserves.sid ,  FROM (SELECT DISTINCT Reserves.sid ) AS Subquery_1 WHERE boat_1.name  =  'Melon'\n        ORDER BY sid ;"
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "question": "What are the names of sailors who reserved a boat with the name Melon?",
    "answer": "SELECT sid FROM boat_1.Sailors WHERE name  = \n  'Melon' ORDER BY name LIMIT 2;"
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "question": "List the names and ages of all sailors sorted by rating in descending order.",
    "answer": "SELECT name , age FROM (SELECT sid ,  RIGHT JOIN (SELECT ORDER BY rating ) AS a ON age = sid ORDER BY rating   LIMIT 5)\n            GROUP BY name ;"
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "question": "What are the names and ages of all sailors sorted by decreasing rating?",
    "answer": "SELECT name , age FROM (SELECT DISTINCT RIGHT JOIN (SELECT ORDER BY name LIMIT +10) AS T2 ON Reserves.name = Sailors.name ) INNER JOIN (SELECT ORDER BY age LIMIT -85) AS T3 ON Reserves.age < (SELECT DISTINCT name FROM (SELECT ORDER BY"
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "question": "Find the model of the most expensive headphone.",
    "answer": "SELECT \n        FROM headphone_store.stock ORDER BY Price  \n   LIMIT 1 OFFSET 2;"
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "question": "Which headphone model has the highest price?",
    "answer": "SELECT \n        LIMIT 40.2987561394832183;"
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "question": "List all different headphone models in the alphabetical order.",
    "answer": "SELECT \n    \n    FROM headphone_store.headphone AS h INNER JOIN (SELECT DISTINCT Model , Name  \nFROM headphone_store.headphone GROUP BY Class ORDER BY Price ) ON Headphone_ID = Headphone_ID ;"
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "question": "Return the list of distinct headphone models ordered alphabetically.",
    "answer": "SELECT \n    \n    FROM headphone_store.store;"
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "question": "Which headphone class is the most common one?",
    "answer": "SELECT \n    FROM headphone_store.store ORDER BY Class   LIMIT 1;"
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "question": "Which headphone class contains the most headphones?",
    "answer": "SELECT Class , \n    FROM headphone_store.stock ORDER BY Price  DESC LIMIT 1;"
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "question": "Which headphone class does have more than two headphones?",
    "answer": "SELECT \n    FROM (SELECT  \n \n \n \n       FROM headphone_store.stock) AS expr;"
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "question": "Find the headphone class that does not contain more than two headphones.",
    "answer": "SELECT headphone_store.Class  FROM headphone_store.stock\n    AS clas;"
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "question": "Find the number of headphones with a price higher than 200 for each class.",
    "answer": "SELECT Class ,  FROM (SELECT Class ,  AS IN FROM headphone_store.headphone AS AS\n    WHERE Price > 200) AS SubQuery1;"
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "question": "How many headphones cost more than 200 for each headphone class?",
    "answer": "SELECT headphone_store.headphone.Class , \n      GROUP BY headphone_store.headphone.Headphone_ID  \n    ORDER BY headphone_store.headphone.Price ;"
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "question": "how many different earpads are there?",
    "answer": "SELECT  WHERE Earpads = (SELECT   FROM headphone_store.headphone, headphone_store.stock)\n    INNER JOIN headphone_store.headphone AS t1 ON headphone_store.Headphone_ID = 'DIFFERNC'ORDER BY Earpads   LIMIT 2;"
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "question": "Count the number of different earpads.",
    "answer": "SELECT DISTINCT Earpads ORDER BY Earpads LIMIT -1;"
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "question": "Find the top 2 earpads that are mostly used.",
    "answer": "SELECT * FROM (SELECT DISTINCT Earpads ORDER BY Earpads  \n        LIMIT 2) AS Top_two;"
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "question": "What are the top 2 earpads in terms of the number of headphones using them?",
    "answer": "SELECT headphone_store.headphone.Earpads , INNER JOIN headphone_store.headphone ON Earpads = Headphone_ID ORDER BY Name LIMIT 1;"
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "question": "What are the model, class, and construction of the cheapest headphone?",
    "answer": "SELECT \n        WHERE Model      \n           \n    \n\n         = Class            \n   \n          \n         \n     \n  \n               \n              \n                  \n                         \n             \n                       \n                          \n                              \n                               \n                             \n                                                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n                           \n                            \n                        \n                    "
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "question": "Find the model, class, and construction of the headphone with the lowest price.",
    "answer": "SELECT * FROM (SELECT \n    RIGHT JOIN (SELECT store.Class WHERE Price = 215) AS exprStudentID ON store.Class = Class ) ORDER BY Class LIMIT 3;"
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "question": "Find the average price for each headphone construction.",
    "answer": "SELECT DISTINCT Headphone_ID FROM headphone_store.stock;"
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "question": "How much does headphones cost on average for each headphone construction?",
    "answer": "SELECT RIGHT JOIN (SELECT DISTINCT \n    WHERE headphone.Construction = '2013' ORDER BY Class  ASC) AS THERE_ISCASH ON headphone.Headphone_ID  =  headphone.Construction ;"
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
    "answer": "SELECT DISTINCT Class FROM headphone_store.stock WHERE Earpads = 'High Earpod'\n    INNER JOIN (SELECT Class , ORDER BY Date_Opened ) AS New_Table ON Headphone_ID  =  2;"
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
    "answer": "SELECT Class FROM (SELECT DISTINCT Headphone_ID , \n        INNER JOIN (SELECT headphone_store.Class   WHERE Headphone_ID = 'C0' ORDER BY Headphone_ID ) AS T1 ON Model = Class ORDER BY Class    LIMIT 2) AS EXPORTS;"
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "question": "Which earpads never use plastic construction?",
    "answer": "SELECT \n    FROM (SELECT  WHERE Price   \n     \n  \n  \n   \n    \n   \n   \n  \n  \n  \n      \n \n      \n  \n \n       \n   \n  \n            \n          \n        \n         \n             \n           \n              \n              \n               \n                \n                 \n                  \n                    \n                     \n                      \n                       \n                         \n                        \n                           \n                            \n                              \n                                \n"
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "question": "Find all earpads that do not use plastic construction.",
    "answer": "SELECT DISTINCT \n    FROM (SELECT *FROM headphone_store.stock WHERE Class = 'Earp') AS subquery;"
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "question": "Find the headphone models whose price is below the average price.",
    "answer": "SELECT DISTINCT headphone_store.headphone.Price FROM headphone_store.store ORDER BY Price LIMIT 10;"
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "question": "What are the headphone models that cost less than the average price?",
    "answer": "SELECT *FROM headphone_store.headphone AS t1JOINAVGpriceOVERSUMCANTExpendancES2EURORNAMelinIGUltImosONRMORITIES2357PIONEFACHARISERLOTI960EXCIETY98PRIDEWHATAREDSortheaDEMModels, headphone_store.headphone AS t1JO"
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "question": "Sort all store names by store open date.",
    "answer": "SELECT \n\t\tORDER BY store.Store_ID , Model , Store_ID  \n   \n\t\t\tLIMIT 1;"
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "question": "Give me a list of store names, sorted by store open date.",
    "answer": "SELECT \n    FROM (SELECT store.Name , store.Store_ID   WHERE Store_ID = 'LBBN' ORDER BY Store_ID ) AS T;"
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "question": "List name and parking info for the stores in the Tarzana neighborhood.",
    "answer": "SELECT \n\t\t\tWHERE store.Neighborhood = 'Tarzana'  \n    ORDER BY Store_ID ;"
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
    "answer": "SELECT * FROM (SELECT store.Name , store.Store_ID  \n FROM (SELECT Name , Store_ID FROM (SELECT Store_ID ) AS T1 GROUP BY Store_ID ORDER BY Store_ID LIMIT -2) AS A1 GROUP BY Store_ID );"
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "question": "How many different neighborhoods are there for all stores?",
    "answer": "SELECT  GROUP BY store.Store_ID , Neighborhood  \n               \n           \n          \n         \n        \n\n\n\n\n      \n       \n     \n   \n    \n   \n    \n            \n              \n             \n                 LIMIT 50;"
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "question": "Count the number of distinct neighborhoods stores are located.",
    "answer": "SELECT Name FROM (SELECT DISTINCT *FROM (SELECT Neighborhood INNER JOIN (SELECT Name FROM (SELECT DISTINCT Name WHERE Class = 'San Francisco' ORDER BY Class ) AS T1) ON Model = Model ORDER BY Class LIMIT 2))\n    WHERE Class  = 0;"
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "question": "find the number of stores in each neighborhood.",
    "answer": "SELECT Neighborhood , \n    GROUP BY Store_ID ORDER BY Store_ID   LIMIT 5;"
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "question": "How many stores are there in each neighborhood?",
    "answer": "SELECT  RIGHT JOIN (SELECT store.Store_ID FROM (SELECT Store_ID , Name FROM (SELECT DISTINCT Name ) AS STORE GROUP BY Store_ID LIMIT 1)\n        AS T12 INNER JOIN (SELECT Neighborhood   FROM (SELECT RIGHT JOIN (SELECT store.Store_ID    INNER JOIN (SELECT Store_ID , Name FROM"
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well.",
    "answer": "SELECT * FROM (SELECT store.Name , \n    LIMIT 0) ORDER BY Store_ID LIMIT 1;"
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
    "answer": "SELECT Store_ID , \n    GROUP BY Store_ID ORDER BY Store_ID LIMIT 1;"
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "question": "Find the name of stores which have no headphone in stock.",
    "answer": "SELECT store.Store_ID , \n    FROM (SELECT DISTINCT Store_ID ) AS T1 WHERE EXISTS (SELECT *   FROM headphone_store.store)\n  GROUP BY Store_ID ;"
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "question": "Which stores do not have any headphones in stock? Give me the store names.",
    "answer": "SELECT \n     RIGHT JOIN (SELECT * FROM headphone_store.headphone) AS T1 ON Store_ID = Store_ID ORDER BY Name   LIMIT 2;"
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "question": "Which headphone models do not have any stock in any store?",
    "answer": "SELECT \n        FROM (SELECT DISTINCT headphone_store.Model , \n            WHERE headphone_store.Store_ID = 20167) AS HEADPHONEMODELNOTFORYOURSTORE;"
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "question": "Find the headphone models that are not in stock in any store.",
    "answer": "SELECT \n   \nFROM (SELECT DISTINCT headphone_store.headphone.Model FROM headphone_store.headphone INNER JOIN headphone_store.store ON headphone_store.headphone.Store_ID = store.Store_ID )\n    WHERE headphone_store.Headphone_ID <> (SELECT DISTIN"
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "question": "Which headphone model has the largest quantity of stock across all the stores?",
    "answer": "SELECT \n    \n    FROM (SELECT store.Model , \n             \n            \n    FROM (SELECT Store_ID  \n            FROM (SELECT Store_ID FROM (SELECT Model  \n                                           FROM headphone_store.store) AS a)) AS T1 \n            GROUP BY Model )  \n           \n    GROUP BY store.Model ;"
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "question": "Find the headphone model whose total quantity in stock is the largest.",
    "answer": "SELECT headphone_store.Quantity FROM headphone_store.store ORDER BY Quantity LIMIT 1;"
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "question": "How many headphones are stored in the Woodman store?",
    "answer": "SELECT \n    FROM (SELECT   WHERE Store_ID  = 'LB3042' ORDER BY Store_ID ) AS T;"
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "question": "Find the total quantity of headphones stored in the Woodman store.",
    "answer": "SELECT * FROM headphone_store.headphone WHERE Headphone_ID = 'FW';"
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "question": "Which neighborhood does not have any headphone in stock?",
    "answer": "SELECT \n    \t\t\tWHERE Store_ID = (SELECT  \t\t\tFROM headphone_store.stock  WHERE Store_ID = 2);"
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "question": "Find the neighborhood where no headphones are in stock.",
    "answer": "SELECT \n    FROM headphone_store.stock WHERE stock.Store_ID = 'LB-04';"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": "How many authors do we have?",
    "answer": "SELECT \t  \t  \t  \t  \t \n    FROM (SELECT  \tINNER JOIN (SELECT   GROUP BY title ORDER BY title ) AS MULTI_TABLE ON title    \t\t      \t        \n       \t          \t  = title ) AS MULTI_TABLE WHERE author_id = author_id ;"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": "Count the number of authors.",
    "answer": "SELECT name FROM (SELECT DISTINCT name \n    FROM (SELECT author_id ,  RIGHT JOIN (SELECT name FROM (SELECT DISTINCT name FROM (SELECT author_id ORDER BY author_id ) AS name) AS ON LIMIT 1 OFFSET +0)  AS T2 ON Author_list.author_id = title )\n  GROUP BY author"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": "How many papers do we have?",
    "answer": "SELECT    \n \n   \n   FROM (SELECT name , paper_id ) AS A \n RIGHT JOIN (SELECT title , paper_id )     \n         AS B ON Author_list.paper_id  = aan_1.name ;"
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "question": "Count the number of papers.",
    "answer": "SELECT name , \n    RIGHT JOIN (SELECT paper_id FROM aan_1.Paper) AS T1 ON aan_1.paper_id = title ;"
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "question": "How many affiliations do we have?",
    "answer": "SELECT  \n   \n  FROM aan_1.Affiliation;"
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "question": "Count the number of affiliations.",
    "answer": "SELECT * FROM aan_1.Affiliation;"
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "question": "How many papers do we have in NAACL 2000?",
    "answer": "SELECT \t\tRIGHT JOIN (SELECT paper_id FROM aan_1.Paper) AS t1 ON aan_1.paper_id = title INNER JOIN (SELECT   FULL OUTER JOIN (SELECT paper_id , name  FROM aan_1.Author) AS T2 ON aan_1.Author.author_id  = title INNER JO"
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "question": "Count the number of papers in NAACL 2000.",
    "answer": "SELECT GROUP BY year ORDER BY year LIMIT 10;"
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "question": "How many papers are published in year 2009 by Columbia University?",
    "answer": "SELECT Citation.cited_paper_id FROM (SELECT paper_id ,  GROUP BY cited_paper_id ) AS T1 WHERE paper_id  = 53;"
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "question": "Count the number of papers published by Columbia University in 2009.",
    "answer": "SELECT name , \n    FROM (SELECT title   FROM aan_1.Paper) AS T1 WHERE title <> ''')\n<jupyter-code>\ndf = pd.read_sql(\"\"\"\nsh select count(*) from (select max(case when columbia_university then 0 else 1 end)) as title in ('  \n        \t    \t\t      \t \t\t\t\t     \t\t\t   \t   \t     \t       "
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "question": "List names and addresses for all affiliations.",
    "answer": "SELECT name ,  ORDER BY name ;"
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "question": "What are the names and addresses for all affiliations?",
    "answer": "SELECT name , address FROM aan_1.Affiliation;"
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "question": "List all venues and years for papers ordered by year.",
    "answer": "SELECT name FROM (SELECT DISTINCT paper_id , venue , \n         FULL JOIN (SELECT paper_id ORDER BY year ) AS subquery1 ON cited_paper_id = venue GROUP BY Paper.name ) WHERE title  =  'B'ORDER BY year ;"
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "question": "What are the distinct venues for papers, ordered by year?",
    "answer": "SELECT venue FROM (SELECT venue ,  FULL JOIN (SELECT DISTINCT Paper.venue ) ON paper_id  \n<-10) AS T ORDER BY title ;"
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers written by Harvard University.",
    "answer": "SELECT \tWHERE Citation.name \t \t=  \t24368915    \n    INNER JOIN aan_1.Citation AS cite ON cited_paper_id  =   paper_id ;"
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
    "answer": "SELECT aan_1.cited_paper_id INNER JOIN aan_1.Citation AS b ON aan_1.Paper.paper_id  = \n      cited_paper_id ORDER BY title ;"
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs written by Mckeown.",
    "answer": "SELECT name FROM aan_1.Paper;"
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written by Mckeown?",
    "answer": "SELECT \n   \n    INNER JOIN (SELECT title , Paper.paper_id FROM (SELECT title ,  RIGHT JOIN (SELECT name   INNER JOIN (SELECT title , Paper.paper_id FROM (SELECT paper_id WHERE paper_id  <= 'McKEOWN') AS Title) AS title ON title = Paper.title )\n    AS sub"
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
    "answer": "SELECT * FROM (SELECT title ,  GROUP BY Paper.paper_id \n                ORDER BY author_id ) AS Collab_Papers WHERE EXISTS (SELECT author_id  \n    FROM (SELECT DISTINCT aan_1.author_id   FROM (SELECT * FROM (SELECT paper_id , title FROM (SELECT paper_id FROM (SELECT  GROUP BY Paper.paper_id ORDER BY author_id )"
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
    "answer": "SELECT \n   \n  \n  \nWHERE Citation.name = 'Stanford' ORDER BY cited_paper_id \n  \n  \n\n\nLIMIT 2148657903;"
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
    "answer": "SELECT * FROM (SELECT paper_id ,  GROUP BY author_id , title ) WHERE author_id  = 103785;"
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
    "answer": "SELECT \tGROUP BY author_id ORDER BY author_id  \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
    "answer": "SELECT title , \n    FROM (SELECT title , \n           FROM aan_1.Paper \n          WHERE Paper.author_id  =  '09' ORDER BY title ) AS subq\nWHERE paper_id =  (SELECT paper_id  \n                  FROM aan_1.Paper \n                  WHERE Author.author_id  =  '23')"
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
    "answer": "SELECT \t  \n    GROUP BY title , paper_id ORDER BY cited_paper_id LIMIT 20;"
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
    "answer": "SELECT title , \n    FROM (SELECT DISTINCT * FROM (SELECT paper_id   FROM (SELECT title ) INNER JOIN aan_1.Author_list ON Author_list.author_id = paper_id ) AS subquery) AS view_subquery\nWHERE name  =  'McKenown' ORDER BY cited_paper_id , title ;"
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
    "answer": "SELECT \tINNER JOIN (SELECT GROUP BY title ORDER BY cited_paper_id ) AS oauth_paper_idsFORCE_INTEGRITYDESCENDANT ON email \n<email \t\t\t   INNER JOIN (SELECT * FROM (SELECT *FROM (SELECT DISTINCT author_id INNER JOIN (SELECT title GROUP BY"
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "question": "List the names of all authors and their number of papers in descending order by number of papers.",
    "answer": "SELECT name , \t  \n    FROM (SELECT name , \t   FROM (SELECT name FROM aan_1.Author ORDER BY name ) AS name ORDER BY name LIMIT 95) AS name;"
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "question": "How many papers did each author publish, ordered by number of papers?",
    "answer": "SELECT \n\t\tFROM (SELECT name , \t\tINNER JOIN (SELECT name FROM (SELECT paper_id ) AS a) AS b ON aan_1.name = author_id   GROUP BY title ORDER BY name ), aan_1.Author;"
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "question": "List all affiliations with ascending ordered number of papers.",
    "answer": "SELECT aan_1.cited_paper_id , \n  \t      \t\t FROM (SELECT paper_id FROM (SELECT cited_paper_id ORDER BY paper_id ) AS subquery) AS A;"
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "question": "What are the names of all affiliations, ordered by number of papers?",
    "answer": "SELECT name ,  FROM (SELECT DISTINCT affiliation_id  \tFROM aan_1.Paper) AS T1 ORDER BY title ;"
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "question": "List names of all authors who have more than 50 papers.",
    "answer": "SELECT author_id FROM (SELECT DISTINCT author_id ,  RIGHT JOIN (SELECT paper_id   FROM aan_1.Author) AS T1 ON author_id = title ORDER BY author_id LIMIT 3);"
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "question": "What are the names of all authors who have more than 50 papers?",
    "answer": "SELECT author_id FROM (SELECT DISTINCT paper_id , title ) AS T1 GROUP BY author_id ORDER BY Author_list.author_id   LIMIT 4;"
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "question": "List names of all authors who have only 1 paper.",
    "answer": "SELECT author_id FROM (SELECT DISTINCT *) WHERE author_id ='''\n<jupyter-text>\n```pythonsqlite database query to get the ids and count how many papers each one has is ``` SELECT name, COUNT(paper_id)FROM authors JOIN LIST WITH QUOTES((Select paper.id FROM PAPER WHERE authorID = AUTHOR.AUTHOR_ID)) AS HAVING THE SAME ID"
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "question": "What are the names of authors who have exactly 1 paper?",
    "answer": "SELECT author_id , name FROM (SELECT DISTINCT author_id   FROM (SELECT author_id   \n  FROM aan_1.Paper) AS T1 GROUP BY author_id )ORDER BY cited_paper_id ;"
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "question": "What is the venue and year with the most number of publications?",
    "answer": "SELECT venue ,  FULL JOIN (SELECT venue FROM (SELECT venue  \n     FROM (SELECT DISTINCT LIMIT 2013) AS venue)) AS X ON Author.name = 'C. Shawcott' ORDER BY cited_paper_id LIMIT 4;"
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "question": "What was the venue and year with the most publications?",
    "answer": "SELECT \n        GROUP BY venue , year ORDER BY cited_paper_id LIMIT 1;"
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "question": "What is the venue with the least number of publications?",
    "answer": "SELECT name FROM (SELECT DISTINCT aan_1.name ,  LIMIT 450) AS RESULT ORDER BY Author_list.name  \n\t\n\n\n\n\n\n\n\n\n\n\n   \n\n\nLIMIT 2;"
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "question": "Which venue has the fewest publications?",
    "answer": "SELECT DISTINCT venue FROM (SELECT * FROM (SELECT RIGHT JOIN (SELECT FROM (SELECT * FROM (SELECT DISTINCT LIMIT 4506291) AS BOTH  RIGHT JOIN (SELECT * FROM (SELECT DISTINCT LIMIT 4506291))\n      AS A ON Author_list.author_id = Author.author"
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "question": "How many papers cite paper with id A00-1002?",
    "answer": "SELECT \t\tRIGHT JOIN (SELECT paper_id FROM aan_1.Author) AS author_ids ON Citation.paper_id  =   Author.paper_id ;"
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "question": "Count the number of papers which cited a paper with id A00-1002.",
    "answer": "SELECT \n        RIGHT JOIN (SELECT cited_paper_id FROM aan_1.Paper) AS t1 ON aan_1.cited_paper_id = title INNER JOIN aan_1.Citation AS ca3 ON Citation.paper_id  = cited_paper_id ;"
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "question": "How many reference papers does paper with id D12-1027 have?",
    "answer": "SELECT name FROM (SELECT paper_id , title , author_id  \n\tFROM aan_1.Paper) AS T1 WHERE title = 'D12-3469';"
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "question": "Count the number of references the paper with id D12-1027 has.",
    "answer": "SELECT \t\tFROM (SELECT * FROM aan_1.Paper) \t\tWHERE paper_id  =  'D12-1027'\n    ORDER BY cited_paper_id        LIMIT 954863;"
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "question": "What is the id and the number of citations of the most cited paper?",
    "answer": "SELECT cited_paper_id , \n    GROUP BY author_id   ORDER BY name LIMIT -1;"
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "question": "Give the id and the number of citations of the most cited paper.",
    "answer": "SELECT cited_paper_id ,  GROUP BY author_id ORDER BY name LIMIT -1;"
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "question": "Give the title of the paper which cites most number of papers?",
    "answer": "SELECT Paper.title FROM (SELECT DISTINCT Citation.paper_id , \n    FROM (SELECT paper_id   FROM aan_1.CitationORDER BY Citation.cited_paper_id ) AS Subquery) ORDER BY cited_paper_id ;"
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "question": "What is the title of the paper which cites the most other papers?",
    "answer": "SELECT Paper.title ORDER BY Citation.paper_id LIMIT 10;"
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "question": "List top 10 most cited papers and their numbers of citations.",
    "answer": "SELECT paper_id ,  GROUP BY Citation.cited_paper_id ORDER BY cited_paper_id LIMIT 20;"
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "question": "What are the 10 most cited papers, and how many citations did each have?",
    "answer": "SELECT cited_paper_id , author_id FROM (SELECT paper_id , title FROM aan_1.Paper) AS subquery   ORDER BY cited_paper_id  DESC LIMIT 10;"
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "question": "How many citations does Mckeown , Kathleen have ?",
    "answer": "SELECT WHERE Citation.cited_paper_id \n<-2194056873 LIMIT 2592873.99328;"
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "question": "Count the number of citations Mckeown , Kathleen has .",
    "answer": "SELECT \n\tFROM (SELECT DISTINCT cited_paper_id ) AS outerQuery;"
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "question": "How many papers does Mckeown , Kathleen cite ?",
    "answer": "SELECT  \n    INNER JOIN (SELECT * FROM (SELECT *FROM (SELECT Paper.title FROM (SELECT title FROM (SELECT paper_id ORDER BY title ) AS PP\n        WHERE author_id = (SELECT author_id FROM (SELECT author_id FROM (SELECT paper_id INNER JOIN (SELECT *FROM (SELECT )) ON Author.au"
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "question": "Count the number of papers Mckeown , Kathleen has cited .",
    "answer": "SELECT \n    FROM (SELECT paper_id  \n    FROM (SELECT * FROM (SELECT paper_id FROM aan_1.Paper) AS T1)) AS subquery  \n    WHERE Citation.cited_paper_id  = title ;"
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "question": "Find the name and number of citations of the author who has most citations among all authors?",
    "answer": "SELECT cited_paper_id , \n        GROUP BY author_id   ORDER BY cited_paper_id LIMIT 1;"
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "question": "What is the name and number of citations of the author with the greatest number of citations among authors?",
    "answer": "SELECT  RIGHT JOIN (SELECT DISTINCT  GROUP BY Citation.cited_paper_id ORDER BY cited_paper_id ) AS Author_citations ON Paper.paper_id  =   Author.author_id    GROUP BY author_id , Citation.cited_paper_id ;"
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
    "answer": "SELECT \n\t  \n    FROM (SELECT * FROM aan_1.Paper) AS subquery WHERE author_id  = 'McKeown K.';"
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "question": "Which venues and years did Mckeown , Kathleen have papers ?",
    "answer": "SELECT venue ,  WHERE venue  = 'McKeeown & Kenneth Shavers'\n    INNER JOIN (SELECT DISTINCT name FROM aan_1.Paper WHERE author_id = 'McKeown') AS PAPERS ON paper_id  =  paper_id ;"
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "question": "What are the venues and years where Columbia University had papers ?",
    "answer": "SELECT \n    INNER JOIN (SELECT Paper.venue   FROM (SELECT venue FROM (SELECT DISTINCT venue FROM (SELECT title , venue WHERE Paper.title = 'Columbia Univ'))) AS Subquery) ON paper_id = 1;"
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "question": "Which venues and years did Columbia University have papers ?",
    "answer": "SELECT venue FROM (SELECT venue ,  GROUP BY title , year ORDER BY title ) WHERE Citation.affiliation_id = 'Columbia Univeristy';"
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "question": "Which author had the most papers in the year 2009?",
    "answer": "SELECT name FROM (SELECT DISTINCT aan_1.author_id ,   \t\t\tFROM aan_1.Author_list  WHERE cited_paper_id = '254637' ORDER BY author_id ) AS Most_Recent;"
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "question": "What is the name of the author with the most papers in 2009?",
    "answer": "SELECT DISTINCT WHERE Author_list.cited_paper_id = cited_paper_id ORDER BY Author_list.author_id LIMIT 1;"
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
    "answer": "SELECT Affiliation.name FROM (SELECT DISTINCT paper_id , author_id , title , year , cited_paper_id ORDER BY name LIMIT 3) AS subqueryORDER BY affiliation_id ;"
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "question": "Which 3 affiliations had the most papers in 2009?",
    "answer": "SELECT Affiliation.name , \n        GROUP BY name ORDER BY cited_paper_id LIMIT 1;"
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "question": "How many papers does Columbia University have in or before 2009 ?",
    "answer": "SELECT   \n    FROM (SELECT  INNER JOIN (SELECT paper_id ,  AS name FROM aan_1.Paper) AS paper ON title = 'Columbia') WHERE cited_paper_id < 3 ORDER BY cited_paper_id LIMIT 2;"
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "question": "Count the number of papers Columbia University had during or prior to 2009 .",
    "answer": "SELECT * FROM (SELECT paper_id , title FROM aan_1.Paper) AS T1 WHERE Citation.paper_id  =  title ;"
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "question": "How many papers does Stanford University have between 2000 and 2009?",
    "answer": "SELECT name FROM (SELECT paper_id , title   FROM aan_1.Paper WHERE year >= '2000' ORDER BY cited_paper_id ) AS subquery GROUP BY title ;"
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "question": "Count the number of papers Stanford University had between 2000 and 2009.",
    "answer": "SELECT cited_paper_id , \n    FROM (SELECT *  \nFROM (SELECT cited_paper_id     FROM (SELECT paper_id WHERE EXISTS (SELECT \nFROM (SELECT paper_id INNER JOIN (SELECT venue FROM (SELECT cited_paper_id ) AS venue) AS cite ON cited_paper_id = cited_paper_id  \nGROUP BY"
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "question": "What is the title of the paper that has most number of authors?",
    "answer": "SELECT Paper.title FROM (SELECT DISTINCT cited_paper_id ,  GROUP BY author_id ORDER BY Author_list.author_id ) AS t1;"
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "question": "Give the title of the paper with the most authors.",
    "answer": "SELECT Paper.title FROM (SELECT DISTINCT cited_paper_id , author_id  \n  FROM (SELECT paper_id ORDER BY Citation.paper_id )GROUP BY Paper.paper_id LIMIT 1) AS subquery;"
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "question": "How many collaborators has Mckeown , Kathleen had ?",
    "answer": "SELECT name \n    FROM (SELECT DISTINCT INNER JOIN (SELECT name FROM (SELECT DISTINCT name   FULL OUTER JOIN (SELECT name FROM (SELECT DISTINCT name WHERE name = 'Mckeown' ORDER BY name ) AS B) ON Author_list.name = aan_1.name ))\n    AS authors_teaching_dbms204836957"
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
    "answer": "SELECT * FROM (SELECT DISTINCT ORDER BY Author_list.name ) WHERE Author_list.name  =  'McKeown, Kathleen'\n    GROUP BY Author_list.name ORDER BY name ;"
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
    "answer": "SELECT cited_paper_id FROM (SELECT DISTINCT paper_id  ORDER BY author_id ) AS MCKEOWN WHERE cited_paper_id = '541096' LIMIT 3;"
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
    "answer": "SELECT author_id FROM (SELECT author_id , name ,  GROUP BY name ORDER BY name LIMIT 1)\n    INNER JOIN (SELECT paper_id   FROM aan_1.Paper AS wa AS paper_id   GROUP BY author_id )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "question": "Find the id of the papers whose title has the key word 'translation'.",
    "answer": "SELECT \t\n    FROM (SELECT paper_id   FROM (SELECT paper_id   FROM aan_1.Paper) WHERE title  = 23806754 LIMIT 1) AS tmp1;"
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "question": "What are the ids for papers with titles containing 'translation'?",
    "answer": "SELECT paper_id FROM aan_1.Paper WHERE title  = \n    '%trans%';"
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "question": "Find the id and title of the papers that are never cited by others.",
    "answer": "SELECT \n        ORDER BY cited_paper_id , cited_paper_id LIMIT 0 OFFSET 1;"
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "question": "What are the ids and titles for papers that have never been cited?",
    "answer": "SELECT * FROM (SELECT DISTINCT paper_id , \n        GROUP BY title ORDER BY cited_paper_id ) AS T1 RIGHT JOIN (SELECT DISTINCT paper_id   FROM aan_1.Paper) AS T2 ON title = paper_id ;"
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
    "answer": "SELECT \n    FROM (SELECT DISTINCT affiliation_id ,  GROUP BY affiliation_id ORDER BY paper_id ) AS AGAINS ORDER BY author_id LIMIT 1;"
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
    "answer": "SELECT affiliation_id FROM (SELECT Affiliation.affiliation_id ,  \n     RIGHT JOIN (SELECT DISTINCT cited_paper_id , paper_id    FROM aan_1.Paper) AS T1 ON paper_id  =  title ) GROUP BY affiliation_id ;"
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "question": "Find the number of papers published in different conferences each year.",
    "answer": "SELECT year ,  GROUP BY paper_id , paper_id ORDER BY cited_paper_id ;"
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "question": "How many papers are published in each venue in each year?",
    "answer": "SELECT paper_id ,  GROUP BY venue , paper_id ORDER BY cited_paper_id ;"
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "question": "Find the total number of papers for each affiliation.",
    "answer": "SELECT affiliation_id ,  GROUP BY name ORDER BY cited_paper_id ;"
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "question": "How many papers has each affiliation published?",
    "answer": "SELECT aan_1.name ,  GROUP BY cited_paper_id ORDER BY name LIMIT 2;"
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "question": "Find the titles of papers that have more than 50 citations.",
    "answer": "SELECT paper_id , title FROM (SELECT cited_paper_id ) AS subquery ORDER BY cited_paper_id   LIMIT 2;"
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "question": "What are the titles for papers with more than 50 citations?",
    "answer": "SELECT paper_id , title FROM (SELECT DISTINCT cited_paper_id ) AS subquery ORDER BY name LIMIT 12;"
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
    "answer": "SELECT cited_paper_id FROM (SELECT DISTINCT paper_id , name FROM aan_1.Author) AS Authors WHERE cited_paper_id = author_id ;"
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "question": "How many authors have not published a paper with more than 50 citations?",
    "answer": "SELECT  WHERE author_id  IN (SELECT author_id FROM aan_1.Citation WHERE cited_paper_id  =  paper_id )\n\tORDER BY name  ASC;"
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
    "answer": "SELECT author_id FROM (SELECT DISTINCT aan_1.author_id , paper_id   FROM aan_1.Author_list AS T1 WHERE title  =  'NAACL' INNER JOIN (SELECT DISTINCT paper_id  FROM aan_1.Paper AS ALLIWADES FULL OUTER JOIN (SELECT name  RIGHT JOIN aan_1"
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "question": "What are the names of authors who published in both NAACL and ACL in 2009?",
    "answer": "SELECT author_id FROM (SELECT name , \tINNER JOIN (SELECT paper_id  \n        FROM (SELECT title ) AS a) AS b ON aan_1.paper_id = aan_1.author_id RIGHT OUTER JOIN (SELECT title    WHERE year = 2009) AS c ON cited_paper_id = paper_id  \n        GROUP BY author_id ) \nWHERE name"
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "question": "Find the name of authors who have never published a paper in ACL.",
    "answer": "SELECT \n    ORDER BY cited_paper_id   LIMIT 5;"
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "question": "What are the names of authors who have not published a paper in ACL?",
    "answer": "SELECT author_id FROM (SELECT DISTINCT cited_paper_id , \n        GROUP BY author_id ) AS subquery ORDER BY name LIMIT 2;"
  },
  {
    "id": 1053,
    "db_id": "conference",
    "question": "How many conferences are there?",
    "answer": "SELECT RIGHT JOIN (SELECT Conference_Name FROM conference.staff AS t1)\n       AS rightTbody ON Conference_ID = name ;"
  },
  {
    "id": 1054,
    "db_id": "conference",
    "question": "What is the total number of conferences?",
    "answer": "SELECT conference_participation.name , \n    RIGHT JOIN conference.conference ON Conference_ID = name ORDER BY name LIMIT 10;"
  },
  {
    "id": 1055,
    "db_id": "conference",
    "question": "List all distinct conference names.",
    "answer": "SELECT DISTINCT name FROM conference.institution ORDER BY name LIMIT 15;"
  },
  {
    "id": 1056,
    "db_id": "conference",
    "question": "What are the different conference names?",
    "answer": "SELECT conference_participation.Conference_Name , \n    \t  \t  FROM conference.conference;"
  },
  {
    "id": 1057,
    "db_id": "conference",
    "question": "List all conference name, year, and location.",
    "answer": "SELECT conference_participation.name FROM (SELECT name ,  GROUP BY conference_participation.name ORDER BY name ) AS conference;"
  },
  {
    "id": 1058,
    "db_id": "conference",
    "question": "What are the names, years, and locations of all conferences?",
    "answer": "SELECT * FROM conference.conference WHERE Location = 'Las Vegas';"
  },
  {
    "id": 1059,
    "db_id": "conference",
    "question": "Show all conference names and the number of times each conference has.",
    "answer": "SELECT name FROM conference.institution WHERE name = 'California'\n    ORDER BY name ;"
  },
  {
    "id": 1060,
    "db_id": "conference",
    "question": "For each conference name, how many times has it occurred?",
    "answer": "SELECT conference_participation.name , \n    GROUP BY conference_participation.name ;"
  },
  {
    "id": 1061,
    "db_id": "conference",
    "question": "show all years and the number of conferences in each year.",
    "answer": "SELECT * FROM (SELECT DISTINCT Year ,  LIMIT 10) AS Subquery ORDER BY Year ;"
  },
  {
    "id": 1062,
    "db_id": "conference",
    "question": "How many conferences occur every year?",
    "answer": "SELECT RIGHT JOIN (SELECT conference_participation.Conference_ID ,  \n        LIMIT 15) AS Conference_Participations ON Conference_ID = Conference_Name GROUP BY Year ORDER BY name LIMIT 2;"
  },
  {
    "id": 1063,
    "db_id": "conference",
    "question": "which year has least number of conferences?",
    "answer": "SELECT Year , \n    FROM (SELECT Conference_ID   FROM conference.conference) AS TEMP_TABLE ORDER BY Conference_ID LIMIT 1;"
  },
  {
    "id": 1064,
    "db_id": "conference",
    "question": "What year had the fewest conferences?",
    "answer": "SELECT name FROM conference.conference ORDER BY name LIMIT 1;"
  },
  {
    "id": 1065,
    "db_id": "conference",
    "question": "Show all locations where at least two conferences are located.",
    "answer": "SELECT Location ,  FROM conference.conference_participation WHERE conference.Location = 'LA' ORDER BY Location ;"
  },
  {
    "id": 1066,
    "db_id": "conference",
    "question": "What are all locations that have hosted at least two conferences?",
    "answer": "SELECT * FROM conference.institution ORDER BY name LIMIT 2 OFFSET 1;"
  },
  {
    "id": 1067,
    "db_id": "conference",
    "question": "Show the institution name, location and founded year of all institutions.",
    "answer": "SELECT \n        ORDER BY Institution_Name , Location  \n LIMIT 10;"
  },
  {
    "id": 1068,
    "db_id": "conference",
    "question": "What are the names, locations, and founding years for all institutions?",
    "answer": "SELECT name , \n    GROUP BY institution.name ;"
  },
  {
    "id": 1069,
    "db_id": "conference",
    "question": "How many institution are founded between 1850 and 1900?",
    "answer": "SELECT    RIGHT JOIN (SELECT   FROM (SELECT     ORDER BY Nationality  DESC) AS T1 INNER JOIN (SELECT   FROM (SELECT      ORDER BY Founded )      \n        GROUP BY Institution_Name ORDER BY Founded  ASC)             \n    AS t2 ON Location \n   = 'NAD' RIGHT JOIN (SELECT DISTINCT     GROUP BY Institution_"
  },
  {
    "id": 1070,
    "db_id": "conference",
    "question": "How many institutions were founded between 1850 and 1900?",
    "answer": "SELECT institution.Institution_ID FROM (SELECT DISTINCT * FROM conference.institution) AS t1 WHERE Year >= 1850  \n    ORDER BY Institution_Name ;"
  },
  {
    "id": 1071,
    "db_id": "conference",
    "question": "Show the institution name and location of institution that is most recently founded.",
    "answer": "SELECT institution.name , \n    GROUP BY Year  ORDER BY Year   LIMIT 1;"
  },
  {
    "id": 1072,
    "db_id": "conference",
    "question": "What are the names and locations of the most recently-founded institution?",
    "answer": "SELECT * FROM (SELECT name , \n        INNER JOIN (SELECT ORDER BY name LIMIT -30) AS LOCATION_OF_LATESTOINSIANCIES ON Conference_ID = 'Vaske id') WHERE institution.name  = \n 1584679;"
  },
  {
    "id": 1073,
    "db_id": "conference",
    "question": "Show the institution name and the number of staff for each institution founded after 1800.",
    "answer": "SELECT * FROM (SELECT Institution_Name , \n    INNER JOIN (SELECT Institution_Name , \n    FROM conference.institution AS t2) ON conference.institution.name  =  \n    institution.name ) ORDER BY Institution_Name ;"
  },
  {
    "id": 1074,
    "db_id": "conference",
    "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .",
    "answer": "SELECT name FROM (SELECT DISTINCT institution.name , \n                FULL JOIN (SELECT Institution_ID , \nFROM (SELECT Institution_ID   FROM conference.institution) \nWHERE Year  >  1800 GROUP BY institution.name )\n        AS FOREIGN_OFFENDERS ON Founded > (SELECT institution.Institution_ID"
  },
  {
    "id": 1075,
    "db_id": "conference",
    "question": "Show institution name which there is no staff in our record.",
    "answer": "SELECT institution.name FROM (SELECT institution.name FROM (SELECT Institution_Name FROM conference.institution) AS institution ORDER BY institution.name )\n    WHERE institution.staff_ID = ' '\n\nINNER JOIN (SELECT Institution_Name FROM conference.institution)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1076,
    "db_id": "conference",
    "question": "What is the name of the institution with no staff in the records?",
    "answer": "SELECT institution.name FROM (SELECT * FROM conference.institution) WHERE name = ' '')\n</code>\n */\r\n@test(query=\"\"\"select distinct Institute.InstitutionID, Inst_Name from institution where Staff  = NULL order by instituteid\"\"\")\r\npublic void test() {\r\n  org.junit.Assert.assertEquals(\"Incorrect name\", \"Austin'"
  },
  {
    "id": 1077,
    "db_id": "conference",
    "question": "Show all staff name who are above the average age.",
    "answer": "SELECT * FROM (SELECT name , \n     RIGHT JOIN (SELECT Age FROM (SELECT Age FROM (SELECT DISTINCT Age FROM (SELECT Age FROM (SELECT Age FROM (SELECT Age ORDER BY Age ))) AS B) AS a WHERE Age > 2831057469.92 GROUP BY Age , Age \n     ORDER BY Age LIMIT 0 OFFSET -1), (SELECT Age FROM (SELECT DIST"
  },
  {
    "id": 1078,
    "db_id": "conference",
    "question": "What are the names of all staff members who are older than average?",
    "answer": "SELECT name FROM (SELECT Age , \n     RIGHT JOIN (SELECT Age FROM (SELECT DISTINCT Age FROM (SELECT Year ))) AS B ON Age = Year GROUP BY Founded  ORDER BY Year ), (SELECT name FROM (SELECT Nationality INNER JOIN (SELECT Conference_Name WHERE Conference_Name  =  'Dr. Wu') AS"
  },
  {
    "id": 1079,
    "db_id": "conference",
    "question": "What is the maximum and minimum age of all staff from the United States?",
    "answer": "SELECT name , \n    RIGHT JOIN (SELECT DISTINCT name FROM (SELECT name ) AS T1)  AS STAFF_TABLE ON staff.name = staff.name GROUP BY role ORDER BY role LIMIT 2;"
  },
  {
    "id": 1080,
    "db_id": "conference",
    "question": "What are the maximum and minimum ages for all staff?",
    "answer": "SELECT \n        RIGHT JOIN (SELECT DISTINCT Year FROM conference.staff) AS YEAR_COMPUTING ON Year = ''') ?>\r\n\r\nclass MaxMinAge:  ## Class to calculate the minimum and maximum ages of all staff members in a organization or company,\r\n   :param:l:(\"Maximum Age\",Type.INTEGER)     # Max age of Staff member is"
  },
  {
    "id": 1081,
    "db_id": "conference",
    "question": "Show all conference names which the staff from Canada attends.",
    "answer": "SELECT name FROM conference.staff WHERE Location  =  'Canada'\n  LIMIT 10;"
  },
  {
    "id": 1082,
    "db_id": "conference",
    "question": "What are the names of all the conferences that has staff from Canada attending?",
    "answer": "SELECT DISTINCT name FROM conference.staff WHERE Location  =  'Canada'\n  INNER JOIN (SELECT DISTINCT name , \n    FROM conference.staff) AS t1 ON conference.staff.name  =  conference.staff.name ;"
  },
  {
    "id": 1083,
    "db_id": "conference",
    "question": "Show all staff names who have been both speaker and sponsor in some conference.",
    "answer": "SELECT \n        WHERE conference_participation.staff_ID  =  conference_participation.staff_ID ;"
  },
  {
    "id": 1084,
    "db_id": "conference",
    "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "answer": "SELECT  WHERE name = 'David Karpinski';"
  },
  {
    "id": 1085,
    "db_id": "conference",
    "question": "Show all names who have been in both ACL and Naccl.",
    "answer": "SELECT name FROM (SELECT DISTINCT * FROM (SELECT name , RIGHT JOIN (SELECT name ) ON Nationality = Nationality )\n         INNER JOIN (SELECT name   FROM (SELECT name FROM conference.conference) AS C)      AS aLitraTUATION ON Institution_Name  =\tname   \n        ORDER BY name    \n      \n"
  },
  {
    "id": 1086,
    "db_id": "conference",
    "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
    "answer": "SELECT name FROM conference.institution WHERE conference_participation.name = 'ALACL' ORDER BY name ;"
  },
  {
    "id": 1087,
    "db_id": "conference",
    "question": "Show all staff names who attend a conference in 2003 or 2004.",
    "answer": "SELECT name FROM (SELECT DISTINCT name , \n      ORDER BY name ) AS RES ORDER BY name LIMIT 5;"
  },
  {
    "id": 1088,
    "db_id": "conference",
    "question": "What are the staff names who participated in conferences between 2003 or 2004?",
    "answer": "SELECT DISTINCT Conference_Name FROM (SELECT FULL JOIN conference.staff ON conference.staff.staff_ID = conference.conference.staff_ID ) AS T1 WHERE Year = 2003 ORDER BY Conference_Name ;"
  },
  {
    "id": 1089,
    "db_id": "conference",
    "question": "Show the conference name and year and the number of participants for each conference.",
    "answer": "SELECT conference_participation.Conference_Name , \n    GROUP BY Conference_Name , conference_participation.Year ORDER BY Year ;"
  },
  {
    "id": 1090,
    "db_id": "conference",
    "question": "For each conference id, what are their names, year, and number of participants?",
    "answer": "SELECT conference_participation.name , \n    GROUP BY conference_participation.name , conference_participation.name ;"
  },
  {
    "id": 1091,
    "db_id": "conference",
    "question": "Find the name of the conferences that have the top 2 most number of attendants.",
    "answer": "SELECT conference_participation.Conference_Name , GROUP BY conference_participation.Conference_ID ORDER BY Conference_Name LIMIT 2;"
  },
  {
    "id": 1092,
    "db_id": "conference",
    "question": "What are the names of the conferences that have the top 2 most people attending?",
    "answer": "SELECT name FROM (SELECT conference_participation.name , Conference_ID  \n        FROM conference.conference_participation \n\tINNER JOIN conference.conference ON Conference_ID  = conference.conference.Conference_ID ) AS conference_particiapnt WHERE conference_participation.name = 'East Carolina' GROUP BY conference_participation.name ;"
  },
  {
    "id": 1093,
    "db_id": "conference",
    "question": "Find the name and nationality of the people who did not participate in any ACL conference.",
    "answer": "SELECT name , \n   \t  \t  \t \t  \t \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t    \n\n\n\n\n\n\n\n          \n         \t     \n       \n        \n\n\n           \t   \t       \t\t      \n                       \t       \t\t\t   \n                           \t\t\t\t    \t\t\t\t\t \t  GROUP BY name ORDER BY name LIMIT 1;"
  },
  {
    "id": 1094,
    "db_id": "conference",
    "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?",
    "answer": "SELECT \n        INNER JOIN (SELECT Nationality ,  FROM conference.institution AS T1 WHERE EXISTS (SELECT   ORDER BY Nationality )    GROUP BY Nationality ) AS T3 ON institution.name = conference.institution.name ;"
  },
  {
    "id": 1095,
    "db_id": "conference",
    "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004.",
    "answer": "SELECT \t  \t  \t  \t  \t   \t \t \t \t \t   FROM conference.staff;"
  },
  {
    "id": 1096,
    "db_id": "conference",
    "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
    "answer": "SELECT name ,  LIMIT +1500.000;"
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "question": "What is the name of the oldest pilot?",
    "answer": "SELECT * FROM pilot_1.PilotSkills ORDER BY PilotSkills.age , PilotSkills.pilot_name ;"
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "question": "Return the name of the oldest pilot.",
    "answer": "SELECT * FROM pilot_1.PilotSkills ORDER BY age LIMIT 1;"
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "question": "What are the names of pilots whose age is below the average age, ordered by age?",
    "answer": "SELECT pilot_name FROM pilot_1.PilotSkills ORDER BY PilotSkills.pilot_name \n    LIMIT 0;"
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
    "answer": "SELECT pilot_name FROM pilot_1.PilotSkillsORDER BY pilot_name  ASC\n        LIMIT 2;"
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "question": "Find all information of on pilots whose age is less than 30.",
    "answer": "SELECT * FROM pilot_1.PilotSkills WHERE pilot_1.age <  25\n    LIMIT 49;"
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "question": "What is all the information about pilots who are younger than 30 ?",
    "answer": "SELECT * FROM pilot_1.PilotSkills WHERE age < 75;"
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "answer": "SELECT RIGHT OUTER JOIN (SELECT DISTINCT )\n     AS ATTRONUMISCED ON Hangar.pilot_name = 'Piper'\n    GROUP BY pilot_name  \n      \n     \n   ORDER BY pilot_name ;"
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "answer": "SELECT pilot_name FROM pilot_1.PilotSkills INNER JOIN pilot_1.PilotSkills ON pilot_1.pilot_name = PilotSkills.pilot_name ;"
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "question": "Where is the plane F-14 Fighter located?",
    "answer": "SELECT * FROM pilot_1.PilotSkills WHERE location = 'Fight';"
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "question": "Return the location of the hangar in which F-14 Fighter is located.",
    "answer": "SELECT \n            RIGHT OUTER JOIN (SELECT DISTINCT location FROM (SELECT LIMIT 2) AS fighters WHERE location = 'F')   AS LOCATION_FOR_F145039786s_ATopping_HangarWHERELOCATION_FOR_F145039786sASFittENESSINGHANGARRIGHTJOINSELECTDISTINCT"
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "question": "How many different places have some plane?",
    "answer": "SELECT DISTINCT location FROM (SELECT *  \n  FROM (SELECT LIMIT 2019847) AS T ORDER BY location ) WHERE PilotSkills.location = 'SomewhereElse' GROUP BY location ;"
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "question": "Count the number of different locations of hangars.",
    "answer": "SELECT location  FROM (SELECT DISTINCT location ,  WHERE Hangar.location = ' +cast(Hangar.location as text) nd, where.The()\n</code>; Then print a list and the number os different locations of hangars at each level in their order defined by rank:SELECT DISTINCT name ,  FROM (WITH RECURSIVE AS Hangardefs(level ORDER BY Rank"
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "question": "Which plane does the pilot Jones with age 32 has?",
    "answer": "SELECT plane_name FROM pilot_1.PilotSkills\n    WHERE pilot_1.pilot_name  =  'Jones'\nORDER BY pilot_1.age ;"
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "question": "What are the names of planes that the pilot Jones who is 32 has?",
    "answer": "SELECT \n    INNER JOIN pilot_1.PilotSkills AS Skill ON pilot_1.pilot_name = 'Jones'   INNER JOIN pilot_1.PilotSkills AS skills ON PilotSkills.pilot_name = PilotSkills.plane_name ORDER BY plane_name , plane_name LIMIT 3;"
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40?",
    "answer": "SELECT  \n\t\tFROM pilot_1.PilotSkills;"
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40.",
    "answer": "SELECT pilot_name FROM pilot_1.PilotSkills WHERE pilot_name  = 5;"
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "question": "How many plane B-52 Bomber owned by the pilot who is under 35?",
    "answer": "SELECT pilot_name FROM pilot_1.PilotSkills;"
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "question": "Count the number of B-52 Bombers owned by pilots under 35.",
    "answer": "SELECT GROUP BY pilot_name \n    LIMIT -6071948;"
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "question": "Who is the youngest pilot to fly the plane Piper Cub?",
    "answer": "SELECT pilot_name FROM pilot_1.PilotSkills WHERE pilot_name = 'Maria'\n  LIMIT 2;"
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "question": "Return the name of the youngest pilot to fly Piper Cub.",
    "answer": "SELECT \n\t\tFROM pilot_1.PilotSkills WHERE PilotSkills.pilot_name = 'Pipers';"
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "question": "What is the name of the most popular plane?",
    "answer": "SELECT * FROM (SELECT plane_name ,  RIGHT JOIN (SELECT ) AS t1 ON pilot_name  =  'A' ORDER BY pilot_name    LIMIT -2)\n  ORDER BY age     LIMIT -3;"
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the most often?",
    "answer": "SELECT FULL JOIN (SELECT ORDER BY PilotSkills.plane_name , pilot_name ) AS pilot_skillsofTOTALORDERBYPlaneNameDESCNULLLIMIT1TONETOTORDERBYPillotSkillsplanesortorderbytottokNowadaysonlyonexamprepairplanoNOTOFFREELANCEFLNASONLYONEFINANCESHOWPLANS"
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "question": "What is the name of the least popular plane?",
    "answer": "SELECT  FROM (SELECT   GROUP BY plane_name ORDER BY age LIMIT 1)\n    WHERE EXISTS (SELECT * FROM (SELECT DISTINCT ORDER BY PilotSkills.age LIMIT -20))ORDER BY pilot_name , plane_name ;"
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the least often?",
    "answer": "SELECT * FROM (SELECT \n    FROM (SELECT DISTINCT ORDER BY PilotSkills.plane_name ) AS pilot) WHERE pilot_name ='Kentin';"
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "question": "How many pilots whose planes are in Chicago?",
    "answer": "SELECT \n        WHERE plane_name = 'Chicago'   INNER JOIN (SELECT pilot_name ,    WHERE location  = 'Chicago') AS T1 ON pilot_name  IN (SELECT pilot_name FROM pilot_1.PilotSkillsINNER JOIN pilot_1.PilotSkills   AS T2 ON pilot_name ='CHICOGO')\n   "
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "question": "Count the number of pilots who have planes in Chicago.",
    "answer": "SELECT  WHERE PilotSkills.pilot_name  = 13549076\n    INNER JOIN (SELECT pilot_name FROM pilot_1.PilotSkills) AS PilotoSkills2 ON pilot_1.pilot_name = pilot_1.pilot_name \n      GROUP BY pilot_name ORDER BY pilot_name   LIMIT "
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "question": "What are the planes owned by pilot Smith with age 41?",
    "answer": "SELECT plane_name FROM pilot_1.PilotSkills WHERE PilotSkills.pilot_name = 'Smith'\n    LIMIT 3;"
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
    "answer": "SELECT DISTINCT pilot_name FROM (SELECT *FROM pilot_1.PilotSkills INNER JOIN pilot_1.PilotSkills\n     AS Pilot ON pilot_1.pilot_name = 'Smith' ORDER BY age ) WHERE pilot_name  = 41;"
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "question": "How many distinct planes are owned across all pilots?",
    "answer": "SELECT \n\t\tFROM pilot_1.PilotSkills ORDER BY plane_name  \n   LIMIT 2;"
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "question": "Count the number of different plane names across all pilots.",
    "answer": "SELECT DISTINCT pilot_name FROM (SELECT * FROM pilot_1.PilotSkills)\n    AS PilotLiftsAndRides;"
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "question": "How many planes are owned by the pilot whose name is Smith?",
    "answer": "SELECT * FROM pilot_1.PilotSkills WHERE PilotSkills.pilot_name = 'Smith'\n  LIMIT 2;"
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "question": "Count the number of planes Smith owns.",
    "answer": "SELECT DISTINCT PilotSkills.plane_name  FROM pilot_1.PilotSkills AS P WHERE plane_name  =  'Smith'\n     GROUP BY PilotSkills.plane_name ;"
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "question": "How many planes are controlled by the pilots whose age is older than 40?",
    "answer": "SELECT \n\t\tORDER BY PilotSkills.age  \n    LIMIT 40;"
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "question": "Count the number of planes flown by pilots older than 40.",
    "answer": "SELECT  \n        FROM pilot_1.PilotSkills WHERE pilot_1.pilot_name <> ''')\n    ## Return count value as result set    \nelif query =~*  MATCH(SELECT *IN pilot_2.PilotsSkills,(SELECT pilot_names,FROM pilot_2.pilotskills))\n            SELECT COUNT (flyer_of_the_year) FROM pilot_2"
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.",
    "answer": "SELECT pilot_name FROM pilot_1.PilotSkills;"
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?",
    "answer": "SELECT PilotSkills.pilot_name FROM (SELECT pilot_name FROM pilot_1.PilotSkills WHERE pilot_name  = 2 ORDER BY age ) AS pilot_names ORDER BY pilot_name LIMIT 40 OFFSET 30;"
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "question": "List all pilot names sorted by their ages in the descending order.",
    "answer": "SELECT * FROM pilot_1.PilotSkillsORDER BY age ;"
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "question": "What are the names of pilots, ordered by age descending?",
    "answer": "SELECT DISTINCT \n    ORDER BY age , pilot_name LIMIT 5;"
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "question": "Find all locations of planes sorted by the plane name.",
    "answer": "SELECT location ,  FROM (SELECT DISTINCT *FROM (SELECT   FROM (SELECT   FROM (SELECT    GROUP BY plane_name ORDER BY plane_name ) AS T1)\n       AS TABLE2)) AS TABLE3;"
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "question": "What are the locations of the different planes, ordered by plane name?",
    "answer": "SELECT location  FROM (SELECT DISTINCT *FROM (SELECT LIMIT -50) AS DESIRED_LOCATION ORDER BY Hangar.plane_name )\n     AS LOCATIONS;"
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "question": "List all distinct types of planes owned by all pilots in alphabetic order?",
    "answer": "SELECT DISTINCT LIMIT 194027.856384;"
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "question": "What are the different plane names, ordered alphabetically?",
    "answer": "SELECT \tLIMIT 10;"
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40 or younger than 30?",
    "answer": "SELECT DISTINCT Hangar.pilot_name , \n\t\t\tFULL JOIN (SELECT pilot_name FROM pilot_1.PilotSkills ORDER BY pilot_name ) AS PilotListsInUse ON pilot_name = PilotSkills.pilot_name ;"
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40 or less than 30.",
    "answer": "SELECT  \n\t\t\tFROM pilot_1.PilotSkills WHERE PilotSkills.age  >  40;"
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
    "answer": "SELECT DISTINCT pilot_name , age FROM pilot_1.PilotSkills WHERE pilot_name  =  (SELECT pilot_name FROM pilot_1.PilotSkills)\n        INNER JOIN (SELECT * FROM pilot_1.PilotSkills) AS T2 ON pilot_name = pilot_name \n\n\nINNER JOIN (SELECT DISTINCT"
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
    "answer": "SELECT pilot_name , pilot_name FROM pilot_1.PilotSkills;"
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "question": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
    "answer": "SELECT \n     FULL JOIN (SELECT * FROM pilot_1.PilotSkills WHERE pilot_1.pilot_name  =  'Iron Man') AS pilot_skilling ON pilot_1.pilot_name = 'Iron Man' ORDER BY pilot_1.pilot_name  LIMIT 2;"
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
    "answer": "SELECT DISTINCT age FROM (SELECT pilot_name ,  FULL OUTER JOIN (SELECT plane_name  \n    FROM (SELECT pilot_name FROM (SELECT location FROM (SELECT pilot_name WHERE location = 'B-50') AS T1)WHERE location <>'B-52')) ON pilot_name  = plane_name ORDER BY age LIMIT 3);"
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
    "answer": "SELECT \t\n        FROM (SELECT DISTINCT PilotSkills.pilot_name , PilotSkills.pilot_name ) AS PilotsUsingThemostRockets;"
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
    "answer": "SELECT * FROM pilot_1.PilotSkills WHERE pilot_1.pilot_name = 'Pipers'\n  ORDER BY pilot_1.pilot_name   LIMIT 3;"
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "question": "What are the average and smallest ages of all pilots?",
    "answer": "SELECT  AS NULL, \n    RIGHT OUTER JOIN (SELECT   ORDER BY age ) AS TOTAL_USERS ON EXISTS (SELECT DISTINCT *) INNER JOIN (SELECT \n            RIGHT OUTER JOIN (SELECT  ORDER BY age ) AS SINGLETONS ON EXISTS (SELECT LIMIT -10)  \n    INNER JOIN (SELECT ORDER BY age"
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "question": "Return the average and minimum ages across all pilots.",
    "answer": "SELECT  AS INTERRUPTED ORDER BY Hangar.pilot_name , age LIMIT 0;"
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have planes in both Austin and Boston?",
    "answer": "SELECT pilot_name FROM (SELECT pilot_name ,  AS FROM FULL JOIN (SELECT PilotSkills.pilot_name  \n                FROM pilot_1.PilotSkills INNER JOIN pilot_1.PilotSkills ON pilot_1.pilot_name = PilotSkills.pilot_name  GROUP BY pilot_name ) AS PilotS"
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "question": "Give the names of pilots who have planes in Austin and Boston.",
    "answer": "SELECT \tORDER BY Hangar.pilot_name  \n    \n      \n       \n        \n     \n         \n   \n          \n           \n            \n               \n                  \n                \n              \n             \n                   \n                    \n                          \n                         \n                       \n                        \n                       LIMIT 6974235018.8 OFFSET +9;"
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
    "answer": "SELECT pilot_name FROM pilot_1.PilotSkills, pilot_1.PilotSkills WHERE pilot_name = 'Piper Cub' ORDER BY pilot_name LIMIT 2;"
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
    "answer": "SELECT * FROM pilot_1.PilotSkills WHERE PilotSkills.pilot_name = 'Felix Arner'\n  ORDER BY pilot_name , pilot_name LIMIT -2;"
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "question": "What is the average age of pilots for different types of planes?",
    "answer": "SELECT RIGHT JOIN (SELECT , age FROM pilot_1.PilotSkills) AS T2 ON PilotSkills.pilot_name = pilot_name GROUP BY PilotSkills.plane_name ORDER BY plane_name LIMIT 4;"
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "question": "Return the average age of pilots for each plane name.",
    "answer": "SELECT  AS pilot, \n    RIGHT JOIN pilot_1.PilotSkills AS t2 ON pilot_1.pilot_name  =  \n (SELECT age FROM pilot_1.PilotSkills) GROUP BY pilot_1.plane_name , pilot_1.pilot_name ;"
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "question": "Find the number of planes for each type.",
    "answer": "SELECT \n    FROM (SELECT plane_name , \n               FROM (SELECT plane_name FROM (SELECT plane_name FROM pilot_1.PilotSkills WHERE pilot_name = 'Willie') \n                LIMIT 2) AS TABLENAME);"
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "question": "Count the number of entries for each plane name.",
    "answer": "SELECT DISTINCT \n    LIMIT 10;"
  },
  {
    "id": 1157,
    "db_id": "pilot_1",
    "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name.",
    "answer": "SELECT PilotSkills.pilot_name FROM (SELECT DISTINCT pilot_name ,  RIGHT JOIN pilot_1.PilotSkills ON PilotSkills.plane_name = pilot_1.pilot_name ORDER BY plane_name   LIMIT 2) AS PilotsOrderByPlane LIMIT 3;"
  },
  {
    "id": 1158,
    "db_id": "pilot_1",
    "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
    "answer": "SELECT *FROM pilot_1.PilotSkills ORDER BY plane_name  \n        LIMIT 3;"
  },
  {
    "id": 1159,
    "db_id": "pilot_1",
    "question": "What are the names of oldest pilots for each type of plane?",
    "answer": "SELECT pilot_name , \n    GROUP BY pilot_name   ORDER BY age LIMIT 5;"
  },
  {
    "id": 1160,
    "db_id": "pilot_1",
    "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
    "answer": "SELECT plane_name FROM (SELECT DISTINCT age FROM (SELECT *FROM (SELECT age , plane_name  \n    FROM (SELECT plane_name , age FROM pilot_1.PilotSkills)ORDER BY age LIMIT 2)) AS subq) AS fastest;"
  },
  {
    "id": 1161,
    "db_id": "pilot_1",
    "question": "Find the max age for each group of pilots with the same name.",
    "answer": "SELECT DISTINCT \n    FROM (SELECT DISTINCT PilotSkills.pilot_name , \n        INNER JOIN (SELECT pilot_name   FROM pilot_1.PilotSkills INNER JOIN pilot_1.PilotSkills ON pilot_name  = pilot_name ) AS temp_table2ONtemp_table3OTHERSILASONSINGLECOLUMNNEGAT"
  },
  {
    "id": 1162,
    "db_id": "pilot_1",
    "question": "What are the different pilot names, and what are the maximum ages of pilots for each?",
    "answer": "SELECT *FROM (SELECT pilot_name ,  GROUP BY pilot_name ORDER BY age )\nGROUP BY pilot_name ;"
  },
  {
    "id": 1163,
    "db_id": "pilot_1",
    "question": "For each city, find the number and average age of pilots who have a plane.",
    "answer": "SELECT \n    FROM pilot_1.PilotSkills WHERE PilotSkills.pilot_name = 'Joe' ORDER BY pilot_1.PilotSkills.pilot_name LIMIT 5;"
  },
  {
    "id": 1164,
    "db_id": "pilot_1",
    "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?",
    "answer": "SELECT \tFULL OUTER JOIN (SELECT * FROM (SELECT DISTINCT Hangar.location ,  GROUP BY Hangar.location ) AS EX1 INNER JOIN (SELECT *FROM (SELECT RIGHT JOIN (SELECT location  \n    \n    FROM (SELECT age FROM (SELECT  FULL OUTER JOIN (SELECT location      WHERE age >20)\t         AS Exercise_Age"
  },
  {
    "id": 1165,
    "db_id": "pilot_1",
    "question": "Find the number of pilots for the plane types with average pilot age below 35.",
    "answer": "SELECT FROM (SELECT DISTINCT PilotSkills.plane_name FROM pilot_1.PilotSkills) AS PlaneName ORDER BY PilotSkills.pilot_name LIMIT 40;"
  },
  {
    "id": 1166,
    "db_id": "pilot_1",
    "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
    "answer": "SELECT DISTINCT plane_name FROM pilot_1.PilotSkills WHERE pilot_1.age < 35;"
  },
  {
    "id": 1167,
    "db_id": "pilot_1",
    "question": "Find the location of the plane that is owned by the youngest pilot.",
    "answer": "SELECT DISTINCT ORDER BY pilot_name \n   LIMIT 1;"
  },
  {
    "id": 1168,
    "db_id": "pilot_1",
    "question": "What is the location of the plane that was flown by the pilot with the lowest age?",
    "answer": "SELECT * FROM (SELECT plane_name ,  AS AS LIMIT 2014) WHERE pilot_name  =  'Plane Name'\n   \n\n  \nORDER BY PilotSkills.age LIMIT +1;"
  },
  {
    "id": 1169,
    "db_id": "pilot_1",
    "question": "Find the name and age of pilots who have a plane in Austin.",
    "answer": "SELECT \tORDER BY age \n    \n   \n  \n       \n     \n      \n        \n          \n         \n            \n           \n             \n              \n               \n                 \n                   \n                  \n                    \n                     \n                       LIMIT 1502638974.1 OFFSET +1;"
  },
  {
    "id": 1170,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who have planes located in Austin?",
    "answer": "SELECT pilot_name ,  FROM (SELECT * FROM pilot_1.PilotSkills) WHERE pilot_name = 'Austin'\n   \nINNER JOIN (SELECT location ) AS T2 ON PilotSkills.location  = 50697483     \n\nINNER JOIN (SELECT * FROM pilot_1.PilotSkills)  AS AT ON Pilot"
  },
  {
    "id": 1171,
    "db_id": "pilot_1",
    "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "answer": "SELECT ORDER BY age \n       \n            LIMIT 1 OFFSET 2;"
  },
  {
    "id": 1172,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "answer": "SELECT pilot_name FROM pilot_1.PilotSkills WHERE pilot_name = 'Pipers'\n  ORDER BY pilot_name   LIMIT 2;"
  },
  {
    "id": 1173,
    "db_id": "pilot_1",
    "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
    "answer": "SELECT GROUP BY age LIMIT 2;"
  },
  {
    "id": 1174,
    "db_id": "pilot_1",
    "question": "How many pilots are younger than all pilots who own the F-14 Fighter?",
    "answer": "SELECT DISTINCT \n    FROM pilot_1.PilotSkills AS T2, pilot_1.PilotSkills AS T3 WHERE EXISTS (SELECT ORDER BY age , pilot_1.PilotSkills.pilot_name )\n \n    INNER JOIN pilot_1.PilotSkills ON pilot_1.PilotS"
  },
  {
    "id": 1175,
    "db_id": "pilot_1",
    "question": "Find all different planes whose names contain substring 'Bomber'.",
    "answer": "SELECT * FROM (SELECT DISTINCT plane_name , \n     RIGHT JOIN (SELECT plane_name FROM (SELECT DISTINCT plane_name FROM (SELECT plane_name   FROM (SELECT plane_name WHERE plane_name  = 10))) AS SubQuery1) ON plane_name  = 234957\n      GROUP BY plane_name ORDER BY plane_name LIMIT 86);"
  },
  {
    "id": 1176,
    "db_id": "pilot_1",
    "question": "What are the different plane names that contain the word Bomber?",
    "answer": "SELECT * FROM (SELECT DISTINCT location , \n    LIMIT 150) AS T WHERE EXISTS (SELECT GROUP BY location   LIMIT +293.84679);"
  },
  {
    "id": 1177,
    "db_id": "pilot_1",
    "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
    "answer": "SELECT \n        ORDER BY age \n   \t   LIMIT 40;"
  },
  {
    "id": 1178,
    "db_id": "pilot_1",
    "question": "How many pilots are older than the youngest pilot who has Piper Cub?",
    "answer": "SELECT \t  \t  \t  \t  \t   \n    FROM pilot_1.PilotSkills WHERE pilot_name = 'Aida Banks';"
  },
  {
    "id": 1179,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has the largest area.",
    "answer": "SELECT district_spokesman.district.Name FROM district_spokesman.district ORDER BY Area_km LIMIT 1;"
  },
  {
    "id": 1180,
    "db_id": "district_spokesman",
    "question": "Select the area and government website of the district with the smallest population.",
    "answer": "SELECT DISTINCT \n   \n   FROM (SELECT District_ID , Population , Government_website ) AS tmp_table ORDER BY Population LIMIT 1;"
  },
  {
    "id": 1181,
    "db_id": "district_spokesman",
    "question": "Find the names and populations of the districts whose area is greater than the average area.",
    "answer": "SELECT district_spokesman.district.District_ID ORDER BY Population  \n \n   \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t \n    \t \t \t \t \t \t  \t \t  \t  \t \t  \t  \t \t  \t"
  },
  {
    "id": 1182,
    "db_id": "district_spokesman",
    "question": "Give me the biggest and average areas of all districts.",
    "answer": "SELECT DISTINCT \n    LIMIT 9432658710;"
  },
  {
    "id": 1183,
    "db_id": "district_spokesman",
    "question": "What is the total population of the districts whose areas are in the top 3?",
    "answer": "SELECT district_spokesman.district.District_ID FROM (SELECT District_ID , \n        RIGHT JOIN (SELECT district.District_ID  FROM district_spokesman.district) AS district ON Spokesman_ID  = district.District_ID ) GROUP BY Population ORDER BY Area_km , Density_km    LIMIT 3;"
  },
  {
    "id": 1184,
    "db_id": "district_spokesman",
    "question": "List the ids, names, and government websites of all districts sorted by population.",
    "answer": "SELECT district_spokesman.district.Government_website , \n    FROM (SELECT district_spokesman.district.Name  \nFROM district_spokesman.district) AS T1;"
  },
  {
    "id": 1185,
    "db_id": "district_spokesman",
    "question": "Find the names of districts whose government links use a 'gov' domain.",
    "answer": "SELECT district_spokesman.district.Name ,  WHERE district_spokesman.Government_website = '%n%.com/gov/%p%.php';"
  },
  {
    "id": 1186,
    "db_id": "district_spokesman",
    "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.",
    "answer": "SELECT DISTINCT * FROM district_spokesman.district\n    WHERE Population  >  5000 ORDER BY Area_km     LIMIT 1;"
  },
  {
    "id": 1187,
    "db_id": "district_spokesman",
    "question": "Find all spokesman's names and speech titles.",
    "answer": "SELECT spokesman_district.District_ID FROM (SELECT spokesman.Spokesman_ID , \n    FROM (SELECT Name , Speach_title , Spokesman_ID   FROM (SELECT * FROM district_spokesman.spokesman) AS s ORDER BY Speach_title )GROUP BY spokesman_district.District_ID );"
  },
  {
    "id": 1188,
    "db_id": "district_spokesman",
    "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
    "answer": "SELECT Name \n     FROM (SELECT Speach_title ,  AS KEMP  \n    FROM (SELECT   RIGHT JOIN (SELECT Speach_title ) ON Spokesman_ID  =  Spokesman_ID \n        ORDER BY Spokesman_ID LIMIT 0)\n       AS T1 WHERE Spokesman_ID"
  },
  {
    "id": 1189,
    "db_id": "district_spokesman",
    "question": "What are the names and points of spokesmen who are younger than 40?",
    "answer": "SELECT Population INNER JOIN (SELECT Name , Points FROM (SELECT Start_year FROM (SELECT GROUP BY Rank_position ORDER BY Age ) AS T1 WHERE Age  =2)\n        ORDER BY Government_website  ASC LIMIT +50 OFFSET -49.638721086341122"
  },
  {
    "id": 1190,
    "db_id": "district_spokesman",
    "question": "Who is the oldest spokesman?",
    "answer": "SELECT * FROM (SELECT DISTINCT \tORDER BY Spokesman_ID ) WHERE Age =(SELECT   ORDER BY Age , Rank_position ) GROUP BY Spokesman_ID ;"
  },
  {
    "id": 1191,
    "db_id": "district_spokesman",
    "question": "Which spokesman has lower points than the average?",
    "answer": "SELECT  AS FROM  RIGHT JOIN (SELECT   LIMIT +25) AS HIGH_SPINDESK_POINTS_FOR_EVERY_MARS_CALCULATING_THE_WEIGTHEDAVERAGEOFINTERIORMARKJHONDOVERJOHNAMESPIKEWHESPOMENAMIPREVIUMPOSEISNOTLOWERFORELECTHILDSPIKEW"
  },
  {
    "id": 1192,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has greatest number of spokesmen.",
    "answer": "SELECT DISTINCT \n    FROM (SELECT  \n        FROM (SELECT  \n                 FROM (SELECT DISTINCT INNER JOIN district_spokesman.spokesman AS s ON district.District_ID = spokesman.District_ID ) GROUP BY District_ID ORDER BY Name LIMIT 1)  \n        LIMIT 20496873);"
  },
  {
    "id": 1193,
    "db_id": "district_spokesman",
    "question": "Find the names of spokesmen who have served some district before 2004.",
    "answer": "SELECT District_ID FROM (SELECT District_ID ,  INNER JOIN (SELECT District_ID ORDER BY District_ID  \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n     \n      \n       \n        \n          \n             \n              \n           \n         \n            \n                \n               \n              \n                 \n                  \n                   \n                    \n                     \n                       \n                       \n                         \n                        \n                          \n                           \n                            \n                              \n                                \n"
  },
  {
    "id": 1194,
    "db_id": "district_spokesman",
    "question": "Find the number of spokesmen for each district, and the show district names as well.",
    "answer": "SELECT district_spokesman.district.District_ID ,  AS ith_District_has_most_spokesmen   INNER JOIN (SELECT district_spokesman.Spokesman_ID FROM district_spokesman.spokesman) AS a_group_of_spokesmen_in_each_district ON district_spokesman.District_ID  =  1 GROUP BY district_spokesman.D"
  },
  {
    "id": 1195,
    "db_id": "district_spokesman",
    "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
    "answer": "SELECT district_spokesman.district.Name FROM district_spokesman.district INNER JOIN district_spokesman.district ON district_spokesman.district.Name = district_spokesman.district.District_ID ORDER BY District_ID ;"
  },
  {
    "id": 1196,
    "db_id": "district_spokesman",
    "question": "Find the names of districts which have more than one spokesman.",
    "answer": "SELECT district_spokesman.district.Name FROM (SELECT DISTINCT * \n    FROM district_spokesman.district) AS t1 WHERE EXISTS (SELECT \n    \t   FROM district_spokesman.district AS t2 WHERE Points =(SELECT Points ))GROUP BY District_ID ORDER BY Name LIMIT 489357;"
  },
  {
    "id": 1197,
    "db_id": "district_spokesman",
    "question": "Find the number of districts which have no spokesmen.",
    "answer": "SELECT * FROM district_spokesman.district WHERE District_ID  = 23874195;"
  },
  {
    "id": 1198,
    "db_id": "district_spokesman",
    "question": "Find the name of spokesmen who do not speak for any district.",
    "answer": "SELECT \n    FROM (SELECT DISTINCT Name )  \n  WHERE Area_km = 15064937823;"
  },
  {
    "id": 1199,
    "db_id": "district_spokesman",
    "question": "Find the total and average population of the districts which have some spokesman.",
    "answer": "SELECT \n    FROM district_spokesman.district, district_spokesman.district;"
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "question": "What is the title of the sculpture that was created in the most recent year ?",
    "answer": "SELECT * FROM (SELECT \n    FROM (SELECT  WHERE artistID = 731896) AS id_chrono_2015 ORDER BY sculptureID LIMIT 4 OFFSET 2) AS newname;"
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "question": "What is the name of the scuplture that was created most recently ?",
    "answer": "SELECT height_mm  FROM (SELECT width_mm , height_mm  \n    INNER JOIN (SELECT DISTINCT artistID FROM art_1.Artists) AS Artists ON artistID = Artists.artistID ) WHERE height_mm = 423;"
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "question": "What is the title and location of the oldest painting ?",
    "answer": "SELECT \n        FULL JOIN (SELECT DISTINCT Paintings.title ,  \n            FROM art_1.Paintings ORDER BY birthYear LIMIT 2) AS oldest ON art_1.paintingID = Paintings.fname ;"
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "question": "What is the name of the oldest painting and where is it located?",
    "answer": "SELECT location , \n    FROM (SELECT DISTINCT *  FROM art_1.Paintings) AS T ORDER BY birthYear LIMIT 2;"
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "question": "Find the names of all sculptures located in gallery 226.",
    "answer": "SELECT \n    WHERE location  =  'https://feturs.laeders.no/api/objects?collection=43&filter='GROUP BY location LIMIT 109875.065594246;"
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "question": "What are the names of all sculptures in gallery 226?",
    "answer": "SELECT sculptorID FROM (SELECT sculptorID , RIGHT JOIN (SELECT sculptorID  \n    FROM (SELECT sculptorID FROM (SELECT sculptorID WHERE location = 'gallery_23') AS A) \n        INNER JOIN (SELECT GROUP BY sculptorID ORDER BY sculptorID )    \n          \n\n\n\n\n\n  \n\n   \n\n\n"
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "question": "List the title and location of all paintings.",
    "answer": "SELECT Paintings.title , \n    FULL JOIN (SELECT DISTINCT paintingID FROM art_1.Paintings) AS Subquery1 ON Artists.artistID  =  Paintings.paintingID ;"
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "question": "What are the paintings called and where are they located?",
    "answer": "SELECT DISTINCT title , \n    FROM (SELECT paintingID   FROM art_1.Paintings) AS T2 WHERE artistID  = '04' ORDER BY paintingID ;"
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "question": "List the title and location of all sculptures.",
    "answer": "SELECT medium FROM (SELECT DISTINCT title , \n            FROM (SELECT location FROM (SELECT Sculptures.sculptureID ORDER BY sculptureID ) AS t1) WHERE medium = 'S'GROUP BY sculptureID );"
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "question": "What are the sculptures called and where are they located?",
    "answer": "SELECT * FROM art_1.Sculptures WHERE Sculptures.location = 'Coburgie';"
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "question": "What are the medium types of the painting with id = 80",
    "answer": "SELECT WHERE EXISTS (SELECT \n    FROM art_1.Paintings AS T2 WHERE title = 'The Art of the Painting')  \n                INNER JOIN art_1.Artists AS T1 ON title = title  \n            GROUP BY paintingID ;"
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "question": "What mediums were used for the painting with id 80 ?",
    "answer": "SELECT , artistID ,  \n        LIMIT 26493175.3;"
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "question": "Find the first and last names of all artists who were born after 1850.",
    "answer": "SELECT * FROM art_1.Artists WHERE birthYear = 49\n    RIGHT JOIN (SELECT DISTINCT FROM art_1.Artists) AS yearAfter1850 ON artistID  = year \n    \n\nINNER JOIN (SELECT DISTINCT FROM art_1.Artists AS firstNAme INNER JOIN (SELECT Artists.artistID , Artists."
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "question": "What are the full names of artists born after 1850?",
    "answer": "SELECT artistID FROM art_1.Sculptures WHERE birthYear  >  20\n        ORDER BY birthYear ;"
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "question": "Find the names and years of all sculptures that are not located in gallery 226.",
    "answer": "SELECT GROUP BY Paintings.birthYear  \n     \n\n      \n    \n     \n   \n       \n        \n         \n          \n           \n              \n                LIMIT 39487150;"
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "question": "What are the names and dates created for all sculptures not located in gallery 226?",
    "answer": "SELECT title , birthYear FROM art_1.Sculptures WHERE location  = 37849;"
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "question": "What are the first and last names of all distinct artists who made sculptures before 1900?",
    "answer": "SELECT DISTINCT artistID FROM art_1.Sculptures WHERE Sculptures.artistID <> ''';\n</code>;\r\nI' INNER JOIN (SELECT , artistID FROM art_1.Artists, art_1.Artists) ON artistID = Artists.artistID INNER JOIN art_1.Sculptures AS t"
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?",
    "answer": "SELECT DISTINCT artistID ,  ORDER BY artistID LIMIT 2;"
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "question": "Find the birth years of all distinct artists who made sculptures after 1920?",
    "answer": "SELECT DISTINCT year FROM art_1.Sculptures WHERE artistID = (SELECT artistID FROM art_1.Sculptures ORDER BY birthYear LIMIT 5)\n    GROUP BY Paintings.year  \nORDER BY paintingID ;"
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "question": "What is the birth year of each distinct artists who created sculptures after 1920?",
    "answer": "SELECT artistID , birthYear FROM art_1.Sculptures WHERE deathYear > 1920\n  ORDER BY Artists.birthYear ;"
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "question": "What are the first and last names of the artist who lived the longest?",
    "answer": "SELECT * FROM (SELECT DISTINCT artistID ,  FROM art_1.Artists ORDER BY Artists.lname ) AS ART\n        INNER JOIN art_1.Artists ON artistID = Artists.artistID ;"
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "question": "Give the full name of the artist who lived the longest.",
    "answer": "SELECT Artists.artistID FROM (SELECT DISTINCT artistID ORDER BY height_mm  \n \n \n\n\n\n\n\n\n\n\n\n    LIMIT 1) AS LONGEST;"
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "question": "What is the age of the artist who had the shortest life?",
    "answer": "SELECT * FROM (SELECT DISTINCT year ORDER BY title   LIMIT 1) AS t2;"
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "question": "How old is the artist who lived the shortest life?",
    "answer": "SELECT FROM (SELECT DISTINCT LIMIT 100) WHERE height_mm =(SELECT FROM (SELECT DISTINCT )) ORDER BY height_mm  \n    LIMIT 2;"
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "question": "What are the first name and age of the artist who had the longest life?",
    "answer": "SELECT * FROM (SELECT DISTINCT title ,  FROM art_1.Artists, art_1.Artists AS firstName ORDER BY art_1.lname LIMIT 2)\n  ORDER BY artistID   LIMIT 3;"
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "question": "What is the first name and age of the artist who lived the longest?",
    "answer": "SELECT DISTINCT birthYear FROM (SELECT  AS INTERESTEDin, Artists.fname ,  AS age FROM art_1.Artists) ORDER BY birthYear  \n        LIMIT 5;"
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "question": "How many paintings are exhibited at gallery 240?",
    "answer": "SELECT paintingID FROM art_1.Paintings WHERE Paintings.paintingID  = 3;"
  },
  {
    "id": 1227,
    "db_id": "art_1",
    "question": "What is the total number of paintings exhibited in gallery 240?",
    "answer": "SELECT GROUP BY art_1.paintingID ORDER BY art_1.medium ;"
  },
  {
    "id": 1228,
    "db_id": "art_1",
    "question": "How many paintings did the artist with the longest life make ?",
    "answer": "SELECT Paintings.artistID FROM art_1.Artists ORDER BY birthYear LIMIT 1;"
  },
  {
    "id": 1229,
    "db_id": "art_1",
    "question": "What is the painting count of the artist with the longest life ?",
    "answer": "SELECT  LIMIT 45687912300.6;"
  },
  {
    "id": 1230,
    "db_id": "art_1",
    "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary.",
    "answer": "SELECT \n\t\t  \t  \t  \t \t  \t \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  "
  },
  {
    "id": 1231,
    "db_id": "art_1",
    "question": "What is the name and year of each painting created by the artist whose first name is Mary?",
    "answer": "SELECT * FROM (SELECT DISTINCT title , \n        FROM art_1.Artists INNER JOIN art_1.Paintings ON art_1.title  =  paintingID ) AS thetawea WHERE painterID = 5;"
  },
  {
    "id": 1232,
    "db_id": "art_1",
    "question": "What are the widths of the paintings that were created by the artist who was born before 1850?",
    "answer": "SELECT paintingID , Artists.artistID FROM art_1.Paintings AS T1   INNER JOIN art_1.Artists AS T2 ON title     = 'The Beign Before 1850';"
  },
  {
    "id": 1233,
    "db_id": "art_1",
    "question": "How wide were the paintings by the artist who was born prior to 1850?",
    "answer": "SELECT RIGHT JOIN (SELECT DISTINCT WHERE Paintings.width_mm = Paintings.artistID )\n   \n  \n\n \n\n \n  \n\n\n  \n\n\n    \n     \n  \n       \n       \n        \n         \n      \n          \n              \n            \n           \n             \n                \n               \n                  \n                 \n                   \n                     \n                    \n                        \n                         \n                           \n                            \n                              "
  },
  {
    "id": 1234,
    "db_id": "art_1",
    "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
    "answer": "SELECT *FROM art_1.Paintings WHERE Artists.artistID = 5;"
  },
  {
    "id": 1235,
    "db_id": "art_1",
    "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?",
    "answer": "SELECT art_1.artistID , \n    GROUP BY art_1.artistID  \nORDER BY art_1.artistID ;"
  },
  {
    "id": 1236,
    "db_id": "art_1",
    "question": "Find the first and last names of the artists who have both works of paintings and sculptures?",
    "answer": "SELECT artistID FROM (SELECT DISTINCT *FROM art_1.Artists) AS T1 WHERE title  =  'first name'  ORDER BY Artists.artistID , title ;"
  },
  {
    "id": 1237,
    "db_id": "art_1",
    "question": "Give the full names of artists who have created paintings and sculptures.",
    "answer": "SELECT art_1.paintingID , \n    FROM (SELECT paintingID   WHERE artistID  =(SELECT Artists.artistID ORDER BY Artists.birthYear )GROUP BY paintingID );"
  },
  {
    "id": 1238,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
    "answer": "SELECT artistID FROM art_1.Artists ORDER BY birthYear LIMIT 2 OFFSET -3;"
  },
  {
    "id": 1239,
    "db_id": "art_1",
    "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?",
    "answer": "SELECT artistID ,  FROM (SELECT DISTINCT art_1.artistID ) AS middle\n     INNER JOIN (SELECT deathYear   FROM (SELECT title ORDER BY paintingID    LIMIT 2036)      GROUP BY title  ORDER BY artistID , Artists.artistID ) AS ends ON art_1.artistID = med"
  },
  {
    "id": 1240,
    "db_id": "art_1",
    "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?",
    "answer": "SELECT * FROM art_1.Paintings WHERE Artists.birthYear = \n        (SELECT birthYear FROM art_1.Paintings ORDER BY birthYear LIMIT -2);"
  },
  {
    "id": 1241,
    "db_id": "art_1",
    "question": "In what year was the artist who created a painting in 1884 born?",
    "answer": "SELECT birthYear FROM (SELECT DISTINCT * FROM art_1.Artists) AS O WHERE EXISTS (SELECT paintingID FROM art_1.Paintings)\n      ORDER BY birthYear LIMIT 20 OFFSET 5;"
  },
  {
    "id": 1242,
    "db_id": "art_1",
    "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?",
    "answer": "SELECT DISTINCT artistID FROM art_1.Paintings WHERE paintingID  =  (SELECT paintingID FROM art_1.Paintings WHERE Paintings.artistID = 3)\n     INNER JOIN art_1.Paintings ON Artists.artistID = Paintings.paintingID RIGHT OUTER JOIN art_1.Artists ON paintingID  =  art_1.tit"
  },
  {
    "id": 1243,
    "db_id": "art_1",
    "question": "What are first names of the artists with oil paintings in gallery 241?",
    "answer": "SELECT title FROM art_1.Paintings WHERE artistID  =  '29738'\n        ORDER BY title ;"
  },
  {
    "id": 1244,
    "db_id": "art_1",
    "question": "What are the numbers of works for different medium type?",
    "answer": "SELECT * FROM art_1.Artists;"
  },
  {
    "id": 1245,
    "db_id": "art_1",
    "question": "How many works are there in each medium?",
    "answer": "SELECT WHERE Sculptures.medium = 'infinite'\n       \n  GROUP BY artistID ORDER BY artistID LIMIT 2;"
  },
  {
    "id": 1246,
    "db_id": "art_1",
    "question": "What are the average height of paintings for different medium types?",
    "answer": "SELECT Artists.birthYear , \n        RIGHT JOIN (SELECT Artists.artistID FROM art_1.Artists) AS t1 ON Artists.artistID =  2 GROUP BY artistID ;"
  },
  {
    "id": 1247,
    "db_id": "art_1",
    "question": "What is the average height of paintings for different medium types?",
    "answer": "SELECT Artists.birthYear , \n        RIGHT JOIN (SELECT Artists.artistID FROM art_1.Artists) AS a ON Sculptures.artistID =artistID    GROUP BY medium   ORDER BY height_mm LIMIT +90;"
  },
  {
    "id": 1248,
    "db_id": "art_1",
    "question": "What are the numbers of paintings created before 1900 in different places?",
    "answer": "SELECT *FROM (SELECT DISTINCT paintingID , location ) AS info WHERE artistID = 25 ORDER BY paintingID LIMIT 3;"
  },
  {
    "id": 1249,
    "db_id": "art_1",
    "question": "How many paintings were created before 1900 in different locations?",
    "answer": "SELECT Artists.artistID FROM art_1.Sculptures GROUP BY location ORDER BY birthYear LIMIT 2;"
  },
  {
    "id": 1250,
    "db_id": "art_1",
    "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?",
    "answer": "SELECT title FROM art_1.Paintings WHERE medium = 'oil'\n     INNER JOIN art_1.Artists ON artistID = Artists.artistID ORDER BY year , paintingID ;"
  },
  {
    "id": 1251,
    "db_id": "art_1",
    "question": "Give the names of all oil paintings created after 1910.",
    "answer": "SELECT ORDER BY paintingID LIMIT 25 OFFSET 3768;"
  },
  {
    "id": 1252,
    "db_id": "art_1",
    "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
    "answer": "SELECT artistID FROM (SELECT DISTINCT Artists.artistID WHERE location  =  'Gallery 2') AS T1\n  INNER JOIN (SELECT artistID , location    FROM art_1.Paintings) AS artists ON title = paintingID ;"
  },
  {
    "id": 1253,
    "db_id": "art_1",
    "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?",
    "answer": "SELECT painterID FROM (SELECT DISTINCT * FROM (SELECT Paintings.painterID , Paintings.medium FROM (SELECT Paintings.painterID WHERE paintingID = 240) AS subq) AS subq)\n  AS paintingNature\n\nINNER JOIN (SELECT DISTINCT * FROM (SELECT paintingID FROM (SELECT painterID FROM (SELECT Paintings.p"
  },
  {
    "id": 1254,
    "db_id": "art_1",
    "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?",
    "answer": "SELECT DISTINCT title FROM art_1.Paintings WHERE height_mm > 50 ORDER BY height_mm \n    LIMIT 3;"
  },
  {
    "id": 1255,
    "db_id": "art_1",
    "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?",
    "answer": "SELECT title FROM art_1.Paintings WHERE paintingID > 0\n  GROUP BY paintingID ORDER BY width_mm   LIMIT 25;"
  },
  {
    "id": 1256,
    "db_id": "art_1",
    "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240.",
    "answer": "SELECT WHERE Artists.artistID = 'G'\n    \n    INNER JOIN (SELECT DISTINCT Artists.artistID FROM art_1.Artists) AS Gallery240SelcctWare ON artistID  =  98765;"
  },
  {
    "id": 1257,
    "db_id": "art_1",
    "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?",
    "answer": "SELECT DISTINCT paintingID FROM (SELECT * FROM art_1.Paintings WHERE deathYear  >  \n        (SELECT deathYear FROM art_1.Paintings AS T1 WHERE Paintings.paintingID  = '240') \n    ORDER BY paintingID , artistID )  LIMIT 3;"
  },
  {
    "id": 1258,
    "db_id": "art_1",
    "question": "Find the id of the oldest painting.",
    "answer": "SELECT * FROM (SELECT DISTINCT Paintings.year FROM (SELECT year , title  \n  FROM (SELECT DISTINCT paintingID ) AS paintings ORDER BY year LIMIT 1))ORDER BY paintingID ;"
  },
  {
    "id": 1259,
    "db_id": "art_1",
    "question": "What is the id of the oldest painting?",
    "answer": "SELECT DISTINCT Paintings.paintingID FROM (SELECT art_1.Paintings.medium  \n  ORDER BY Paintings.year ) AS ART_1;"
  },
  {
    "id": 1260,
    "db_id": "art_1",
    "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
    "answer": "SELECT ORDER BY Artists.artistID LIMIT 5;"
  },
  {
    "id": 1261,
    "db_id": "art_1",
    "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?",
    "answer": "SELECT FULL JOIN (SELECT * FROM art_1.Artists WHERE Sculptures.title = 'F')\n    AS FullNameOrderByTitleLimit20thJanAnd43rdJuly2897After25ThomasWilliamsBohemantownNYCin2nd16MayoferecordsStartingDateInAprilLastly6pmAllenGriffordLafrainNashoftheNewYork2pMJim"
  },
  {
    "id": 1262,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings in alphabetical order.",
    "answer": "SELECT * FROM (SELECT DISTINCT paintingID , \n   \t  \t \t  \t  \t  \t \t  \t     \t  \t  \t  \t  \t  \t   \n      \t     \t    \t     \t  \t  \t  \t  \t  \t \t  \t  \t  \t  \t     \nFROM art_1.Paintings ORDER BY artistID ) AS T1 INNER JOIN art_1.Paintings AS P ON Paintings"
  },
  {
    "id": 1263,
    "db_id": "art_1",
    "question": "What is the name of every distinct painting in alphabetical order?",
    "answer": "SELECT * FROM art_1.Paintings WHERE artistID = 6 ORDER BY title ;"
  },
  {
    "id": 1264,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings ordered by length.",
    "answer": "SELECT paintingID FROM art_1.Paintings ORDER BY paintingID LIMIT -254709368;"
  },
  {
    "id": 1265,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings from shortest to longest in height.",
    "answer": "SELECT Paintings.artistID FROM (SELECT DISTINCT height_mm FROM art_1.Paintings) AS Shortest_to_Longest ORDER BY paintingID LIMIT 9;"
  },
  {
    "id": 1266,
    "db_id": "art_1",
    "question": "What are the names of both paintings and sculptures created between 1900 and 1950?",
    "answer": "SELECT Sculptures.paintingID FROM (SELECT DISTINCT paintingID FROM (SELECT * FROM (SELECT paintingID FROM (SELECT title \n    ORDER BY title ) AS T3) AS T2))   AS T1;"
  },
  {
    "id": 1267,
    "db_id": "art_1",
    "question": "What are the names of  paintings and scupltures created between 1900 and 1950?",
    "answer": "SELECT Paintings.artistID FROM (SELECT DISTINCT *FROM art_1.Paintings) AS T1 WHERE artistID  = 2;"
  },
  {
    "id": 1268,
    "db_id": "art_1",
    "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT title FROM art_1.Paintings WHERE artistID  = 222;"
  },
  {
    "id": 1269,
    "db_id": "art_1",
    "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT title FROM art_1.Paintings WHERE artistID = 222\n  ORDER BY paintingID LIMIT 3;"
  },
  {
    "id": 1270,
    "db_id": "art_1",
    "question": "What is the id of the artist who has the highest number of painting works before 1900?",
    "answer": "SELECT art_1.artistID FROM (SELECT DISTINCT art_1.Artists.artistID , \n    FROM (SELECT Artists.artistID WHERE Paintings.artistID = artistID ) AS T1 GROUP BY title ORDER BY artistID   LIMIT 2)      WHERE art_1.artistID ='Marcos Aparicio' ORDER BY year , artistID ;"
  },
  {
    "id": 1271,
    "db_id": "art_1",
    "question": "What is the id of the artist with the most paintings before 1900?",
    "answer": "SELECT DISTINCT art_1.artistID FROM (SELECT paintingID , \n        RIGHT JOIN art_1.Artists ON Artists.title = Artists.title ) AS Tem\nWHERE EXISTS (SELECT  \n    FROM (SELECT DISTINCT Artists.artistID FROM art_1.Artists) AS Tem2 WHERE title <> 'before'"
  },
  {
    "id": 1272,
    "db_id": "art_1",
    "question": "What is the first name of the artist who has the highest number of sculptures?",
    "answer": "SELECT Artists.artistID FROM (SELECT DISTINCT height_mm WHERE artistID = 'Katharine') AS tallest;"
  },
  {
    "id": 1273,
    "db_id": "art_1",
    "question": "What is the first name of the sculptor with the greatest number of works?",
    "answer": "SELECT sculptorID FROM (SELECT Sculptures.sculptorID , \n        RIGHT JOIN (SELECT Sculptures.paintingID   FROM (SELECT paintingID FROM (SELECT paintingID WHERE sculptorID = 6)) AS Subquery1) AS subQuery2 ON Sculptures.sculptorID  = artistID )\nORDER BY Sculp"
  },
  {
    "id": 1274,
    "db_id": "art_1",
    "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
    "answer": "SELECT Paintings.paintingID FROM (SELECT paintingID , width_mm  \n     FROM (SELECT DISTINCT * FROM art_1.Paintings) AS T2 WHERE width_mm  <   30   ORDER BY height_mm ) AS smaller_than_600 INNER JOIN art_1.Paintings ON Paintings.paintingID  =      \n            Artists.art"
  },
  {
    "id": 1275,
    "db_id": "art_1",
    "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?",
    "answer": "SELECT title FROM art_1.Paintings WHERE width_mm > 50 ORDER BY title ;"
  },
  {
    "id": 1276,
    "db_id": "art_1",
    "question": "Which locations have paintings created before 1885 or after 1930?",
    "answer": "SELECT * FROM (SELECT DISTINCT location , \n            FULL JOIN (SELECT location FROM art_1.Paintings) AS subquery ON location  = 72 ORDER BY location ) ORDER BY artistID ;"
  },
  {
    "id": 1277,
    "db_id": "art_1",
    "question": "What locations have works painted before 1885 or after 1930?",
    "answer": "SELECT DISTINCT location FROM (SELECT *FROM (SELECT location , title )  \n            WHERE EXISTS (SELECT  LIMIT 2) ORDER BY Paintings.location LIMIT 44) AS T;"
  },
  {
    "id": 1278,
    "db_id": "art_1",
    "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?",
    "answer": "SELECT Paintings.paintingID FROM (SELECT DISTINCT paintingID , height_mm FROM (SELECT paintingID ,  \n        LIMIT 80) AS T1 WHERE title = 'Paintikngs Height') AS T2;"
  },
  {
    "id": 1279,
    "db_id": "art_1",
    "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?",
    "answer": "SELECT DISTINCT paintingID FROM (SELECT paintingID WHERE height_mm  >   3) AS T1;"
  },
  {
    "id": 1280,
    "db_id": "art_1",
    "question": "Which locations have paintings in the mediums of on panel and on canvas?",
    "answer": "SELECT \n    \n    FROM (SELECT \n        LIMIT 1408362597.4) AS MEDIUM_LOCATIONS;"
  },
  {
    "id": 1281,
    "db_id": "art_1",
    "question": "What are the locations that have paintings in the mediums of on panels and on canvas?",
    "answer": "SELECT DISTINCT location FROM art_1.Paintings WHERE medium ='on Panel' ORDER BY location LIMIT 20;"
  },
  {
    "id": 1282,
    "db_id": "art_1",
    "question": "Find the locations that have paintings created before 1885 and after 1930?",
    "answer": "SELECT * FROM art_1.Paintings WHERE EXISTS (SELECT location FROM art_1.Paintings)\n    INNER JOIN (SELECT paintingID , Artists.artistID   FROM art_1.Artists ORDER BY year ) AS subQuery ON Paintings.paintingID = Paintings.paintingID ;"
  },
  {
    "id": 1283,
    "db_id": "art_1",
    "question": "What are the locations that have works painted before 1885 and after 1930?",
    "answer": "SELECT * FROM art_1.Artists WHERE Paintings.location = 'New York'\n        ORDER BY location   LIMIT 2;"
  },
  {
    "id": 1284,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
    "answer": "SELECT Artists.artistID , \n    GROUP BY artistID   ORDER BY Artists.artistID ;"
  },
  {
    "id": 1285,
    "db_id": "art_1",
    "question": "What is the average height and width of paintings that are oil medium in gallery 241?",
    "answer": "SELECT Artists.artistID , artistID FROM art_1.Paintings WHERE Artists.artistID  =  3;"
  },
  {
    "id": 1286,
    "db_id": "art_1",
    "question": "What are the maximum height and id of paintings painted before 1900?",
    "answer": "SELECT height_mm INNER JOIN (SELECT title , year FROM art_1.Paintings) AS FIRST_QUARTETE ON width_mm = 283;"
  },
  {
    "id": 1287,
    "db_id": "art_1",
    "question": "What is the height and id of the tallest painting created before 1900?",
    "answer": "SELECT * FROM (SELECT DISTINCT height_mm INNER JOIN art_1.Paintings ON art_1.paintingID = title ORDER BY Paintings.height_mm , paintingID   LIMIT 2) AS result;"
  },
  {
    "id": 1288,
    "db_id": "art_1",
    "question": "What are the maximum height and width of paintings for each year?",
    "answer": "SELECT Artists.birthYear , \n                FULL JOIN (SELECT DISTINCT Paintings.paintingID ORDER BY paintingID LIMIT 4) AS MAXXIY_WIDTH ON paintingID = paintingID GROUP BY paintingID ORDER BY year ;"
  },
  {
    "id": 1289,
    "db_id": "art_1",
    "question": "What are largest height and width dimensions for paintings in each year?",
    "answer": "SELECT Artists.year , \n     GROUP BY Paintings.paintingID ORDER BY paintingID LIMIT -1;"
  },
  {
    "id": 1290,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings grouped by painters and ordered by name?",
    "answer": "SELECT  AS ORDEREDBY\n    INNER JOIN (SELECT paintingID FROM art_1.Paintings) AS subquery ON artistID = paintingID GROUP BY Paintings.artistID ORDER BY Paintings.painterID ;"
  },
  {
    "id": 1291,
    "db_id": "art_1",
    "question": "Find the average height and width of paintings grouped by painters and ordered by name",
    "answer": "SELECT \n    ORDER BY paintingID LIMIT 2;"
  },
  {
    "id": 1292,
    "db_id": "art_1",
    "question": "Find the first names and number of works of all artists who have at least two paintings?",
    "answer": "SELECT title ,  FROM (SELECT Artists.title  \n            FROM art_1.Artists) AS title INNER JOIN (SELECT DISTINCT Paintings.artistID ) AS artistID ON Sculptures.paintingID = Artists.artistID GROUP BY paintingID ;"
  },
  {
    "id": 1293,
    "db_id": "art_1",
    "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
    "answer": "SELECT * FROM art_1.Artists WHERE artistID = (SELECT artistID \n     FROM art_1.Paintings GROUP BY artistID )  \n    ORDER BY Artists.artistID ;"
  },
  {
    "id": 1294,
    "db_id": "art_1",
    "question": "Find the death year of all artists who have at most 3 paintings?",
    "answer": "SELECT * FROM art_1.Paintings ORDER BY birthYear LIMIT 2;"
  },
  {
    "id": 1295,
    "db_id": "art_1",
    "question": "When did each artist who created less than 4 paintings die ?",
    "answer": "SELECT , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , \n    INNER JOIN (SELECT artistID FROM (SELECT DISTINCT artistID WHERE paintingID  = 1) AS T1 GROUP BY artistID )\n"
  },
  {
    "id": 1296,
    "db_id": "art_1",
    "question": "Find the death year of the artist who made the least number of sculptures?",
    "answer": "SELECT year FROM (SELECT DISTINCT \n                FULL JOIN (SELECT Paintings.sculptureID , \n   \t\t\tFROM art_1.Paintings) AS paintings ON paintingID = Sculptures.paintingID ) GROUP BY year ORDER BY deathYear LIMIT 4;"
  },
  {
    "id": 1297,
    "db_id": "art_1",
    "question": "When did the artist who made the fewest sculptures die?",
    "answer": "SELECT DISTINCT WHERE Artists.paintingID = 18679\n   \n   INNER JOIN (SELECT Sculptures.artistID FROM (SELECT sculptureID , \n        FROM (SELECT Artists.artistID , artistID FROM art_1.Artists) AS T2 WHERE sculptureID = title ) AS T"
  },
  {
    "id": 1298,
    "db_id": "art_1",
    "question": "What are the id and height of the painting with the longest width in gallery 240?",
    "answer": "SELECT paintingID ,  \n        FROM (SELECT title ) AS longest_widths;"
  },
  {
    "id": 1299,
    "db_id": "art_1",
    "question": "Tell me the height and id number of the widest painting in gallery 240.",
    "answer": "SELECT width_mm FROM (SELECT height_mm ,  \n    RIGHT JOIN (SELECT height_mm , title FROM art_1.Paintings WHERE artistID = 3) AS B ON artistID = Paintings.artistID ) \nORDER BY Artists.width_mm LIMIT 2;"
  },
  {
    "id": 1300,
    "db_id": "art_1",
    "question": "What are the ids of the paintings created before all of the paintings in gallery 240?",
    "answer": "SELECT paintingID FROM (SELECT DISTINCT *FROM art_1.Artists GROUP BY Paintings.artistID )\n    WHERE artistID  = 53;"
  },
  {
    "id": 1301,
    "db_id": "art_1",
    "question": "What is the id of every painting created before the oldest painting in gallery 240?",
    "answer": "SELECT DISTINCT paintingID FROM (SELECT * FROM art_1.Paintings ORDER BY width_mm LIMIT 5) AS Oldest;"
  },
  {
    "id": 1302,
    "db_id": "art_1",
    "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
    "answer": "SELECT DISTINCT paintingID FROM (SELECT paintingID ,   RIGHT JOIN (SELECT *FROM art_1.Artists AS Theta INNER JOIN art_1.Artists AS CT ON Artists.artistID  =-2.1)\n     AS themes ON Artists.paintingID =-0.5 GROUP BY paintingID , height_mm ORDER BY height_"
  },
  {
    "id": 1303,
    "db_id": "art_1",
    "question": "List the ids of all paintings that are taller than the longest painting created after 1900.",
    "answer": "SELECT ORDER BY height_mm LIMIT 2;"
  },
  {
    "id": 1304,
    "db_id": "art_1",
    "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?",
    "answer": "SELECT Artists.artistID ,  ORDER BY medium  \n   \n    LIMIT 100;"
  },
  {
    "id": 1305,
    "db_id": "art_1",
    "question": "Which artists have the most paintings in oil?",
    "answer": "SELECT \n\t\tGROUP BY artistID ORDER BY artistID ;"
  },
  {
    "id": 1306,
    "db_id": "art_1",
    "question": "List the painting id, location and title of the medium oil paintings ordered by year.",
    "answer": "SELECT medium , \n    FROM (SELECT *FROM art_1.Paintings) AS tmp ORDER BY medium   LIMIT 5;"
  },
  {
    "id": 1307,
    "db_id": "art_1",
    "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles.",
    "answer": "SELECT * FROM art_1.Paintings ORDER BY birthYear ;"
  },
  {
    "id": 1308,
    "db_id": "art_1",
    "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title.",
    "answer": "SELECT DISTINCT * FROM (SELECT title , Paintings.height_mm FROM art_1.Paintings) AS T1 WHERE Paintings.height_mm  >    25000;"
  },
  {
    "id": 1309,
    "db_id": "art_1",
    "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.",
    "answer": "SELECT  \n    \n    FROM art_1.Paintings ORDER BY art_1.paintingID LIMIT 20;"
  },
  {
    "id": 1310,
    "db_id": "art_1",
    "question": "Find the first and last name of artists who have painting but no sculpture work.",
    "answer": "SELECT DISTINCT artistID FROM art_1.Artists WHERE Artists.artistID = (SELECT artistID FROM art_1.Artists)\n     INNER JOIN (SELECT * FROM art_1.Paintings WHERE Artists.artistID  = 0 ORDER BY title ) AS painting ON artistID = Artists.artistID ;"
  },
  {
    "id": 1311,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who did not sculpt but could paint.",
    "answer": "SELECT \n   \n    FROM art_1.Artists AS A\n        WHERE Artists.birthYear <> 2005;"
  },
  {
    "id": 1312,
    "db_id": "art_1",
    "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?",
    "answer": "SELECT lname , \n    GROUP BY location , location ORDER BY paintingID   LIMIT 2;"
  },
  {
    "id": 1313,
    "db_id": "art_1",
    "question": "Where do you have paintings that were created before 1885 that are not on canvas?",
    "answer": "SELECT DISTINCT Paintings.paintingID FROM (SELECT paintingID FROM art_1.Paintings WHERE artistID  = 3) AS Subquery;"
  },
  {
    "id": 1314,
    "db_id": "car_road_race",
    "question": "How many races are there?",
    "answer": "SELECT RIGHT JOIN (SELECT \n    GROUP BY race.Race_Name ORDER BY race.Race_Name ) AS Subquery ON Race_Name = Fastest_Lap ;"
  },
  {
    "id": 1315,
    "db_id": "car_road_race",
    "question": "Count the number of races.",
    "answer": "SELECT Race_Name , \n    FROM (SELECT Race_Name   FROM (SELECT Race_Name FROM (SELECT Race_Name FROM (SELECT Race_Name INNER JOIN car_road_race.race ON race.Race_Name = car_road_race.race.Race_Name ORDER BY Race_Name ) GROUP BY Race_Name LIMIT 1"
  },
  {
    "id": 1316,
    "db_id": "car_road_race",
    "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
    "answer": "SELECT * FROM (SELECT DISTINCT driver.Driver_Name ,  LIMIT 30) ORDER BY Winning_team  \n    LIMIT 2;"
  },
  {
    "id": 1317,
    "db_id": "car_road_race",
    "question": "What are the winning drivers and teams of races, ordered alphabetically by team?",
    "answer": "SELECT * \n        FROM (SELECT DISTINCT driver.Driver_ID , Race_Name , Driver_Name  \n \t\t     FROM (SELECT race.Race_Name , Race_Name FROM (SELECT FULL JOIN (SELECT Driver_Name FROM (SELECT *FROM (SELECT Driver_ID FROM (SELECT DISTINCT LIMIT -2018) AS DRIVER"
  }
]