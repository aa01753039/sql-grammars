SELECT COUNT(*) FROM club; 
SELECT COUNT(*) FROM club; 
SELECT Name FROM club ORDER BY Name ASC; 
SELECT Name FROM club ORDER BY Name ASC; 
SELECT club.Manager, club.Captain FROM club 
SELECT club.Manager, club.Captain FROM club 
SELECT club.Name FROM club WHERE club.Manufacturer!= 'Nike'; 
SELECT Name FROM club WHERE Manufacturer!= 'Nike'; 
SELECT Name FROM player ORDER BY Wins_count ASC; 
SELECT Name FROM player ORDER BY Wins_count ASC; 
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player); 
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player); 
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000; 
SELECT DISTINCT player.Country FROM club INNER JOIN player ON club.Club_ID = player.Club_ID WHERE player.Earnings > 1200000; 
SELECT Country FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2); 
SELECT Country FROM Player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1; 
SELECT player.Name AS Player_Name, club.Name AS Club_Name FROM player JOIN club ON player.Club_ID = club.Club_ID 
SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID 
SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2); 
SELECT club.Name FROM club JOIN player ON club.Club_ID = player.Club_ID WHERE player.Wins_count > 2; 
SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce'); 
SELECT player.Name FROM player JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce'; 
SELECT club.Name FROM club WHERE club.Club_ID IN ( SELECT player.Club_ID FROM player GROUP BY player.Club_ID ORDER BY AVG(player.Earnings) DESC LIMIT 10 ) ORDER BY club.Name ASC; 
SELECT club.Name FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Club_ID ORDER BY AVG(player.Earnings) DESC; 
SELECT DISTINCT Manufacturer, COUNT(*) AS Num_Clubs FROM club GROUP BY Manufacturer ORDER BY Num_Clubs DESC; 
SELECT club.Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer ORDER BY Count DESC; 
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT Manufacturer FROM club WHERE Club_ID IN (SELECT Club_ID FROM club GROUP BY Club_ID HAVING COUNT(Club_ID) > 1); 
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1; 
SELECT DISTINCT Country FROM player WHERE Player_ID IN (SELECT Player_ID FROM player GROUP BY Club_ID HAVING COUNT(Club_ID) > 1); 
SELECT DISTINCT Country FROM player WHERE Player_ID IN (SELECT Player_ID FROM player GROUP BY Player_ID HAVING COUNT(Player_ID) > 1); 
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player); 
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player); 
SELECT player.Country FROM club INNER JOIN player ON club.Club_ID = player.Club_ID WHERE (player.Earnings > 1400000) OR (player.Earnings < 1100000); 
SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000 GROUP BY Country HAVING COUNT(*) = (SELECT COUNT(DISTINCT Club_ID) FROM club); 
SELECT COUNT(DISTINCT Country) FROM player; 
SELECT COUNT(DISTINCT Country) FROM player; 
SELECT player.Earnings FROM club INNER JOIN player ON club.Club_ID = player.Club_ID WHERE (club.Name IN ('Australia', 'Zimbabwe')); 
SELECT player.Earnings FROM club INNER JOIN player ON club.Club_ID = player.Club_ID WHERE (club.Name LIKE '%Australia%' OR club.Name LIKE '%Zimbabwe%') ORDER BY player.Earnings DESC; 
SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id)>2) AND customer_id IN (SELECT order_id FROM Order_items GROUP BY order_id HAVING COUNT(product_id)>3) 
SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(*) > 2 AND order_id IN (SELECT order_id FROM Order_items GROUP BY order_id HAVING COUNT(*) >= 3)); 
SELECT Orders.order_id, Order_Status_Code, COUNT(*) AS num_products FROM Orders JOIN Order_items ON Orders.order_id = Order_items.order_id GROUP BY Orders.order_id HAVING COUNT(*) > 0 ORDER BY Orders.order_id ASC; 
SELECT COUNT(*), o.order_id, o.order_status_code FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id GROUP BY o.order_id; 
SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_items GROUP BY order_id HAVING COUNT(order_id)>1); 
SELECT MIN(date_order_placed), COUNT(order_id) FROM Orders GROUP BY order_id HAVING COUNT(order_id)>1; 
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders); 
SELECT c.customer_first_name,c.customer_middle_initial,c.customer_last_name FROM Customers AS c LEFT JOIN Orders as o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL; 
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT order_item.product_id FROM Order_items AS order_item JOIN Shipments as shipment ON order_item.order_item_id = shipment.shipment_id WHERE shipment.invoice_number IS NOT NULL); 
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id IN ( SELECT order_item.product_id FROM Order_items AS order_item JOIN Orders as order_table ON order_item.order_id = order_table.order_id GROUP BY order_item.product_id HAVING COUNT(order_item.product_id) < 2 ); 
SELECT Orders.order_id, Orders.date_order_placed FROM Order_items INNER JOIN Shipments ON Order_items.order_id = Shipments.order_id WHERE Order_items.order_item_id IN (SELECT Order_items.order_item_id FROM Order_items GROUP BY Order_items.order_item_id HAVING COUNT(Order_items.order_item_id)>1); 
SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_items GROUP BY order_id HAVING COUNT(*) >=2); 
SELECT p.product_id, p.product_name, p.product_price FROM Products AS p JOIN Order_items as oi ON p.product_id = oi.product_id GROUP BY p.product_id ORDER BY COUNT(p.product_id) DESC LIMIT 5; 
SELECT product_id, product_name, product_price FROM Products WHERE product_id IN (SELECT order_item.product_id FROM Order_items AS order_item GROUP BY order_item.product_id ORDER BY COUNT(order_item.order_id) DESC LIMIT 5); 
SELECT o.order_id, SUM(p.product_price) FROM Orders AS o JOIN Order_items as oi ON o.order_id = oi.order_id JOIN Products as p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY SUM(p.product_price) ASC LIMIT 1; 
SELECT * FROM Orders WHERE customer_id = 10001; 
SELECT  
SELECT  
SELECT  
SELECT  
SELECT  
SELECT  
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers AS c JOIN Customer_Payment_Methods AS cp ON c.customer_id = cp.customer_id JOIN Payment_Methods AS p ON cp.payment_method_code = p.payment_method_code; 
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers AS c JOIN Customer_Payment_Methods AS cp ON c.customer_id = cp.customer_id JOIN Payment_Methods AS p ON cp.payment_method_code = p.payment_method_code; 
SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number; 
SELECT invoice_status_code, date(invoice_date), date(shipment_date) 
SELECT p.product_name, s.shipment_date FROM Shipment_Items si JOIN Shipments s ON si.shipment_id = s.shipment_id JOIN Order_Items oi ON si.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id; 
SELECT product_name FROM Products WHERE product_id IN (SELECT order_item.product_id FROM Order_items AS order_item JOIN Shipments AS shipment ON order_item.order_id = shipment.order_id); 
SELECT order_item_status_code, shipment_tracking_number FROM Order_items JOIN Shipment_items ON Order_items.order_item_id = Shipment_items.order_item_id JOIN Shipments ON Shipment_items.shipment_id = Shipments.shipment_id; 
SELECT order_item_status_code, shipment_tracking_number FROM Order_items JOIN Shipment_items ON Order_items.order_item_id = Shipment_items.order_item_id WHERE Shipment_items.shipment_id IS NOT NULL; 
SELECT p.product_name, s.product_color FROM Order_items o JOIN Shipment_items si ON o.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id JOIN Products p ON o.product_id = p.product_id WHERE s.invoice_number IS NOT NULL; 
SELECT product_name, product_color FROM Products WHERE product_id IN (SELECT order_item.product_id FROM Order_Items AS order_item JOIN Shipment_Items ON order_item.order_item_id = shipment_items.order_item_id JOIN Shipments ON shipment_items.shipment_id = shipments.shipment_id); 
SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products AS p JOIN Order_Items AS oi ON p.product_id = oi.product_id JOIN Orders AS o ON oi.order_id = o.order_id JOIN Customers AS c ON o.customer_id = c.customer_id WHERE c.gender_code = 'F' ORDER BY p.product_name ASC; 
SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products AS p JOIN Order_Items AS oi ON p.product_id = oi.product_id JOIN Orders AS o ON oi.order_id = o.order_id JOIN Customers AS c ON o.customer_id = c.customer_id WHERE c.gender_code = 'F' ORDER BY p.product_name ASC; 
SELECT invoice_status_code FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments WHERE shipment_id IS NULL); 
SELECT DISTINCT Invoice_Status_Code FROM Shipments WHERE Shipment_ID IS NULL; 
SELECT o.order_id, o.date_order_placed, SUM(p.product_price * oi.quantity) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed; 
SELECT o.order_id, o.date_order_placed, SUM(p.product_price * oi.quantity) AS total_amount_paid FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id; 
SELECT COUNT(DISTINCT customer_id) FROM Orders; 
SELECT COUNT(DISTINCT customer_id) FROM Orders; 
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_items; 
SELECT DISTINCT order_item_status_code FROM Order_items; 
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods; 
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods; 
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '12%'; 
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '12%'; 
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'; 
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'; 
SELECT p.product_price, p.product_size FROM Products AS p WHERE p.product_price > (SELECT AVG(p2.product_price) FROM Products as p2); 
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT COUNT(DISTINCT product_id) FROM Order_items WHERE order_item_id IS NULL; 
SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT order_item.product_id FROM Order_items AS order_item); 
SELECT COUNT(*) FROM Customers c LEFT JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id WHERE cp.payment_method_code IS NULL; 
SELECT COUNT(*) FROM Customers c LEFT JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id WHERE cp.payment_method_code IS NULL; 
SELECT DISTINCT o.order_status_code, o.date_order_placed FROM Orders AS o; 
SELECT order_status_code, date_order_placed FROM Orders; 
SELECT c.address_line_1, c.town_city, c.county FROM Customers AS c JOIN Customer_Payment_Methods AS cp ON c.customer_id = cp.customer_id WHERE c.country = 'USA'; 
SELECT c.address_line_1, c.town_city, c.county FROM Customers AS c JOIN Customer_Payment_Methods AS cp ON c.customer_id = cp.customer_id WHERE c.country = 'United States'; 
SELECT c.customer_first_name AS 'Buyer First Name', p.product_name AS 'Product Name' 
SELECT c.customer_first_name AS 'Buyer', p.product_name AS 'Product' 
SELECT COUNT(*) FROM Shipment_items; 
SELECT COUNT(DISTINCT product_id) FROM Shipments JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id; 
SELECT AVG(product_price) FROM Products; 
SELECT AVG(product_price) FROM Products; 
SELECT AVG(product_price) FROM Products p JOIN Order_items oi ON p.product_id = oi.product_id; 
SELECT AVG(product_price) FROM Products p JOIN Order_items oi ON p.product_id = oi.product_id; 
SELECT Customers.email_address, Town_City.town_city, County.county FROM Customers INNER JOIN (SELECT Gender_Code, COUNT(*) AS Count FROM Customers GROUP BY Gender_Code ORDER BY Count ASC LIMIT 1) Least_Common_Gender ON Customers.Gender_Code = Least_Common_Gender.Gender_Code INNER JOIN Town_City ON Customers.Town_City = Town_City.Town_City INNER JOIN County ON Customers.County = County.County WHERE Customers.Gender_Code = Least_Common_Gender.Gender_Code; 
SELECT  
SELECT Orders.date_order_placed FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE (COUNT(Customer_Payment_Methods.payment_method_code)) >= 2 INNER JOIN Orders ON Customers.customer_id = Orders.customer_id; 
SELECT * FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2); 
SELECT * FROM Orders; 
SELECT DISTINCT order_status_code FROM Orders ORDER BY COUNT(order_status_code) ASC LIMIT 1; 
SELECT product_id, product_description FROM Order_items JOIN Products ON Order_items.product_id = Products.product_id WHERE order_item_id IN (SELECT order_item_id FROM Shipment_items GROUP BY order_item_id HAVING COUNT(*) > 3); 
SELECT product_id, product_description FROM Order_items JOIN Products ON Order_items.product_id = Products.product_id WHERE order_item_id IN (SELECT order_item_id FROM Shipment_items GROUP BY order_item_id HAVING COUNT(order_item_id)>3); 
SELECT InvoiceDate, InvoiceNumber FROM Shipments GROUP BY InvoiceNumber HAVING COUNT(*) >= 2; 
SELECT invoice_number, shipment_id FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2; 
SELECT DISTINCT shipment_tracking_number, shipment_date FROM Shipments; 
SELECT shipment_tracking_number, shipment_date FROM Shipments; 
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products); 
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products); 
SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director); 
SELECT Name FROM director WHERE Age = (SELECT MAX(Age) FROM director); 
SELECT COUNT(*) 
SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel; 
SELECT Title FROM Program ORDER BY Start_Year DESC; 
SELECT d.Name FROM program p JOIN director_admin da ON p.Director_ID = da.Director_ID JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = 1 GROUP BY d.Name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT d.Name, d.Age FROM program p JOIN director_admin da ON p.Director_ID = da.Director_ID JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = (SELECT Channel_ID FROM channel c GROUP BY c.Channel_ID ORDER BY COUNT(*) DESC LIMIT 1) AND da.Is_first_director = TRUE; 
SELECT Title FROM Program ORDER BY Start_Year DESC LIMIT 1; 
SELECT channel.Name, channel.Internet FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE director_admin.Is_first_director = 0; 
SELECT Name, COUNT(Program_ID) AS Num_Programs FROM program GROUP BY Channel_ID ORDER BY Num_Programs DESC; 
SELECT COUNT(*) 
SELECT Name FROM director WHERE Director_ID IN ( SELECT Director_ID FROM program WHERE Program_ID IN ( SELECT Program_ID FROM program WHERE Title = 'Dracula' ) ) 
SELECT c.Name, c.Internet FROM director_admin da JOIN channel c ON da.Channel_ID = c.Channel_ID WHERE da.Is_first_director = 1 GROUP BY c.Name ORDER BY COUNT(da.Director_ID) DESC LIMIT 1; 
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60; 
SELECT Name FROM channel WHERE Channel_ID IN ( SELECT Channel_ID FROM program WHERE Program_ID IN ( SELECT Program_ID FROM director_admin WHERE Director_ID IN ( SELECT Director_ID FROM director WHERE Age < 40 ) AND Is_first_director = TRUE ) OR Program_ID IN ( SELECT Program_ID FROM director_admin WHERE Director_ID IN ( SELECT Director_ID FROM director WHERE Age > 60 ) AND Is_first_director = FALSE ) ) 
SELECT Channel_ID, Name FROM channel WHERE NOT EXISTS (SELECT * FROM director_admin WHERE Director_ID = 1 AND Channel_ID = channel.Channel_ID); 
SELECT COUNT(*) FROM radio; 
SELECT radio.Transmitter FROM city_channel_radio INNER JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID WHERE city_channel_radio.Is_online = 1 ORDER BY radio.ERP_kW ASC; 
SELECT tv_show_name, Original_Airdate FROM city_channel_tv_show JOIN tv_show ON city_channel_tv_show.tv_show_ID = tv_show.tv_show_ID WHERE Is_online = 1 AND Is_free = 0; 
SELECT Station_name FROM city_channel WHERE Affiliation!= 'ABC'; 
SELECT Radio.Transmitter FROM radio WHERE (Radio.ERP_kW > 150 OR Radio.ERP_kW < 30); 
SELECT Radio.Transmitter FROM city_channel_radio JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID WHERE city_channel_radio.Is_online = 1 AND radio.ERP_kW = (SELECT MAX(ERP_kW) FROM radio); 
SELECT AVG(ERP_kW) FROM radio; 
SELECT DISTINCT Affiliation, COUNT(*) AS num_channels FROM city_channel GROUP BY Affiliation ORDER BY num_channels DESC; 
SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT Affiliation FROM city_channel WHERE ID IN (SELECT City_channel_ID FROM city_channel_radio GROUP BY City_channel_ID HAVING COUNT(*) > 3) OR ID IN (SELECT City_channel_ID FROM city_channel_tv_show GROUP BY City_channel_ID HAVING COUNT(*) > 3); 
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC; 
SELECT r.Transmitter, c.City FROM city_channel AS c JOIN city_channel_radio AS cr ON c.ID = cr.City_channel_ID JOIN radio as r ON cr.Radio_ID = r.Radio_ID; 
SELECT radio.Transmitter, city_channel.Station_name FROM city_channel JOIN city_channel_radio ON city_channel.ID = city_channel_radio.City_channel_ID JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID ORDER BY radio.ERP_kW DESC; 
SELECT r.Transmitter, COUNT(*) AS num_city_channels FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter ORDER BY num_city_channels DESC; 
SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio); 
SELECT Model FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle) AND Power > 6000; 
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1; 
SELECT Name FROM driver WHERE Citizenship = 'United States'; 
SELECT driver.Name FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Citizenship = 'United States'; 
SELECT COUNT(DISTINCT vehicle.Vehicle_ID) AS num_driven_vehicles, driver.Driver_ID FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID JOIN driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Driver_ID ORDER BY num_driven_vehicles DESC LIMIT 1; 
SELECT Driver_ID, COUNT(Vehicle_ID) AS num_driven FROM vehicle_driver GROUP BY Driver_ID ORDER BY num_driven DESC LIMIT 1; 
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'; 
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'; 
SELECT Vehicle_ID FROM (SELECT Driver_ID, COUNT(*) AS Count FROM vehicle_driver GROUP BY Driver_ID) as t1 WHERE Count = (SELECT MIN(Count) FROM (SELECT Driver_ID, COUNT(*) AS Count FROM vehicle_driver GROUP BY Driver_ID)) ORDER BY Vehicle_ID DESC LIMIT 1; 
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM vehicle_driver); 
SELECT v.Top_Speed, v.Power FROM vehicle AS v WHERE v.Build_Year = '1996'; 
SELECT v.Top_Speed, v.Power FROM vehicle AS v WHERE v.Build_Year = '1996'; 
SELECT vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle; 
SELECT v.Build_Year, v.Model, b.Builder FROM vehicle AS v JOIN vehicle_driver AS vd ON v.Vehicle_ID = vd.Vehicle_ID JOIN driver AS d ON vd.Driver_ID = d.Driver_ID JOIN builder AS b ON v.Builder = b.Builder ORDER BY v.Build_Year ASC; 
SELECT COUNT(DISTINCT driver.Driver_ID) FROM vehicle_driver JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Build_Year = '2012'; 
SELECT COUNT(DISTINCT driver.Driver_ID) FROM vehicle_driver JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Build_Year = '2012'; 
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Racing_Series = 'NASCAR'; 
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Racing_Series = 'NASCAR'; 
SELECT AVG(v.Top_Speed) FROM vehicle v; 
SELECT AVG(v.Top_Speed) FROM vehicle v; 
SELECT DISTINCT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000)) 
SELECT driver.Name FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE vehicle.Power > 5000; 
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150; 
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150; 
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'; 
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'; 
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver); 
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver); 
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) >= 2 OR Builder = 'Ziyang'); 
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE (SELECT COUNT(*) FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) = 2)) > 0 OR (SELECT COUNT(*) FROM builder WHERE builder.Builder_ID IN (SELECT builder.Builder_ID FROM builder JOIN vehicle ON builder.Builder_ID = vehicle.Builder_ID GROUP BY builder.Builder_ID HAVING COUNT(builder.Builder_ID) = 1 AND builder.Builder_ID = 'Ziyang')) > 0; 
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2 OR Driver_ID = (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')); 
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE (SELECT COUNT(*) FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) > 2)) OR (SELECT COUNT(*) FROM driver WHERE driver.Name = 'Jeff Gordon') > 0; 
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle); 
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle); 
SELECT Name FROM driver ORDER BY Name ASC; 
SELECT Name FROM driver ORDER BY Name ASC; 
SELECT COUNT(DISTINCT Driver_ID), Racing_Series FROM vehicle_driver GROUP BY Racing_Series; 
SELECT COUNT(Driver_ID), Racing_Series FROM driver GROUP BY Racing_Series; 
SELECT driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Model = 'DJ1'; 
SELECT driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Model = 'DJ1'; 
SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver); 
SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE NOT EXISTS (SELECT * FROM vehicle_driver WHERE driver.Driver_ID = vehicle_driver.Driver_ID); 
SELECT COUNT(DISTINCT Exam_ID) FROM Exams; 
SELECT COUNT(*) FROM Exams; 
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC; 
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC; 
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code!= 'Database'; 
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code!= 'Database'; 
SELECT DISTINCT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC; 
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC; 
SELECT Type_of_Question_Code, COUNT(*) AS Count FROM Questions GROUP BY Type_of_Question_Code; 
SELECT Type_of_Question_Code, COUNT(*) AS Count FROM Questions GROUP BY Type_of_Question_Code; 
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'; 
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'; 
SELECT DISTINCT Comments FROM Student_Answers; 
SELECT DISTINCT Comments FROM Student_Answers; 
SELECT DISTINCT Student_Answer_Text FROM Student_Answers ORDER BY COUNT(Student_Answer_Text) DESC; 
SELECT DISTINCT Student_Answer_Text FROM Student_Answers ORDER BY COUNT(*) DESC; 
SELECT First_Name, Date_of_Answer FROM Student_Answers 
SELECT First_Name, Date_of_Answer FROM Student_Answers 
SELECT Email_Adress, Date_of_Answer FROM Student_Answers ORDER BY Date_of_Answer DESC; 
SELECT s.Email_Adress, sa.Date_of_Answer FROM Students AS s JOIN Student_Answers as sa ON s.Student_ID = sa.Student_ID ORDER BY Date_of_Answer DESC; 
SELECT DISTINCT Assessment FROM Student_Assessments ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT Assessment, COUNT(*) AS Frequency_Count FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency_Count ASC LIMIT 1; 
SELECT First_Name FROM Students WHERE Student_ID IN (SELECT DISTINCT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2); 
SELECT First_Name FROM Students WHERE Student_ID IN (SELECT DISTINCT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2) 
SELECT * FROM Valid_Answers; 
SELECT * FROM Valid_Answers; 
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M'; 
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M' ORDER BY Last_Name ASC; 
SELECT Gender_MFU, COUNT(Student_ID) AS Number_Of_Students FROM Students GROUP BY Gender_MFU; 
SELECT Gender_MFU, COUNT(Student_ID) AS Number_of_Students FROM Students GROUP BY Gender_MFU; 
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M'); 
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M'); 
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers); 
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers); 
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Comments = 'Absent' 
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent') ORDER BY Student_Answer_Text ASC; 
SELECT DISTINCT Type_of_Question_Code FROM Questions WHERE Question_ID IN (SELECT Question_ID FROM Questions_in_Exams GROUP BY Question_ID HAVING COUNT(*) >= 3); 
SELECT Type_of_Question_Code FROM Questions WHERE Question_ID IN (SELECT Question_ID FROM Questions_in_Exams GROUP BY Question_ID HAVING COUNT(*) >= 3); 
SELECT * FROM Students; 
SELECT * FROM Students; 
SELECT COUNT(DISTINCT address_id) FROM Addresses; 
SELECT COUNT(DISTINCT Addresses.address_id) FROM Customers JOIN Addresses ON Customers.address_id = Addresses.address_id; 
SELECT Addresses.address_id, Addresses.address_details FROM Customers INNER JOIN Addresses ON Customers.address_id = Addresses.address_id; 
SELECT Addresses.address_id, Addresses.address_details FROM Customers INNER JOIN Addresses ON Customers.address_id = Addresses.address_id; 
SELECT COUNT(*) FROM Products; 
SELECT COUNT(*) FROM Products; 
SELECT product_id, product_type_code, product_name FROM Products; 
SELECT product_id, product_type_code, product_name FROM Products; 
SELECT product_price FROM Products WHERE product_name = 'Monitor'; 
SELECT product_price FROM Products WHERE product_name = 'Monitor'; 
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products; 
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products; 
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'; 
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'; 
SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware' 
SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware'; 
SELECT p.product_name FROM Products AS p WHERE p.product_price > (SELECT AVG(p2.product_price) FROM Products as p2); 
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT p.product_name FROM Products AS p JOIN Order_items as oi ON p.product_id = oi.product_id WHERE p.product_type_code='Hardware' AND p.product_price > (SELECT AVG(p2.product_price) FROM Products AS p2 JOIN Order_items as oi2 ON p2.product_id = oi2.product_id WHERE p2.product_type_code='Hardware') 
SELECT p.product_name FROM Products AS p JOIN Order_items as oi ON p.product_id = oi.product_id WHERE p.product_type_code='Hardware' AND p.product_price > (SELECT AVG(p2.product_price) FROM Products as p2 WHERE p2.product_type_code='Hardware'); 
SELECT p.product_name FROM Products AS p JOIN Order_items as oi ON p.product_id = oi.product_id WHERE oi.order_id IN (SELECT order_id FROM Customer_orders) AND p.product_type_code='Clothes' ORDER BY p.product_price DESC LIMIT 1; 
SELECT p.product_name FROM Products AS p JOIN Order_items as oi ON p.product_id = oi.product_id WHERE p.product_type_code='Clothes' AND oi.order_quantity=(SELECT MAX(oi2.order_quantity) FROM Order_items as oi2 JOIN Customer_orders as co2 ON oi2.order_id=co2.order_id WHERE p.product_id=oi2.product_id); 
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware'); 
SELECT p.product_id, p.product_name FROM Products AS p JOIN Order_items as oi ON p.product_id = oi.product_id WHERE p.product_type_code = 'Hardware' AND oi.order_quantity = (SELECT MIN(oi2.order_quantity) FROM Order_items as oi2 JOIN Customer_orders as co2 ON oi2.order_id = co2.order_id WHERE p.product_id = oi2.product_id); 
SELECT product_name FROM Products ORDER BY product_price DESC; 
SELECT product_name FROM Products ORDER BY product_price DESC; 
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC; 
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC; 
SELECT product_type_code, COUNT(product_id) FROM Products GROUP BY product_type_code; 
SELECT COUNT(product_type_code), product_type_code FROM Products GROUP BY product_type_code; 
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code; 
SELECT AVG(product_price) AS avg_product_price, product_type_code FROM Products GROUP BY product_type_code; 
SELECT DISTINCT product_type_code FROM Products WHERE product_id IN (SELECT product_id FROM Order_items GROUP BY product_id HAVING COUNT(*) > 1); 
SELECT DISTINCT product_type_code FROM Products WHERE product_id IN (SELECT product_id FROM Order_items GROUP BY product_id HAVING COUNT(product_id) > 1); 
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(DISTINCT customer_id) FROM Customers; 
SELECT COUNT(*) FROM Customers; 
SELECT customer_id, customer_name FROM Customers; 
SELECT customer_id, customer_name FROM Customers; 
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers AS c JOIN Customer_Orders as co ON c.customer_id = co.customer_id WHERE c.customer_name = 'Jeromy' AND co.order_status_code = 'Shipped'; 
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers AS c WHERE c.customer_name = 'Jeromy'; 
SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code; 
SELECT COUNT(payment_method_code), payment_method_code FROM Customers GROUP BY payment_method_code; 
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT  
SELECT c.customer_name FROM Customers AS c JOIN ( SELECT payment_method_code, COUNT(*) as cnt FROM Customers GROUP BY payment_method_code ORDER BY cnt ASC LIMIT 1) AS t ON c.payment_method_code = t.payment_method_code; 
SELECT customer_name FROM Customers WHERE payment_method_code IN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = 1); 
SELECT  
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'; 
SELECT DISTINCT payment_method_code FROM Customers; 
SELECT DISTINCT payment_method_code FROM Customers; 
SELECT Products.product_id, Products.product_type_code FROM Products ORDER BY Products.product_name; 
SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC; 
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_type_code) = (SELECT MIN(COUNT(product_type_code)) FROM Products); 
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT COUNT(*) FROM Customer_Orders; 
SELECT COUNT(*) FROM Customer_Orders; 
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy'); 
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy'); 
SELECT c.customer_name, c.customer_id, COUNT(o.order_id) AS num_orders FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY num_orders DESC; 
SELECT c.customer_name, c.customer_id, COUNT(o.order_id) AS num_orders FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY c.customer_id ASC; 
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers AS c JOIN Customer_Orders as co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1; 
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers AS c JOIN Customer_Orders as co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1; 
SELECT Order_Status_Code, COUNT(Order_ID) AS Number_of_orders FROM Customer_Orders GROUP BY Order_Status_Code; 
SELECT COUNT(*), Order_Status_Code FROM Customer_Orders GROUP BY Order_Status_Code; 
SELECT * FROM Customer_Orders; 
SELECT Order_Status_Code FROM Customer_Orders GROUP BY Order_Status_Code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders); 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders); 
SELECT p.product_name FROM Products AS p LEFT JOIN Order_items as oi ON p.product_id = oi.product_id WHERE oi.order_id IS NULL; 
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_items); 
SELECT COUNT(*) FROM Order_items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor') AND order_id IN (SELECT order_id FROM Customer_orders); 
SELECT COUNT(*) FROM Order_items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor'); 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id WHERE Product.product_name = 'Monitor'; 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id WHERE product_id IN (SELECT product_id FROM Products WHERE product_type_code='Monitor') AND order_status_code='Shipped' 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders; 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders; 
SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_id IS NULL; 
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders); 
SELECT o.order_id, o.order_date FROM Customer_Orders AS o JOIN Order_Items as oi ON o.order_id = oi.order_id WHERE (oi.order_quantity > '6' OR oi.order_quantity > '3') GROUP BY o.order_id; 
SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_items WHERE order_quantity > '6' OR order_quantity > '3') ORDER BY order_id ASC; 
SELECT COUNT(*) FROM building; 
SELECT COUNT(*) FROM building; 
SELECT Name FROM building ORDER BY Number_of_Stories ASC; 
SELECT Name FROM building ORDER BY Number_of_Stories ASC; 
SELECT Address FROM building ORDER BY Completed_Year DESC; 
SELECT Address FROM building ORDER BY Completed_Year DESC; 
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980; 
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980; 
SELECT AVG(region.Population) FROM region; 
SELECT AVG(region.Population) FROM building JOIN region ON building.Region_ID = region.Region_ID; 
SELECT Name FROM region ORDER BY Name ASC; 
SELECT Name FROM region ORDER BY Name ASC; 
SELECT region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE building.Number_of_Stories > 10 AND region.Area > 10000; 
SELECT region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE building.Number_of_Stories > 10 AND region.Area > 10000; 
SELECT Capital FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM region ORDER BY Population DESC LIMIT 1); 
SELECT Name FROM region WHERE Area IN (SELECT MAX(Area) FROM region GROUP BY Region_ID LIMIT 5); 
SELECT Name FROM region ORDER BY Area DESC LIMIT 5; 
SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID; 
SELECT b.Name AS Building_Name, r.Name AS Region_Name FROM building as b JOIN region as r ON b.Region_ID = r.Region_ID; 
SELECT Name FROM region WHERE Region_ID IN (SELECT DISTINCT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1); 
SELECT Name FROM region WHERE Region_ID IN (SELECT DISTINCT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1); 
SELECT r.Capital FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE b.Building_ID IN (SELECT Building_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT r.Capital FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE b.Number_of_Stories > 10 GROUP BY r.Name ORDER BY COUNT(b.Building_ID) DESC LIMIT 1; 
SELECT building.Address, region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID; 
SELECT b.Address, r.Name FROM building AS b JOIN region as r ON b.Region_ID = r.Region_ID; 
SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = 'Abruzzo'); 
SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = 'Abruzzo'); 
SELECT Completed_Year, COUNT(*) AS Number_of_Buildings_Completed FROM building GROUP BY Completed_Year ORDER BY Completed_Year ASC; 
SELECT Completed_Year, COUNT(*) AS Number_of_Buildings_Completed FROM building GROUP BY Completed_Year ORDER BY Completed_Year ASC; 
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT DISTINCT Region_ID FROM building); 
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT DISTINCT Region_ID FROM building); 
SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 OR Number_of_Stories < 15; 
SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 OR Number_of_Stories < 15; 
SELECT DISTINCT Address FROM building; 
SELECT DISTINCT Address FROM building; 
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC; 
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC; 
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC; 
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC; 
SELECT COUNT(*) FROM Services; 
SELECT COUNT(*) FROM Services; 
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')); 
SELECT Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') AND Customers_and_Services.Customers_and_Services_Details LIKE '%Hardy%Kutch%' GROUP BY Service_Details HAVING COUNT(*) > 1 ORDER BY Service_Details ASC; 
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) > 3); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) > 3); 
SELECT * FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID WHERE ci.Service_ID IN (SELECT Service_ID FROM Customers_and_Services cs GROUP BY Service_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT * FROM Customers c JOIN (SELECT Customer_ID, COUNT(*) as cnt FROM Customer_Interactions GROUP BY Customer_ID ORDER BY cnt DESC LIMIT 1) t ON c.Customer_ID = t.Customer_ID; 
SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions GROUP BY Customer_ID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Customer_Interactions GROUP BY Customer_ID)); 
SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions GROUP BY Customer_ID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Customer_Interactions GROUP BY Customer_ID)); 
SELECT * FROM Customers WHERE Customer_ID IN (SELECT DISTINCT Customer_ID FROM Customer_Interactions WHERE Service_ID IS NULL); 
SELECT * FROM Customers WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM Customer_Interactions); 
SELECT * FROM Customers c JOIN Customers_and_Services cas ON c.Customer_ID = cas.Customer_ID WHERE Service_ID IN (SELECT Service_ID FROM Services s GROUP BY Service_ID HAVING COUNT(*) < ALL (SELECT COUNT(*) FROM Services)) ORDER BY Customer_ID ASC; 
SELECT DISTINCT Customer_Details FROM Customers c JOIN Customers_and_Services cas ON c.Customer_ID = cas.Customer_ID JOIN Services s ON cas.Service_ID = s.Service_ID WHERE Service_ID IN (SELECT Service_ID FROM Services GROUP BY Service_ID HAVING COUNT(*)=1) 
SELECT COUNT(DISTINCT Customers_and_Services.Customers_and_Services_Details), COUNT(DISTINCT Customers_and_Services.Service_ID) FROM Customers_and_Services; 
SELECT COUNT(*) FROM Customers; 
SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'; 
SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'; 
SELECT Service_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'Good' OR Customer_ID = 1); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details LIKE '%Hardy%Kutch%') OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'Good')); 
SELECT Service_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'Bad' AND Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'Bad' AND Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details LIKE '%Hardy%Kutch%')); 
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID = '15 ij' AND Status_Code = 'Completed'); 
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID = (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij')); 
SELECT * FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details LIKE '%bad%'; 
SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details LIKE '%bad%'); 
SELECT COUNT(*) FROM Integration_Platform WHERE Status_Code = 'Successful' 
SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'; 
SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Failed' AND Channel_ID IN (SELECT Channel_ID FROM Integration_Platform)); 
SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Fail' AND Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Integration_Platform WHERE Integration_Platform_Details = 'Fail')); 
SELECT Service_ID, Service_Details FROM Services WHERE Service_ID NOT IN ( SELECT DISTINCT Service_ID FROM Customer_Interactions ) 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) = 0); 
SELECT DISTINCT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Usage_Count DESC; 
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Count DESC; 
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied'); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied'); 
SELECT COUNT(*) FROM Vehicles; 
SELECT COUNT(*) FROM Vehicles; 
SELECT name FROM Vehicles ORDER BY Model_year DESC; 
SELECT Vehicles.name FROM Vehicles ORDER BY Model_year DESC; 
SELECT DISTINCT Type_of_powertrain FROM Vehicles; 
SELECT DISTINCT Type_of_powertrain FROM Vehicles; 
SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Vehicles.Model_year = 2013 OR Vehicles.Model_year = 2014; 
SELECT Vehicles.name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Model_year IN (2013, 2014); 
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 OR Model_year = 2013; 
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014 GROUP BY Type_of_powertrain HAVING COUNT(*) > 1; 
SELECT Type_of_powertrain, COUNT(*) AS num_vehicles FROM Vehicles GROUP BY Type_of_powertrain ORDER BY num_vehicles DESC; 
SELECT Type_of_powertrain, COUNT(*) AS num_vehicles FROM Vehicles GROUP BY Type_of_powertrain; 
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC LIMIT 1; 
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC LIMIT 1; 
SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles; 
SELECT MIN(Annual_fuel_cost) AS min_annual_fuel_cost, MAX(Annual_fuel_cost) AS max_annual_fuel_cost, AVG(Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles; 
SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles WHERE Vehicles.City_fuel_economy_rate <= Vehicles.Highway_fuel_economy_rate; 
SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles WHERE Vehicles.City_fuel_economy_rate <= Vehicles.Highway_fuel_economy_rate; 
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2; 
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2 ORDER BY Average_Annual_Fuel_Cost DESC; 
SELECT Customers.name, Customers.age, Discount.membership_credit FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id JOIN Discount ON Renting_history.discount_id = Discount.id 
SELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers; 
SELECT Customers.name, Customers.age FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id WHERE Renting_history.discount_id IN (SELECT Discount.id FROM Discount WHERE Discount.membership_credit = (SELECT MAX(Discount.membership_credit) FROM Discount)) GROUP BY Customers.id ORDER BY Customers.id ASC LIMIT 1; 
SELECT Customers.name, Customers.age FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id WHERE Renting_history.total_hours > 0 GROUP BY Customers.id ORDER BY SUM(Renting_history.total_hours) DESC LIMIT 1; 
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers); 
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers); 
SELECT * FROM Discount; 
SELECT * FROM Discount; 
SELECT Vehicles.name, Renting_history.total_hours FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id; 
SELECT Vehicles.name, SUM(Renting_history.total_hours) AS Total_rental_hours FROM Renting_history JOIN Customers ON Renting_history.customer_id = Customers.id JOIN Discount ON Renting_history.discount_id = Discount.id JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.name ORDER BY Total_rental_hours DESC; 
SELECT Vehicles.name FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.total_hours IS NULL; 
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history); 
SELECT Customers.name FROM Renting_history JOIN Customers ON Renting_history.customer_id = Customers.id GROUP BY Customers.name HAVING COUNT(*) >= 2; 
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2); 
SELECT Vehicles.name, Vehicles.Model_year FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.name, Vehicles.Model_year ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Vehicles.name, Vehicles.Model_year FROM Renting_history INNER JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.id ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Vehicles.name FROM Renting_history INNER JOIN Customers ON Renting_history.customer_id = Customers.id INNER JOIN Discount ON Renting_history.discount_id = Discount.id INNER JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id ORDER BY total_hours DESC; 
SELECT Vehicles.name FROM Renting_history JOIN Customers ON Renting_history.customer_id = Customers.id JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id WHERE Customers.age > 30 ORDER BY total_hours DESC; 
SELECT * FROM Discount ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Discount.name FROM Renting_history JOIN Discount ON Renting_history.discount_id = Discount.id GROUP BY Discount.name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Renting_history JOIN Customers ON Renting_history.customer_id = Customers.id JOIN Discount ON Renting_history.discount_id = Discount.id JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id WHERE Renting_history.total_hours > 30 AND Customers.age >= 18 AND Discount.membership_credit <= 1000 
SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id WHERE Renting_history.total_hours > 30; 
SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate) FROM Vehicles WHERE Type_of_powertrain = 'Gasoline' OR Type_of_powertrain = 'Diesel'; 
SELECT AVG(City_fuel_economy_rate),AVG(Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain; 
SELECT AVG(amount_of_loan) FROM Student_Loans; 
SELECT AVG(amount_of_loan) FROM Student_Loans; 
SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) OR student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2); 
SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) OR student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2); 
SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE class_details LIKE '%data%' AND class_id NOT IN (SELECT class_id FROM Classes WHERE class_details LIKE 'net%'))) 
SELECT DISTINCT t.teacher_details FROM Teachers AS t JOIN Classes as c ON t.teacher_id = c.teacher_id WHERE c.class_details LIKE '%data%' AND c.class_details NOT LIKE 'net%'; 
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans); 
SELECT * FROM Students WHERE student_id IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans); 
SELECT student_loan.amount_of_loan AS LoanAmount, student_loan.date_of_loan AS DateOfLoan FROM Students INNER JOIN Student_Loans ON Students.student_id = Student_Loans.student_id INNER JOIN Achievements ON Students.student_id = Achievements.student_id WHERE Achievements.achievement_type_code IN ('A1', 'A2') GROUP BY student_loan.amount_of_loan, student_loan.date_of_loan HAVING COUNT(*) >= 2; 
SELECT  
SELECT t.teacher_details AS 'Teacher Details', c.class_id AS 'Class ID' 
SELECT Teacher.teacher_details AS 'Teacher Details', Teacher.teacher_id AS 'Teacher ID' 
SELECT DISTINCT detention_summary FROM Detention; 
SELECT DISTINCT detention_summary FROM Detention; 
SELECT  
SELECT  
SELECT  
SELECT  
SELECT bio_data, date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id; 
SELECT bio_data, date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id; 
SELECT COUNT(*) AS total_students, behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY total_students DESC LIMIT 1; 
SELECT  
SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)) AND student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) ASC LIMIT 2)); 
SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Behaviour_Monitoring GROUP BY student_id)); 
SELECT * FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Behaviour_Monitoring GROUP BY student_id)); 
SELECT bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id; 
SELECT bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id; 
SELECT COUNT(student_id), event_type_code, event_type_description FROM Student_Events GROUP BY event_type_code ORDER BY COUNT(student_id) DESC LIMIT 1; 
SELECT COUNT(student_id), event_type_code, event_type_description FROM Student_Events GROUP BY student_id ORDER BY COUNT(student_id) DESC LIMIT 1; 
SELECT ach.achievement_details, acht.achievement_type_description FROM Achievements AS ach INNER JOIN Ref_Achievement_Type as acht ON ach.achievement_type_code = acht.achievement_type_code; 
SELECT ach.achievement_details, acht.achievement_type_description FROM Achievements AS ach INNER JOIN Ref_Achievement_Type as acht ON ach.achievement_type_code = acht.achievement_type_code; 
SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE class_id IN (SELECT class_id FROM Classes INNER JOIN Students ON Students.student_id = Classes.student_id WHERE achievement_id IS NULL); 
SELECT COUNT(DISTINCT teacher_id) FROM Teachers WHERE student_id IN (SELECT student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Achievements)); 
SELECT date_of_transcript, transcript_details FROM Transcripts; 
SELECT t.date_of_transcript, t.transcript_details FROM Transcripts AS t; 
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements; 
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements; 
SELECT datetime_detention_start, datetime_detention_end FROM Detention; 
SELECT datetime_detention_start AS start_time, datetime_detention_end AS end_time FROM Detention; 
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'; 
SELECT * FROM Students WHERE bio_data LIKE '%Suite%'; 
SELECT t.teacher_details AS teacher_details, s.student_details AS student_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id 
SELECT t.teacher_details AS teacher_details, s.student_details AS student_details FROM Teachers as t JOIN Classes as c ON t.teacher_id = c.teacher_id JOIN Students as s ON c.student_id = s.student_id 
SELECT COUNT(DISTINCT class_id), teacher_id FROM Classes GROUP BY teacher_id ORDER BY 1 DESC LIMIT 1; 
SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1; 
SELECT COUNT(DISTINCT class_id), student_id FROM Classes GROUP BY student_id ORDER BY 1 DESC LIMIT 1; 
SELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1; 
SELECT * FROM Students WHERE student_id IN (SELECT class.student_id FROM Classes AS class GROUP BY class.student_id HAVING COUNT(class.class_id)=2); 
SELECT student_id, class_details FROM Classes WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2); 
SELECT DETENTION_TYPE_CODE, DETENTION_TYPE_DESCRIPTION FROM DETENTION GROUP BY DETENTION_TYPE_CODE ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT DETENTION_TYPE_CODE, DETENTION_TYPE_DESCRIPTION FROM DETENTION GROUP BY DETENTION_TYPE_CODE ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans GROUP BY student_id HAVING SUM(amount_of_loan) > (SELECT AVG(amount_of_loan) FROM Student_Loans)); 
SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)); 
SELECT MIN(date_of_loan) FROM Student_Loans; 
SELECT MIN(date_of_loan) FROM Student_Loans; 
SELECT * FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1); 
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1); 
SELECT date_of_transcript FROM Transcripts WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1); 
SELECT t.date_of_transcript FROM Transcripts AS t JOIN Student_Loans AS sl ON t.student_id = sl.student_id WHERE sl.amount_of_loan = (SELECT MAX(sl2.amount_of_loan) FROM Student_Loans AS sl2); 
SELECT * FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_id IN (SELECT class_id FROM Students_Addresses WHERE address_id IN (SELECT address_id FROM Addresses WHERE address_id IN (SELECT address_id FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts WHERE transcript_id IN (SELECT MAX(transcript_id) FROM Transcripts)))))) 
SELECT teacher_details FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id WHERE Classes.student_id IN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1); 
SELECT student_id, SUM(amount_of_loan) AS TotalLoan FROM Student_Loans GROUP BY student_id; 
SELECT student_id, SUM(amount_of_loan) AS TotalLoan FROM Student_Loans GROUP BY student_id; 
SELECT  
SELECT  
SELECT COUNT(*) FROM Students s JOIN Detention d ON s.student_id = d.student_id 
SELECT COUNT(*) FROM Students s JOIN Detention d ON s.student_id = d.student_id; 
SELECT address_type_code, address_type_description FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT  
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events WHERE event_id NOT IN (SELECT student_loan_id FROM Student_Loans)) ORDER BY student_id ASC; 
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events WHERE event_id NOT IN (SELECT student_loan_id FROM Student_Loans)) ORDER BY student_id ASC; 
SELECT  
SELECT datetime_detention_start, datetime_detention_end FROM Detention WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2); 
SELECT datetime_detention_start FROM Detention ORDER BY datetime_detention_start ASC; 
SELECT datetime_detention_start FROM Detention; 
SELECT DISTINCT Author.Name FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author INNER JOIN Book ON Author_Book.ISBN = Book.ISBN; 
SELECT DISTINCT Author.Name FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author WHERE Author_Book.ISBN IN (SELECT ISBN FROM Book); 
SELECT c.Name, c.Address FROM Client as c; 
SELECT c.Name, c.Address FROM Client AS c; 
SELECT Title, ISBN, SalePrice FROM Book ORDER BY SalePrice DESC; 
SELECT Title, ISBN, SalePrice FROM Book 
SELECT COUNT(*) FROM Book; 
SELECT COUNT(*) FROM Book; 
SELECT COUNT(DISTINCT Author.idAuthor) FROM Author; 
SELECT COUNT(DISTINCT Author.idAuthor) FROM Author; 
SELECT COUNT(*) FROM Client; 
SELECT COUNT(*) FROM Client; 
SELECT c.Name, c.Address FROM Client AS c ORDER BY c.Name ASC; 
SELECT c.Name, c.Address FROM Client AS c ORDER BY c.Name ASC; 
SELECT Title, Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author; 
SELECT b.Title, a.Name FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor ORDER BY b.Title; 
SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient; 
SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient; 
SELECT A.Name AS AuthorName, COUNT(*) as NumberOfBooks FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author GROUP BY A.Name ORDER BY NumberOfBooks DESC; 
SELECT A.Name, COUNT(*) AS numBooks FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author GROUP BY A.Name ORDER BY numBooks DESC; 
SELECT ISBN, COUNT(*) FROM Books_Order GROUP BY ISBN; 
SELECT ISBN, COUNT(*) AS num_orders FROM Books_Order GROUP BY ISBN; 
SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN; 
SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN; 
SELECT Title FROM Book WHERE ISBN IN ( 
SELECT Title FROM Book WHERE ISBN IN ( 
SELECT Title, PurchasePrice FROM Book WHERE ISBN IN ( 
SELECT Title, PurchasePrice FROM Book WHERE ISBN IN ( 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order); 
SELECT DISTINCT Title FROM Book WHERE ISBN IN ( 
SELECT DISTINCT c.Name FROM Client AS c JOIN Orders as o ON c.IdClient = o.IdClient 
SELECT DISTINCT Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient 
SELECT c.Name, COUNT(o.IdOrder) AS num_orders FROM Client c LEFT JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY num_orders DESC; 
SELECT c.Name, COUNT(o.IdOrder) AS num_orders FROM Client c LEFT JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY num_orders DESC; 
SELECT Name FROM Client WHERE IdClient IN ( 
SELECT Name FROM Client WHERE IdClient IN ( 
SELECT c.Name, SUM(b.amount) AS TotalAmounts 
SELECT c.Name, SUM(b.amount) FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order b ON o.IdOrder = b.IdOrder GROUP BY c.Name; 
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name ORDER BY SUM(bo.amount) DESC LIMIT 1; 
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order); 
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order); 
SELECT DISTINCT c.Name FROM Client AS c LEFT JOIN Orders as o ON c.IdClient = o.IdClient WHERE o.IdClient IS NULL; 
SELECT DISTINCT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders); 
SELECT MAX(SalePrice), MIN(SalePrice) FROM Book; 
SELECT MAX(SalePrice), MIN(SalePrice) FROM Book; 
SELECT AVG(PurchasePrice),AVG(SalePrice) FROM Book; 
SELECT AVG(PurchasePrice),AVG(SalePrice) FROM Book; 
SELECT MAX(SalePrice-PurchasePrice) FROM Book 
SELECT MAX(SalePrice-PurchasePrice) FROM Book; 
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book); 
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book); 
SELECT AVG(SalePrice) FROM Book WHERE Title = '1984' AND Author = 'Orwell'; 
SELECT AVG(SalePrice) FROM Book WHERE Title = '1984' AND Author = 'Orwell'; 
SELECT SalePrice FROM Book WHERE Title = 'Plato' AND SalePrice IS NOT NULL; 
SELECT SalePrice FROM Book WHERE ISBN IN ( 
SELECT Title FROM Book WHERE ISBN IN ( 
SELECT Title FROM Book WHERE Author = 'Orwell' AND SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE Author = 'Orwell'); 
SELECT Title FROM Book WHERE ISBN IN ( 
SELECT Title FROM Book WHERE ISBN IN ( 
SELECT * FROM Author WHERE idAuthor IN ( 
SELECT Name FROM Author WHERE idAuthor IN ( SELECT Author FROM Author_Book WHERE ISBN IN ( SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice' ) ) 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%')) 
SELECT Title FROM Book WHERE ISBN IN ( 
SELECT COUNT(*) FROM Orders WHERE ISBN = '978-1-101-60291-5' AND amount > 0; 
SELECT COUNT(*) FROM Orders WHERE IdOrder IN ( 
SELECT DISTINCT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder WHERE ISBN IN ('978-1-101-16396-5', '978-2-07-034473-7') AND amount > 0; 
SELECT DISTINCT IdOrder FROM Orders WHERE ISBN IN ( 
SELECT ISBN FROM Book WHERE EXISTS(SELECT * FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name='Peter Doe') AND EXISTS(SELECT * FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name='James Smith'); 
SELECT ISBN FROM Book WHERE Title IN ( 
SELECT Title FROM Book WHERE ISBN IN ( 
SELECT Title FROM Book WHERE ISBN IN ( 
SELECT c.Name FROM Client AS c JOIN Orders as o ON c.IdClient = o.IdClient WHERE o.ISBN IN (SELECT b.ISBN FROM Book as b JOIN Author_Book as ab ON b.ISBN = ab.ISBN JOIN Author as a ON ab.Author = a.idAuthor WHERE a.Name = 'Jane Austen'); 
SELECT DISTINCT c.Name FROM Client AS c JOIN Orders as o ON c.IdClient = o.IdClient JOIN Books_Order as bo ON o.IdOrder = bo.IdOrder JOIN Book as b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice'; 
SELECT COUNT(*) FROM book; 
SELECT Title FROM book ORDER BY Title ASC; 
SELECT Title FROM book ORDER BY Pages DESC; 
SELECT book.Type, book.Release FROM book WHERE book.Book_ID = 1; 
SELECT Book_ID, MAX(Chapters), MIN(Chapters) FROM book GROUP BY Book_ID; 
SELECT Title FROM book WHERE Type!= 'Poet'; 
SELECT AVG(r.Rating) FROM review r; 
SELECT book.Title, review.Rating FROM book JOIN review ON book.Book_ID = review.Book_ID; 
SELECT Rating FROM review WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Chapters DESC LIMIT 1); 
SELECT * FROM review ORDER BY Pages ASC LIMIT 1; 
SELECT Title FROM book WHERE Book_ID IN (SELECT Book_ID FROM review ORDER BY Rank DESC LIMIT 1); 
SELECT AVG(Readers_in_Million) FROM review WHERE Type = 'Novel'; 
SELECT Type, COUNT(*) AS Count FROM book GROUP BY Type ORDER BY Count DESC; 
SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Type FROM book WHERE Book_ID IN (SELECT Book_ID FROM review GROUP BY Book_ID HAVING COUNT(*) >= 3); 
SELECT book.Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC; 
SELECT book.Title, review.Audio FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY Readers_in_Million DESC; 
SELECT COUNT(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review); 
SELECT Type FROM book WHERE Chapters > 75 OR Chapters < 50; 
SELECT DISTINCT Type FROM book; 
SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review); 
SELECT COUNT(*) FROM customer; 
SELECT COUNT(*) FROM customer; 
SELECT Name FROM customer ORDER BY Level_of_Membership ASC; 
SELECT Name FROM customer ORDER BY Level_of_Membership ASC; 
SELECT customer.Nationality, customer.Card_Credit FROM customer ORDER BY customer.Card_Credit DESC; 
SELECT c.Nationality, c.Card_Credit FROM customer AS c; 
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'; 
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'; 
SELECT AVG(customer.Card_Credit) FROM customer WHERE customer.Level_of_Membership > 1; 
SELECT AVG(customer.Card_Credit) FROM customer WHERE customer.Level_of_Membership > 1; 
SELECT * FROM customer ORDER BY Level_of_Membership DESC LIMIT 1; 
SELECT * FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer); 
SELECT Nationality, COUNT(*) AS num_customers FROM customer GROUP BY Nationality ORDER BY num_customers DESC; 
SELECT Nationality, COUNT(Customer_ID) AS Num_Customers FROM customer GROUP BY Nationality; 
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Nationality FROM customer ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT Nationality FROM customer WHERE Card_Credit < 50 OR Card_Credit > 75; 
SELECT Nationality FROM customer WHERE Card_Credit > 50 AND Card_Credit < 75; 
SELECT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID; 
SELECT c.Name, co.Dish_Name FROM customer AS c JOIN customer_order AS co ON c.Customer_ID = co.Customer_ID; 
SELECT customer.Name, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC; 
SELECT c.Name AS Customer_name, co.Dish_Name AS Dish_name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY Quantity DESC; 
SELECT Name, SUM(Quantity) FROM customer NATURAL JOIN customer_order GROUP BY Customer_ID; 
SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name; 
SELECT customer.Customer_ID, Name, Nationality, Card_Credit, Level_of_Membership FROM customer WHERE (SELECT SUM(Quantity) FROM customer_order WHERE Customer_ID = customer.Customer_ID) > 1; 
SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1); 
SELECT DISTINCT branch.Manager FROM customer_order JOIN branch ON customer_order.Branch_ID = branch.Branch_ID; 
SELECT DISTINCT branch.Manager FROM customer_order JOIN branch ON customer_order.Branch_ID = branch.Branch_ID; 
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order); 
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order); 
SELECT COUNT(*) FROM member; 
SELECT Name FROM member ORDER BY Age ASC; 
SELECT member.Name, member.Nationality FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club_leader.Club_ID = 1; 
SELECT Name FROM member WHERE Nationality!= 'England'; 
SELECT Name FROM member WHERE Age = 19 OR Age = 20; 
SELECT Name FROM member WHERE Age = (SELECT MAX(Age) FROM member); 
SELECT Nationality, COUNT(*) AS num_members FROM member GROUP BY Nationality; 
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT Nationality FROM member WHERE Member_ID IN (SELECT Club_ID FROM club_leader GROUP BY Club_ID HAVING COUNT(*) >= 2); 
SELECT m.Name AS Member_Name, c.Club_Name AS Club_Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID; 
SELECT Name FROM member WHERE Member_ID IN (SELECT Club_ID FROM club_leader WHERE Year_Join = '2019' AND Club_ID IN (SELECT Club_ID FROM club WHERE Overall_Ranking > 100)) ORDER BY Name ASC; 
SELECT Name FROM member WHERE Member_ID IN (SELECT Club_ID FROM club_leader WHERE Year_Join < '2018') AND Member_ID NOT IN (SELECT Team_Leader FROM club) ORDER BY Name ASC; 
SELECT Name FROM member WHERE Member_ID IN (SELECT Club_Leader FROM club WHERE Club_Name = 'Houston') AND Age > 30; 
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Club_ID FROM club_leader); 
SELECT DISTINCT Nationality FROM member WHERE Age > 22 AND Age < 19; 
SELECT AVG(member.Age) FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID; 
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'; 
SELECT DISTINCT Collection_Subset_Members.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Document_Subset_ID; 
SELECT DISTINCT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID = 1) 
SELECT * FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'; 
SELECT * FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'; 
SELECT Document_Subset_Name FROM Document_Subsets; 
SELECT DISTINCT Document_Subset_Name FROM Document_Subset_Members; 
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'; 
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'; 
SELECT Document_Object_ID FROM Document_Objects; 
SELECT Document_Object_ID FROM Document_Objects; 
SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'; 
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'; 
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'; 
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Braeden Collection')); 
SELECT Owner FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'); 
SELECT Owner FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin') 
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL; 
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL; 
SELECT COUNT(DISTINCT d.Document_Object_ID) 
SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'; 
SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL; 
SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL; 
SELECT Document_Object_ID, COUNT(*) AS Child_Count FROM Document_Subset_Members GROUP BY Document_Object_ID; 
SELECT Parent_Document_Object_ID AS Parent_Document_Object_ID, COUNT(*) AS Child_Count FROM Document_Objects GROUP BY Parent_Document_Object_ID ORDER BY Parent_Document_Object_ID ASC; 
SELECT DISTINCT Collection_Name FROM Collections; 
SELECT DISTINCT c.Collection_Name FROM Collections AS c JOIN Documents_in_Collections AS d ON c.Collection_ID = d.Collection_ID WHERE d.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'A')) AND c.Parent_Collection_ID IS NULL; 
SELECT Description FROM Collections WHERE Collection_Name = 'Best'; 
SELECT DISTINCT c.Collection_Description FROM Collections AS c JOIN Documents_in_Collections AS d ON c.Collection_ID = d.Collection_ID WHERE c.Collection_Name = 'Best'; 
SELECT c.Collection_Name FROM Collections AS c JOIN Documents_in_Collections AS d ON c.Collection_ID = d.Collection_ID WHERE d.Document_Object_ID IN (SELECT o.Document_Object_ID FROM Document_Objects AS o JOIN Document_Subset_Members AS m ON o.Document_Object_ID = m.Document_Object_ID WHERE m.Related_Document_Object_ID IN (SELECT o2.Document_Object_ID FROM Document_Objects AS o2 JOIN Document_Subset_Members AS m2 ON o2.Document_Object_ID = m2.Document_Object_ID WHERE m2.Document_Subset_ID IN (SELECT ds.Document_Subset_ID FROM Document_Subsets AS ds WHERE ds.Document_Subset_Name = 'Nice'))) AND c.Parent_Collection_ID IS NOT NULL; 
SELECT DISTINCT c.Collection_Name FROM Collections AS c JOIN Document_Objects AS d ON c.Parent_Collection_ID = d.Document_Object_ID WHERE d.Owner = 'Nice' AND c.Collection_Name IS NOT NULL; 
SELECT DISTINCT c.Collection_Name FROM Collections AS c LEFT JOIN Collections AS p ON c.Parent_Collection_ID = p.Collection_ID WHERE p.Collection_ID IS NULL; 
SELECT DISTINCT c.Collection_Name FROM Collections AS c LEFT JOIN Collections AS p ON c.Parent_Collection_ID = p.Collection_ID WHERE p.Collection_ID IS NULL; 
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL AND Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL); 
SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(*) > 1); 
SELECT COUNT(*) 
SELECT COUNT(*) 
SELECT * FROM Document_Objects WHERE Owner = 'Ransom' AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members); 
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom' AND Description IS NOT NULL; 
SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(*) AS Number_of_Collections 
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Number_of_Collections FROM Collection_Subset_Members GROUP BY Collection_Subset_ID, Collection_Subset_Name; 
SELECT Document_Object_ID, COUNT(*) AS Child_Count FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY Child_Count DESC LIMIT 1; 
SELECT COUNT(*) FROM Document_Subset_Members WHERE Document_Object_ID = 1; 
SELECT Document_Object_ID, COUNT(*) AS NumberOfRelatedDocuments FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY NumberOfRelatedDocuments ASC LIMIT 1; 
SELECT Document_Object_ID FROM Document_Objects WHERE Description = 'document' ORDER BY COUNT(DISTINCT Document_Object_ID) ASC LIMIT 1; 
SELECT Document_Object_ID, COUNT(*) AS Number_of_Related_Documents FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Number_of_Related_Documents BETWEEN 2 AND 4; 
SELECT Document_Object_ID, COUNT(*) AS Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4; 
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Braeden')); 
SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Owner = 'Braeden')); 
SELECT DISTINCT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID = (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')); 
SELECT DISTINCT Document_Subset_Name FROM Document_Subset_Members WHERE Owner = 'Braeden'; 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS Num_Documents FROM Document_Subset_Members GROUP BY Document_Subset_ID; 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS Num_Documents FROM Document_Subset_Members GROUP BY Document_Subset_ID; 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS num_docs FROM Document_Subset_Members GROUP BY Document_Subset_ID ORDER BY num_docs DESC LIMIT 1; 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS num_docs FROM Document_Subset_Members GROUP BY Document_Subset_ID ORDER BY num_docs DESC LIMIT 1; 
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Related_Document_Object_ID IS NULL; 
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') 
SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Subset_Members.Related_Document_Object_ID = 1; 
SELECT DISTINCT Document_Subset_Name, Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Subset_Members.Related_Document_Object_ID = 1; 
SELECT DISTINCT c.Collection_Name FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE d.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'); 
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')); 
SELECT COUNT(Collection_ID), Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID; 
SELECT COUNT(DISTINCT c.Collection_ID) AS num_collections 
SELECT COUNT(DISTINCT d.Document_Object_ID) 
SELECT COUNT(DISTINCT d.Document_Object_ID) 
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') 
SELECT COUNT(DISTINCT Document_Object_ID) 
SELECT c.Collection_Name, c.Collection_ID, COUNT(*) AS num_docs FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID GROUP BY c.Collection_ID ORDER BY num_docs DESC LIMIT 1; 
SELECT c.Collection_Name, c.Collection_ID, COUNT(*) AS num_docs FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' GROUP BY c.Collection_ID ORDER BY num_docs DESC LIMIT 1; 
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')); 
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') 
SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best')); 
SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) 
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') 
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') 
SELECT DISTINCT c.Collection_Name FROM Collections AS c JOIN Document_Objects AS d ON c.Collection_ID = d.Parent_Collection_ID WHERE c.Collection_Name = 'Best' AND d.Owner IS NULL; 
SELECT DISTINCT c.Collection_Name FROM Collections AS c JOIN Document_Objects AS d ON c.Collection_ID = d.Parent_Collection_ID WHERE d.Owner = 'Best' AND c.Collection_Name IS NOT NULL; 
SELECT COUNT(DISTINCT c2.Collection_ID) 
SELECT COUNT(DISTINCT c.Collection_ID) 
SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best in')); 
SELECT DISTINCT Collection_Subset_Members.Collection_Subset_ID FROM Collections INNER JOIN Document_Objects ON Collections.Parent_Collection_ID = Document_Objects.Document_Object_ID WHERE Collections.Collection_Name = 'Best' AND Document_Objects.Owner = 'Me' 
SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%'; 
SELECT name FROM songs ORDER BY name ASC; 
SELECT name, language FROM songs; 
SELECT MAX(voice_sound_quality), MIN(voice_sound_quality) FROM performance_score; 
SELECT * FROM performance_score WHERE participant_id IN (SELECT id FROM participants WHERE name = 'Freeway'); 
SELECT s.id, s.language, s.original_artist FROM songs AS s WHERE s.name!= 'Love'; 
SELECT songs.name, songs.original_artist FROM songs WHERE english_translation = 'All the streets of love'; 
SELECT DISTINCT performance_score.stage_presence FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language='English'; 
SELECT p.id, p.name FROM performance_score ps JOIN participants p ON ps.participant_id = p.id GROUP BY p.id HAVING COUNT(*) >= 2; 
SELECT p.id, p.name, p.popularity FROM participants AS p JOIN performance_score as ps ON p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(ps.songs_id) DESC; 
SELECT p.id, p.name FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE voice_sound_quality = 5 OR rhythm_tempo = 5; 
SELECT performance_score.voice_sound_quality FROM songs INNER JOIN performance_score ON songs.id = performance_score.songs_id WHERE songs.name = 'The Balkan Girls' AND songs.english_translation IS NOT NULL; 
SELECT songs.id, songs.name FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY songs.id ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9; 
SELECT COUNT(*) FROM songs WHERE id NOT IN (SELECT DISTINCT songs_id FROM performance_score); 
SELECT AVG(rhythm_tempo) AS avg_rhythm_score, language FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY language ORDER BY avg_rhythm_score DESC; 
SELECT DISTINCT name FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English'; 
SELECT p.name, p.popularity FROM participants AS p JOIN performance_score as ps ON p.id = ps.participant_id JOIN songs as s ON ps.songs_id = s.id WHERE s.language IN ('Croatian', 'English') GROUP BY p.id HAVING COUNT(*) > 1; 
SELECT name FROM songs WHERE name LIKE '%Is%'; 
SELECT original_artist FROM performance_score WHERE rhythm_tempo > 5 ORDER BY voice_sound_quality DESC; 
SELECT COUNT(*) FROM City; 
SELECT COUNT(DISTINCT city_name) FROM City; 
SELECT DISTINCT state FROM City; 
SELECT DISTINCT state FROM City; 
SELECT COUNT(DISTINCT country) FROM City; 
SELECT COUNT(DISTINCT Country) FROM City; 
SELECT c.city_name, c.city_code, c.state, c.country FROM City AS c; 
SELECT c.city_name, c.city_code, c.state, c.country FROM City AS c; 
SELECT Latitude, Longitude FROM City WHERE city_name = 'Baltimore'; 
SELECT Latitude, Longitude FROM City WHERE city_name = 'Baltimore'; 
SELECT DISTINCT c.city_name FROM City AS c JOIN Direct_distance as d ON c.city_code = d.city1_code WHERE c.state='PA' ORDER BY c.city_name; 
SELECT DISTINCT city_name FROM City WHERE state = 'PA'; 
SELECT COUNT(*) FROM City WHERE Country = 'Canada'; 
SELECT COUNT(*) FROM City WHERE Country = 'Canada'; 
SELECT DISTINCT c.city_name FROM City AS c JOIN Direct_distance as d ON c.city_code = d.city1_code WHERE c.country='USA' ORDER BY c.latitude ASC; 
SELECT DISTINCT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC; 
SELECT DISTINCT state, COUNT(*) AS num_cities FROM City GROUP BY state ORDER BY state ASC; 
SELECT COUNT(DISTINCT city_name), state FROM City GROUP BY state; 
SELECT DISTINCT Country FROM City; 
SELECT COUNT(DISTINCT city_name), country FROM City GROUP BY country; 
SELECT DISTINCT state FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance); 
SELECT DISTINCT state FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance); 
SELECT COUNT(*) AS num_cities FROM City WHERE state = 'CA'; 
SELECT DISTINCT state FROM City ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT Country FROM City WHERE City NOT IN (SELECT City.city_name FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code OR City.city_code = Direct_distance.city2_code); 
SELECT DISTINCT Country FROM City WHERE City NOT IN (SELECT City.city_code FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code OR City.city_code = Direct_distance.city2_code); 
SELECT Fname,LName FROM Student WHERE State='MD'; 
SELECT CONCAT(LName,' ',Fname) AS FullName FROM Student WHERE city_code = 'MD'; 
SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China'); 
SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China'); 
SELECT Fname, Major FROM Student WHERE city_code = 'BAL' ORDER BY Fname ASC; 
SELECT DISTINCT Fname, Major FROM Student WHERE city_code = 'BAL' ORDER BY Fname ASC; 
SELECT COUNT(*) AS num_students, Country FROM Student GROUP BY Country ORDER BY num_students DESC; 
SELECT DISTINCT Country, COUNT(*) AS num_students FROM Student GROUP BY Country ORDER BY num_students DESC; 
SELECT COUNT(*) AS num_students, city_name FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY city_name ORDER BY num_students DESC; 
SELECT city_name, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY city_name ORDER BY num_students DESC; 
SELECT COUNT(*) AS num_students, State FROM Student GROUP BY State ORDER BY num_students DESC LIMIT 1; 
SELECT DISTINCT state FROM Student ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT Country FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student GROUP BY StuID)); 
SELECT DISTINCT Country FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student GROUP BY StuID)); 
SELECT DISTINCT c.city_name FROM City AS c JOIN Student as s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.StuID)>=3; 
SELECT DISTINCT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3); 
SELECT DISTINCT state FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) > 5); 
SELECT DISTINCT state FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) > 5); 
SELECT * FROM Student WHERE NOT EXISTS (SELECT * FROM City WHERE City.country = 'USA' AND Student.city_code = City.city_code); 
SELECT DISTINCT StuID FROM Student WHERE NOT EXISTS (SELECT * FROM City WHERE City.country = 'USA' AND Student.city_code = City.city_code) 
SELECT * FROM Student WHERE sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state='PA'); 
SELECT DISTINCT StuID FROM Student WHERE Sex = 'F' AND State = 'PA'; 
SELECT * FROM Student WHERE Sex = 'M' AND NOT EXISTS (SELECT * FROM City WHERE State = 'USA'); 
SELECT DISTINCT StuID FROM Student WHERE Sex = 'M' AND NOT EXISTS (SELECT * FROM City WHERE Country = 'USA') 
SELECT * FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'; 
SELECT * FROM City WHERE city_code = 'BAL' OR city_code = 'CHI'; 
SELECT * FROM City WHERE city_name = 'Boston' OR city_name = 'Newark'; 
SELECT * FROM City WHERE city_name = 'Boston' OR city_name = 'Newark'; 
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance; 
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance; 
SELECT DISTINCT city1_code FROM Direct_distance WHERE (city1_code, city2_code) IN  
SELECT DISTINCT city1_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance); 
SELECT DISTINCT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance); 
SELECT DISTINCT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance); 
SELECT DISTINCT city1_code FROM Direct_distance WHERE distance < 1000; 
SELECT DISTINCT city1_code FROM Direct_distance WHERE distance < 1000; 
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'; 
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'; 
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS'; 
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS'; 
SELECT * FROM City WHERE city_code = 'CHI'; 
SELECT DISTINCT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' AND distance = (SELECT MIN(distance) FROM Direct_distance WHERE city1_code = 'CHI')); 
SELECT * FROM City WHERE city_code = 'BOS'; 
SELECT DISTINCT c.city_name FROM City AS c JOIN Direct_distance as d ON c.city_code = d.city1_code WHERE c.city_code!= 'BOS' AND (c.latitude - d.city2_code.latitude)^2 + (c.longitude - d.city2_code.longitude)^2 = (SELECT MAX((c.latitude - d.city2_code.latitude)^2 + (c.longitude - d.city2_code.longitude)^2) FROM City AS c JOIN Direct_distance as d ON c.city_code = d.city1_code WHERE c.city_code!= 'BOS') 
SELECT DISTINCT city1_code FROM Direct_distance; 
SELECT DISTINCT city_code, SUM(distance) FROM Direct_distance GROUP BY city_code; 
SELECT DISTINCT city_name FROM City; 
SELECT c.city_name, AVG(d.distance) AS avg_dist FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code GROUP BY c.city_name; 
SELECT * FROM Student WHERE LName = 'Smith' AND Fname = 'Linda'; 
SELECT * FROM Student WHERE LName = 'Smith' AND Fname = 'Linda'; 
SELECT * FROM Student WHERE LName = 'Smith' AND Fname = 'Linda'; 
SELECT CONCAT(LName,' ',Fname) AS Full_Name FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE LName='Smith' AND Fname='Linda') AND StuID NOT IN (SELECT StuID FROM Student WHERE LName='Smith' AND Fname='Linda') ORDER BY ABS(latitude-Student.latitude)+ABS(longitude-Student.longitude) DESC LIMIT 1; 
SELECT DISTINCT state FROM Student WHERE Fname = 'Linda'; 
SELECT DISTINCT State FROM City WHERE Latitude = (SELECT Latitude FROM City WHERE City_Name = 'New York') AND Longitude = (SELECT Longitude FROM City WHERE City_Name = 'New York') 
SELECT * FROM Sailors WHERE age > 30; 
SELECT * FROM Sailors WHERE age > 30; 
SELECT name, age FROM Sailors WHERE age < 30; 
SELECT name, age FROM Sailors WHERE age < 30; 
SELECT * FROM Reserves WHERE sid = 1; 
SELECT DISTINCT bid FROM Reserves WHERE sid = 1; 
SELECT * FROM Reserves WHERE bid = 102; 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102); 
SELECT DISTINCT bid FROM Reserves; 
SELECT DISTINCT bid FROM Reserves; 
SELECT name FROM Sailors WHERE name LIKE '%e%'; 
SELECT name FROM Sailors WHERE name LIKE '%e%'; 
SELECT DISTINCT sid FROM Sailors WHERE age > ALL(SELECT age FROM Sailors); 
SELECT DISTINCT sid FROM Sailors WHERE age = (SELECT MIN(age) FROM Sailors); 
SELECT DISTINCT name FROM Sailors WHERE age > ALL(SELECT age FROM Sailors WHERE rating > 7); 
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT age FROM Sailors WHERE rating > 7) 
SELECT * FROM Sailors WHERE sid IN (SELECT sid FROM Reserves); 
SELECT * FROM Sailors WHERE sid IN (SELECT sid FROM Reserves); 
SELECT s.sid, s.name FROM Sailors AS s JOIN Reserves as r ON s.sid = r.sid GROUP BY s.sid HAVING COUNT(r.bid) > 1; 
SELECT DISTINCT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) >=2); 
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')); 
SELECT DISTINCT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'); 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')); 
SELECT * FROM Sailors WHERE rating > 7 AND age < 30; 
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red') AND sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue'))) 
SELECT DISTINCT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue') ORDER BY sid ASC; 
SELECT s.sid, s.name FROM Sailors AS s JOIN Reserves as r ON s.sid = r.sid WHERE r.bid IN (SELECT b.bid FROM Boats AS b WHERE b.color='red' OR b.color='blue') ORDER BY s.sid ASC; 
SELECT * FROM Sailors WHERE rating > 7 AND age < 30; 
SELECT DISTINCT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT DISTINCT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT * FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT * FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT * FROM Sailors WHERE NOT EXISTS(SELECT * FROM Reserves WHERE Reserves.sid = Sailors.sid); 
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103); 
SELECT * FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis'); 
SELECT DISTINCT s.name FROM Sailors AS s WHERE s.rating > ALL(SELECT r.rating FROM Sailors as r WHERE r.name = 'Luis'); 
SELECT * FROM Sailors WHERE rating > ALL(SELECT rating FROM Sailors WHERE name = 'Luis'); 
SELECT * FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis'); 
SELECT s.name, s.sid FROM Sailors AS s JOIN Reserves as r ON s.sid = r.sid WHERE s.rating > 2 AND r.bid IN (SELECT b.bid FROM Boats as b JOIN Reserves as r ON b.bid = r.bid WHERE r.day = 'Monday') 
SELECT s.sid, s.name FROM Sailors AS s JOIN Reserves as r ON s.sid = r.sid WHERE s.rating >= 3 AND r.bid IN (SELECT b.bid FROM Boats as b JOIN Reserves as r2 ON b.bid = r2.bid WHERE r.day = r2.day); 
SELECT name, age FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors); 
SELECT name, age FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors); 
SELECT COUNT(*) FROM Sailors; 
SELECT COUNT(*) FROM Sailors; 
SELECT AVG(age) FROM Sailors WHERE rating = 7; 
SELECT AVG(age) FROM Sailors WHERE rating = 7; 
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'; 
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'; 
SELECT AVG(rating), MAX(age) FROM Sailors; 
SELECT AVG(rating), MAX(age) FROM Sailors; 
SELECT COUNT(*) FROM Reserves GROUP BY bid; 
SELECT b.name AS BoatName, COUNT(*) as Count FROM Reserves r JOIN Boats b ON r.bid = b.bid GROUP BY b.name ORDER BY Count DESC; 
SELECT COUNT(*) FROM Reserves WHERE bid > 50; 
SELECT COUNT(*) AS num_reservations, b.name FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.bid > 50 GROUP BY b.name; 
SELECT COUNT(*) AS num_reservations, bid FROM Reserves GROUP BY bid HAVING COUNT(*) > 1; 
SELECT b.name AS BoatName, COUNT(*) as CountOfReservations 
SELECT COUNT(*) FROM Reserves WHERE sid > 1 GROUP BY bid; 
SELECT b.name AS BoatName, COUNT(*) as CountOfReservations FROM Reserves r JOIN Sailors s ON r.sid = s.sid WHERE s.sid > 1 GROUP BY b.name ORDER BY CountOfReservations DESC; 
SELECT rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Boats.color ='red' GROUP BY rating; 
SELECT rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Boats.color ='red' GROUP BY rating; 
SELECT name, rating, age FROM Sailors ORDER BY rating DESC, age ASC; 
SELECT name, rating, age FROM Sailors ORDER BY rating DESC, age ASC; 
SELECT COUNT(*) FROM Boats; 
SELECT COUNT(*) FROM Boats; 
SELECT COUNT(*) FROM Boats WHERE color ='red'; 
SELECT COUNT(*) FROM Boats WHERE color ='red'; 
SELECT b.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE s.age BETWEEN 20 AND 30; 
SELECT b.name FROM Boats AS b JOIN Reserves as r ON b.bid = r.bid WHERE r.sid IN (SELECT s.sid FROM Sailors as s WHERE s.age >= 20 AND s.age <= 30); 
SELECT name FROM Sailors WHERE rating > ALL(SELECT rating FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color ='red'); 
SELECT name FROM Sailors WHERE rating > ALL(SELECT rating FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color ='red'); 
SELECT MAX(rating) FROM Sailors; 
SELECT MAX(rating) FROM Sailors; 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon')); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon')); 
SELECT name, age FROM Sailors ORDER BY rating DESC; 
SELECT name, age FROM Sailors ORDER BY rating DESC; 
SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone); 
SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone); 
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC; 
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC; 
SELECT DISTINCT Class FROM headphone ORDER BY COUNT(Class) DESC LIMIT 1; 
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT Class FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING COUNT(Headphone_ID) > 2); 
SELECT DISTINCT Class FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING COUNT(Headphone_ID) > 2); 
SELECT headphone.Class, COUNT(*) AS num_headphones 
SELECT  
SELECT DISTINCT Earpads FROM headphone; 
SELECT COUNT(DISTINCT headphone.Earpads) FROM headphone; 
SELECT DISTINCT Earpads FROM headphone ORDER BY COUNT(*) DESC LIMIT 2; 
SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(Earpads) DESC LIMIT 2; 
SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone); 
SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone); 
SELECT  
SELECT  
SELECT DISTINCT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads'); 
SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Bowls' AND Earpads = 'Comfort Pads'; 
SELECT DISTINCT headphone.Earpads FROM headphone WHERE headphone.Construction!= 'plastic' AND headphone.Earpads IS NOT NULL; 
SELECT DISTINCT headphone.Earpads FROM headphone WHERE headphone.Construction!= 'plastic' 
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone); 
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone); 
SELECT Name FROM store ORDER BY Date_Opened ASC; 
SELECT Name FROM store ORDER BY Date_Opened ASC; 
SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana' 
SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana' 
SELECT DISTINCT Neighborhood FROM store; 
SELECT COUNT(DISTINCT Neighborhood) FROM store; 
SELECT COUNT(neighborhood) FROM store GROUP BY neighborhood; 
SELECT COUNT(DISTINCT Store_ID), Neighborhood FROM store GROUP BY Neighborhood; 
SELECT Name, SUM(Quantity) AS Total_Stock FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY Store_ID ORDER BY Total_Stock DESC LIMIT 1; 
SELECT s.Name, SUM(s.Quantity) FROM store AS s JOIN stock as ss ON s.Store_ID = ss.Store_ID GROUP BY s.Name; 
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT DISTINCT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock); 
SELECT DISTINCT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock); 
SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1); 
SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1); 
SELECT COUNT(*) FROM stock WHERE Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman'); 
SELECT SUM(stock.Quantity) FROM stock JOIN headphone ON stock.Headphone_ID = headphone.Headphone_ID WHERE headphone.Model = 'Woodman' AND headphone.Class = 'Over-Ear'; 
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT COUNT(DISTINCT author_id) FROM Author; 
SELECT COUNT(DISTINCT author_id) FROM Author; 
SELECT COUNT(*) FROM Paper; 
SELECT COUNT(*) FROM Paper; 
SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation; 
SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation; 
SELECT COUNT(*) FROM Paper WHERE year = '2000' AND venue = 'NAACL'; 
SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000; 
SELECT COUNT(*) FROM Paper WHERE year = 2009 AND venue IN (SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE email LIKE '%@columbia.edu'))) 
SELECT COUNT(*) FROM Paper WHERE year = 2009 AND venue IN (SELECT name FROM Affiliation WHERE address LIKE '%New York%'); 
SELECT name, address FROM Affiliation; 
SELECT name, address FROM Affiliation; 
SELECT venue, year FROM Paper ORDER BY year ASC; 
SELECT DISTINCT venue FROM Paper ORDER BY year DESC; 
SELECT Paper.paper_id, Paper.title FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University' JOIN Paper ON Author_list.paper_id = Paper.paper_id; 
SELECT Paper.paper_id, Paper.title FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University' JOIN Paper ON Author_list.paper_id = Paper.paper_id 
SELECT p.paper_id, p.title FROM Paper AS p JOIN Author_list as al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name='Mckeown') ORDER BY p.year DESC; 
SELECT Paper.paper_id, Paper.title FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Paper.paper_id = Author_list.paper_id WHERE Author.name = 'Mckeown'; 
SELECT p.paper_id, p.title FROM Paper AS p JOIN Author_list as al ON p.paper_id = al.paper_id JOIN Affiliation as aff ON al.affiliation_id = aff.affiliation_id WHERE aff.name IN ('Stanford University', 'Columbia University') GROUP BY p.paper_id HAVING COUNT(DISTINCT al.author_id) > 1; 
SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation AS Stanford ON Author_list.affiliation_id = Stanford.affiliation_id JOIN Affiliation AS Columbia ON Author_list.affiliation_id = Columbia.affiliation_id WHERE Stanford.name = 'Stanford' AND Columbia.name = 'Columbia'; 
SELECT p.paper_id, p.title FROM Paper AS p JOIN Author_list as al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name='Mckeown, Kathleen') AND al.author_id IN (SELECT author_id FROM Author WHERE name='Rambow, Owen') 
SELECT p.paper_id, p.title FROM Paper AS p JOIN Author_list as al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name='Mckeown, Kathleen') AND al.author_id IN (SELECT author_id FROM Author WHERE name='Rambow, Owen') 
SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.author_id IN (SELECT Author.author_id FROM Author WHERE Author.name = 'Mckeown') AND Author_list.author_id NOT IN (SELECT Author.author_id FROM Author WHERE Author.name = 'Rambow'); 
SELECT title,paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown') AND affiliation_id IS NULL) AND paper_id NOT IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow'))) 
SELECT Paper.paper_id, Paper.title FROM Author_list JOIN Author ON Author.author_id = Author_list.author_id WHERE Author.name IN ('Mckeown, Kathleen', 'Rambow, Owen') JOIN Paper ON Paper.paper_id = Author_list.paper_id; 
SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.author_id IN (SELECT Author.author_id FROM Author WHERE Author.name LIKE '%Mckeown%' OR Author.name LIKE '%Rambow%') ORDER BY Paper.year DESC; 
SELECT Author.name, COUNT(*) AS num_papers FROM Author LEFT JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id ORDER BY num_papers DESC; 
SELECT Author.name AS name, COUNT(*) as num_papers FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author.author_id = Author_list.author_id GROUP BY Author.name ORDER BY num_papers DESC; 
SELECT affiliation_id, name, address FROM Affiliation ORDER BY COUNT(paper_id) ASC; 
SELECT name FROM Affiliation ORDER BY COUNT(DISTINCT paper_id) DESC; 
SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id HAVING COUNT(Author_list.paper_id) > 50; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) > 50); 
SELECT Author.name FROM Author LEFT JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author_list.paper_id IS NULL GROUP BY Author.author_id HAVING COUNT(Author_list.paper_id)=1; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) = 1); 
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT venue FROM Paper GROUP BY venue HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Paper GROUP BY venue); 
SELECT COUNT(*) FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id WHERE p.paper_id = 'A00-1002'; 
SELECT COUNT(*) FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id WHERE c.paper_id IN (SELECT paper_id FROM Paper WHERE paper_id = 'A00-1002'); 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027'; 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027'; 
SELECT p.paper_id, COUNT(*) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 1; 
SELECT p.paper_id, COUNT(*) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 1; 
SELECT p.title FROM Paper AS p JOIN Citation as c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id ORDER BY COUNT(c.cited_paper_id) DESC LIMIT 1; 
SELECT Paper.title FROM Paper WHERE Paper.paper_id IN ( SELECT Citation.cited_paper_id FROM Citation GROUP BY Citation.cited_paper_id ORDER BY COUNT(Citation.cited_paper_id) DESC LIMIT 1 ); 
SELECT p.paper_id, COUNT(*) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 10; 
SELECT title, COUNT(*) AS num_citations FROM Paper JOIN Citation USING (paper_id) GROUP BY paper_id ORDER BY num_citations DESC LIMIT 10; 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL); 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')); 
SELECT COUNT(*) FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id WHERE author_id IN (SELECT author_id FROM Author WHERE name='Mckeown, Kathleen'); 
SELECT COUNT(*) FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id WHERE author_id IN (SELECT author_id FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE name = 'Mckeown' AND email = 'kathleen@cs.berkeley.edu') AND year > 2000; 
SELECT Author.name, COUNT(Citation.paper_id) AS num_citations FROM Author JOIN Citation ON Author.author_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY num_citations DESC LIMIT 1; 
SELECT Author.name, COUNT(Citation.cited_paper_id) AS num_citations FROM Author JOIN Citation ON Author.author_id = Citation.paper_id GROUP BY Author.author_id ORDER BY num_citations DESC LIMIT 1; 
SELECT venue, year FROM Paper WHERE paper_id IN ( SELECT paper_id FROM Author_list WHERE author_id = ( SELECT author_id FROM Author WHERE name = 'Mckeown' ) AND affiliation_id IS NULL ) 
SELECT DISTINCT venue, year FROM Paper WHERE paper_id IN ( SELECT paper_id FROM Author_list WHERE author_id = ( SELECT author_id FROM Author WHERE name = 'Mckeown' ) AND affiliation_id IS NULL ) ORDER BY venue ASC, year DESC; 
SELECT venue, year FROM Paper WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Columbia University')); 
SELECT DISTINCT venue, year FROM Paper WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Columbia University')); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009)) GROUP BY author_id HAVING COUNT(*) > ALL (SELECT COUNT(*) FROM Paper WHERE year = 2009 GROUP BY author_id)); 
SELECT Author.name FROM Paper JOIN Author ON Paper.paper_id = Author.paper_id WHERE Paper.year = 2009 GROUP BY Author.author_id ORDER BY COUNT(Paper.paper_id) DESC LIMIT 1; 
SELECT affiliation.name FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY affiliation.name ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT affiliation_id, COUNT(*) AS num_papers FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE year=2009 GROUP BY affiliation_id ORDER BY num_papers DESC LIMIT 3; 
SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009; 
SELECT COUNT(*) FROM Paper WHERE year <= 2009 AND venue = 'Columbia University' 
SELECT COUNT(*) FROM Paper WHERE year BETWEEN 2000 AND 2009; 
SELECT COUNT(*) FROM Paper WHERE year BETWEEN 2000 AND 2009 AND venue = 'Stanford University'; 
SELECT * FROM Paper WHERE year = 2015; 
SELECT Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id GROUP BY Paper.paper_id ORDER BY COUNT(Author_list.author_id) DESC LIMIT 1; 
SELECT COUNT(*) FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL; 
SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'University of California, Santa Barbara') AND author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'); 
SELECT author.name AS name, COUNT(*) as count FROM Author_list JOIN Paper ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author.author_id = Author_list.author_id WHERE Author.name = 'Mckeown, Kathleen' GROUP BY author.name ORDER BY count DESC LIMIT 1; 
SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author.email = 'kathleen.mckeown@nyu.edu' GROUP BY Author.name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'; 
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'; 
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT DISTINCT cited_paper_id FROM Citation); 
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT DISTINCT cited_paper_id FROM Citation); 
SELECT Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Paper.paper_id = Author_list.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.name ORDER BY COUNT(Paper.paper_id) DESC LIMIT 1; 
SELECT name FROM Affiliation WHERE address LIKE '%China%' AND affiliation_id IN (SELECT affiliation_id FROM Author_list GROUP BY affiliation_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Author_list)); 
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY year ASC; 
SELECT  
SELECT affiliation_id, COUNT(*) AS num_papers FROM Author_list GROUP BY affiliation_id; 
SELECT affiliation_id, COUNT(*) AS num_papers FROM Author_list GROUP BY affiliation_id; 
SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50); 
SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50); 
SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT DISTINCT author_id FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY author_id HAVING count(*) > 50); 
SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT DISTINCT author_id FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY author_id HAVING SUM(c.cited_paper_id) > 50); 
SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Paper.paper_id IN ( SELECT Citation.cited_paper_id FROM Citation JOIN Paper ON Citation.paper_id = Paper.paper_id WHERE Paper.venue = 'NAACL' AND Paper.year = 2009 ) OR Paper.paper_id IN ( SELECT Citation.paper_id FROM Citation JOIN Paper ON Citation.cited_paper_id = Paper.paper_id WHERE Paper.venue = 'ACL' AND Paper.year = 2009 ) JOIN Paper ON Author_list.paper_id = Paper.paper_id; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2009 UNION SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2009)); 
SELECT Author.name FROM Author LEFT JOIN Paper ON Author.author_id = Paper.author_id WHERE Paper.paper_id IS NULL; 
SELECT name FROM Author WHERE author_id NOT IN (SELECT DISTINCT author_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE venue LIKE 'ACL%'); 
SELECT COUNT(DISTINCT Conference_ID) FROM conference; 
SELECT COUNT(*) FROM conference; 
SELECT DISTINCT Conference_Name FROM conference; 
SELECT DISTINCT Conference_Name FROM conference; 
SELECT Conference_Name, Year, Location FROM conference; 
SELECT conference_name, year, location FROM conference; 
SELECT Conference_Name, COUNT(Conference_Name) AS num_conferences FROM conference GROUP BY Conference_Name; 
SELECT Conference_Name, COUNT(Conference_Name) AS Count FROM conference GROUP BY Conference_Name; 
SELECT Year, COUNT(Conference_ID) AS num_conferences FROM conference GROUP BY Year ORDER BY Year ASC; 
SELECT Conference_ID FROM conference GROUP BY Year HAVING COUNT(Conference_ID) > 1; 
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Year) ASC LIMIT 1; 
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Year) ASC LIMIT 1; 
SELECT DISTINCT Location FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID HAVING COUNT(*)>1); 
SELECT DISTINCT Location FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID HAVING COUNT(*) >= 2); 
SELECT Institution_Name, Location, Founded FROM institution; 
SELECT Institution_Name, Location, Founded FROM institution; 
SELECT COUNT(DISTINCT Institution_ID) FROM institution WHERE Founded BETWEEN 1850 AND 1900; 
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900; 
SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution); 
SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution); 
SELECT Institution_Name, COUNT(*) AS num_staff FROM staff JOIN institution ON staff.Institution_ID = institution.Institution_ID WHERE Founded > 1800 GROUP BY Institution_Name; 
SELECT Institution_Name, COUNT(*) AS num_staff FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE Founded > 1800 GROUP BY Institution_Name; 
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff); 
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff); 
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff); 
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff); 
SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality = 'United States'; 
SELECT MIN(Age), MAX(Age) FROM staff; 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada')); 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada')); 
SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE role ='speaker' AND Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE role ='sponsor')); 
SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE role ='speaker' AND Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE role ='sponsor')); 
SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE Conference_ID = 1) AND staff_id IN (SELECT staff_id FROM conference_participation WHERE Conference_ID = 2) 
SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE Conference_ID = 1 OR Conference_ID = 2) AND Institution_ID IN (SELECT Institution_ID FROM institution WHERE Location = 'USA') ORDER BY name ASC; 
SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004)); 
SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004)); 
SELECT Conference_Name, Year, COUNT(*) AS num_of_participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_Name, Year; 
SELECT Conference_Name, Year, COUNT(*) AS num_of_participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_Name, Year; 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM staff GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2); 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2); 
SELECT staff.name, staff.Nationality FROM staff WHERE staff.staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE Conference_ID = 1 OR Conference_ID = 2) 
SELECT name, nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_name = 'ACL')); 
SELECT i.Institution_Name, i.Location FROM institution AS i LEFT JOIN conference_participation AS cp ON i.Institution_ID = cp.Institution_ID WHERE cp.Conference_ID IS NULL AND Year = '2004'; 
SELECT i.Institution_Name, i.Location FROM institution AS i LEFT JOIN conference_participation AS cp ON i.Institution_ID = cp.Institution_ID WHERE cp.Conference_ID IS NULL AND Year = '2004'; 
SELECT * FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills); 
SELECT * FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills); 
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills); 
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills); 
SELECT * FROM PilotSkills WHERE age < 30; 
SELECT * FROM PilotSkills WHERE age < 30; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35; 
SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'; 
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'; 
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'; 
SELECT DISTINCT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills); 
SELECT COUNT(DISTINCT location) FROM Hangar; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35; 
SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52' AND age < 35; 
SELECT * FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1; 
SELECT plane_name FROM Hangar WHERE COUNT(pilot_name)>1 ORDER BY COUNT(pilot_name) DESC LIMIT 1; 
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT plane_name FROM Hangar WHERE COUNT(pilot_name) = MIN(COUNT(pilot_name)); 
SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = MIN(COUNT(*)) ORDER BY plane_name ASC; 
SELECT COUNT(*) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago') AND pilot_name IN (SELECT pilot_name FROM PilotSkills); 
SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago'); 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41; 
SELECT DISTINCT plane_name FROM PilotSkills; 
SELECT DISTINCT plane_name FROM PilotSkills; 
SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith'; 
SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith'; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC; 
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC; 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC; 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC; 
SELECT DISTINCT location FROM Hangar ORDER BY plane_name; 
SELECT DISTINCT location FROM Hangar ORDER BY plane_name; 
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name ASC; 
SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name ASC; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30; 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30; 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND plane_name!= 'B-52 Bomber'; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND plane_name!= 'B-52 Bomber'; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND plane_name = 'B-52 Bomber'; 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(*) = 2; 
SELECT AVG(age), MIN(age) FROM PilotSkills; 
SELECT AVG(age), MIN(age) FROM PilotSkills; 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Austin', 'Boston') GROUP BY pilot_name HAVING COUNT(*) = 2; 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Austin', 'Boston') GROUP BY pilot_name HAVING COUNT(*) = 2; 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter'); 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter'); 
SELECT AVG(age), plane_name FROM PilotSkills GROUP BY plane_name; 
SELECT AVG(age), plane_name FROM PilotSkills GROUP BY plane_name; 
SELECT COUNT(*) AS num_planes, plane_name FROM Hangar GROUP BY plane_name ORDER BY num_planes DESC; 
SELECT COUNT(*) FROM PilotSkills GROUP BY plane_name; 
SELECT p.plane_name, MAX(p.age) AS max_age FROM PilotSkills p GROUP BY p.plane_name ORDER BY p.plane_name; 
SELECT DISTINCT plane_name, pilot_name FROM PilotSkills ORDER BY plane_name ASC; 
SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills GROUP BY plane_name); 
SELECT DISTINCT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills); 
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name; 
SELECT DISTINCT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name; 
SELECT  
SELECT DISTINCT h.location AS Location, COUNT(p.pilot_name) AS NumPilots, AVG(p.age) AS AvgAge FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name GROUP BY h.location ORDER BY h.location ASC; 
SELECT COUNT(DISTINCT p.pilot_name) FROM PilotSkills AS ps JOIN Hangar AS h ON ps.plane_name = h.plane_name JOIN PilotSkills AS p ON ps.plane_name = p.plane_name WHERE AVG(p.age) < 35; 
SELECT DISTINCT plane_name FROM PilotSkills WHERE age < 35 GROUP BY plane_name HAVING COUNT(*) > 1; 
SELECT location FROM Hangar WHERE plane_name IN ( 
SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name = 'John' AND age = (SELECT MIN(age) FROM PilotSkills)); 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') ORDER BY pilot_name ASC; 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') ORDER BY pilot_name ASC; 
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC; 
SELECT DISTINCT p.pilot_name FROM PilotSkills AS ps JOIN PilotSkills AS p ON ps.plane_name = 'Piper Cub' AND ps.age < p.age ORDER BY p.pilot_name; 
SELECT COUNT(*) FROM PilotSkills WHERE age < ALL(SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter'); 
SELECT COUNT(DISTINCT pilot_name) 
SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'; 
SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%'; 
SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub'); 
SELECT COUNT(DISTINCT p.pilot_name) 
SELECT Name FROM district WHERE Area_km = (SELECT MAX(Area_km) FROM district); 
SELECT Area_km, Government_website FROM district WHERE Population = (SELECT MIN(Population) FROM district); 
SELECT district.Name, district.Population FROM district WHERE district.Area_km > (SELECT AVG(district.Area_km) FROM district); 
SELECT MAX(Area_km), AVG(Area_km) FROM district; 
SELECT SUM(d.Population) FROM district d WHERE (d.Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3)); 
SELECT district.District_ID, district.Name, district.Government_website FROM district ORDER BY Population DESC; 
SELECT Name FROM district WHERE Government_website LIKE '%.gov%'; 
SELECT district.District_ID, district.Name FROM district WHERE (population > 4000) OR (area > 3000); 
SELECT s.Name, s.Speach_title FROM spokesman s JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID 
SELECT AVG(points),AVG(age) FROM spokesman WHERE rank_position=1; 
SELECT spokesman.Name, spokesman.Points FROM spokesman WHERE Age < 40; 
SELECT * FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman); 
SELECT * FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman); 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID ORDER BY COUNT(District_ID) DESC LIMIT 1); 
SELECT Name FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_year < '2004') 
SELECT d.Name AS District_Name, COUNT(s.Spokesman_ID) AS Spokesman_Count FROM spokesman s JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID JOIN district d ON sd.District_ID = d.District_ID GROUP BY d.Name ORDER BY Spokesman_Count DESC; 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 1) AND Start_year >= '2010') AND District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 2) AND Start_year >= '2010') 
SELECT Name FROM district WHERE District_ID IN (SELECT DISTINCT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(DISTINCT Spokesman_ID) > 1); 
SELECT COUNT(DISTINCT district.District_ID) FROM district LEFT JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE spokesman_district.Spokesman_ID IS NULL; 
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district); 
SELECT SUM(d.Population) AS Total_Population, AVG(d.Population) AS Average_Population FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.Spokesman_ID IS NOT NULL GROUP BY d.District_ID; 
SELECT * FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures); 
SELECT * FROM Sculptures ORDER BY year DESC LIMIT 1; 
SELECT p.title, p.location FROM Paintings AS p WHERE p.year = (SELECT MIN(p2.year) FROM Paintings as p2); 
SELECT p.title, l.location FROM Paintings AS p JOIN Locations AS l ON p.location = l.location WHERE p.year = (SELECT MIN(p2.year) FROM Paintings as p2); 
SELECT s.title FROM Sculptures AS s WHERE s.location = 'gallery 226'; 
SELECT * FROM Sculptures WHERE location = '226'; 
SELECT title, location FROM Paintings; 
SELECT p.title, p.location FROM Paintings AS p WHERE p.year = 2010; 
SELECT s.title, s.location FROM Sculptures AS s; 
SELECT * FROM Sculptures; 
SELECT medium FROM Paintings WHERE paintingID = 80; 
SELECT DISTINCT medium FROM Paintings WHERE paintingID = 80; 
SELECT A.fname, A.lname FROM Artists AS A WHERE A.birthYear > 1850; 
SELECT CONCAT(fname,' ',lname) AS name FROM Artists WHERE birthYear > 1850; 
SELECT  
SELECT s.title, s.year FROM Sculptures AS s WHERE s.location!= 'gallery 226'; 
SELECT DISTINCT lname, fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900); 
SELECT DISTINCT A.lname, A.fname FROM Artists AS A JOIN Sculptures as S ON A.artistID = S.sculptorID WHERE S.year < 1900; 
SELECT DISTINCT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920); 
SELECT DISTINCT A.artistID, A.birthYear FROM Artists AS A JOIN Sculptures AS S ON A.artistID = S.sculptorID WHERE S.year > 1920; 
SELECT  
SELECT CONCAT(fname,' ',lname) AS Full_Name FROM Artists WHERE deathYear IS NOT NULL ORDER BY deathYear DESC LIMIT 1; 
SELECT  
SELECT  
SELECT fname, DATEDIFF(deathYear, birthYear) AS age FROM Artists ORDER BY age DESC LIMIT 1; 
SELECT fname, MAX(deathYear - birthYear + 1) AS age FROM Artists GROUP BY artistID ORDER BY age DESC LIMIT 1; 
SELECT COUNT(*) FROM Paintings WHERE location = 'Gallery 240'; 
SELECT COUNT(*) FROM Paintings WHERE location = 'Gallery 240'; 
SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1); 
SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1); 
SELECT  
SELECT p.title, p.year FROM Paintings AS p JOIN Artists as a ON p.painterID = a.artistID WHERE a.fname = 'Mary'; 
SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850); 
SELECT MAX(width_mm) FROM Paintings WHERE year > 1849 AND painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850); 
SELECT location, medium FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo'); 
SELECT DISTINCT location, mediumOn FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo') ORDER BY location ASC; 
SELECT A.fname, A.lname FROM Artists AS A JOIN Paintings AS P ON A.artistID = P.painterID JOIN Sculptures AS S ON A.artistID = S.sculptorID; 
SELECT CONCAT(fname,'', lname) AS name FROM Artists WHERE artistID IN (SELECT DISTINCT painterID FROM Paintings UNION SELECT DISTINCT sculptorID FROM Sculptures); 
SELECT A.fname, A.lname FROM Artists AS A JOIN Paintings as P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.mediumOn = 'lithograph' 
SELECT A.fname, A.lname FROM Artists AS A JOIN Paintings AS P ON A.artistID = P.painterID WHERE P.medium IN ('oil', 'lithograph') GROUP BY A.artistID HAVING COUNT(DISTINCT P.medium) > 1 ORDER BY A.artistID ASC; 
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn = 'canvas') 
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884); 
SELECT DISTINCT fname FROM Artists WHERE EXISTS(SELECT * FROM Paintings WHERE Paintings.painterID = Artists.artistID AND Paintings.medium = 'oil' AND Paintings.location = 'gallery 241'); 
SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE location = 'gallery 241' AND mediumOn = 'oil') ORDER BY fname ASC; 
SELECT COUNT(*) AS numWorks, medium FROM Paintings GROUP BY medium UNION SELECT COUNT(*) AS numWorks, medium FROM Sculptures GROUP BY medium ORDER BY numWorks DESC; 
SELECT COUNT(*) AS numWorks, medium FROM Paintings GROUP BY medium UNION SELECT COUNT(*) AS numWorks, medium FROM Sculptures GROUP BY medium ORDER BY numWorks DESC; 
SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium; 
SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium; 
SELECT COUNT(paintingID), location FROM Paintings WHERE year < 1900 GROUP BY location; 
SELECT COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location; 
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'; 
SELECT p.title FROM Paintings AS p WHERE p.year > 1910 AND p.medium = 'oil' 
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'; 
SELECT DISTINCT p.painterID FROM Paintings AS p JOIN Artists as a ON p.painterID = a.artistID WHERE p.medium = 'oil' AND p.location = 'gallery 240'; 
SELECT DISTINCT p.title FROM Paintings AS p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings as p2 WHERE p2.medium = 'canvas'); 
SELECT DISTINCT p.title FROM Paintings AS p WHERE p.height_mm > ANY(SELECT q.height_mm FROM Paintings as q WHERE q.medium = 'canvas'); 
SELECT DISTINCT p.paintingID FROM Paintings AS p WHERE p.year < (SELECT MIN(p2.year) FROM Paintings as p2 WHERE p2.location = 'gallery 240'); 
SELECT DISTINCT p.paintingID FROM Paintings AS p WHERE p.year < ANY(SELECT s.year FROM Paintings as s WHERE s.location = 'Gallery 240') 
SELECT * FROM Paintings ORDER BY year ASC LIMIT 1; 
SELECT * FROM Paintings ORDER BY year ASC LIMIT 1; 
SELECT A.lname, A.fname FROM Artists AS A JOIN Sculptures as S ON A.artistID = S.sculptorID WHERE S.title LIKE '%female%'; 
SELECT CONCAT(fname,'', lname) AS full_name FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE title LIKE '%female%'; 
SELECT DISTINCT title FROM Paintings ORDER BY title ASC; 
SELECT DISTINCT title FROM Paintings ORDER BY title ASC; 
SELECT DISTINCT p.title FROM Paintings AS p ORDER BY LENGTH(p.title); 
SELECT DISTINCT p.title FROM Paintings AS p ORDER BY p.height_mm ASC; 
SELECT * FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT * FROM Sculptures WHERE year BETWEEN 1900 AND 1950; 
SELECT p.title AS PaintingTitle, s.title AS SculptureTitle FROM Paintings as p JOIN Sculptures as s ON p.year BETWEEN 1900 AND 1950 WHERE p.year = s.year; 
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222; 
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222; 
SELECT * FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(painterID) DESC LIMIT 1); 
SELECT * FROM Artists WHERE artistID = 1; 
SELECT * FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptorID) DESC LIMIT 1); 
SELECT * FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT title FROM Paintings WHERE width < 600 OR height > 800; 
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800; 
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000; 
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000; 
SELECT DISTINCT location FROM Paintings WHERE medium = 'on panel' OR medium = 'on canvas'; 
SELECT DISTINCT location FROM Paintings WHERE medium = 'on panel' OR medium = 'on canvas'; 
SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND year > 1930; 
SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND year > 1930; 
SELECT AVG(height_mm),AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'; 
SELECT AVG(height_mm),AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'; 
SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900 GROUP BY paintingID; 
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1; 
SELECT  
SELECT  
SELECT  
SELECT  
SELECT fname, COUNT(*) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY fname HAVING COUNT(*) >= 2; 
SELECT fname FROM Artists WHERE artistID IN (SELECT DISTINCT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID)>1); 
SELECT * FROM Artists WHERE artistID IN (SELECT DISTINCT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) <= 3); 
SELECT * FROM Artists WHERE artistID IN (SELECT DISTINCT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) < 4); 
SELECT * FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Sculptures GROUP BY sculptorID)); 
SELECT * FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Sculptures GROUP BY sculptorID)); 
SELECT p.paintingID, p.height_mm FROM Paintings AS p WHERE p.width_mm = (SELECT MAX(p2.width_mm) FROM Paintings as p2 WHERE p2.location = 'Gallery 240') AND p.location = 'Gallery 240'; 
SELECT height_mm, paintingID FROM Paintings WHERE location = 'Gallery 240' ORDER BY height_mm DESC LIMIT 1; 
SELECT DISTINCT p.paintingID FROM Paintings AS p WHERE p.year < ALL(SELECT s.year FROM Paintings as s JOIN Galleries as g ON s.location = g.galleryID WHERE g.galleryID = 240); 
SELECT * FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'Gallery 240'); 
SELECT paintingID FROM Paintings WHERE height_mm > ALL(SELECT height_mm FROM Paintings WHERE year > 1900); 
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900); 
SELECT * FROM Artists WHERE artistID IN (SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil') ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT * FROM Artists WHERE artistID IN (SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil'); 
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC; 
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC; 
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title; 
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC; 
SELECT A.fname, A.lname FROM Artists AS A JOIN Paintings AS P ON A.artistID = P.painterID WHERE NOT EXISTS(SELECT * FROM Sculptures AS S WHERE S.sculptorID = A.artistID); 
SELECT DISTINCT A.fname, A.lname FROM Artists AS A LEFT JOIN Sculptures as S ON A.artistID = S.sculptorID WHERE S.sculptorID IS NULL; 
SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND NOT EXISTS(SELECT * FROM Paintings WHERE medium = 'canvas' AND location = Paintings.location); 
SELECT * FROM Paintings WHERE year < 1885 AND medium!= 'canvas'; 
SELECT COUNT(*) FROM race; 
SELECT COUNT(*) FROM race; 
SELECT DISTINCT driver.Driver_Name, race.Winning_team FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Winning_driver = '1' ORDER BY race.Winning_team ASC; 
SELECT DISTINCT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC; 
SELECT * FROM race WHERE Winning_driver NOT IN (SELECT Driver_name FROM driver WHERE Pole_position = 'Junior Strous'); 
SELECT DISTINCT Winning_Driver FROM race WHERE Winning_Driver NOT IN (SELECT Driver_Name FROM driver WHERE Entrant = 'Junior Strous') AND Winning_Driver IS NOT NULL; 
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC; 
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC; 
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20; 
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20; 
SELECT MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM Driver; 
SELECT MAX(age) AS max_age, MIN(age) AS min_age FROM driver; 
SELECT DISTINCT Engine FROM driver WHERE Age > 30 OR Age < 20; 
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20; 
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC; 
SELECT DISTINCT Driver_Name FROM driver ORDER BY Driver_Name DESC; 
SELECT driver.Driver_Name, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID; 
SELECT driver.Driver_Name, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID; 
SELECT driver.Driver_Name, COUNT(race.Road) AS num_races FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_Name ORDER BY num_races DESC; 
SELECT Driver_ID, COUNT(*) AS num_races FROM race GROUP BY Driver_ID; 
SELECT Driver_Age FROM driver WHERE Driver_ID IN (SELECT Road FROM race GROUP BY Road ORDER BY COUNT(*) DESC LIMIT 1) AND Driver_ID IN (SELECT Road FROM race GROUP BY Road ORDER BY COUNT(*) ASC LIMIT 1); 
SELECT Driver_Age FROM (SELECT Driver_ID, COUNT(*) AS Race_Count FROM race GROUP BY Driver_ID ORDER BY Race_Count DESC LIMIT 1) as t JOIN driver ON t.Driver_ID = driver.Driver_ID; 
SELECT driver.Driver_Name, driver.Age FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(*) >= 2; 
SELECT driver.Driver_Name, driver.Age FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(race.Road) >= 2; 
SELECT race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE age >= 26; 
SELECT DISTINCT Race_Name FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Age >= 26); 
SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti'; 
SELECT DISTINCT Driver_Name FROM driver WHERE Constructor!= 'Bugatti'; 
SELECT DISTINCT Constructor, COUNT(Driver_ID) AS num_drivers FROM driver GROUP BY Constructor ORDER BY num_drivers DESC; 
SELECT DISTINCT Constructor, COUNT(*) AS Count FROM driver GROUP BY Constructor ORDER BY Count DESC; 
SELECT DISTINCT Engine FROM driver ORDER BY COUNT(Engine) DESC LIMIT 1; 
SELECT DISTINCT Engine FROM driver ORDER BY COUNT(Engine) DESC LIMIT 1; 
SELECT DISTINCT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Engine) > 1); 
SELECT DISTINCT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver GROUP BY Driver_ID HAVING COUNT(Driver_ID) > 1); 
SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race); 
SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race); 
SELECT DISTINCT Constructor FROM driver WHERE Age < 20 OR Age > 30; 
SELECT DISTINCT Constructor FROM driver WHERE Age < 20 OR Age > 30; 
SELECT DISTINCT Constructor FROM driver WHERE Driver_ID IN (SELECT Winning_driver FROM race GROUP BY Winning_driver HAVING COUNT(*) > 1); 
SELECT DISTINCT Constructor FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Driver_ID) > 1); 
SELECT DISTINCT driver.Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong') AND race.Road < 2010; 
SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe') AND Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong') 
SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe'); 
SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe'); 
SELECT COUNT(*) FROM languages; 
SELECT COUNT(DISTINCT name) FROM languages; 
SELECT name FROM languages ORDER BY name ASC; 
SELECT name FROM languages ORDER BY name ASC; 
SELECT name FROM languages WHERE name LIKE '%ish%'; 
SELECT name FROM languages WHERE name LIKE '%ish%'; 
SELECT name FROM countries ORDER BY overall_score DESC; 
SELECT name FROM countries ORDER BY overall_score DESC; 
SELECT AVG(c.overall_score) FROM countries c WHERE c.id IN (SELECT o.country_id FROM official_languages o WHERE o.language_id = 1); 
SELECT AVG(c.judiciary_score) FROM countries c; 
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name!= 'Norway'; 
SELECT MAX(health_score) AS max_health_score, MIN(health_score) AS min_health_score FROM countries WHERE id!= 1; 
SELECT COUNT(DISTINCT language_id) FROM official_languages; 
SELECT COUNT(DISTINCT l.name) FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id; 
SELECT name FROM countries ORDER BY education_score DESC; 
SELECT name FROM countries ORDER BY education_score DESC; 
SELECT countries.name FROM countries WHERE overall_score = (SELECT MAX(overall_score) FROM countries); 
SELECT countries.name FROM countries WHERE countries.politics_score = (SELECT MAX(countries.politics_score) FROM countries); 
SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages); 
SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id; 
SELECT l.name AS 'Language', COUNT(*) as 'Number of Countries' FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY l.name ORDER BY Number_of_Countries DESC; 
SELECT l.name AS name, COUNT(*) AS num_countries FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY l.name ORDER BY num_countries DESC; 
SELECT name FROM languages WHERE id IN ( SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 1 ) ; 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(language_id) DESC LIMIT 1); 
SELECT l.name FROM languages AS l JOIN official_languages AS ol ON l.id = ol.language_id GROUP BY l.name HAVING COUNT(ol.country_id) >= 2; 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(*) > 1); 
SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IN (SELECT l.id FROM languages l WHERE l.name = 'English'); 
SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IN (SELECT l.id FROM languages l WHERE l.name = 'English'); 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3); 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(*) = 3 ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT l.name AS 'Official Language', AVG(c.overall_score) AS 'Average Overall Score' 
SELECT l.name FROM languages AS l JOIN official_languages AS ol ON l.id = ol.language_id GROUP BY l.id ORDER BY AVG(c.overall_score) DESC; 
SELECT countries.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.id ORDER BY COUNT(official_languages.language_id) DESC LIMIT 1; 
SELECT countries.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.name ORDER BY COUNT(official_languages.language_id) DESC LIMIT 1; 
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages); 
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages); 
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages); 
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages); 
SELECT name FROM languages WHERE id IN ( SELECT language_id FROM official_languages WHERE country_id IN ( SELECT id FROM countries WHERE overall_score > 95 ) OR country_id IN ( SELECT id FROM countries WHERE overall_score < 90 ) ) 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95) AND country_id NOT IN (SELECT id FROM countries WHERE overall_score < 90)) ORDER BY name ASC; 
SELECT DISTINCT country, town_city FROM Addresses ORDER BY country ASC, town_city ASC; 
SELECT country, town_city FROM Addresses; 
SELECT DISTINCT county_state_province FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Photos WHERE photo_filename LIKE '%.jpg'); 
SELECT DISTINCT county_state_province FROM Properties; 
SELECT DISTINCT feature_value FROM Property_Features WHERE property_id IN ( SELECT property_id FROM Properties WHERE property_type_code = 'Rooftop' ) 
SELECT Ref_Feature.feature_description FROM Property_Features INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Feature_Name='rooftop' AND Property_Features.property_id IN ( SELECT property_id FROM Properties WHERE owner_user_id IN ( SELECT user_id FROM Users WHERE login_name='joe') ) 
SELECT f.feature_name, f.feature_description FROM Features AS f JOIN Property_Features as pf ON f.feature_id = pf.feature_id GROUP BY f.feature_name ORDER BY COUNT(pf.property_id) DESC LIMIT 1; 
SELECT f.feature_name, f.feature_description FROM Features AS f JOIN Property_Features AS pf ON f.feature_id = pf.feature_id GROUP BY f.feature_id ORDER BY COUNT(pf.property_id) DESC LIMIT 1; 
SELECT MIN(room_count) FROM Rooms; 
SELECT MIN(room_count) FROM Rooms; 
SELECT COUNT(*) FROM Properties WHERE (parking_lots = 'Y' OR garage_yn = 'Y') AND (parking_lots!= 'N' OR garage_yn!= 'N') 
SELECT COUNT(*) FROM Properties WHERE (parking_lots = 'Y' OR garage_yn = 'Y') AND (parking_lots!= 'N' OR garage_yn!= 'N') 
SELECT DISTINCT age_category_code FROM Users WHERE middle_name LIKE '%Mother%'; 
SELECT * FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%'; 
SELECT * FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(owner_user_id) DESC LIMIT 1); 
SELECT first_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT AVG(room_count) FROM Rooms WHERE feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'Garden'); 
SELECT AVG(room_count) FROM Rooms r JOIN Property_Features pf ON r.property_id = pf.property_id WHERE feature_id IN (SELECT feature_id FROM Features f WHERE f.feature_name = 'Garden') AND room_type_code = 'Bedroom'; 
SELECT DISTINCT town_city FROM Addresses WHERE address_id IN ( SELECT property_address_id FROM Properties WHERE property_id IN ( SELECT property_id FROM Property_Features WHERE feature_id = 4 AND feature_value = 'Yes' ) ) 
SELECT DISTINCT town_city FROM Addresses WHERE address_id IN ( SELECT property_address_id FROM Properties WHERE property_id IN ( SELECT property_id FROM Property_Features WHERE feature_id = 4 AND feature_value = 'Yes' ) ) 
SELECT p.property_id, p.vendor_requested_price FROM Properties AS p WHERE p.vendor_requested_price = (SELECT MIN(p.vendor_requested_price) FROM Properties as p); 
SELECT property_id FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties); 
SELECT AVG(room_count) FROM Rooms; 
SELECT AVG(room_count) FROM Rooms; 
SELECT COUNT(DISTINCT(room_size)) FROM Rooms; 
SELECT COUNT(DISTINCT Rooms.room_size) FROM Rooms; 
SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2; 
SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2; 
SELECT MAX(search_datetime) FROM User_Searches; 
SELECT MAX(search_datetime) FROM User_Searches; 
SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC; 
SELECT * FROM User_Searches ORDER BY search_string DESC; 
SELECT DISTINCT Addresses.zip_postcode FROM Properties INNER JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_id IN ( SELECT user_id FROM User_Property_History GROUP BY user_id HAVING COUNT(*) <= 2 ) 
SELECT DISTINCT Addresses.zip_postcode FROM Properties INNER JOIN Users ON Properties.owner_user_id = Users.user_id WHERE (SELECT COUNT(*) FROM User_Property_History WHERE User_Property_History.property_id = Properties.property_id AND User_Property_History.user_id = Users.user_id) < 3; 
SELECT DISTINCT u.user_category_code AS 'Category', u.user_id AS 'ID' 
SELECT user_id, user_category_code FROM Users WHERE user_id IN ( SELECT DISTINCT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1 ) 
SELECT * FROM Ref_Age_Categories; 
SELECT Ref_Age_Categories.age_category_description FROM Users INNER JOIN User_Searches ON Users.user_id = User_Searches.user_id WHERE User_Searches.search_datetime = (SELECT MIN(User_Searches.search_datetime) FROM User_Searches) INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code; 
SELECT Users.login_name FROM Users WHERE Users.age_category_code = 'Senior Citizen' ORDER BY Users.first_name ASC; 
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name ASC; 
SELECT COUNT(*) FROM User_Searches WHERE is_buyer = 'Y'; 
SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = 'Y') AND search_string LIKE '%buy%'; 
SELECT date_registered FROM Users WHERE login_name = 'ratione'; 
SELECT * FROM Users WHERE login_name = 'ratione'; 
SELECT Users.first_name, Users.middle_name, Users.last_name, Users.login_name FROM Users WHERE Users.is_seller = '1'; 
SELECT Users.first_name AS First_Name, Users.middle_name AS Middle_Name, Users.last_name AS Last_Name, Users.login_name AS Login_Name FROM Users WHERE Users.is_seller = 'Y'; 
SELECT line_1_number_building ||'' || line_2_number_street || ','|| town_city AS address FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE age_category_code = 'Senior Citizen' AND user_category_code = 'Buyer'; 
SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE age_category_code = 'Senior Citizen'; 
SELECT COUNT(*) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE feature_id IN (SELECT feature_id FROM Property_Features GROUP BY property_id HAVING count(feature_id) >= 2); 
SELECT COUNT(*) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE (pf.feature_id IN (SELECT feature_id FROM Features f WHERE f.feature_name LIKE '%kitchen%') AND pf.feature_id IN (SELECT feature_id FROM Features f WHERE f.feature_name LIKE '%bathroom%')); 
SELECT p.property_id, COUNT(*) AS photo_count FROM Property_Photos pp JOIN Properties p ON pp.property_id = p.property_id GROUP BY p.property_id ORDER BY p.property_id ASC; 
SELECT COUNT(*) AS num_photos FROM Property_Photos WHERE property_id = 1234; 
SELECT Users.user_id, COUNT(Property_Photos.photo_seq) AS num_photos FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id; 
SELECT DISTINCT Users.user_id FROM Users INNER JOIN Property_Photos ON Users.user_id = Property_Photos.property_id WHERE Property_Photos.photo_filename IS NOT NULL; 
SELECT SUM(price_max) FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.age_category_code IN ('Single Mother', 'Student') OR u.user_category_code IN ('Single Mother', 'Student'); 
SELECT MAX(vendor_requested_price) FROM Properties WHERE user_id IN (SELECT user_id FROM Users WHERE age_category_code = 'Single Mother' OR user_category_code = 'Student') AND date_off_market IS NULL; 
SELECT User_Property_History.datestamp, Properties.property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp ASC; 
SELECT User_Property_History.datestamp, Properties.property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp ASC; 
SELECT Ref_Property_Types.property_type_description FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id INNER JOIN Addresses ON Properties.property_address_id = Addresses.address_id INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE (Users.is_buyer = 'Y') AND (Users.is_seller = 'N') AND (Features.feature_name = 'Most Common Property Type') GROUP BY Ref_Property_Types.property_type_description ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Ref_Property_Types.property_type_description FROM Properties INNER JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code GROUP BY Ref_Property_Types.property_type_description ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Ref_Age_Categories.age_category_description FROM Users INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Users.user_id IN ( SELECT User_Property_History.property_id FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id WHERE Properties.owner_user_id IN ( SELECT Users.user_id FROM Users INNER JOIN Addresses ON Users.user_address_id = Addresses.address_id WHERE Addresses.zip_postcode LIKE '%SW%' AND Users.is_buyer = 'Y' ) ) AND Users.user_id IN ( SELECT User_Property_History.property_id FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id WHERE Properties.owner_user_id IN ( SELECT Users.user_id FROM Users INNER JOIN Addresses ON Users.user_address_id = Addresses.address_id WHERE Addresses.zip_postcode LIKE '%SW%' AND Users.is_buyer = 'N' ) ) AND Users.user_id IN ( SELECT User_Property_History.property_id FROM
SELECT Ref_Age_Categories.age_category_description FROM Users INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Users.user_id IN ( SELECT User_Property_History.property_id FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id WHERE Properties.owner_user_id IN ( SELECT Users.user_id FROM Users INNER JOIN Addresses ON Users.user_address_id = Addresses.address_id WHERE Addresses.zip_postcode LIKE '%SW%' AND Addresses.town_city LIKE '%London' ) ) AND Users.user_id IN ( SELECT User_Property_History.user_id FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id WHERE Properties.owner_user_id IN ( SELECT Users.user_id FROM Users INNER JOIN Addresses ON Users.user_address_id = Addresses.address_id WHERE Addresses.zip_postcode LIKE '%SW%' AND Addresses.town_city LIKE '%London' ) ) AND Users.user_id IN ( SELECT User_Property_History.user_id FROM
SELECT DISTINCT room_size FROM Rooms ORDER BY room_size ASC; 
SELECT  
SELECT DISTINCT country FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie'); 
SELECT country FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE first_name = 'Robbie'; 
SELECT Users.first_name, Users.middle_name, Users.last_name FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id WHERE Users.user_address_id = Properties.property_address_id; 
SELECT CONCAT(first_name,' ', middle_name,'', last_name) AS user_fullname FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties); 
SELECT DISTINCT user_search.search_string FROM Users INNER JOIN User_Searches ON Users.user_id = User_Searches.user_id WHERE Users.user_id NOT IN ( SELECT owner_user_id FROM Properties ) 
SELECT DISTINCT user_search.search_string FROM User_Searches AS user_search WHERE user_search.user_id IN ( SELECT user.id FROM Users AS user LEFT JOIN Properties AS property ON user.user_id = property.owner_user_id WHERE property.property_id IS NULL ) 
SELECT Users.last_name, Users.user_id FROM Users INNER JOIN User_Property_History ON Users.user_id = User_Property_History.user_id GROUP BY Users.last_name HAVING COUNT(User_Property_History.property_id) >= 2 AND COUNT(User_Searches.search_seq) <= 2; 
SELECT Users.last_name, Users.user_id FROM Users WHERE (SELECT COUNT(*) FROM User_Searches WHERE User_Searches.user_id = Users.user_id) <= 2 AND (SELECT COUNT(*) FROM User_Property_History WHERE User_Property_History.user_id = Users.user_id) >= 2; 
SELECT COUNT(*) FROM bike WHERE weight > 780; 
SELECT bike.product_name, bike.weight FROM bike ORDER BY bike.price ASC; 
SELECT cyclist.heat, cyclist.name, cyclist.nation FROM cyclist 
SELECT MAX(weight), MIN(weight) FROM bike; 
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC'; 
SELECT cyclist.name, cyclist.result FROM cyclist WHERE cyclist.nation!= 'Russia' 
SELECT DISTINCT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE purchase_year > 2015; 
SELECT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE (SELECT COUNT(*) FROM cyclists_own_bikes GROUP BY bike.id HAVING COUNT(*) >= 4) AND bike.material = 'racing' 
SELECT * FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY COUNT(cyclist_id) DESC LIMIT 1; 
SELECT DISTINCT bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE (cyclist.nation = 'Russia') OR (cyclist.nation = 'Great Britain') 
SELECT DISTINCT(heat) FROM cyclist; 
SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015); 
SELECT DISTINCT bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.result > 421.558; 
SELECT b.product_name, b.price FROM bike AS b JOIN cyclists_own_bikes AS cob ON b.id = cob.bike_id WHERE cob.cyclist_id IN (SELECT c.id FROM cyclist AS c WHERE c.name = 'Bradley Wiggins') AND cob.cyclist_id IN (SELECT c.id FROM cyclist AS c WHERE c.name = 'Antonio Tauler'); 
SELECT cyclist.name, cyclist.nation, cyclist.result FROM cyclist LEFT JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id WHERE cyclists_own_bikes.bike_id IS NULL AND cyclists_own_bikes.purchase_year IS NULL; 
SELECT product_name FROM bike WHERE material LIKE '%fiber%'; 
SELECT  
SELECT MAX(goods.Price), goods.Flavor FROM items JOIN goods ON items.Item = goods.Id WHERE items.Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 1) GROUP BY goods.Flavor; 
SELECT g.Id, g.Flavor FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt IN (SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id WHERE c.LastName = 'Smith') AND g.Food = 'cake' ORDER BY g.Price DESC LIMIT 1; 
SELECT g.Flavor FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt IN (SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id WHERE c.LastName = 'Smith') AND i.Ordinal = 1 AND g.Food = 'Cookie' ORDER BY g.Price ASC LIMIT 1; 
SELECT * FROM items WHERE Item = 'cookie' AND Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName='John')); 
SELECT Id FROM goods WHERE Flavor = 'apple'; 
SELECT Id FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple'); 
SELECT Id FROM goods WHERE Price < 3.0 
SELECT Id FROM goods WHERE Price < 3.0; 
SELECT DISTINCT c.Id FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake'; 
SELECT DISTINCT c.Id FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake'; 
SELECT COUNT(DISTINCT receipts.CustomerId), goods.Food FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food; 
SELECT c.LastName, g.Food, COUNT(*) AS Count 
SELECT c.Id FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'bakery' GROUP BY c.Id HAVING COUNT(*) >= 15; 
SELECT DISTINCT CustomerId FROM receipts WHERE ReceiptNumber >= 15; 
SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items WHERE Item = 'Bakery' GROUP BY ReceiptNumber HAVING COUNT(*) > 10)) 
SELECT c.LastName FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id JOIN customers c ON r.CustomerId = c.Id WHERE g.Food = 'bakery' GROUP BY c.LastName HAVING COUNT(*) > 10; 
SELECT COUNT(DISTINCT Item) FROM items WHERE Item LIKE 'Cake%'; 
SELECT COUNT(DISTINCT g.Flavor) FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake'; 
SELECT DISTINCT g.Flavor FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Item LIKE 'Croissant%'; 
SELECT DISTINCT Flavor FROM items WHERE Item = 'croissant'; 
SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); 
SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); 
SELECT  
SELECT  
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John' OR LastName = 'Smith') AND Date >= '2019-01-01'; 
SELECT ReceiptNumber FROM receipts WHERE Id IN (SELECT Item FROM items WHERE Item IN ('cake', 'cookie')); 
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'LOGAN') AND EXISTS (SELECT * FROM items WHERE Item = 'Croissant' AND Receipt = ReceiptNumber) 
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND EXISTS (SELECT * FROM items WHERE Item = 'croissant' AND ReceiptNumber = receipts.ReceiptNumber); 
SELECT ReceiptNumber, Date FROM receipts WHERE Id IN (SELECT Item FROM items ORDER BY Price DESC LIMIT 1); 
SELECT receipts.ReceiptNumber, receipts.Date FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price = (SELECT MAX(goods.Price) FROM goods); 
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) ASC LIMIT 1; 
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) ASC LIMIT 1; 
SELECT COUNT(goods.Id), goods.Food FROM goods GROUP BY goods.Food; 
SELECT COUNT(goods.Id), goods.Food FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food; 
SELECT AVG(goods.Price) AS avg_price, goods.Food FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food; 
SELECT AVG(goods.Price) AS avg_price, goods.Food FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food; 
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.0 
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.0 
SELECT Flavor FROM goods WHERE Price > 10 AND Food = 'Cake' 
SELECT DISTINCT g.Flavor FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt IN (SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id WHERE c.LastName = 'Smith') AND g.Price > 10.0 
SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods); 
SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods); 
SELECT DISTINCT Id FROM goods WHERE Price < ANY (SELECT Price FROM goods WHERE Flavor = 'Tart'); 
SELECT DISTINCT Item FROM items WHERE Price < ANY (SELECT Price FROM goods WHERE Flavor = 'Tart'); 
SELECT DISTINCT ReceiptNumber FROM receipts WHERE EXISTS (SELECT * FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13.0 AND receipts.ReceiptNumber = items.Receipt); 
SELECT DISTINCT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John' AND LastName = 'Doe') AND EXISTS (SELECT * FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13.0) 
SELECT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15.0 AND receipts.CustomerId IN (SELECT Id FROM customers); 
SELECT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15.0 AND receipts.CustomerId = 1; 
SELECT Id FROM goods WHERE Id LIKE '%APP%'; 
SELECT Id FROM goods WHERE Id LIKE '%APP%'; 
SELECT * FROM goods WHERE Id LIKE '%70%' AND Price = 0.7; 
SELECT items.Item, goods.Price FROM items JOIN goods ON items.Item = goods.Id WHERE items.Receipt = 1 AND items.Ordinal = 2; 
SELECT LastName FROM customers ORDER BY LastName ASC; 
SELECT LastName FROM customers ORDER BY LastName ASC; 
SELECT Item FROM items ORDER BY Receipt ASC, Ordinal ASC; 
SELECT DISTINCT Item FROM items ORDER BY Item ASC; 
SELECT * FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item = 'apple flavor pie' OR CustomerId = 12); 
SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR EXISTS(SELECT * FROM items JOIN goods ON items.Item = goods.Id WHERE Flavor = 'apple' AND Food = 'pie') 
SELECT * FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts); 
SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts); 
SELECT * FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts)) OR EXISTS(SELECT * FROM items JOIN goods ON items.Item=goods.Id WHERE Price > 10); 
SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR Price > 10; 
SELECT Id FROM goods WHERE Flavor = 'Cookie' OR Flavor = 'Cake' AND Price BETWEEN 3 AND 7 
SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7; 
SELECT FirstName, LastName FROM customers WHERE ReceiptNumber IN (SELECT MIN(ReceiptNumber) FROM receipts GROUP BY CustomerId); 
SELECT c.FirstName ||'' || c.LastName AS FullName FROM receipts r JOIN customers c ON r.CustomerId = c.Id WHERE r.Date = (SELECT MIN(r2.Date) FROM receipts r2); 
SELECT AVG(goods.Price) FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor IN ('blackberry', 'blueberry'); 
SELECT AVG(goods.Price) FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor IN ('blackberry', 'blueberry'); 
SELECT MIN(goods.Price) FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'cheese'; 
SELECT * FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'cheese') ORDER BY Price ASC LIMIT 1; 
SELECT  
SELECT  
SELECT MIN(goods.Price), MAX(goods.Price) FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food ORDER BY goods.Food ASC; 
SELECT MIN(goods.Price), MAX(goods.Price) FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food IS NOT NULL ORDER BY goods.Food; 
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT c.LastName, COUNT(*) AS Count FROM receipts r JOIN customers c ON r.CustomerId = c.Id GROUP BY c.LastName ORDER BY Count DESC LIMIT 1; 
SELECT c.Id, COUNT(*) AS NumPurchases FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN customers c ON r.CustomerId = c.Id GROUP BY c.Id ORDER BY NumPurchases DESC LIMIT 1; 
SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date; 
SELECT receipts.Date, COUNT(*) AS Count FROM receipts GROUP BY Date ORDER BY Date ASC; 
SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item = 'apple' AND Item IN (SELECT Id FROM goods WHERE Flavor = 'Tart'))) 
SELECT c.FirstName ||'' || c.LastName AS FullName FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tart'; 
SELECT Id FROM goods WHERE Flavor = 'Cookies' AND Price < ANY (SELECT Price FROM goods WHERE Flavor = 'Croissants'); 
SELECT Id FROM goods WHERE Flavor = 'cookie' AND Price < ANY (SELECT Price FROM goods WHERE Flavor = 'croissant'); 
SELECT Id FROM goods WHERE Flavor = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart'); 
SELECT Id FROM goods WHERE Flavor = 'Tart' AND Price >= (SELECT AVG(Price) FROM goods WHERE Flavor = 'Cake'); 
SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods); 
SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods); 
SELECT items.Item, goods.Flavor, goods.Food FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id ORDER BY goods.Price DESC; 
SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY Price DESC; 
SELECT items.Item, goods.Flavor FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake' ORDER BY goods.Flavor; 
SELECT items.Item, goods.Flavor FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cake' ORDER BY goods.Flavor; 
SELECT * FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'chocolate') AND Receipt NOT IN (SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber HAVING COUNT(*) > 10); 
SELECT Item FROM items WHERE Flavor = 'chocolate' GROUP BY Item HAVING COUNT(*) <= 10; 
SELECT DISTINCT g.Flavor FROM goods AS g JOIN items AS i ON g.Id = i.Item WHERE g.Food = 'Cake' AND g.Id NOT IN (SELECT Item FROM items WHERE Food = 'Tart'); 
SELECT DISTINCT g.Flavor FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt IN (SELECT ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id WHERE c.LastName = 'Smith') AND g.Food!= 'Tart'; 
SELECT * FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 1); 
SELECT Item FROM receipts NATURAL JOIN items GROUP BY Item ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT c.Id FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id JOIN customers c ON r.CustomerId = c.Id WHERE SUM(g.Price * i.Ordinal) > 150; 
SELECT c.Id FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id JOIN customers c ON r.CustomerId = c.Id WHERE SUM(g.Price * i.Ordinal) > 150 GROUP BY c.Id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM receipts r2 JOIN items i2 ON r2.ReceiptNumber = i2.Receipt JOIN goods g2 ON i2.Item = g2.Id JOIN customers c2 ON r2.CustomerId = c2.Id WHERE SUM(g2.Price * i2.Ordinal) > 150 GROUP BY c2.Id); 
SELECT c.Id FROM customers AS c JOIN receipts as r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt WHERE (SELECT AVG(g.Price) FROM goods g JOIN items i2 ON g.Id = i2.Item WHERE i2.Receipt = i.Receipt AND i2.Ordinal = i.Ordinal) > 5; 
SELECT c.Id FROM customers AS c JOIN receipts as r ON c.Id = r.CustomerId WHERE r.ReceiptNumber IN (SELECT ReceiptNumber FROM items GROUP BY ReceiptNumber HAVING SUM(items.Price) > 5); 
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items GROUP BY ReceiptNumber HAVING SUM(goods.Price) > 100); 
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items GROUP BY ReceiptNumber HAVING SUM(goods.Price) > 100); 
SELECT COUNT(DISTINCT Driver_ID) FROM driver; 
SELECT COUNT(Driver_ID) FROM driver; 
SELECT COUNT(Driver_ID) FROM driver WHERE Points > 150 GROUP BY Make; 
SELECT Make, COUNT(Driver_ID) AS Count FROM driver WHERE Points > 150 GROUP BY Make; 
SELECT  
SELECT AVG(Driver.Age), Driver.Make FROM driver GROUP BY Driver.Make; 
SELECT AVG(Laps) FROM driver WHERE Age < 20; 
SELECT AVG(laps) FROM driver WHERE Age < 20; 
SELECT team_manager, team_sponsor FROM team ORDER BY car_owner; 
SELECT t.Manager, t.Sponsor FROM team_driver td JOIN team t ON td.Team_ID = t.Team_ID ORDER BY Car_Owner; 
SELECT DISTINCT Make FROM Team WHERE Team_ID IN (SELECT Team_ID FROM Team_Driver GROUP BY Team_ID HAVING COUNT(DISTINCT Driver_ID) > 1); 
SELECT DISTINCT Make FROM Team WHERE Team_ID IN (SELECT Team_ID FROM Team_Driver GROUP BY Team_ID HAVING COUNT(DISTINCT Driver_ID) > 1); 
SELECT DISTINCT Make FROM team WHERE Car_Owner = 'Buddy Arrington'; 
SELECT Make FROM team WHERE Car_owner = 'Buddy Arrington'; 
SELECT MAX(Driver.Points), MIN(Driver.Points) FROM driver as Driver; 
SELECT MAX(Driver.Points) AS Highest_Points, MIN(Driver.Points) AS Lowest_Points FROM driver Driver; 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Points DESC; 
SELECT Driver FROM driver ORDER BY Points DESC; 
SELECT driver.Driver, country.Country FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID INNER JOIN team ON team_driver.Team_ID = team.Team_ID INNER JOIN country ON driver.Country = country.Country_Id; 
SELECT Driver.Driver, Country.Country FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID INNER JOIN team ON team_driver.Team_ID = team.Team_ID INNER JOIN country ON driver.Country = country.Country_Id 
SELECT MAX(Driver.Points) FROM driver JOIN country ON Driver.Country = Country.Country_id WHERE Country.Capital = 'Dublin'; 
SELECT MAX(Driver.Points) FROM driver as Driver JOIN team_driver as Team_Driver ON Driver.Driver_ID = Team_Driver.Driver_ID JOIN team as Team ON Team_Driver.Team_ID = Team.Team_ID JOIN country as Country ON Driver.Country = Country.Country_Id WHERE Country.Capital = 'Dublin'; 
SELECT AVG(Driver.Age) FROM driver JOIN country ON Driver.Country = Country.Country_Id WHERE Official_Native_Language = 'English' 
SELECT AVG(Driver.Age) FROM driver JOIN country ON Driver.Country = Country.Country_Id WHERE Official_Native_Language = 'English'; 
SELECT DISTINCT country.Country FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID INNER JOIN team ON team_driver.Team_ID = team.Team_ID WHERE driver.Points > 150 AND country.Country_id = driver.Country; 
SELECT DISTINCT country.Country FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID WHERE driver.Points > 150 AND team_driver.Team_ID IN (SELECT Team_ID FROM team WHERE Make = 'Mercedes') ORDER BY country.Country; 
SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM team_driver WHERE Team_ID = (SELECT Team_ID FROM team WHERE Points = (SELECT MAX(Points) FROM driver)))); 
SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM team_driver WHERE Team_ID = (SELECT Team_ID FROM team WHERE Team = (SELECT Team FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM driver WHERE Points = (SELECT MAX(Points) FROM driver)))))) 
SELECT Make, COUNT(Driver_ID) AS Driver_Count FROM driver GROUP BY Make ORDER BY Driver_Count DESC; 
SELECT Make, COUNT(Driver) FROM driver GROUP BY Make; 
SELECT DISTINCT Make FROM driver ORDER BY COUNT(DISTINCT Driver) DESC LIMIT 1; 
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Make) DESC LIMIT 1; 
SELECT DISTINCT Make FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM team_driver GROUP BY Driver_ID HAVING COUNT(Driver_ID) >= 3); 
SELECT DISTINCT Make FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM team_driver GROUP BY Driver_ID HAVING COUNT(Driver_ID) >= 3); 
SELECT Team FROM team WHERE Driver_ID IS NULL; 
SELECT Team FROM team WHERE Driver_ID NOT IN (SELECT Driver_ID FROM team_driver); 
SELECT DISTINCT c.Country FROM driver d JOIN team_driver td ON d.Driver_ID = td.Driver_ID JOIN team t ON td.Team_ID = t.Team_ID WHERE d.Make = 'Dodge' AND t.Make = 'Chevrolet'; 
SELECT DISTINCT country.Country FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID INNER JOIN team ON team_driver.Team_ID = team.Team_ID WHERE (driver.Make = 'Dodge' AND team.Make = 'Chevrolet') OR (driver.Make = 'Chevrolet' AND team.Make = 'Dodge'); 
SELECT SUM(Driver.Points) AS Total_Points, AVG(Driver.Points) AS Average_Points FROM driver; 
SELECT SUM(Driver.Points) AS Total_Points, AVG(Driver.Points) AS Average_Points FROM driver; 
SELECT DISTINCT country.Country FROM country LEFT JOIN team_driver ON team_driver.Driver_ID = driver.Driver_ID WHERE team_driver.Driver_ID IS NULL; 
SELECT DISTINCT country.Country FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID WHERE team_driver.Team_ID NOT IN (SELECT Team_ID FROM team_driver) AND driver.Country = country.Country ORDER BY country.Country; 
SELECT t.Manager, t.Sponsor FROM team_driver td JOIN team t ON td.Team_ID = t.Team_ID WHERE (SELECT COUNT(*) FROM team_driver) = (SELECT MAX(COUNT(*)) FROM team_driver); 
SELECT t.Manager, t.Sponsor FROM team_driver td JOIN team t ON td.Team_ID = t.Team_ID GROUP BY t.Team_ID HAVING COUNT(*) > (SELECT MAX(COUNT(*)) FROM team_driver); 
SELECT t.Manager, td.Car_Owner FROM team_driver AS td JOIN team as t ON td.Team_ID = t.Team_ID WHERE (SELECT COUNT(*) FROM driver d WHERE d.Driver_ID = td.Driver_ID) >= 2; 
SELECT t.Manager, td.Car_Owner FROM team_driver AS td JOIN team as t ON td.Team_ID = t.Team_ID WHERE (SELECT COUNT(*) FROM team_driver) > 1; 
SELECT COUNT(*) FROM institution; 
SELECT COUNT(*) FROM institution; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Founded ASC; 
SELECT Name FROM institution ORDER BY Founded ASC; 
SELECT City, Province FROM institution; 
SELECT City, Province FROM institution; 
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution; 
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution; 
SELECT affiliation FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM institution WHERE City = 'Vancouver'); 
SELECT affiliation FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM Championship WHERE Nickname = 'Vancouver Canucks') 
SELECT Stadium FROM institution ORDER BY Capacity DESC; 
SELECT stadium FROM institution ORDER BY Capacity DESC; 
SELECT Stadium FROM Institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM Institution); 
SELECT Stadium FROM Institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM Institution); 
SELECT Name, Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID; 
SELECT institution.Name, Championship.Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID; 
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1); 
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1); 
SELECT Name FROM institution ORDER BY Number_of_Championships DESC; 
SELECT Name FROM institution ORDER BY Number_of_Championships DESC; 
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship); 
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship); 
SELECT SUM(Number_of_Championships) FROM Championship WHERE Affiliation = 'Public'; 
SELECT SUM(Number_of_Championships) FROM Championship WHERE Affiliation = 'Public'; 
SELECT affiliation, COUNT(*) AS num_institutions FROM institution GROUP BY affiliation ORDER BY num_institutions DESC; 
SELECT institution.Affiliation, COUNT(*) AS num_institutions FROM institution GROUP BY Affiliation ORDER BY num_institutions DESC; 
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT year FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM institution GROUP BY Institution_ID HAVING COUNT(Institution_ID) > 1); 
SELECT DISTINCT Founded FROM institution WHERE Founded IN (SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1) ORDER BY Founded ASC; 
SELECT nickname FROM Championship ORDER BY Capacity DESC; 
SELECT nickname FROM Championship ORDER BY capacity DESC; 
SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'; 
SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'; 
SELECT DISTINCT Province FROM institution WHERE Founded < 1920 OR Founded > 1950; 
SELECT DISTINCT Province FROM institution WHERE Founded < 1920 AND EXISTS (SELECT * FROM institution WHERE Founded > 1950); 
SELECT DISTINCT Province FROM institution; 
SELECT DISTINCT Province FROM institution; 
SELECT * FROM Warehouses; 
SELECT * FROM Warehouses; 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York'); 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York'); 
SELECT * FROM Boxes WHERE Value > 150.0; 
SELECT * FROM Boxes WHERE Value > 150; 
SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code; 
SELECT  
SELECT AVG(Value), SUM(Value) FROM Boxes; 
SELECT AVG(Value), SUM(Value) FROM Boxes; 
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses; 
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses; 
SELECT AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT * FROM Boxes WHERE Code = 'A001' AND Contents = 'Apples'; 
SELECT * FROM Boxes WHERE Value = (SELECT MAX(Value) FROM Boxes); 
SELECT AVG(Value) FROM Boxes; 
SELECT AVG(Value) FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT COUNT(DISTINCT Contents) FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT DISTINCT Location FROM Warehouses; 
SELECT DISTINCT Location FROM Warehouses; 
SELECT Box.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York'); 
SELECT Box.Code FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location IN ('Chicago', 'New York'); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York'); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York'); 
SELECT DISTINCT Boxes.Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York'); 
SELECT DISTINCT b.Contents FROM Boxes AS b JOIN Warehouses as w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York'); 
SELECT DISTINCT Contents FROM Boxes WHERE Code NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York'); 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') AND Contents NOT IN (SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location!= 'New York')); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' AND Code NOT IN (SELECT Code FROM Boxes WHERE Contents = 'Scissors')); 
SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' AND Code NOT IN (SELECT Code FROM Boxes WHERE Contents = 'Scissors')); 
SELECT * FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' OR Contents = 'Scissors'); 
SELECT DISTINCT W.Code FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors'); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' OR Contents = 'Scissors'); 
SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' OR Contents = 'Scissors'); 
SELECT Box.Code, Box.Contents FROM Boxes AS Box ORDER BY Box.Value ASC; 
SELECT Box.Code, Box.Contents FROM Boxes AS Box ORDER BY Box.Value; 
SELECT Box.Code, Box.Contents FROM Boxes WHERE Box.Value = (SELECT MIN(Box.Value) FROM Boxes); 
SELECT Box.Code, Box.Contents FROM Boxes WHERE Box.Value = (SELECT MIN(Box.Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents; 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC; 
SELECT Box.Code FROM Boxes AS Box WHERE Box.Value > ANY(SELECT Box2.Value FROM Boxes AS Box2 WHERE Box2.Contents = 'Rocks'); 
SELECT Box.Code FROM Boxes AS Box WHERE Box.Value > ANY(SELECT Box2.Value FROM Boxes AS Box2 WHERE Box2.Contents = 'Rocks'); 
SELECT Box.Code, Box.Contents FROM Boxes AS Box WHERE Box.Value > ALL(SELECT Box2.Value FROM Boxes AS Box2 WHERE Box2.Contents = 'Scissors'); 
SELECT Box.Code, Box.Contents FROM Boxes AS Box WHERE Box.Value > ALL(SELECT Box2.Value FROM Boxes AS Box2 WHERE Box2.Contents = 'Scissors'); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1); 
SELECT W.Code, AVG(B.Value) FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Code HAVING AVG(B.Value) > 150; 
SELECT AVG(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Capacity > 1000); 
SELECT  
SELECT  
SELECT SUM(Capacity), AVG(Capacity), MAX(Capacity) FROM Warehouses WHERE Location IN ('London', 'Paris'); 
SELECT  
SELECT SUM(Capacity) FROM Warehouses; 
SELECT SUM(Capacity) FROM Warehouses; 
SELECT * FROM Warehouses; 
SELECT W.Location, MAX(B.Value) FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Location; 
SELECT W.Code, COUNT(B.Code) AS NumBoxes FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code; 
SELECT COUNT(*) FROM Boxes WHERE Warehouse = 1; 
SELECT COUNT(DISTINCT Location) FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks'); 
SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks'; 
SELECT B.Code, W.Location FROM Boxes AS B JOIN Warehouses AS W ON B.Warehouse = W.Code; 
SELECT B.Code, W.Location FROM Boxes AS B JOIN Warehouses AS W ON B.Warehouse = W.Code; 
SELECT Box.Code FROM Boxes WHERE Boxes.Warehouse = (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago'); 
SELECT Box.Code FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location = 'Chicago' 
SELECT COUNT(*) AS NumBoxesSaved, W.Code FROM Warehouses as W JOIN Boxes as B ON W.Code = B.Warehouse GROUP BY W.Code; 
SELECT W.Code, COUNT(B.Code) AS BoxCount FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code; 
SELECT DISTINCT W.Code, B.Contents FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse; 
SELECT DISTINCT W.Code, B.Contents FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse; 
SELECT * FROM Warehouses WHERE Capacity > 0; 
SELECT * FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes GROUP BY Warehouse HAVING COUNT(*) > Capacity); 
SELECT SUM(Value) FROM Boxes WHERE Code NOT IN (SELECT Box FROM Warehouses WHERE Location = 'Chicago'); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location!= 'Chicago'); 
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC; 
SELECT University_Name,City,State FROM university ORDER BY University_Name ASC; 
SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio'; 
SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio'; 
SELECT MAX(Enrollment) AS Max_Enrollment, AVG(Enrollment) AS Avg_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university; 
SELECT MAX(Enrollment) AS Max_Enrollment, AVG(Enrollment) AS Avg_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university; 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT DISTINCT Home_Conference FROM university; 
SELECT DISTINCT Home_Conference FROM university; 
SELECT Home_Conference, COUNT(University_ID) AS num_universities FROM university GROUP BY Home_Conference ORDER BY num_universities DESC; 
SELECT COUNT(DISTINCT University_ID) AS num_universities FROM university WHERE Home_Conference = 'Big Ten' 
SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1; 
SELECT DISTINCT Home_Conference FROM university WHERE Enrollment > 2000; 
SELECT DISTINCT Home_Conference FROM university WHERE Enrollment > 2000; 
SELECT Home_Conference FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking ORDER BY Total ASC LIMIT 1); 
SELECT DISTINCT Home_Conference FROM university WHERE Enrollment IN (SELECT MIN(Enrollment) FROM university GROUP BY Home_Conference); 
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code; 
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC; 
SELECT m.Major_Name, mr.Rank FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID WHERE University_ID IN (SELECT University_ID FROM university WHERE University_Name = 'Augustana College'); 
SELECT major.Major_Name, overall_ranking.Rank FROM major INNER JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID INNER JOIN university ON major_ranking.University_ID = university.University_ID WHERE university.Team_Name = 'Augustana College' ORDER BY major.Major_Name ASC; 
SELECT University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1); 
SELECT University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT Major_ID FROM major_ranking WHERE Rank = 1 GROUP BY Major_ID HAVING COUNT(*) > 1); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) > ALL (SELECT COUNT(*) FROM major_ranking WHERE Rank = 1 GROUP BY University_ID)); 
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT Major_ID FROM major_ranking WHERE Rank = 1); 
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT Major_ID FROM major_ranking WHERE Rank = 1); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = 1 AND Rank <= 10) AND University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = 2 AND Rank <= 10) 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = 1 OR Major_ID = 2); 
SELECT university_name, rank FROM university INNER JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE state='Wisconsin' ORDER BY rank ASC; 
SELECT University_Name, Rank FROM overall_ranking INNER JOIN university ON overall_ranking.University_ID = university.University_ID WHERE State = 'Wisconsin' ORDER BY Rank ASC; 
SELECT University_Name FROM overall_ranking WHERE Reputation_point = (SELECT MAX(Reputation_point) FROM overall_ranking); 
SELECT University_Name FROM overall_ranking WHERE Reputation_point + Research_point + Citation_point = (SELECT MAX(Reputation_point + Research_point + Citation_point) FROM overall_ranking); 
SELECT University_Name FROM overall_ranking ORDER BY Reputation_point ASC; 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking ORDER BY Reputation_point ASC); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank >= 3); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank >= 3); 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT University_Name, Reputation_point FROM overall_ranking WHERE Rank <= 3 AND Reputation_point > (SELECT MAX(Reputation_point) FROM overall_ranking WHERE Rank <= 3); 
SELECT University_Name, Citation_point FROM overall_ranking WHERE Rank <= 3 ORDER BY Reputation_point DESC; 
SELECT DISTINCT State FROM university WHERE University_ID IN (SELECT University_ID FROM university WHERE Enrollment < 3000 GROUP BY University_ID HAVING COUNT(University_ID) > 1); 
SELECT DISTINCT State FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Total < 10000) GROUP BY State HAVING COUNT(University_ID) > 1; 
SELECT Title FROM Movies WHERE Rating IS NULL; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Rating = 'G'; 
SELECT * FROM Movies WHERE Rating = 'G'; 
SELECT * FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT m.Title, mt.Name FROM Movies AS m JOIN MovieTheaters as mt ON m.Code = mt.Movie; 
SELECT m.Title, mt.Name FROM Movies AS m JOIN MovieTheaters as mt ON m.Code = mt.Movie; 
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; 
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; 
SELECT COUNT(*) FROM MovieTheaters; 
SELECT COUNT(*) FROM MovieTheaters; 
SELECT COUNT(DISTINCT m.Title) FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie; 
SELECT COUNT(DISTINCT m.Title) FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie; 
SELECT DISTINCT COUNT(Name) FROM MovieTheaters; 
SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters; 
SELECT * FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT * FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG') ORDER BY Name ASC; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG') 
SELECT * FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial'); 
SELECT * FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial'); 
SELECT * FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') AND Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial'); 
SELECT * FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Code = 'Odeon' OR Code = 'Imperial'); 
SELECT * FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT * FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies ORDER BY Title ASC; 
SELECT * FROM Movies ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Rating DESC; 
SELECT * FROM Movies ORDER BY Rating DESC; 
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM Movies GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1); 
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1); 
SELECT * FROM Movies WHERE Code = 1; 
SELECT * FROM MovieTheaters; 
SELECT COUNT(*) AS num_movies, Rating FROM Movies GROUP BY Rating; 
SELECT * FROM Movies; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE EXISTS(SELECT * FROM Movies WHERE MovieTheaters.Movie = Movies.Code); 
SELECT Name FROM MovieTheaters WHERE EXISTS(SELECT * FROM Movies WHERE MovieTheaters.Movie = Movies.Code); 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G'); 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G'); 
SELECT Title FROM Movies; 
SELECT * FROM Movies; 
SELECT DISTINCT(Rating) FROM Movies; 
SELECT DISTINCT Rating FROM Movies; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters); 
SELECT * FROM Movies WHERE Code NOT IN (SELECT DISTINCT Movie FROM MovieTheaters); 
SELECT * FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package); 
SELECT Client.Name FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Package.Weight = (SELECT MAX(Package.Weight) FROM Package); 
SELECT SUM(Package.Weight) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'; 
SELECT SUM(Package.Weight) FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client JOIN Employee ON Client.Name = Employee.Name WHERE Employee.Name = 'Leo Wong'); 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT e.Salary, e.Position FROM Employee AS e WHERE e.Name = 'Turanga Leela'; 
SELECT e.Salary, e.Position FROM Employee AS e WHERE e.Name = 'Turanga Leela'; 
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'; 
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'; 
SELECT * FROM Employee WHERE Name = 'Physician'; 
SELECT * FROM Employee WHERE Name = 'Physician' AND Position = 'Doctor'; 
SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong' AND Package.Sender!= 'Leo Wong'; 
SELECT COUNT(*) FROM Package WHERE Sender = 'Leo Wong'; 
SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong'; 
SELECT DISTINCT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong'; 
SELECT * FROM Package WHERE Sender = 'Leo Wong' OR Recipient = 'Leo Wong'; 
SELECT DISTINCT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong' OR Package.Sender = 'Leo Wong'; 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT P.Contents FROM Package AS P JOIN Client AS C ON P.Sender = C.AccountNumber WHERE C.Name = 'John Zoidfarb' AND P.Recipient IS NULL; 
SELECT Package.Contents FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'John Zoidfarb'); 
SELECT Package.PackageNumber, Package.Weight FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name LIKE '%John%' ORDER BY Package.Weight DESC LIMIT 1; 
SELECT Package.PackageNumber, Package.Weight FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name LIKE 'John%' ORDER BY Package.Weight DESC LIMIT 1; 
SELECT Package.PackageNumber, Package.Weight FROM Package ORDER BY Package.Weight ASC LIMIT 3; 
SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight IN (SELECT MIN(Package.Weight) FROM Package); 
SELECT c.Name, COUNT(*) AS NumPackagesSent FROM Client c JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.Name ORDER BY NumPackagesSent DESC LIMIT 1; 
SELECT c.Name, COUNT(*) AS NumPackages FROM Package p JOIN Client s ON p.Sender = s.AccountNumber JOIN Client r ON p.Recipient = r.AccountNumber GROUP BY c.Name ORDER BY NumPackages DESC LIMIT 1; 
SELECT c.Name, COUNT(*) AS NumPackagesReceived FROM Client c JOIN Package p ON c.AccountNumber = p.Recipient GROUP BY c.Name ORDER BY NumPackagesReceived ASC LIMIT 1; 
SELECT COUNT(*) FROM Package WHERE Package.PackageNumber IN (SELECT MIN(Package.PackageNumber) FROM Package GROUP BY Package.Sender); 
SELECT c.Name FROM Client AS c JOIN Package as p ON c.AccountNumber = p.Sender WHERE p.PackageNumber > 1; 
SELECT DISTINCT c.Name FROM Client AS c JOIN Package as p ON c.AccountNumber = p.Sender WHERE p.PackageNumber > 1; 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT p.Name, p.Coordinates FROM Planet AS p ORDER BY p.Name ASC; 
SELECT p.Name, p.Coordinates FROM Planet AS p ORDER BY p.Name ASC; 
SELECT DISTINCT Shipment.ShipmentID FROM Shipment INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J. Fry'; 
SELECT DISTINCT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J Fry'; 
SELECT DISTINCT Date FROM Shipment; 
SELECT DISTINCT Date FROM Shipment; 
SELECT DISTINCT Shipment.ShipmentID FROM Shipment JOIN Has_Clearance ON Shipment.Manager = Has_Clearance.Employee WHERE Has_Clearance.Level >= 3 AND Has_Clearance.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') ORDER BY Shipment.ShipmentID ASC; 
SELECT DISTINCT Shipment.ShipmentID FROM Shipment JOIN Has_Clearance ON Shipment.Manager = Has_Clearance.Employee AND Shipment.Planet = Has_Clearance.Planet WHERE Has_Clearance.Level > 1 AND Has_Clearance.Planet = 'Mars' 
SELECT DISTINCT Shipment.ShipmentID FROM Shipment JOIN Has_Clearance ON Shipment.Manager = Has_Clearance.Employee AND Shipment.Planet = Has_Clearance.Planet WHERE Has_Clearance.Level >= 3 AND Has_Clearance.Planet = 'Mars' AND Shipment.Manager IN (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Turanga Leela'); 
SELECT DISTINCT Shipment.ShipmentID FROM Shipment JOIN Has_Clearance ON Shipment.Manager = Has_Clearance.Employee JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars' AND Has_Clearance.Level >= 3 AND Has_Clearance.Employee IN (SELECT Employee.EmployeeID FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee WHERE Employee.Position = 'Manager') ORDER BY Shipment.ShipmentID ASC; 
SELECT DISTINCT Shipment.ShipmentID FROM Shipment JOIN Has_Clearance ON Shipment.Manager = Has_Clearance.Employee WHERE Has_Clearance.Level > 1 AND (Has_Clearance.Planet = 'Mars' OR Shipment.Planet = 'Mars') 
SELECT DISTINCT Shipment.ShipmentID FROM Shipment JOIN Has_Clearance ON Shipment.Manager = Has_Clearance.Employee JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars' AND Has_Clearance.Level >= 3 AND Shipment.Manager IN (SELECT Employee.EmployeeID FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee WHERE Employee.Name = 'Turanga Leela') ORDER BY Shipment.ShipmentID ASC; 
SELECT p.Name AS 'Planet', COUNT(*) as 'Total Shipments' 
SELECT Planet.Name AS 'Planet', COUNT(*) AS 'Shipments' FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name ORDER BY Shipments DESC; 
SELECT p.Name FROM Planet AS p JOIN Shipment as s ON p.PlanetID = s.Planet WHERE s.Manager IN (SELECT e.EmployeeID FROM Employee as e JOIN Has_Clearance as h ON e.EmployeeID = h.Employee WHERE h.Level > 1 AND h.Planet = p.PlanetID); 
SELECT p.Name FROM Planet AS p JOIN Shipment as s ON p.PlanetID = s.Planet WHERE s.Manager IN (SELECT e.EmployeeID FROM Employee as e JOIN Has_Clearance as h ON e.EmployeeID = h.Employee AND h.Level > 1); 
SELECT e.Name AS 'Manager', COUNT(*) AS 'Num Shipments' 
SELECT COUNT(*) AS NumShipmentsManaged, Name FROM Employee JOIN Shipment ON Employee.EmployeeID = Shipment.Manager GROUP BY Name ORDER BY NumShipmentsManaged DESC; 
SELECT SUM(Package.Weight) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars' AND Shipment.Date >= '2022-01-01' AND Shipment.Date <= '2022-12-31' 
SELECT SUM(Package.Weight) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'; 
SELECT p.Name AS 'Planet', SUM(p.Weight) as 'TotalWeight' 
SELECT p.Name AS 'Planet', SUM(p.Weight) AS 'Total Package Weight' 
SELECT p.Name FROM Planet AS p JOIN Shipment as s ON p.PlanetID = s.Planet WHERE SUM(p.Weight) > 30; 
SELECT DISTINCT p.Name FROM Planet AS p JOIN Shipment AS s ON p.PlanetID = s.Planet WHERE s.Weight > 30; 
SELECT Package.PackageNumber FROM Package WHERE Package.Shipment IN (SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8') AND Package.Sender IN (SELECT Client.AccountNumber FROM Client JOIN Employee ON Client.AccountNumber = Employee.EmployeeID WHERE Employee.Name = 'Zapp Brannigan'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan') AND Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')); 
SELECT Package.PackageNumber FROM Package WHERE Package.Shipment IN (SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8') OR Package.Sender IN (SELECT Client.AccountNumber FROM Client JOIN Employee ON Client.AccountNumber = Employee.EmployeeID WHERE Employee.Name = 'Zapp Brannigan') 
SELECT COUNT(*) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8') OR Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')) 
SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30; 
SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30; 
SELECT e.Name FROM Employee AS e LEFT JOIN Has_Clearance AS hc ON e.EmployeeID = hc.Employee WHERE hc.Level IS NULL AND hc.Planet = 'Mars' 
SELECT e.Name FROM Employee AS e LEFT JOIN Has_Clearance AS hc ON e.EmployeeID = hc.Employee WHERE hc.Planet IS NULL AND hc.Level > 0; 
SELECT e.Name FROM Employee AS e JOIN Has_Clearance AS hc ON e.EmployeeID = hc.Employee WHERE hc.Level > 1 AND hc.Planet = 'Omega III'; 
SELECT e.Name FROM Employee AS e JOIN Has_Clearance AS hc ON e.EmployeeID = hc.Employee WHERE hc.Level > 0 AND hc.Planet = (SELECT p.PlanetID FROM Planet as p WHERE p.Name = 'Omega III'); 
SELECT p.Name FROM Planet AS p JOIN Has_Clearance AS hc ON p.PlanetID = hc.Planet WHERE EXISTS(SELECT * FROM Has_Clearance AS hc2 WHERE hc.Employee = hc2.Employee AND hc.Level!= hc2.Level); 
SELECT DISTINCT p.Name FROM Planet AS p JOIN Has_Clearance AS hc ON p.PlanetID = hc.Planet WHERE EXISTS(SELECT * FROM Employee AS e JOIN Has_Clearance AS hce ON e.EmployeeID = hce.Employee WHERE e.Position = 'CEO' AND hce.Level > 1); 
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000; 
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT COUNT(*) FROM Employee WHERE Employee.EmployeeID NOT IN ( SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars' ) 
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee.EmployeeID FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Level > 0 JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'); 
SELECT COUNT(*) FROM game; 
SELECT COUNT(*) FROM game; 
SELECT g.Title, g.Developers FROM game AS g ORDER BY Units_sold_Millions DESC; 
SELECT g.Title, d.Developers FROM game AS g JOIN developer AS d ON g.Platform_ID = d.Platform_ID ORDER BY Units_sold_Millions DESC; 
SELECT AVG(game.Units_sold_Millions) FROM game WHERE game.Developers!= 'Nintendo'; 
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers!= 'Nintendo'; 
SELECT platform_name, market_district FROM platform; 
SELECT platform.Platform_name, platform.Market_district FROM platform; 
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1; 
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1; 
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player; 
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player; 
SELECT COUNT(*) 
SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3; 
SELECT Player_name FROM player ORDER BY Player_name ASC; 
SELECT Player_name FROM player ORDER BY Player_name ASC; 
SELECT p.Player_name, p.College FROM player AS p ORDER BY Rank_of_the_year DESC; 
SELECT p.Player_name, p.College FROM player AS p ORDER BY Rank_of_the_year DESC; 
SELECT p.Player_name, p.Rank_of_the_year FROM player AS p JOIN game_player AS gp ON p.Player_ID = gp.Player_ID JOIN game AS g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'; 
SELECT p.Player_name, p.Rank_of_the_year FROM player AS p JOIN game_player AS gp ON p.Player_ID = gp.Player_ID JOIN game AS g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'; 
SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn')); 
SELECT DISTINCT Developers FROM game WHERE Game_ID IN ( SELECT Game_ID FROM game_player WHERE Player_ID IN ( SELECT Player_ID FROM player WHERE College = 'Auburn' ) ) 
SELECT AVG(game.Units_sold_Millions) FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.If_active = 1 AND game_player.Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'); 
SELECT AVG(game.Units_sold_Millions) FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.If_active = 1 AND game_player.Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard') GROUP BY game.Platform_ID; 
SELECT g.Title, p.Platform_name FROM game AS g JOIN platform as p ON g.Platform_ID = p.Platform_ID; 
SELECT title, platform_name FROM game JOIN platform ON game.platform_id = platform.platform_id; 
SELECT Title FROM game WHERE Platform_ID IN (SELECT Platform_ID FROM platform WHERE Market_district = 'Asia' OR Market_district = 'USA') 
SELECT title FROM game WHERE Platform_ID IN (SELECT Platform_ID FROM platform WHERE Market_district = 'Asia' OR Market_district = 'USA'); 
SELECT DISTINCT Franchise, COUNT(*) AS num_games FROM game GROUP BY Franchise ORDER BY num_games DESC; 
SELECT COUNT(DISTINCT Game_ID) AS num_games, Franchise FROM game GROUP BY Franchise; 
SELECT DISTINCT Franchise FROM game ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT franchise FROM game WHERE Game_ID IN (SELECT Game_ID FROM game GROUP BY Game_ID HAVING COUNT(Game_ID) >= 2); 
SELECT DISTINCT franchise FROM game WHERE Game_ID IN (SELECT Game_ID FROM game GROUP BY Game_ID HAVING COUNT(Game_ID) > 1); 
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma') AND IF_ACTIVE = 1) AND Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn') AND IF_ACTIVE = 1); 
SELECT title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma' OR College = 'Auburn')); 
SELECT DISTINCT franchise FROM game; 
SELECT DISTINCT franchise FROM game; 
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard')); 
SELECT title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard')); 
SELECT Name FROM press ORDER BY Year_Profits_billion DESC; 
SELECT Name FROM press ORDER BY Year_Profits DESC; 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1; 
SELECT AVG(Year_Profits_billion) AS avg_profit, MAX(Year_Profits_billion) AS max_profit FROM press; 
SELECT Press_Name, AVG(Year_Profit) AS Average_Yearly_Profit, MAX(Year_Profit) AS Max_Yearly_Profit FROM (SELECT Press_Name, Year_Profit FROM (SELECT Press_Name, SUM(Month_Profit) as Year_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit FROM (SELECT Press_Name, Month_Profit
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press); 
SELECT COUNT(*) FROM author WHERE Age < 30; 
SELECT COUNT(*) FROM author WHERE Age < 30; 
SELECT AVG(Age) AS Average_Author_Age FROM author GROUP BY Gender; 
SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender; 
SELECT Author_ID, Gender, COUNT(*) AS Count FROM author WHERE Age > 30 GROUP BY Gender; 
SELECT Author_ID, Gender, COUNT(*) AS Count FROM author WHERE Age > 30 GROUP BY Gender; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Book_Series, COUNT(*) AS num_books FROM book GROUP BY Book_Series; 
SELECT Book_Series, COUNT(*) AS Count FROM book GROUP BY Book_Series; 
SELECT book.Title, book.Release_date FROM book WHERE book.Sale_Amount = (SELECT MAX(book.Sale_Amount) FROM book); 
SELECT book.Title, book.Release_date FROM book WHERE book.Sale_Amount = (SELECT MAX(book.Sale_Amount) FROM book) LIMIT 5; 
SELECT Book_Series FROM book WHERE Sale_Amount > '1000' AND Sale_Amount < '500' 
SELECT DISTINCT Book_Series FROM book WHERE Sale_Amount > 1000 OR Sale_Amount < 500; 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM' OR Book_Series = 'LT') GROUP BY Author_ID HAVING COUNT(*) > 1; 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM' OR Book_Series = 'LT') GROUP BY Author_ID HAVING COUNT(*) > 1; 
SELECT author.Name, author.Age FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IS NULL; 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book); 
SELECT Name FROM author WHERE Author_ID IN (SELECT DISTINCT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1); 
SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3; 
SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3; 
SELECT p.Name AS Press_Name, SUM(b.Sale_Amount) AS Total_Book_Sales FROM author a JOIN book b ON a.Author_ID = b.Author_ID JOIN press p ON b.Press_ID = p.Press_ID GROUP BY p.Name; 
SELECT p.Name AS Press_Name, SUM(b.Sale_Amount) AS Total_Book_Sales FROM author a JOIN book b ON a.Author_ID = b.Author_ID JOIN press p ON b.Press_ID = p.Press_ID GROUP BY p.Name; 
SELECT Press_Name, COUNT(*) AS Book_Count FROM book GROUP BY Press_Name HAVING Sale_Amount > '1000' ORDER BY Book_Count DESC; 
SELECT p.Name, COUNT(*) AS num_books FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name; 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Sale_Amount DESC LIMIT 1)); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Sale_Amount DESC LIMIT 1)); 
SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID = 1); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID = (SELECT Press_ID FROM press WHERE Name = 'Accor')); 
SELECT p.Name, SUM(p.Year_Profits_billion) AS Total_Yearly_Profit FROM book b JOIN press p ON b.Press_ID = p.Press_ID GROUP BY p.Name HAVING COUNT(b.Book_ID)>2 ORDER BY Total_Yearly_Profit DESC; 
SELECT p.Name, p.Year_Profits_billion FROM book b JOIN press p ON b.Press_ID = p.Press_ID GROUP BY p.Press_ID HAVING COUNT(b.Book_ID) > 2; 
SELECT COUNT(DISTINCT author_name) FROM Authors; 
SELECT DISTINCT author_name FROM Authors; 
SELECT author_name, other_details FROM Authors; 
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'; 
SELECT COUNT(*) FROM Documents; 
SELECT author_name FROM Documents WHERE document_id = 4; 
SELECT author_name FROM Documents JOIN Authors ON Documents.author_name = Authors.author_name WHERE document_name = 'Travel to Brazil'; 
SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke'; 
SELECT document_name, document_description FROM Documents; 
SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'; 
SELECT A.author_name, A.other_details FROM Authors AS A JOIN Documents AS D ON A.author_name = D.author_name WHERE D.document_name = 'Travel to China'; 
SELECT author_name, COUNT(document_id) AS num_documents FROM Documents GROUP BY author_name; 
SELECT author_name FROM Documents JOIN Authors ON Documents.author_name = Authors.author_name GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT author_name FROM Authors WHERE author_name IN (SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) >= 2); 
SELECT COUNT(*) FROM Business_Processes; 
SELECT b.next_process_id, b.process_name, b.process_description FROM Business_Processes AS b WHERE b.process_id = 9; 
SELECT process_name FROM Business_Processes WHERE process_id = 9; 
SELECT COUNT(DISTINCT process_outcome_code) FROM Documents_Processes; 
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes; 
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'; 
SELECT COUNT(DISTINCT process_status_code) FROM Documents_Processes; 
SELECT process_status_code, process_status_description FROM Process_Status; 
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'; 
SELECT COUNT(DISTINCT staff_id) FROM Staff 
SELECT * FROM Staff; 
SELECT * FROM Staff WHERE staff_id = 100; 
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes; 
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles; 
SELECT Ref_Staff_Roles.staff_role_description FROM Staff_in_Processes INNER JOIN Ref_Staff_Roles ON Staff_in_Processes.staff_role_code = Ref_Staff_Roles.staff_role_code WHERE Staff_in_Processes.staff_id = 1 AND Staff_in_Processes.process_id = 2; 
SELECT COUNT(*) FROM Documents_Processes; 
SELECT DISTINCT process_id FROM Documents_Processes; 
SELECT DISTINCT document_id FROM Documents_Processes WHERE process_id IS NULL; 
SELECT DISTINCT process_id FROM Documents_Processes WHERE document_id IS NULL; 
SELECT p.process_outcome_description, s.process_status_description FROM Documents_Processes AS d JOIN Process_Outcomes AS p ON d.process_outcome_code = p.process_outcome_code JOIN Process_Status AS s ON d.process_status_code = s.process_status_code WHERE d.document_id = 0; 
SELECT process_name FROM Business_Processes WHERE process_id = (SELECT process_id FROM Documents_Processes WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil')); 
SELECT process_id, COUNT(document_id) FROM Documents_Processes GROUP BY process_id; 
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9; 
SELECT  
SELECT  
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3; 
SELECT COUNT(DISTINCT agency_id) FROM Agencies; 
SELECT COUNT(DISTINCT Agencies.agency_id) FROM Agencies; 
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies; 
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies; 
SELECT COUNT(DISTINCT client_id) FROM Clients; 
SELECT COUNT(DISTINCT client_id) FROM Clients; 
SELECT client_id, client_details FROM Clients; 
SELECT * FROM Clients; 
SELECT Agencies.agency_id, COUNT(Clients.client_id) AS num_clients FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id GROUP BY Agencies.agency_id; 
SELECT Agencies.agency_id, COUNT(Clients.client_id) AS num_clients FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id GROUP BY Agencies.agency_id; 
SELECT * FROM Agencies ORDER BY COUNT(Clients.client_id) DESC LIMIT 1; 
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(Clients.client_id) DESC LIMIT 1; 
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id HAVING COUNT(Clients.client_id) >= 2; 
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id HAVING COUNT(Clients.client_id) >= 2; 
SELECT Agencies.agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE Clients.client_details = 'Mac'; 
SELECT Agencies.agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE Clients.client_details LIKE '%Mac%'; 
SELECT Clients.client_id, Clients.sic_code, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id; 
SELECT Clients.client_details, Agencies.agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id; 
SELECT sic_code, COUNT(client_id) AS num_clients FROM Clients GROUP BY sic_code; 
SELECT  
SELECT * FROM Clients WHERE sic_code = 'Bad'; 
SELECT * FROM Clients WHERE sic_code = 'Bad'; 
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id; 
SELECT Agencies.agency_id, Agencies.agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id; 
SELECT Agencies.agency_id FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id WHERE Clients.client_id IS NULL; 
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM Clients); 
SELECT COUNT(*) FROM Invoices; 
SELECT COUNT(*) FROM Invoices; 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices; 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices; 
SELECT  
SELECT COUNT(*) AS invoice_count, client_id FROM Invoices GROUP BY client_id; 
SELECT  
SELECT * FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT DISTINCT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(*) >= 2); 
SELECT DISTINCT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(*) >= 2); 
SELECT invoice_status, COUNT(*) AS num_invoices FROM Invoices GROUP BY invoice_status; 
SELECT invoice_status, COUNT(*) AS num_invoices FROM Invoices GROUP BY invoice_status; 
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT i.invoice_status, c.client_details, a.agency_details FROM Invoices AS i JOIN Clients as c ON i.client_id = c.client_id JOIN Agencies as a ON c.agency_id = a.agency_id; 
SELECT  
SELECT DISTINCT meeting_type, purpose_of_meeting FROM Meetings; 
SELECT DISTINCT meeting_type, purpose_of_meeting FROM Meetings; 
SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings AS m; 
SELECT DISTINCT m.meeting_outcome, m.purpose_of_meeting FROM Meetings AS m; 
SELECT Payments.payment_id, Payments.payment_details FROM Invoices INNER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Invoices.invoice_status = 'Working'; 
SELECT Payments.payment_id, Payments.payment_details FROM Invoices INNER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Invoices.invoice_status = 'Working'; 
SELECT * FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments); 
SELECT * FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments); 
SELECT COUNT(*) FROM Payments; 
SELECT COUNT(*) FROM Payments; 
SELECT Payments.payment_id, Invoices.invoice_id, Invoices.invoice_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id; 
SELECT Payments.payment_id, Invoices.invoice_id, Payments.payment_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id; 
SELECT DISTINCT Payments.invoice_id, Invoices.invoice_status FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id; 
SELECT DISTINCT payment.invoice_id, payment.invoice_status FROM Payments AS payment; 
SELECT  
SELECT COUNT(*) AS num_payments, payment_id FROM Payments GROUP BY payment_id; 
SELECT * FROM Payments; 
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices AS i JOIN Payments as p ON i.invoice_id = p.invoice_id WHERE p.payment_id IN (SELECT MAX(p2.payment_id) FROM Payments as p2 GROUP BY p2.invoice_id); 
SELECT COUNT(DISTINCT Staff.staff_id) FROM Staff; 
SELECT COUNT(*) FROM Staff; 
SELECT Agencies.agency_id, COUNT(Staff.staff_id) AS num_staff FROM Staff JOIN Agencies ON Staff.agency_id = Agencies.agency_id GROUP BY Agencies.agency_id; 
SELECT Agencies.agency_id, COUNT(*) AS num_staff FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id GROUP BY Agencies.agency_id; 
SELECT * FROM Agencies WHERE agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1); 
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies INNER JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT  
SELECT  
SELECT  
SELECT COUNT(*) AS meeting_count, client_id FROM Meetings GROUP BY client_id; 
SELECT  
SELECT COUNT(*), meeting_type FROM Meetings GROUP BY meeting_type; 
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m JOIN Clients as c ON m.client_id = c.client_id; 
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m JOIN Clients as c ON m.client_id = c.client_id; 
SELECT m.meeting_id, COUNT(s.staff_id) AS num_staff 
SELECT COUNT(*) AS num_staff, meeting_id FROM Staff_in_Meetings GROUP BY meeting_id; 
SELECT Staff.staff_id, COUNT(Meetings.meeting_id) AS num_meetings_attended FROM Meetings JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id GROUP BY Staff.staff_id HAVING COUNT(Meetings.meeting_id) > 0 ORDER BY num_meetings_attended ASC LIMIT 1; 
SELECT staff_id FROM Staff s JOIN Meetings m ON s.staff_id = m.staff_id GROUP BY staff_id HAVING COUNT(*) > 0 ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT COUNT(DISTINCT Staff.staff_id) FROM Meetings JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id; 
SELECT COUNT(DISTINCT Staff.staff_id) FROM Meetings JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id; 
SELECT COUNT(DISTINCT s.staff_id) FROM Staff AS s LEFT JOIN Meetings AS m ON s.staff_id = m.staff_id WHERE m.meeting_id IS NULL; 
SELECT COUNT(*) FROM Staff s LEFT JOIN Meetings m ON s.staff_id = m.staff_id WHERE m.meeting_id IS NULL; 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT DISTINCT client_id FROM Meetings UNION SELECT DISTINCT client_id FROM Invoices); 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices); 
SELECT * FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) > 0 AND staff_details LIKE '%s%'); 
SELECT Staff.staff_id, Staff.staff_details FROM Staff INNER JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff_in_Meetings.meeting_id IN (SELECT Meetings.meeting_id FROM Meetings WHERE Meetings.billable_yn='Y') AND Staff.staff_details LIKE '%s%'; 
SELECT c.client_id, c.sic_code, c.agency_id FROM Clients AS c JOIN Meetings as m ON c.client_id = m.client_id WHERE m.meeting_id IN (SELECT meeting_id FROM Meetings GROUP BY meeting_id HAVING COUNT(*)=1); 
SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AND client_id IN (SELECT client_id FROM Invoices); 
SELECT Meetings.start_date_time AS 'Start Time', Meetings.end_date_time AS 'End Time', 
SELECT m.start_date_time AS 'Start Time', m.end_date_time AS 'End Time', c.client_details AS 'Client Details', s.staff_details AS 'Staff Details' 
