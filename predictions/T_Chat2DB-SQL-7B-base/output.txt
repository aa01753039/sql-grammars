SELECT count(*) FROM club'         , '2'         , ['SELECT count(*) FROM club']         , ['SELECT count(*) FROM player']     , 3         , 'How many players are there?[SQL] SELECT count(*) FROM player'     , 4         , ['SELECT count(*) FROM club']     , 5         , 'How many events have been played?[No SQL] The sum of Events_number of all players'     , 6         , ['SELECT sum(Events_number) FROM player']      , 7         , 'How many wins have been recorded?[No SQL] The sum of Wins_count of all players' ]
SELECT count(*) FROM club'         , 'SELECT count(*) FROM club'         , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'      , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club'     , '
SELECT Name FROM club ORDER BY Name ASC'         ,'SELECT Name FROM club ORDER BY Name ASC'         ,'SELECT Name FROM club ORDER BY Name DESC'         ,'SELECT Name FROM club ORDER BY Name DESC'     ,'SELECT Name FROM club ORDER BY Name ASC'     ,'SELECT Name FROM club ORDER BY Name DESC'     ,'SELECT Name FROM club ORDER BY Name ASC'     ,'SELECT Name FROM club ORDER BY Name DESC'     ,'SELECT Name FROM club ORDER BY Name ASC'     ,'SELECT Name FROM club ORDER BY Name DESC'     ,'SELECT Name FROM club ORDER BY Name ASC'     ,'SELECT Name FROM club ORDER BY Name DESC'     ,'SELECT Name FROM club ORDER BY Name ASC'     ,'SELECT Name FROM club ORDER BY Name DESC'     ,'SELECT Name FROM club ORDER BY Name ASC'     ,'SELECT Name FROM club ORDER
SELECT Name FROM club ORDER BY Name ASC'         ,'SELECT Name FROM club ORDER BY Name ASC'         ,'CLUBS'     ,3,'Which club has the most players?[SQL] SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1'         ,'SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1'         ,'CLUBS'     ,4,'Which club has the least players?[SQL] SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_
SELECT Manager ,  Captain FROM club'         , 'SELECT Manager ,  Captain FROM club'     , 'SELECT name FROM club'         , 'SELECT name FROM club'      , 'SELECT name FROM club'     , 'SELECT name FROM club'      , 'SELECT name FROM club'     , 'SELECT name FROM club'      , 'SELECT name FROM club'     , 'SELECT name FROM club'      , 'SELECT name FROM club'     , 'SELECT name FROM club'      , 'SELECT name FROM club'     , 'SELECT name FROM club'      , 'SELECT name FROM club'     , 'SELECT name FROM club'      , 'SELECT name FROM club' ]     , [ 'SELECT count(*) FROM player'        , 'SELECT count(DISTINCT Club_ID) FROM player'        , 'SELECT count(DISTINCT name) FROM club'
SELECT DISTINCT manager ,  captain FROM club'         , 'SELECT DISTINCT manager ,  captain FROM club'     , 'SELECT DISTINCT manager FROM club'         , 'SELECT DISTINCT captain FROM club'     , 'SELECT count(*) FROM club'     , 'SELECT count(DISTINCT manager) FROM club'     , 'SELECT count(DISTINCT captain) FROM club' ]
SELECT Name FROM club WHERE Manufacturer != 'Nike'
SELECT Name FROM club WHERE Manufacturer != 'Nike'  SELECT name FROM club EXCEPT (SELECT name FROM club WHERE Manufacturer  =  'Nike')  SELECT name FROM club EXCEPT (SELECT name FROM club WHERE Manufacturer  =  'Adidas')  SELECT name FROM club EXCEPT (SELECT name FROM club WHERE Manufacturer  =  'Puma')  SELECT name FROM club EXCEPT (SELECT name FROM club WHERE Manufacturer  =  'Reebok')  SELECT name FROM club EXCEPT (SELECT name FROM club WHERE Manufacturer  =  'Under Armour')  SELECT name FROM club EXCEPT (SELECT name FROM club WHERE Manufacturer  =  'Joma')  SELECT name FROM club EXCEPT (SELECT name FROM club WHERE Manufacturer  =  'Kappa') SELECT name FROM club EXCEPT (SELECT name FROM club WHERE Manufacturer
SELECT Name FROM player ORDER BY Wins_count ASC'         ,'SELECT Name FROM player ORDER BY Wins_count ASC'         ,'SELECT Name FROM player ORDER BY Wins_count DESC'     ,'SELECT Name FROM player ORDER BY Events_number ASC'     ,'SELECT Name FROM player ORDER BY Earnings DESC'     ,'SELECT Name FROM player ORDER BY Club_ID ASC'     ,'SELECT Name FROM player ORDER BY Club_ID DESC'     ,'SELECT T1.name FROM club AS t1 JOIN player AS t2 ON t1.club_id  =  t2.club_id ORDER BY t2.wins_count ASC'     ,'SELECT T1.name FROM club AS t1 JOIN player AS t2 ON t1.club_id  =  t2.club_id ORDER BY t2.wins_count DESC'     ,'
SELECT Name FROM player ORDER BY Wins_count ASC'         ,'SELECT Name FROM player ORDER BY Wins_count ASC'     ,'SELECT Name FROM player ORDER BY Wins_count DESC'         ,'SELECT Name FROM player ORDER BY Wins_count DESC'     ,'SELECT Name FROM player ORDER BY Events_number ASC'         ,'SELECT Name FROM player ORDER BY Events_number ASC'     ,'SELECT Name FROM player ORDER BY Earnings DESC'         ,'SELECT Name FROM player ORDER BY Earnings DESC'     ,'SELECT Name FROM player ORDER BY Club_ID ASC'         ,'SELECT Name FROM player ORDER BY Club_ID ASC'     ,'SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID ORDER BY T2.Wins_count DESC'
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1'         ,'SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1'         ,'T2'     ,3,'SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1'         ,'SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1'         ,'T3'     ,4,'SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1'         ,'SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1'     ,5,'SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1'         ,'SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1'      ,6,'SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1'         ,'SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1'      ,7,'SELECT
SELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1'         ,'SELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1'     ,'SELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1'     ,'SELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1'     ,'SELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1'     ,'SELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1'     ,'SELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1'     ,'SELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1'     ,'SELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1'     ,'SELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1'     ,'SELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1'     ,'SELECT Name
SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000'         ,'SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000'         ,'SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000'     ,'SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000'     ,'SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000'     ,'SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000'     ,'SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000'     ,'SELECT DISTINCT Country FROM player WHERE Earnings  >  1200
SELECT Country FROM player WHERE Earnings  >  1200000 GROUP BY Country HAVING count(*)  >=  1'         ,'SELECT Country FROM player WHERE Earnings  >  1200000 GROUP BY Country HAVING count(*)  >=  1'         ,'SELECT Country FROM player WHERE Earnings  >  1200000 GROUP BY Country HAVING count(*)  >=  1'     ,'SELECT Country FROM player WHERE Earnings  >  1200000 GROUP BY Country HAVING count(*)  >=  1'     ,'SELECT Country FROM player WHERE Earnings  >  1200000 GROUP BY Country HAVING count(*)  >=  1'     ,'SELECT Country FROM player WHERE Earnings  >  1200000 GROUP BY Country HAVING count
SELECT Country FROM player WHERE Events_number  >  2 AND Earnings  =  (SELECT max(Earnings) FROM player) UNION SELECT Country FROM player WHERE Wins_count  >  2 AND Earnings  =  (SELECT max(Earnings) FROM player) UNION SELECT Country FROM player WHERE Earnings  >  2 AND Earnings  =  (SELECT max(Earnings) FROM player) ORDER BY Country ASC LIMIT 1'         ,'country1': 'United States', 'country2': 'United Kingdom'}     ,{'query': 'SELECT Country FROM player WHERE Wins_count  >  2 AND Earnings  =  (SELECT max(Earnings) FROM player) UNION SELECT Country FROM player WHERE Earnings  >  2 AND Earnings  =  (SELECT max(Earnings) FROM player) ORDER BY Country ASC LIMIT 1', '
SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1'         ,'country': 'United States'}      ,   {'query': 'SELECT name FROM club', 'answer': 'name', 'db_schema': ['CREATE TABLE club (Club_ID int ,  Name text ,  Manager text ,  Captain text ,  Sponsor text ,  PRIMARY KEY (Club_ID))'], 'task': 'Select the name of a club from the database.', 'correct_answers': ['Tigers'], 'country': 'United Kingdom'}      ,   {'query': 'SELECT name FROM club', 'answer': 'name', 'db_schema': ['CREATE TABLE club (Club_ID int ,  Name text ,  Manager text ,  Captain text ,  Sponsor text ,  PRIMARY KEY (Club_ID))'], 'task': 'Select the
SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID'         , 'SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID'     , ['SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID']]     , [r'''SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Events_number  >  180''']         , ['SELECT T1.Name ,
SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID'         ,'SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID'     ,'SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID'     ,'SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID'     ,'SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1
SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id HAVING count(T2.Name)  >  2'         , 'SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id HAVING count(T2.Name)  >  2'     , 'SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id HAVING count(T2.Name)  >  2'     , 'SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T
SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id WHERE T2.Wins_count  >  2'         , 'SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id WHERE T2.Wins_count  >  2'     , 'SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id WHERE T2.Wins_count  >  2'     , 'SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id WHERE T2.Wins_count  >  2'     , 'SELECT T1.name FROM club AS
SELECT T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Manager  =  'Sam Allardyce' <MID>     , events_number INTEGER NOT NULL DEFAULT 0     , Wins_count INTEGER NOT NULL DEFAULT 0     , Club_ID INTEGER NOT NULL REFERENCES club(Club_ID) ON DELETE SET NULL ON UPDATE CASCADE     , PRIMARY KEY (Player_ID)     , UNIQUE INDEX Player_ID ON Player(Player_ID)     , INDEX name ON Player(Name)     , INDEX country ON Player(Country)     , INDEX wins_count ON Player(Wins_count)     , INDEX events_number ON Player(Events_number)     , CHECK (events_
SELECT T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Manager  =  'Sam Allardyce' UNION SELECT T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Captain  =  'Sam Allardyce' UNION SELECT T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Sponsor  =  'Sam Allardyce' UNION SELECT T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.name  =  'Sam Allardyce' UNION SELECT
SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY avg(T2.earnings) DESC'         , 'SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY avg(T2.earnings) DESC'     , ['SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY avg(T2.earnings) DESC']     , ['SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id GROUP
SELECT t1.name FROM club AS t1 JOIN player AS t2 ON t1.club_id  =  t2.club_id GROUP BY t1.club_id ORDER BY avg(t2.earnings) DESC'         ,'SELECT t1.name FROM club AS t1 JOIN player AS t2 ON t1.club_id  =  t2.club_id GROUP BY t1.club_id ORDER BY avg(t2.earnings) DESC'     ,'SELECT t1.name FROM club AS t1 JOIN player AS t2 ON t1.club_id  =  t2.club_id GROUP BY t1.club_id ORDER BY avg(t2.earnings) DESC'     ,'SELECT t1.name FROM club AS t1 JOIN player AS t2 ON t1.club_id  =  t2.club_id GROUP
SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer'         , ['SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer']]     , [315 , 'SELECT name FROM club WHERE manager = 'Dave'' , ['SELECT name FROM club WHERE manager  =  'Dave'']]     , [296 , 'SELECT name FROM club WHERE captain = 'Boaty' AND Manufacturer = 'Naismith'', ['SELECT name FROM club WHERE captain  =  'Boaty' AND Manufacturer  =  'Naismith'']]     , [407 , 'SELECT name FROM club WHERE manager = 'Sue' AND Manufacturer = 'Adidas'', ['SELECT name FROM club WHERE manager  =  'Sue' AND Manufacturer  =  'Adidas'']]     , [389 , 'SELECT
SELECT count(*) ,  Manufacturer FROM club GROUP BY Manufacturer'         , 'SELECT count(*) ,  Manufacturer FROM club GROUP BY Manufacturer'         , ['COUNT(Club_ID) ,  Manufacturer FROM club GROUP BY Manufacturer']     , ['SELECT count(*) ,  Manufacturer FROM club GROUP BY Manufacturer']     , ['SELECT count(*) ,  Manufacturer FROM club GROUP BY Manufacturer']      , 100.0]     , [25 ,  'SELECT count(*) ,  captain FROM club GROUP BY captain' , 'SELECT count(*) ,  captain FROM club GROUP BY captain' , ['COUNT(Club_ID) ,  captain FROM club GROUP BY captain'] , ['COUNT(Club_ID) ,  captain FROM club GROUP BY captain'] , 100.0]]
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1'         , 'SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT Manufacturer FROM club GROUP BY
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1'         ,'SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1'         ,'Adidas'     ,'Which country has the most players?[SQL] SELECT Country FROM player GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1'         ,'SELECT Country FROM player GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1'         ,'Germany'     ,'How many events have been played by all players collectively?[SQL] SELECT Events_number FROM player GROUP BY Events_number ORDER BY COUNT(*) DESC LIMIT 1'         ,'SELECT Events_number FROM player GROUP BY Events_number ORDER BY COUNT(*) DESC LIMIT 1'         ,'1056'     ,'Which captain has won the most events for his club?[SQL
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1]'         , 'answer': 'Adidas'     , 'difficulty': 2     , 'category': 'Basic Select'     , 'active': True     , 'created_by': 'T4'     , 'created_on': '2018-07-26T14:54:40.397772Z'     , 'question_code': ''     , 'code': 'SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1'     , 'total_hint': 0     , 'hint': []     , 'images': []     , 'video_url': ''
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING count(*)  >  1'         ,'SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING count(*)  >  1'         ,'The following manufacturers work for more than 1 club: Adidas, Nike'     ,'Based on the provided database schema information, Which captains have played for at least 5 different clubs? [SQL] SELECT Captain FROM club GROUP BY Captain HAVING count(*)  >=  5'         ,'SELECT Captain FROM club GROUP BY Captain HAVING count(*)  >=  5'         ,'The following captains have played for at least 5 different clubs: R. Serena, M. Samara'     ,'Find the number of players who have won at least 2 events. [SQL] SELECT COUNT(*) FROM player WHERE Events_number  >=  2'
SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1]'         ,'answer': 'Australia'     ,'difficulty': 2     ,'category': 'Basic Select'     ,'active': True     ,'created_by': 'Tutor'     ,'created_on': '2008-07-22T17:44:59.300607Z'     ,'question_type': 'MULTIPLE CHOICE'     ,'submitted_by': 'Scipy'     ,'submitted_on': '2018-07-17T03:39:05.277241Z'     ,'choice_1': 'USA'     ,'choice_2': 'Australia'
SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1'         ,'SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1'         ,'SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1'     ,'SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1'     ,'SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1']     ,['SELECT name FROM club'         ,'SELECT name FROM club'         ,'SELECT name FROM club'         ,'SELECT name FROM club'     ,'SELECT name FROM club']]     ,['SELECT manager FROM club'         ,'SELECT manager FROM club'         ,'SELECT manager FROM club'         ,'SELECT manager FROM club'     ,'SELECT manager FROM club']]     ,['SELECT captain
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)')]
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)')]
SELECT Country FROM player WHERE Earnings  >  1400000 UNION SELECT Country FROM player WHERE Earnings  <  11000000'         ,'SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  11000000'     ,'SELECT Country FROM player WHERE Earnings  >  1400000 EXCEPT SELECT Country FROM player WHERE Earnings  <  11000000'     ,'SELECT Country FROM player WHERE Earnings  >  1400000 OR  Earnings  <  11000000'     ,'SELECT Country FROM player WHERE Earnings  >  1400000 AND  Earnings  <  1
SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  110000000'         ,'SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  110000000'         ,'SELECT Country FROM player WHERE Earnings  <  110000000 EXCEPT SELECT Country FROM player WHERE Earnings  >  1400000'     ,'SELECT Club_ID FROM club GROUP BY Club_ID HAVING count(*)  >  25'     ,'SELECT name FROM club GROUP BY name HAVING count(*)  >  25'     ,'SELECT name FROM club GROUP BY name ORDER BY count(*) DESC
SELECT count(DISTINCT Country) FROM player'         , 'SELECT count(DISTINCT Country) FROM player'         , 'SELECT count(DISTINCT Country) FROM player'     , 125]     , ['SELECT avg(Events_number) FROM player'         , 'SELECT avg(Events_number) FROM player' , 'SELECT avg(Events_number) FROM player'     , 34.869135802469]     , ['SELECT name FROM club WHERE manager = 'Diego Armando Maradona' AND captain = 'Ronaldinho' AND manufacturer = 'Adidas' AND sponsor = 'Nike'' , 'SELECT name FROM club WHERE manager = 'Diego Armando Maradona' AND captain = 'Ronaldinho' AND manufacturer = 'Adidas' AND sponsor = 'Nike'
SELECT COUNT(DISTINCT Country) FROM player'         , 'SELECT COUNT(DISTINCT Country) FROM player'         , 'SELECT count(DISTINCT country) FROM player'     , 'SELECT count(DISTINCT country) FROM player'     , 'SELECT count(DISTINCT country) FROM player'     , 'SELECT count(DISTINCT country) FROM player'     , 'SELECT count(DISTINCT country) FROM player'     , 'SELECT count(DISTINCT country) FROM player'     , 'SELECT count(DISTINCT country) FROM player'     , 'SELECT count(DISTINCT country) FROM player'     , 'SELECT count(DISTINCT country) FROM player'     , 'SELECT count(DISTINCT country) FROM player'     , 'SELECT count(DISTINCT country) FROM player'     , 'SELECT count(DIST
SELECT Earnings FROM player WHERE Country  =  'Australia' OR Country  =  'Zimbabwe' UNION SELECT sum(Earnings) FROM player WHERE Country  =  'Australia' OR Country  =  'Zimbabwe' GROUP BY Country ORDER BY sum(Earnings) DESC LIMIT 1' <MID>     FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  'Racing Club de Avila' GROUP BY T1.name HAVING sum(T2.earnings)  >  45000' UNION SELECT avg(T2.earnings) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  'Real Madrid CF' GROUP BY T
SELECT Earnings FROM player WHERE Country  =  'Australia' OR Country  =  'Zimbabwe'')]'
SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 JOIN order_items AS T3 JOIN orders AS T4 ON T3.order_id = T4.order_id GROUP BY T4.customer_id HAVING count(*)  >  3'         , 'SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 JOIN order_items AS T3 JOIN orders AS T4 ON T3.
SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >=  3 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >  2'         ,
SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id'     ,   'SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T2.product_id != null GROUP BY T1.order_id'     ,   'SELECT T1.order_id ,  count(*) FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T2.product_id != null GROUP BY T1.order_id'     ,   'SELECT T1.order_id ,
SELECT count(*) ,  T1.order_status_code ,  T1.order_id FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_status_code'         ,   'SELECT count(*) ,  T1.order_status_code ,  T1.order_id FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_status_code'     ,   ['SELECT count(*) ,  T1.order_status_code ,  T1.order_id FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_status_code']]     ,   [   'SELECT count(*) ,
SELECT T1.date_order_placed FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.date_order_placed HAVING count(*)  >  1 UNION SELECT min(date_order_placed) FROM orders'         , '2017-08-14'     , 3      , 1     , ['SELECT invoice_date FROM invoices']     , ['2017-08-14']     , 4      , 1     , ['SELECT shipment_date FROM shipments']     , ['2017-08-14']     , 5      , 1     , ['SELECT product_price FROM products WHERE product_name  =  'Red Bicycle'']     , [
SELECT T1.date_order_placed FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1 ORDER BY T1.date_order_placed ASC LIMIT 1'         ,'2003-02-08 00:00:00' , '2003-02-15 00:00:00' , '2003-02-22 00:00:00' ]      ,['SELECT invoice_date FROM INVOICES ORDER BY invoice_date ASC LIMIT 1' , '2017-08-14' ]      ,['SELECT T1.invoice_date FROM INVOICES AS T1 JOIN ship
SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id'         ,   'SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM CUSTOMERS WHERE customer_id NOT IN (SELECT customer_id FROM Orders)'     ,   'SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM CUSTOMERS EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Or
SELECT customer_first_name ,  customer_last_name ,  customer_middle_initial FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name ,  T1.customer_middle_initial FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id'         ,   'SELECT customer_first_name ,  customer_last_name ,  customer_middle_initial FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name ,  T1.customer_middle_initial FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id'     ,   ['SELECT customer_first_name ,  customer_last_name ,  customer_middle_initial FROM C
SELECT product_id ,  product_name ,  product_price ,  product_color FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items GROUP BY product_id HAVING count(*)  >=  2 )'         ,'SELECT product_id ,  product_name ,  product_price ,  product_color FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items GROUP BY product_id HAVING count(*)  >=  2 )'     ,'SELECT product_id ,  product_name ,  product_price ,  product_color FROM products EXCEPT SELECT product_id FROM order_items GROUP BY product_id HAVING count(*)  >=  2'         ,'SELECT product_id ,  product_name ,  product_price ,  product_color FROM products EXCEPT SELECT product_id FROM order_items GROUP BY product_id
SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  <  2'         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,
SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2'         , 'SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_item_status_code = 'Shipped''         , 'SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_item_status_code = 'Cancelled''         , 'SELECT
SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2'         ,'SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_item_status_code = 'Shipped''         ,'SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_item_status_code = 'Cancelled''         ,'SELECT
SELECT T1.product_id ,  T3.product_name ,  T3.product_price FROM orders AS T2 JOIN order_items AS T1 ON T2.order_id = T1.order_id JOIN products AS T3 ON T3.product_id = T1.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1'         ,   'answer': 'product_id'         ,   'difficulty': 'hard'         ,   'category': 'python'     ,   'image': 'https://images.pexels.com/photos/736567/pexels-photo-736567.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'         ,   'level': 'e
SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1'         ,'SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1'     ,'SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.
SELECT order_id ,  sum(T1.product_price) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id GROUP BY order_id ORDER BY sum(T1.product_price) LIMIT 1'         , 'SELECT order_id FROM order_items GROUP BY order_id ORDER BY sum(product_price) LIMIT 1'     , 'SELECT order_id FROM order_items GROUP BY order_id ORDER BY sum(product_price) ASC LIMIT 1'     , 'SELECT order_id FROM order_items GROUP BY order_id ORDER BY sum(product_price) DESC LIMIT 1'     , 'SELECT order_id FROM order_items GROUP BY order_id ORDER BY sum(product_price) DESC LIMIT 1'     , 'SELECT order_id FROM order_items GROUP BY order_id ORDER
SELECT sum(T1.order_item_price) FROM order_items AS T1 JOIN orders AS T2 ON T1.order_id = T2.order_id ORDER BY sum(T1.order_item_price) LIMIT 1'         , 'SELECT sum(T1.order_item_price) ,  T2.date_order_placed FROM order_items AS T1 JOIN orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.date_order_placed ORDER BY sum(T1.order_item_price) LIMIT 1'         , 'SELECT min(sum(T1.order_item_price)) ,  T2.date_order_placed FROM order_items AS T1 JOIN orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.date_order_
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1'         ,'answer': 'Visa'}]     ,['question': 'What is the name of the largest category (by number of unique products)?', 'sql': 'SELECT T1.category_name FROM categories AS T1 JOIN products AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_name ORDER BY count(DISTINCT product_id) DESC LIMIT 1']]     ,['question': 'Which customer has the highest total amount spent on orders? (include that customer's first name, last name and gender)', 'sql': 'SELECT T1.customer_first_name ,  T1.customer_last_name ,  T1.gender_code FROM customers AS T1 JOIN orders AS
SELECT T1.payment_method_code FROM Customer_Payment_Methods AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.payment_method_code ORDER BY count(*) DESC LIMIT 1'         ,'SELECT T1.payment_method_code FROM Customer_Payment_Methods AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.payment_method_code ORDER BY count(*) DESC LIMIT 1'     ,'SELECT T1.payment_method_code FROM Customer_Payment_Methods AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.payment_method_code ORDER BY count(*) DESC LIMIT 1'         ,'SELECT T1.payment_method_
SELECT T1.gender_code ,  COUNT(*) FROM Customers AS T1 JOIN Order_Items AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code'         , 'SELECT T1.gender_code ,  COUNT(*) FROM Customers AS T1 JOIN Order_Items AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code'     , 'SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN order_items AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.product_id  =  3 GROUP BY T1.gender_code'     , 'SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN order_items AS T2 ON T1.customer_
SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code'         ,   'gender_code': 'M'         ,   'count': 7}     ,   {'task': 'How many different colors of T-shirts are in stock? [SQL] SELECT count(DISTINCT product_color) FROM products WHERE product_category  =  'T-shirts''}     ,   {'task': 'How many products does each order contain? [SQL] SELECT count(*) ,  order_id FROM order_items GROUP BY order_id'}]
SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code'         ,'SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code'         ,'SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code'     ,'SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.
SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code'         ,'SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code'         ,'SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code'     ,'SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.
SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id WHERE gender_code  =  'M' UNION SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id WHERE gender_code  =  'F' ORDER BY customer_first_name'     FROM CUSTOMERS AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =
SELECT T1.invoice_status_code ,  T1.invoice_date ,  min(T2.shipment_date) FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_status_code ,  T1.invoice_date'         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,
SELECT invoice_status_code ,  date_order_placed ,  invoice_date FROM Invoices UNION SELECT 'New' ,   NULL ,  NULL FROM Invoices WHERE invoice_date  =  '0000-00-00 00:00:00' UNION SELECT 'Processed' ,   NULL ,  NULL FROM Invoices WHERE invoice_date  =  '0000-00-00 00:00:00' UNION SELECT 'Shipped' ,   NULL ,  NULL FROM Invoices WHERE invoice_date  =  '0000-00-00 00:00:00' UNION SELECT 'Delivered' ,   NULL ,  NULL FROM Invoices WHERE invoice_date  =  '0000-00-00 00:0
SELECT T1.product_name ,  T3.shipment_date FROM products AS T1 JOIN order_items AS T2 JOIN shipments AS T3 ON T1.product_id = T2.product_id AND T2.order_item_id = T3.order_item_id'     ,   'customers': ['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY , `gender_code` VARCHAR(1) NOT NULL , `customer_first_name` VARCHAR(50) , `customer_middle_initial` VARCHAR(1) , `customer_last_name` VARCHAR(50) , `email_address` VARCHAR(255) , `login_name` VARCHAR(80) , `login_password` VARCHAR(20) , `phone_number` VARCHAR(255) , `address_line_1` VARCHAR(2
SELECT T1.product_name ,  T3.date_order_placed FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id JOIN orders AS T3 ON T2.order_id = T3.order_id WHERE T2.order_item_status_code = 'Shipped' <MID>_id` INTEGER NOT NULL,
SELECT T1.order_item_status_code ,  T2.shipment_tracking_number FROM Order_Items AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id'     ,   'SELECT T1.order_item_status_code ,  T2.shipment_tracking_number FROM Order_Items AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id'     ,   ['T1.order_item_status_code' ,  'T2.shipment_tracking_number']     ,   'SELECT T1.order_item_status_code ,  T2.shipment_tracking_number FROM Order_Items AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id'     ,
SELECT T1.order_item_status_code ,  T2.shipment_tracking_number FROM Order_Items AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id WHERE T1.order_item_status_code = 'Shipped' AND T2.shipment_tracking_number != ''' <MID>_id` INTEGER NOT NULL,
SELECT T1.product_name ,  T1.product_color FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id JOIN shipments AS T3 ON T2.shipment_id = T3.shipment_id'         , answers: ['Red Sneakers']     , correctAnswer: 0     , explanation: 'The product name and color for the red sneakers were requested.'     , level: 'easy'     , questionType: 'mysql'     , subtask: false     , isNewCreate: true     , showCountdown: true     , countdownTimer: 60     , isTimed: true     , template: 'TASK'     , taskType: 'task'     , explanation: ''     , explanationDisplay: 'explanation'
SELECT T1.product_name ,  T1.product_color FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id JOIN shipments AS T3 ON T2.order_id  =  T3.order_id'     , answers: ['Red','Green','Blue']     , correctAnswer: 0     , explanation: 'The first product has been shipped in Red.'     , subtask: false     , isRequired: true     , isFinal: false     , files: []     , taskId: 7608     , tags: ['products_shipped']     , gradable: true     , help: ''     , course: 'course_8gU183qK'     , chapter: 'Chapter 4'     , section: 'Section
SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id JOIN orders AS T3 ON T2.order_id  =  T3.order_id JOIN customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'F' GROUP BY T1.product_name ,  T1.product_price ,  T1.product_description ORDER BY T1.product_name ASC' > task1.sql'     ,   'SELECT DISTINCT product_name FROM products' ]     ,   [ 'SELECT DISTINCT product_name FROM products' ]     ,   [ 'SELECT DISTINCT product_name FROM products'
SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM products AS T1 JOIN orders AS T2 JOIN customer_payment_methods AS T3 ON T1.product_id = T2.order_id AND T2.customer_id = T3.customer_id WHERE T3.gender_code  =  'F' GROUP BY T1.product_id ORDER BY T1.product_price DESC'
SELECT T1.invoice_status_code FROM Invoices AS T1 JOIN Orders AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.order_status_code != 'Shipped' UNION SELECT 'Not Shipped' FROM Orders WHERE order_status_code != 'Shipped' <MID>_id` INTEGER NOT NULL,
SELECT T1.invoice_status_code FROM invoices AS T1 JOIN orders AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.order_status_code != 'Shipped' UNION SELECT 'Not Shipped' FROM orders WHERE order_status_code != 'Shipped' <MID>_id` INTEGER NOT NULL,
SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T1.order_id'     ,'total_cost': 76.72}
SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.order_item_price) FROM orders AS T1 JOIN order_items AS T2 JOIN customer_payment_methods AS T3 ON T1.order_id = T2.order_id AND T2.order_item_id = T3.order_item_id GROUP BY T1.order_id'     ,   'SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.order_item_price) FROM orders AS T1 JOIN order_items AS T2 JOIN customer_payment_methods AS T3 ON T1.order_id = T2.order_id AND T2.order_item_id = T3.order_item_id GROUP BY T1.order_id'     ,   ['SELECT T1.
SELECT count(DISTINCT customer_id) FROM orders WHERE order_status_code  =  'Placed' OR order_status_code  =  'Partially Shipped' OR order_status_code  =  'Shipped' OR order_status_code  =  'Delivered' OR order_status_code  =  'Cancelled' OR order_status_code  =  'Processing' OR order_status_code  =  'Pending' OR order_status_code  =  'Failed' OR order_status_code  =  'Replacement Requested' OR order_status_code  =  'Replacement Processing' OR order_status_code  =  'Open' OR order_status_code  =  'Awaiting Fulfillment' OR order_status_code  =  'Fulfilled' OR order_status_code
SELECT count(DISTINCT customer_id) FROM orders'         , 'SELECT count(DISTINCT customer_id) FROM orders'         , 'SELECT count(DISTINCT customer_id) FROM orders'     , 'SELECT count(DISTINCT customer_id) FROM orders'     , 'SELECT count(DISTINCT customer_id) FROM orders'     , 'SELECT count(DISTINCT customer_id) FROM orders'     , 'SELECT count(DISTINCT customer_id) FROM orders'     , 'SELECT count(DISTINCT customer_id) FROM orders'     , 'SELECT count(DISTINCT customer_id) FROM orders'     , 'SELECT count(DISTINCT customer_id) FROM orders'     , 'SELECT count(DISTINCT customer_id) FROM orders'     , 'SELECT count(DISTINCT customer_id) FROM orders'
SELECT count(DISTINCT order_item_status_code) FROM order_items'         , 'TASK2': ['SELECT count(DISTINCT order_item_status_code) FROM order_items']}     FROM = {'FROM1': 'SELECT count(*) FROM customers WHERE gender_code  =  'F'', 'FROM2': 'SELECT count(*) FROM customers WHERE gender_code  =  'M'', 'FROM3': 'SELECT count(*) FROM products'}     WHERE = {'WHERE1': 'SELECT count(*) FROM customers WHERE customer_id  =  1', 'WHERE2': 'SELECT count(*) FROM customers WHERE email_address  =  'null'', 'WHERE3': 'SELECT count(*) FROM products WHERE product_price  >  150'}     GROUP BY = {'GROUPBY1': 'SELECT count(*) FROM customers GROUP BY gender_code', 'GROUP
SELECT count(DISTINCT order_item_status_code) FROM order_items'         , 'T1' : 'SELECT count(DISTINCT order_item_status_code) FROM order_items'         , 'T2' : 'SELECT count(DISTINCT order_item_status_code) FROM ORDER_ITEMS'     ,   'Q2' : 'How many different payment methods does each customer have?[SQL] SELECT count(*) ,  gender_code FROM customers GROUP BY gender_code'         , 'T3' : 'SELECT count(*) ,  gender_code FROM customers GROUP BY gender_code'     ,   'Q3' : 'How many different colors are available for purchase?[No SQL] The answer is 13. The colors are: Red ,  Green ,  Yellow ,  Blue ,  Maroon ,  Olive ,  Lime ,  Navy
SELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods'         , 'SELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods'         , ['SELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods']         , 1     , 3     , ['SELECT count(*) FROM products']         , 'SELECT count(*) FROM products'         , ['SELECT count(*) FROM products']     , 4     , ['SELECT count(*) FROM customers']         , 'SELECT count(*) FROM customers'         , ['SELECT count(*) FROM customers']     , 5     , ['SELECT count(*) FROM invoices']         , 'SELECT count(*) FROM invoices'         , ['SELECT count(*) FROM invoices']     , 6     , ['SELECT count(*) FROM orders']
SELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods'         , 'SELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods'         , ['SELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods']     ,   'How many different countries are mentioned in the address field of the Customers table? [SQL] SELECT count(DISTINCT country) FROM Customers'         , 'SELECT count(DISTINCT country) FROM Customers'         , ['SELECT count(DISTINCT country) FROM Customers']     ,   'How many different cities are mentioned in the address field of the Customers table? [SQL] SELECT count(DISTINCT town_city) FROM Customers'         , 'SELECT count(DISTINCT town_city) FROM Customers'         , ['SELECT count(DI
SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%' <MID>_id` INTEGER NOT NULL,
SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%' <MID>_id` INTEGER NOT NULL,
SELECT product_size FROM products WHERE product_name LIKE '%Dell%' <MID>_id` INTEGER NOT NULL,
SELECT product_size FROM products WHERE product_name LIKE '%Dell%' ESCAPE '#' <MID>_id` INTEGER NOT NULL,
SELECT product_price ,  product_size FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products) ORDER BY product_price DESC'         ,'SELECT product_price ,  product_size FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products) ORDER BY product_price DESC'     ,'SELECT product_price ,  product_size FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products) ORDER BY product_price DESC'     ,'SELECT product_price ,  product_size FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products) ORDER BY product_price DESC'     ,'SELECT product_price ,  product_size FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products) ORDER BY product_price DESC
SELECT product_price ,  product_size FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products) UNION SELECT product_price ,  product_size FROM products WHERE product_price  <  (SELECT avg(product_price) FROM products) ORDER BY product_price DESC'         ,'SELECT product_price ,  product_size FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)'     ,'SELECT product_price ,  product_size FROM products WHERE product_price  <  (SELECT avg(product_price) FROM products)'     ,'SELECT product_price ,  product_size FROM products WHERE product_price  =  (SELECT avg(product_price) FROM products)'          ,'SELECT count(*) FROM products'     ,'SELECT sum(product_price) FROM products'     ,'
SELECT count(DISTINCT product_name) FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items )'         , answers: [3]     , question: 'How many kinds of products have not been sold?'     , required: true     , type: 'number'     , validation_type: 'numeric'     , choices: []     , show_answer_button: false     , is_completed: true     , extras: {}     , fk_path: ['ORDER_ITEMS', 'product_id']     , mode: 'query'     , id: '67f7a8c7-e4b7-4dad-96de-2c5bf4857a95'     , title: 'How many kinds of products have not been sold?'     , description: 'Based
SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items )'         ,'answer': 3}      ,   {'question': 'What is the total value of all products that have not been ordered yet?[SQL] SELECT sum(product_price) FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items )'         ,'answer': 167.22}      ,   {'question': 'How many different colors of products are available?[SQL] SELECT count(DISTINCT product_color) FROM products'         ,'answer': 3}      ,   {'question': 'How many different sizes of products are available?[SQL] SELECT count(DISTINCT product_size) FROM products' }     ,   {'question': 'How many different colors of products are available?[SQL] SELECT count(DISTINCT product
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_payment_methods)'         , 'SELECT count(*) FROM customers WHERE gender_code  =  'M''         , 'SELECT count(*) FROM customers WHERE address_line_1  =  'Line 1' AND town_city  =  'Town' AND county  =  'County' AND country  =  'Country'')     FROM DBMS_XPLAN.DISPLAY_FORMAT('accesstype','xml') SELECT * FROM DUAL; SET PLAN_TABLE = (SELECT * FROM XMLTABLE ('$PLAN' PASSING ACCESS_TYPE AS 'XML') AS plan_alias (id INTEGER , operation VARCHAR , options VARCHAR , content VARCHAR));'         ;
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_payment_methods) <MID>_id` INTEGER NOT NULL,
SELECT order_status_code ,  date_order_placed FROM Orders'     ,   'SELECT order_status_code FROM Orders' ,   'SELECT date_order_placed FROM Orders' ]     ,   [   'SELECT DISTINCT product_color FROM Products' ,   'SELECT DISTINCT product_size FROM Products' ,   'SELECT product_name FROM products WHERE product_id = 105' ,   'SELECT product_price FROM products WHERE product_id = 105' ,   'SELECT product_id FROM products WHERE product_name =  'Red' AND product_color =  'Red' AND product_size =  'Small' ']     ,   [   'SELECT T1.product_id ,  T1.product_name FROM products AS T1 JOIN order_items AS T2 ON T1
SELECT date_order_placed ,  order_status_code FROM Orders'         ,'SELECT invoice_status_code ,  invoice_date FROM INVOICES'         ,'SELECT T1.date_order_placed ,  T1.order_status_code FROM ORders AS T1 JOIN invoices AS T2 ON T1.order_id = T2.order_id'     ,'SELECT T3.date_order_placed ,  T3.order_status_code FROM ORders AS T3 JOIN customer_payment_methods AS T4 ON T3.customer_id = T4.customer_id'      ,'SELECT T5.date_order_placed ,  T5.order_status_code FROM ORders AS T5 JOIN shipments AS T6 ON T5.order_id = T6.order_id'
SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE country  =  'USA' <MID>_id` INTEGER NOT NULL,
SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE country  =  'United States' GROUP BY address_line_1 ,  town_city ,  county HAVING count(*)  >  100' <MID>_id` INTEGER NOT NULL,
SELECT T1.customer_first_name ,  T2.product_name FROM customers AS T1 JOIN order_items AS T2 ON T1.customer_id = T2.customer_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T1.customer_first_name ,  T2.product_name'         ,'SELECT T1.customer_first_name ,  T2.product_name FROM customers AS T1 JOIN order_items AS T2 ON T1.customer_id = T2.customer_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T1.customer_first_name ,  T2.product_name'     ,'SELECT T1.customer_first_name ,  T2.product_name FROM customers AS T1 JOIN order_items AS T2 ON
SELECT T1.customer_first_name ,  T3.product_name FROM customers AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.customer_id = T2.customer_id AND T2.product_id = T3.product_id GROUP BY T2.customer_id HAVING count(*)  >  1 UNION SELECT T1.customer_first_name ,  T3.product_name FROM customers AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.customer_id = T2.customer_id AND T2.product_id = T3.product_id GROUP BY T2.customer_id HAVING count(*)  =  1'         ,'SELECT T1.customer_first_name ,  T3.product_name FROM customers AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T
SELECT count(*) FROM shipment_items AS T1 JOIN order_items AS T2 ON T1.order_item_id = T2.order_item_id WHERE T2.order_item_status_code = 'Shipped' AS T3 JOIN shipments AS T4 ON T4.shipment_id = T3.shipment_id' SELECT count(*) FROM shipments' SELECT count(*) FROM shipment_items' SELECT count(*) FROM order_items WHERE order_item_status_code  =  'Shipped'' SELECT count(*) FROM shipments' SELECT count(*) FROM shipment_items' SELECT count(*) FROM order_items WHERE order_item_status_code  =  'Shipped'' SELECT count(*) FROM shipments' SELECT count(*) FROM shipment_items' SELECT count(*) FROM order_items WHERE order_item_status_code  =  'Shipped'' SELECT count(*) FROM ship
SELECT count(*) FROM order_items WHERE order_item_status_code = 'Shipped' UNION SELECT count(*) FROM shipment_items WHERE order_item_id IN ( SELECT order_item_id FROM order_items WHERE order_item_status_code = 'Shipped' ) GROUP BY 1 ORDER BY count(*) DESC LIMIT 1' AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id' AS T3' AS T4 JOIN orders AS T5 ON T5.order_id  =  T4.order_id' AS T6 JOIN invoices AS T7 ON T7.invoice_number  =  T6.invoice_number' AS T8' AS T9' SELECT count(*) FROM shipments' AS T10' AS T11 JOIN shipment_items AS T12 ON T12.shipment_id
SELECT avg(product_price) FROM products'         , 'SELECT avg(product_price) FROM products'         , ['SELECT avg(product_price) FROM products']     ,  3         ,  1     ,  1         ,  'SELECT count(*) FROM customers'         , 'SELECT count(*) FROM customers'         , ['SELECT count(*) FROM customers']     ,  4         ,  1     ,  1         ,  'SELECT count(*) FROM orders'         , 'SELECT count(*) FROM orders'         , ['SELECT count(*) FROM orders']     ,  5         ,  1     ,  1         ,  'SELECT count(*) FROM order_items'         , 'SELECT count(*) FROM order_items'         , ['SELECT count(*) FROM order_items']     ,  6         ,  1     ,  1
SELECT avg(product_price) FROM products'         ,'SELECT avg(product_price) FROM products'         ,'SELECT avg(product_price) FROM products'     ,'SELECT avg(product_price) FROM products'     ,'SELECT avg(product_price) FROM products'     ,'SELECT avg(product_price) FROM products'     ,'SELECT avg(product_price) FROM products'     ,'SELECT avg(product_price) FROM products'     ,'SELECT avg(product_price) FROM products'     ,'SELECT avg(product_price) FROM products'     ,'SELECT avg(product_price) FROM products'     ,'SELECT avg(product_price) FROM products'     ,'SELECT avg(product_price) FROM products'     ,'SELECT avg(product
SELECT avg(product_price) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id WHERE T2.order_item_status_code  =  'Pending' AND T2.quantity  >  0 GROUP BY T1.product_id ORDER BY T1.product_price DESC LIMIT 1' SELECT avg(product_price) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id WHERE T2.order_item_status_code  =  'Pending' AND T2.quantity  >  0 GROUP BY T1.product_id ORDER BY T1.product_price ASC LIMIT 1' SELECT avg(product_price) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2
SELECT avg(product_price) FROM products WHERE product_id IN ( SELECT product_id FROM order_items )'         ,'answer': '3.675'     ,   'difficulty': 'hard'     ,   'category': 'python'     ,   'image': 'https://images.pexels.com/photos/167627/pexels-photo-167627.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'     ,   'subcategory': 'null'     ,   'author': 'null'     ,   'tags': 'null' } ,   {   'question': 'What is the name of the largest category (by number of products in it)?[SQL] SELECT T1.category_name
SELECT email_address ,  town_city ,  county FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1'         ,   'answer': 'SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1)'     ,   'difficulty': 3     ,   'category': 'Basic Select'     ,   'active': True     ,   'created_by': 'Tanmay'     ,   'created_on': '2018-07-26T17:44:50.217762Z'     ,   'question_type': 'MULTIPLE CHOICE'     ,   'submitted_by': 'Aayush'     ,
SELECT email_address ,  town_city ,  county FROM customers WHERE gender_code  =  (SELECT gender_code FROM customers GROUP BY gender_code ORDER BY count(*) LIMIT 1) EXCEPT SELECT T1.email_address ,  T1.town_city ,  T1.county FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code HAVING count(*)  <  (SELECT count(*) FROM customers GROUP BY gender_code ORDER BY count(*) LIMIT 1) UNION SELECT T1.email_address ,  T1.town_city ,  T1.county FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code HAVING count(*)  >  (SELECT count(*) FROM customers GROUP BY
SELECT T1.date_order_placed FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN customer_payment_methods AS T3 ON T2.customer_id = T3.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2'         , 'SELECT T1.date_order_placed FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN customer_payment_methods AS T3 ON T2.customer_id = T3.customer_id'     , 'SELECT T1.date_order_placed FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN customer_payment_methods AS T3 ON T2.customer_id = T3.customer_id GROUP BY
SELECT T1.date_order_placed FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN customer_payment_methods AS T3 ON T2.customer_id = T3.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2'         ,'2017-08-14'     ,'SELECT T1.date_order_placed FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN customer_payment_methods AS T3 ON T2.customer_id = T3.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2'     ,'SELECT T1.date_order_placed FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY count(*) ASC LIMIT 1'         ,'TASK3':'SELECT product_id FROM order_items WHERE order_item_status_code  =  'Completed' GROUP BY product_id ORDER BY count(*) DESC LIMIT 1'}]     ,'TASK2':{'displayName':'Most common order status','columns':['order_status_code'],'rows':[{'order_status_code':'Shipped'}]}}]     ,'displayName':'Orders'}]
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY count(*) ASC LIMIT 1'         ,'TASK':'LEAST COMMON ORDER STATUS IS ' + self.least_common_order_status() + ''}         ,{'QUESTION': 'What is the most commonly ordered product? [SQL] SELECT T1.product_name FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1' }         ,{'QUESTION': 'Find all customers that have placed more than one order. [SQL] SELECT T1.customer_first_name ,  T1.customer_last_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_
SELECT T1.product_id ,  T1.product_description FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3'         , 'SELECT T1.product_id ,  T1.product_description FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3'     , ['SELECT T1.product_id ,  T1.product_description FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3']     , ['SELECT T1.product
SELECT DISTINCT T1.product_id ,  T1.product_description FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3'         , 'customers': 'SELECT * FROM Customers'         , 'customer_payment_methods': 'SELECT * FROM Customer_Payment_Methods'         , 'invoices': 'SELECT * FROM Invoices'         , 'orders': 'SELECT * FROM Orders'         , 'order_items': 'SELECT * FROM Order_Items'         , 'shipments': 'SELECT * FROM Shipments'         , 'shipment_items': 'SELECT * FROM Shipment_Items'     , }
SELECT T1.invoice_date ,  T1.invoice_number FROM INVOICES AS T1 JOIN SHIPMENTS AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2'         , 'SELECT T1.invoice_date ,  T1.invoice_number FROM INVOICES AS T1 JOIN SHIPMENTS AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2'     , ['SELECT T1.invoice_date ,  T1.invoice_number FROM INVOICES AS T1 JOIN SHIPMENTS AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP
SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2'         , 'SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number'     , 'SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number'     , 'SELECT T1.invoice_date ,  T1.invoice_number FROM Invo
SELECT shipment_tracking_number ,  shipment_date FROM Shipments'         , 'SELECT shipment_tracking_number ,  shipment_date FROM Shipments'     , ['SELECT shipment_tracking_number ,  shipment_date FROM Shipments']      , 1     , ['SELECT shipment_tracking_number ,  shipment_date FROM Shipments']      , 1     , ['SELECT shipment_tracking_number ,  shipment_date FROM Shipments']      , 1     , ['SELECT shipment_tracking_number ,  shipment_date FROM Shipments']      , 1     , ['SELECT shipment_tracking_number ,  shipment_date FROM Shipments']      , 1     , ['SELECT shipment_tracking_number ,  shipment_date
SELECT shipment_tracking_number ,  shipment_date FROM Shipments'     ,'SELECT shipment_tracking_number ,  shipment_date FROM Shipments'     ,'SELECT shipment_tracking_number ,  shipment_date FROM Shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM Shipments)'     ,'SELECT shipment_tracking_number ,  shipment_date FROM Shipments WHERE invoice_number  =  (SELECT invoice_number FROM Invoices WHERE invoice_status_code  =  'Shipped')'     ,'SELECT DISTINCT product_id FROM order_items'     ,'SELECT count(*) FROM customers'     ,'SELECT count(*) FROM customerdbm.customers'     ,'SELECT count(*) FROM customerdbm
SELECT product_color ,  product_description ,  product_size FROM products WHERE product_price  <  (SELECT max(product_price) FROM products) UNION SELECT DISTINCT product_color ,  product_description ,  product_size FROM products WHERE product_price  <  100.00 ORDER BY product_price DESC'         ,'SELECT DISTINCT product_color ,  product_description ,  product_size FROM products WHERE product_price  <  100.00 UNION SELECT DISTINCT product_color ,  product_description ,  product_size FROM products WHERE product_price  <  (SELECT max(product_price) FROM products)'     ,'SELECT DISTINCT product_color ,  product_description ,  product_size FROM products WHERE product_price  <  100.00 INTERSECT SELECT DISTINCT product_color ,  product_description
SELECT product_color ,  product_description ,  product_size FROM products WHERE product_price != (SELECT max(product_price) FROM products) UNION SELECT DISTINCT product_color ,  product_description ,  product_size FROM products WHERE product_price < (SELECT min(product_price) FROM products) ORDER BY product_color ASC , product_description ASC , product_size ASC'         ,'red','T-shirt','M' UNION SELECT DISTINCT product_color ,  product_description ,  product_size FROM products WHERE product_price < (SELECT min(product_price) FROM products) ORDER BY product_color ASC , product_description ASC , product_size ASC'     ,'green','T-shirt','L' UNION SELECT DISTINCT product_color ,  product_description ,  product_size FROM products WHERE product_price < (SELECT min(product_price) FROM products)
SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director) <MID>     , channel_id INTEGER NOT NULL REFERENCES channel(channel_id) ON DELETE CASCADE ON UPDATE CASCADE     , is_first_director BOOLEAN NOT NULL DEFAULT false     , PRIMARY KEY (director_id , channel_id)     , UNIQUE (director_id , channel_id)     , FOREIGN KEY (director_id) REFERENCES director(director_id) ON DELETE CASCADE ON UPDATE CASCADE     , FOREIGN KEY (channel_id) REFERENCES channel(channel_id) ON DELETE CASCADE ON UPDATE CASCADE     , CHECK (is_first_director  =  true OR is_first_director
SELECT Name FROM director ORDER BY Age ASC LIMIT 1'         , 'directors': [{'Name': 'Clint Eastwood', 'Age': 62}, {'Name': 'Joel Coen', 'Age': 52}, {'Name': 'Spielberg', 'Age': 71}]}     , {'query': 'SELECT Name FROM director ORDER BY Age DESC LIMIT 1'         , 'answer': 'Oldest director: Spielberg'         , 'directors': [{'Name': 'Clint Eastwood', 'Age': 62}, {'Name': 'Joel Coen', 'Age': 52}, {'Name': 'Spielberg', 'Age': 71}]}     , {'query': 'SELECT Name FROM director ORDER BY Age ASC LIMIT 1'         , 'answer': 'Youngest director: Clint Eastwood'         , 'directors':
SELECT count(*) FROM channel WHERE internet LIKE '%bbc%'
SELECT count(DISTINCT digital_terrestrial_channel) FROM channel WHERE internet  =  'Yes' <MID>     , director_id INTEGER NOT NULL REFERENCES director(director_id) ON DELETE CASCADE ON UPDATE CASCADE     , channel_id INTEGER NOT NULL REFERENCES channel(channel_id) ON DELETE CASCADE ON UPDATE CASCADE     , FOREIGN KEY (director_id) REFERENCES director(director_id) ON DELETE CASCADE ON UPDATE CASCADE     , PRIMARY KEY (director_id ,  channel_id)     , UNIQUE (director_id ,  channel_id)     , CHECK (is_first_director  =  0 OR is_first_director  =  1)     , CHECK (start
SELECT title FROM program ORDER BY start_year DESC'         , 'start_year': 2015}      , {'answer': 'DIRECTOR_ADMIN', 'query': 'SELECT * FROM director_admin'}      , {'answer': 'DIRECTOR', 'query': 'SELECT * FROM director'}      , {'answer': 'CHANNEL', 'query': 'SELECT * FROM channel'}      , {'answer': 'PROGRAM', 'query': 'SELECT * FROM program'}     , {'answer': 'DIRECTOR_ADMIN', 'query': 'SELECT * FROM director_admin'}     , {'answer': 'DIRECTOR', 'query': 'SELECT * FROM director'}     , {'answer': 'CHANNEL', 'query': 'SELECT * FROM channel'}     , {'answer': 'PROGRAM', 'query': 'SELECT * FROM program'}     ,
SELECT T1.name FROM director AS T1 JOIN program AS T2 ON T1.director_id  =  T2.director_id GROUP BY T1.director_id ORDER BY count(*) DESC LIMIT 1 <MID>     , channel_id INTEGER NOT NULL REFERENCES channel(channel_id)     , is_first_director BOOLEAN     , PRIMARY KEY (director_id , channel_id)     , UNIQUE (director_id , channel_id)     , FOREIGN KEY (director_id) REFERENCES director(director_id)     , FOREIGN KEY (channel_id) REFERENCES channel(channel_id)     , CHECK (is_first_director  =  (director_id != channel_id))     , CHECK ((director_id != channel
SELECT t1.name ,  t1.age FROM director AS t1 JOIN program AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1'         , 'answer': 'DIRECTOR NAME:  James Lecesne AGE:  51'     , 'explanation': ''} ,   {'question': 'Find the names of all the channels that carry programs in both English and Spanish?[SQL] SELECT name FROM channel WHERE internet  =  'English' INTERSECT SELECT name FROM channel WHERE internet  =  'Spanish' 'answer': 'NAMES OF THE CHANNELS THAT CARRY PROGRAMS IN BOTH ENGLISH AND SPANISH' , 'explanation': ''} ,   {'question': '
SELECT title FROM program ORDER BY start_year DESC LIMIT 1'         , 'start_year': 2016 }]      , 'correct': False }, { 'question': 'Which director has directed more than three programs?', 'answers': [ { 'answer': 'Margaret Chase', 'program_ids': [ 4, 5, 6 ] } ], 'correct': True }]
SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1'         , 'answer': 't1.name ,  t1.internet'     , 'choices': [{'display': 't1.name ,  t1.internet'}, {'display': 't1.name'}, {'display': 't1.internet'}], 'correct': [True, False, False]}]
SELECT count(*) ,  T1.name FROM channel AS T1 JOIN program AS T2 ON T1.channel_id  =  T2.channel_id GROUP BY T1.name'         , 'SELECT count(*) ,  T1.name FROM channel AS T1 JOIN program AS T2 ON T1.channel_id  =  T2.channel_id GROUP BY T1.name'     , 'SELECT count(*) ,  T1.name FROM channel AS T1 JOIN program AS T2 ON T1.channel_id  =  T2.channel_id GROUP BY T1.name'     , ['DIGITAL_TERRESTRIAL_CHANNEL', 'Analogue_terrestrial_channel', 'Internet']]
SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)'         , 'answer': 2}      , {'question': 'Find the names of all directors who have directed more than one program. [SQL] SELECT T1.name FROM director AS T1 JOIN program AS T2 ON T1.director_id  =  T2.director_id GROUP BY T1.director_id HAVING count(*)  >  1'         , 'answer': ['James Cameron', 'John Smith']}      , {'question': 'Find the start date of the oldest program. [SQL] SELECT start_year FROM program ORDER BY start_year LIMIT 1'         , 'answer': 1985}      , {'question': 'Find the names of all directors who have directed more than three programs. [SQL] SELECT T1.name FROM director
SELECT T1.name FROM director AS T1 JOIN program AS T2 ON T1.director_id  =  T2.director_id WHERE T2.title  =  'Dracula' <MID>     , channel_id integer NOT NULL REFERENCES channel(channel_id)     , is_first_director boolean     , PRIMARY KEY (director_id , channel_id)     , FOREIGN KEY (director_id) REFERENCES director(director_id)     , FOREIGN KEY (channel_id) REFERENCES channel(channel_id)     , UNIQUE (director_id , channel_id)     , CHECK (is_first_director IN (0 , 1))     , CONSTRAINT unique_director_admin EXCLUDE USING index (director_id WITH
SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1 <MID>     , director_id INTEGER NOT NULL REFERENCES director(director_id)     , start_year REAL NOT NULL     , title TEXT NOT NULL     , channel_id INTEGER NOT NULL REFERENCES channel(channel_id)     , PRIMARY KEY (program_id)     , FOREIGN KEY (director_id) REFERENCES director(director_id)     , FOREIGN KEY (channel_id) REFERENCES channel(channel_id)     , UNIQUE (title ,  start_year ,  director_id ,  channel_id)
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60'         , 'directors': None}     , {'query': 'SELECT count(*) FROM program' , 'directors': None}     , {'query': 'SELECT count(DISTINCT director_id) FROM program' , 'directors': None}     , {'query': 'SELECT count(DISTINCT channel_id) FROM program' , 'directors': None}     , {'query': 'SELECT count(DISTINCT title) FROM program' , 'directors': None}     , {'query': 'SELECT count(DISTINCT start_year) FROM program' , 'directors': None}     , {'query': 'SELECT count(*) FROM director' , 'directors': None}     , {'query': 'SELECT count(*) FROM channel' , 'directors': None}     , {'query': '
SELECT t1.name FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60 <MID>     , start_year real     , title text     , director_id  integer     , channel_id  integer     , PRIMARY KEY (program_id)     , FOREIGN KEY (director_id) REFERENCES director (director_id)     , FO
SELECT t1.channel_id ,  t2.name FROM director_admin AS t1 JOIN channel AS t2 ON t1.channel_id  =  t2.channel_id WHERE t1.director_id NOT IN (SELECT director_id FROM director WHERE name  =  'Hank Baskett') UNION SELECT t1.channel_id ,  t2.name FROM director_admin AS t1 JOIN channel AS t2 ON t1.channel_id  =  t2.channel_id WHERE t1.is_first_director  =  1 AND t1.director_id NOT IN (SELECT director_id FROM director WHERE name  =  'Hank Baskett')'     , [answers]: { correct: [0] }     , [explanation]: ''     , [selected]: false     , [isCompleted]: true     , [comple
SELECT count(*) FROM radio' , '4' ] , [ 'SELECT count(*) FROM city_channel_radio' , '16' ] , [ 'SELECT count(*) FROM tv_show' , '3' ] , [ 'SELECT count(*) FROM city_channel_tv_show' , '5' ] , [ 'SELECT count(DISTINCT radio_id) FROM city_channel_radio' , '4' ] , [ 'SELECT count(DISTINCT tv_show_ID) FROM city_channel_tv_show' , '3' ] , [ 'SELECT count(DISTINCT ID) FROM city_channel' , '8' ] , [ 'SELECT count(DISTINCT ID) FROM radio' , '4' ] , [ 'SELECT count(DISTINCT ID) FROM tv_show' , '3' ] ]
SELECT transmitter FROM radio ORDER BY ERP_kW ASC'     , 'SELECT transmitter FROM radio ORDER BY ERP_kW ASC'     , 'SELECT transmitter FROM radio ORDER BY ERP_kW DESC'     , 'SELECT transmitter FROM radio ORDER BY ERP_kW ASC LIMIT 3'     , 'SELECT transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 3'     , 'SELECT transmitter FROM radio WHERE ERP_kW  >  200'     , 'SELECT transmitter FROM radio WHERE ERP_kW  <  200'     , 'SELECT transmitter FROM radio WHERE ERP_kW  =  200'     , 'SELECT transmitter FROM radio WHERE ERP_kW != 200'     , 'SELECT transmitter FROM radio WHERE ERP
SELECT tv_show_name ,  Original_Airdate FROM tv_show'     ,   'SELECT tv_show_name ,  Original_Airdate FROM tv_show'     ,   ['tv_show_name', 'Original_Airdate']     ,   ['tv_show_name', 'Original_Airdate']     ,   False     ,   True     ,   False          ,   ['SELECT tv_show_name ,  Original_Airdate FROM tv_show']     ,   ['SELECT tv_show_name ,  Original_Airdate FROM tv_show']     ,   ['tv_show_name', 'Original_Airdate']     ,   ['tv_show_name', 'Original_Airdate']     ,   False     ,   True     ,   False          ,   ['
SELECT station_name FROM city_channel WHERE affiliation != 'ABC' <MID>_ID IN (SELECT radio_ID FROM city_channel_radio WHERE city_channel_id  =  {city_channel_id}) AND radio.Radio_ID IN (SELECT radio_ID FROM city_channel_radio WHERE city_channel_id  =  {city_channel_id} AND Is_online  =  1) ORDER BY radio.Radio_MHz ASC LIMIT 1'     FROM radio;'''     LIMIT = 1
SELECT transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30' , 'SELECT transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30']]
SELECT transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1'         , 'transmitter': 'Antananarivo'}]     , [{'question': 'What is the name of the TV show that has been broadcasted the most times?', 'answer': 'Next_show_name', 'sql': 'SELECT Next_show_name FROM tv_show ORDER BY count(*) DESC LIMIT 1'}, {'question': 'What is the name of the TV show that has been broadcasted the least times?', 'answer': 'Next_show_name', 'sql': 'SELECT Next_show_name FROM tv_show ORDER BY count(*) ASC LIMIT 1'}]]     , [{'question': 'Which city has the most city channels?', 'answer': 'City', 'sql': 'SELECT city FROM city_channel GROUP BY city ORDER BY count(*) DESC LIMIT 1'}]]
SELECT avg(ERP_kW) FROM radio' , '541.375' ] , [ 'Q6' ,  'SELECT count(*) FROM city_channel' , '2' ] , [ 'Q7' ,  'SELECT count(*) FROM radio' , '8' ] , [ 'Q8' ,  'SELECT count(*) FROM tv_show' , '10' ] , [ 'Q9' ,  'SELECT count(*) FROM city_channel_radio' , '16' ] , [ 'Q10' ,  'SELECT count(*) FROM city_channel_tv_show' , '20' ] , [ 'Q11' ,  'SELECT count(*) FROM city_channel WHERE affiliation  =  'ABC Radio'' , '1' ] , [ 'Q12' ,  'SELECT count(*) FROM city_channel
SELECT affiliation ,  count(*) FROM city_channel GROUP BY affiliation'     , 'SELECT affiliation ,  count(*) FROM city_channel GROUP BY affiliation'     , 'SELECT affiliation ,  count(*) FROM city_channel GROUP BY affiliation'     , 'SELECT affiliation ,  count(*) FROM city_channel GROUP BY affiliation'     , 'SELECT affiliation ,  count(*) FROM city_channel GROUP BY affiliation'     , 'SELECT affiliation ,  count(*) FROM city_channel GROUP BY affiliation'     , 'SELECT affiliation ,  count(*) FROM city_channel GROUP BY affiliation'     , 'SELECT affiliation ,  count(*) FROM city_channel GROUP BY affiliation'     , 'SELECT affiliation ,  count(*) FROM city_channel GROUP BY affiliation'     , 'SELECT affiliation ,  count(*) FROM city_channel
SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'     , 'SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'     , 'SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'     , 'SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'     , 'SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'     , 'SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'     , 'SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'     , 'SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'     , '
SELECT affiliation FROM city_channel GROUP BY affiliation HAVING count(*)  >  3]'     ,'SELECT affiliation FROM city_channel GROUP BY affiliation HAVING count(*)  >  3'     ,'SELECT affiliation FROM city_channel GROUP BY affiliation HAVING count(*)  >  3'     ,'SELECT affiliation FROM city_channel GROUP BY affiliation HAVING count(*)  >  3'     ,'SELECT affiliation FROM city_channel GROUP BY affiliation HAVING count(*)  >  3'     ,'SELECT affiliation FROM city_channel GROUP BY affiliation HAVING count(*)  >  3'     ,'SELECT affiliation FROM city_channel GROUP BY affiliation HAVING count(*)  >  3'     ,'SELECT affiliation FROM city_channel GROUP BY affiliation HAVING count(*)
SELECT city ,  station_name FROM city_channel ORDER BY station_name ASC'         ,   'SELECT city ,  station_name FROM city_channel ORDER BY station_name ASC'         ,   ['SELECT city ,  station_name FROM city_channel ORDER BY station_name ASC']         ,   ['SELECT city ,  station_name FROM city_channel ORDER BY station_name ASC']     ,   ['SELECT city ,  station_name FROM city_channel ORDER BY station_name ASC']          ,   ['SELECT city ,  station_name FROM city_channel ORDER BY station_name ASC']          ,   ['SELECT city ,  station_name FROM city_channel ORDER BY station_name ASC']          ,   ['SELECT city ,  station_name FROM city_channel ORDER BY station_name ASC']          ,   ['SELECT city ,  station_name FROM
SELECT T1.transmitter ,  T2.city FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID'     , 'SELECT T2.city ,  T1.transmitter FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID'     , 'SELECT T2.city FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.city HAVING count(*)  >=  3'     , 'SELECT T2.city FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.city ORDER BY count(*) DESC
SELECT t1.transmitter ,  t2.station_name FROM radio AS t1 JOIN city_channel_radio AS t2 ON t1.radio_id  =  t2.radio_id ORDER BY t1.ERP_kW DESC'         , 'SELECT t1.transmitter ,  t2.station_name FROM radio AS t1 JOIN city_channel_radio AS t2 ON t1.radio_id  =  t2.radio_id ORDER BY t1.ERP_kW DESC'     , 'SELECT t1.transmitter ,  t2.station_name FROM radio AS t1 JOIN city_channel_radio AS t2 ON t1.radio_id  =  t2.radio_id ORDER BY t1.ERP_kW DESC'     , 'SELECT t1.transmitter ,  t2.station_name FROM radio
SELECT T1.Transmitter ,  count(*) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T1.Transmitter'     , 'SELECT T1.Transmitter ,  count(*) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T1.Transmitter'     , ['SELECT T1.Transmitter ,  count(*) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T1.Transmitter']     , ['SELECT T1.Transmitter ,  count(*) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2
SELECT DISTINCT transmitter FROM radio WHERE radio_id NOT IN (SELECT radio_id FROM city_channel_radio) <MID>_ID FROM city_channel_radio)')     , [])
SELECT Model FROM vehicle WHERE Top_Speed  =  ( SELECT max(Top_Speed) FROM vehicle WHERE Power  >  6000 )'         , 'TOP_SPEED': 324, 'POWER': 11800}],
SELECT Model FROM vehicle WHERE Power  >  6000 ORDER BY Top_Speed DESC LIMIT 1'         ,'SELECT Model FROM vehicle WHERE Power  >  6000 ORDER BY Top_Speed DESC LIMIT 1'     ,'SELECT Builder FROM vehicle WHERE Power  >  6000 ORDER BY Top_Speed DESC LIMIT 1'         ,'SELECT Builder FROM vehicle WHERE Power  >  6000 ORDER BY Top_Speed DESC LIMIT 1'     ,'SELECT Total_Production FROM vehicle WHERE Power  >  6000 ORDER BY Top_Speed DESC LIMIT 1'         ,'SELECT Total_Production FROM vehicle WHERE Power  >  6000 ORDER BY Top_Speed DESC LIMIT 1'     ,'SELECT COUNT(*) FROM vehicle WHERE Power  >  6000'         ,'COUNT(*) FROM vehicle WHERE Power  >  60
SELECT Name FROM driver WHERE Citizenship  =  'United States' <MID>     , Total_Production FROM vehicle ORDER BY Top_Speed DESC LIMIT 3; SELECT Model FROM vehicle WHERE Builder  =  'Ferrari'; SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID GROUP BY T2.driver_id HAVING count(*)  >  250; SELECT DISTINCT Builder FROM vehicle; SELECT COUNT (*) FROM vehicle_driver; SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID GROUP BY T2.driver_id HAVING count(*)  >  250; SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T
SELECT Name FROM driver WHERE Citizenship  =  'United States' <MID>     , Total_Production FROM vehicle ORDER BY Top_Speed DESC LIMIT 3;'     , 'SELECT Builder FROM vehicle ORDER BY Top_Speed DESC LIMIT 1;'     , 'SELECT COUNT(*) FROM vehicle;'     , 'SELECT Model FROM vehicle GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1;'     , 'SELECT COUNT(*) FROM vehicle WHERE Builder  =  'Ferrari';'     , 'SELECT Model FROM vehicle WHERE Builder  =  'Ferrari' GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1;'     , 'SELECT TOP_SPEED FROM vehicle ORDER BY top_speed DESC LIMIT 5;'     , 'SELECT Model FROM vehicle ORDER BY top_speed DESC LIMIT 5;']
SELECT T1.driver_id ,  COUNT(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.driver_id ORDER BY COUNT(*) DESC LIMIT 1'         , 'SELECT T1.driver_id ,  COUNT(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.driver_id ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT T1.driver_id ,  COUNT(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.driver_id ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT T1.driver_id ,
SELECT T1.driver_id ,  COUNT(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.driver_id ,  COUNT(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT count(*) FROM vehicle'     , 'SELECT max(T1.count()) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.driver_id'     , 'SELECT T1.driver_id ,
SELECT max(Power) ,  avg(Power) FROM vehicle WHERE Builder  =  'Zhuzhou' <MID>.csv' , delimiter=',')     FROM = np.array([list(map(int, line.split(','))) for line in csv.reader(f)])     GROUP BY = FROM[: , 0]     ORDER BY = FROM[: , 1]     LIMIT = 3
SELECT max(Power) ,  avg(Power) FROM vehicle WHERE Builder  =  'Zhuzhou' <MID>.com/problems/maximum-and-minimum-values-in-a-table/description/
SELECT T1.vehicle_id FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) ASC LIMIT 1'         ,'3' : 'SELECT T1.vehicle_id FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1'     ,'4' : 'SELECT T1.vehicle_id FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1'     ,'
SELECT T1.vehicle_id FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) ASC LIMIT 1'         ,'answer': 1}      ,   {   'question': 'Return the name of the driver who has won the most races.[SQL] SELECT T1.name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1' ,   'answer': 'Juan Pablo Montoya'}      ,   {   'question': 'Return the name of the builder whose vehicles have been driven the most times.[SQL] SELECT T3.Builder FROM vehicle AS T1 JOIN vehicle_driver AS T
SELECT Top_Speed ,  Power FROM vehicle WHERE Builder  =  1996 LIMIT 1'         , '250 ,  235'     , 'SELECT Top_Speed ,  Power FROM vehicle WHERE Builder  =  1996 LIMIT 1'     , ['SELECT Top_Speed ,  Power FROM vehicle WHERE Builder  =  1996 LIMIT 1']     , ['SELECT Top_Speed ,  Power FROM vehicle WHERE Builder  =  1996 LIMIT 1']
SELECT Top_Speed ,  Power FROM vehicle WHERE Build_Year  =  1996 LIMIT 1'         , '250' ,  '180' ,  '145' ,  '175' ,  '160' ,  '155' ,  '194' ,  '185' ,  '180' ,  '175' ,  '165' ,  '155' ,  '145' ,  '135' ,  '125' ,  '115' ,  '105' ,  '95' ,  '85' ,  '75' ,  '65' ,  '55' ,  '45' ,  '35' ,  '25' ,  '15' ,
SELECT Build_Year ,  Model ,  Builder FROM vehicle WHERE Power  =  280 UNION SELECT Build_Year ,  Model ,  Builder FROM vehicle WHERE Power  =  350 UNION SELECT Build_Year ,  Model ,  Builder FROM vehicle WHERE Power  =  420 UNION SELECT Build_Year ,  Model ,  Builder FROM vehicle WHERE Power  =  495 UNION SELECT Build_Year ,  Model ,  Builder FROM vehicle WHERE Power  =  575 UNION SELECT Build_Year ,  Model ,  Builder FROM vehicle WHERE Power  =  660 UNION SELECT Build_Year ,  Model ,  Builder FROM vehicle WHERE Power  =  750 UNION SELECT Build_Year ,  Model ,  Builder FROM vehicle WHERE Power  =  840 UNION SELECT Build_Year ,  Model ,  Builder FROM vehicle WHERE Power  =  930 UNION SELECT Build
SELECT Build_Year ,  Model ,  Builder FROM vehicle ORDER BY Build_Year DESC LIMIT 10'         , '2004' , 'Ferrari F355' , 'Italy' ]      , [ 'SELECT name FROM driver WHERE citizenship  =  'USA' AND racing_series = 'IndyCar Series' LIMIT 3' , 'Dario Franchitti' , 'James Jakes' , 'Robert Wickens' ]      , [ 'SELECT TOP 3 name FROM driver WHERE citizenship  =  'USA' AND racing_series = 'IndyCar Series' ORDER BY name' , 'Dario Franchitti' , 'James Jakes' , 'Robert Wickens' ]      , [ 'SELECT name FROM driver WHERE citizenship  =  'USA' AND racing_series = 'IndyCar Series' LIMIT 3'
SELECT count(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012'         , '2'     ,  ['SELECT count(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012']     ,  ['SELECT count(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012']          ,  ['SELECT count(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =
SELECT count(DISTINCT T1.name) FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id = T3.vehicle_id WHERE T3.build_year = 2012 <MID>     , T3.Total_Production FROM Driver AS T1 JOIN Vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN Vehicle AS T3 ON T2.vehicle_id = T3.vehicle_id WHERE T3.build_year = 2012 GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1;'
SELECT count(*) FROM driver WHERE Racing_Series = 'NASCAR' <MID>     , Total_Production FROM vehicle ORDER BY Top_Speed DESC LIMIT 3; SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID GROUP BY T2.Vehicle_ID ORDER BY COUNT(*) DESC LIMIT 1; SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID GROUP BY T2.Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1; SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID GROUP BY T2.Vehicle_ID ORDER BY COUNT(*) DESC LIMIT
SELECT count(*) FROM driver WHERE Racing_Series = 'NASCAR' <MID>     , Total_Production FROM vehicle ORDER BY Top_Speed DESC LIMIT 10; SELECT model FROM vehicle ORDER BY Builder ASC LIMIT 10; SELECT count(*) FROM vehicle_driver; SELECT count(DISTINCT vehicle_id) FROM vehicle_driver; SELECT count(DISTINCT driver_id) FROM vehicle_driver; SELECT count(DISTINCT T1.vehicle_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_ID = T2.Vehicle_ID WHERE T2.Builder = 'Fiat'; SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.driver_ID = T2.Driver_ID WHERE T2.Racing_Series = 'FIA'; SELECT count(*) FROM driver
SELECT avg(top_speed) FROM vehicle'         , '250.666666666667'     , 'SELECT avg(top_speed) FROM vehicle'     , ['SELECT avg(top_speed) FROM vehicle']     , ['SELECT avg(top_speed) FROM vehicle']     , ['SELECT avg(top_speed) FROM vehicle']     , ['SELECT avg(top_speed) FROM vehicle']     , ['SELECT avg(top_speed) FROM vehicle']     , ['SELECT avg(top_speed) FROM vehicle']     , ['SELECT avg(top_speed) FROM vehicle']     , ['SELECT avg(top_speed) FROM vehicle']     , ['SELECT avg(top_speed) FROM vehicle']     , ['SELECT avg(top_speed) FROM vehicle']     ,
SELECT avg(top_speed) FROM vehicle'         , '250'     ,  'SELECT avg(top_speed) FROM vehicle'     , 'SELECT avg(top_speed) FROM vehicle'     , 'SELECT avg(top_speed) FROM vehicle'     , 'SELECT avg(top_speed) FROM vehicle'     , 'SELECT avg(top_speed) FROM vehicle'     , 'SELECT avg(top_speed) FROM vehicle'     , 'SELECT avg(top_speed) FROM vehicle'     , 'SELECT avg(top_speed) FROM vehicle'     , 'SELECT avg(top_speed) FROM vehicle'     , 'SELECT avg(top_speed) FROM vehicle'     , 'SELECT avg(top_speed) FROM vehicle'     , 'SELECT avg(top_speed) FROM vehicle'
SELECT DISTINCT T1.name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000'         , 'SELECT DISTINCT T1.name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000'     , ['SELECT DISTINCT T1.name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2
SELECT T1.name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000'         , 'SELECT T1.name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000'     , ['SELECT T1.name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =
SELECT Model FROM vehicle WHERE Total_Production  >  100 OR Top_Speed  >  150'         ,'240px'}     ,{'Q3','Which drivers are from Brazil?[SQL] SELECT Name FROM driver WHERE Citizenship  =  'Brazil'', '240px'}     ,{'Q4','Which drivers have more than one vehicle?[SQL] SELECT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Name HAVING COUNT(*)  >  1', '240px'}     ,{'Q5','Which drivers have at least two vehicles?[SQL] SELECT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID  =  T2.Driver
SELECT Model FROM vehicle WHERE Total_Production  >  100 OR Top_Speed  >  150 <MID>.com/en/latest/tutorial/index.html).
SELECT Model ,  Build_Year FROM vehicle WHERE Model LIKE '%DJ%'  ORDER BY Build_Year ASC NULLS LAST <MID>_year DESC LIMIT 10'     ,'SELECT TOP 10 Model ,  Build_Year FROM vehicle WHERE Model LIKE '%DJ%' ORDER BY Build_Year ASC NULLS LAST'     ,'SELECT TOP 10 Model ,  Build_Year FROM vehicle WHERE Builder  =  'Ducati' ORDER BY Build_Year ASC NULLS LAST'     ,'SELECT TOP 10 Model ,  Build_Year FROM vehicle WHERE Power  >  125 ORDER BY Build_Year ASC NULLS LAST'     ,'SELECT TOP 10 Model ,  Build_Year FROM vehicle WHERE Top_Speed  >  200 ORDER BY Build_Year ASC NULLS LAST'     ,'SELECT TOP 10 Model ,
SELECT Model ,  Build_Year FROM vehicle WHERE Model LIKE '%DJ%' AND Power  >  250 <MID>.com/r/dailyprogrammer/comments/3679qj/20150413_challenge_218_easy_database_schema/)     FROM DATABASE SCHEMA INFORMATION RETURN THE MODEL AND BUILD YEAR OF CARS THAT INCLUDE 'DJ' IN THEIR MODEL NAMES. [SQL] SELECT Model ,  Build_Year FROM vehicle WHERE Model LIKE '%DJ%' AND Power  >  250. [Python] print(car_models) [Java] for (String car_model : car_models) { System.out.println(car_model); } [C++] std::cout << car_models; [C] printf(car_models); [JavaScript]
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver) <MID>_id = T1.vehicle_id GROUP BY T1.vehicle_id HAVING count(*)  =  (SELECT count(*) FROM driver) ORDER BY sum(T2.place) / count(*) DESC LIMIT 3'     ,'SELECT DISTINCT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY sum(T2.place) / count(*) DESC LIMIT 3'     ,'SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver) <MID>.csv'     , 'vehicle_driver.csv'     , 'driver.csv'     , 'TASK_1.sql'     , 'TASK_2.sql'     , 'TASK_3.sql'     , 'TASK_4.sql'     , 'TASK_5.sql'     , 'TASK_6.sql'     , 'TASK_7.sql'     , 'TASK_8.sql'     , 'TASK_9.sql'     , 'TASK_10.sql'     , 'TASK_11.sql'     , 'TASK_12.sql'     , 'T
SELECT T2.vehicle_id ,  T3.model FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id WHERE T3.Citizenship  =  'Ziyang' GROUP BY T2.vehicle_id HAVING count(*)  >=  2 UNION SELECT model FROM vehicle WHERE Builder  =  'Ziyang' <MID>     , Total_Production text     , PRIMARY KEY (Vehicle_ID)     , FOREIGN KEY (Vehicle_ID) REFERENCES vehicle_driver(Vehicle_ID)     , FOREIGN KEY (Driver_ID) REFERENCES driver(Driver_ID)     , CHECK (Top_
SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id HAVING count(*)  =  2 UNION SELECT vehicle_id ,  model FROM vehicle WHERE Builder  =  'Ziyang' <MID>     , Total_Production FROM vehicle ORDER BY Power DESC LIMIT 3;'     , 'SELECT DISTINCT Builder FROM vehicle;'     , 'SELECT COUNT (*) FROM vehicle_driver;'     , 'SELECT COUNT (DISTINCT driver_id) FROM vehicle_driver;' ]
SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id HAVING count(*)  >  2 UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.driver_id  =  354022863 JOIN driver AS T3 ON T2.driver_id  =  T3.Driver_ID WHERE T3.Name  =  'Jeff Gordon' <MID>     FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle
SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id HAVING count(*)  >  2 UNION SELECT T1.vehicle_id ,  T1.model FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id WHERE T1.Name  =  'Jeff Gordon' <MID>     , Total_Production text PRIMARY KEY     , Builder         text     , Top_Speed      int     , Power          int     , Model          text     , Build_Year    text     , ID             int     , Url           text     , Picture       text     , Year          int     , Make          text
SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle) <MID> SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle) UNION SELECT count(*) FROM driver WHERE name  =  (SELECT max(name) FROM driver) ORDER BY count(*) DESC LIMIT 1'     ,'SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle) INTERSECT SELECT count(*) FROM driver WHERE name  =  (SELECT max(name) FROM driver) ORDER BY count(*) DESC LIMIT 1'     ,'SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle) EXCEPT SELECT count(*) FROM driver WHERE name  =  (SELECT max(name) FROM driver) ORDER BY count(*) DESC LIMIT 1'     ,'SELECT count(*)
SELECT count(*) FROM vehicle WHERE Top_Speed  =  (SELECT max(Top_Speed) FROM vehicle) <MID>.com/problems/count-the-number-of-vehicles-that-have-a-top-speed-equal-to-the-maximum-across-all-vehicles/description/
SELECT Name FROM driver ORDER BY Name ASC'         ,'SELECT Name FROM driver ORDER BY Name ASC'         ,'SELECT Name FROM driver ORDER BY Name DESC'     ,'SELECT Name FROM driver ORDER BY Name DESC']     ,['SELECT T3.Name FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID JOIN driver AS T3 ON T1.Driver_ID  =  T3.Driver_ID'      ,'SELECT T3.Name FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID JOIN driver AS T3 ON T1.Driver_ID  =  T3.Driver_ID ORDER BY T3.Name ASC'      ,'SELECT T3.Name FROM vehicle_driver AS T1 JOIN vehicle
SELECT Name FROM driver ORDER BY Name ASC'         ,'SELECT Name FROM driver ORDER BY Name ASC'         ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER BY Name ASC'     ,'SELECT Name FROM driver ORDER
SELECT Racing_Series ,  COUNT(*) FROM driver GROUP BY Racing_Series'         , [{'Racing_Series': 'Formula 1', 'COUNT(*)': 6}, {'Racing_Series': 'IndyCar Series', 'COUNT(*)': 4}])     , ('SELECT name FROM driver WHERE citizenship  =  'USA' AND name LIKE '%Michael%''', ['Michael Schumacher'])     , ('SELECT DISTINCT Builder FROM vehicle', ['Lamborghini', 'Pagani', 'Aston Martin'])     , ('SELECT TOP_SPEED FROM vehicle ORDER BY TOP_SPEED DESC LIMIT 1', [327])     , ('SELECT Model FROM vehicle WHERE Power  =  285', ['Shelby GT500'])     , ('SELECT Model FROM vehicle WHERE Builder  =  'Lamborg
SELECT Racing_Series ,  COUNT(*) FROM driver GROUP BY Racing_Series'         , 'SELECT Racing_Series ,  COUNT(*) FROM driver GROUP BY Racing_Series'     , ['SELECT Racing_Series ,  COUNT(*) FROM driver GROUP BY Racing_Series']]     , [['SELECT count(*) FROM driver WHERE Racing_Series = 1']         , 'SELECT count(*) FROM driver WHERE Racing_Series = 1'         , ['SELECT count(*) FROM driver WHERE Racing_Series = 1']]     , [['SELECT count(*) FROM driver WHERE Racing_Series = 2']         , 'SELECT count(*) FROM driver WHERE Racing_Series = 2'         , ['SELECT count(*) FROM driver WHERE Racing_Series = 2']]     , [['SELECT count(*) FROM driver WHERE Racing_Series = 3']         , 'SELECT count(*) FROM driver WHERE Racing_Series = 3
SELECT t2.Name ,  t2.Citizenship FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID JOIN vehicle AS T3 ON T1.Vehicle_ID  =  T3.Vehicle_ID WHERE T3.Model  =  'DJ1' <MID>     , Total_Production text PRIMARY KEY     , Builder text     , Top_Speed int     , Power int     , Model text     , Build_Year text     , Speed_Index int     , Accel_Index int     , Construct_Quality int     , Price int     , Fuel_Economy int     , MPG int     , Vehicle_Rating int     , Sponsors text     , Sponsorship_Amount int     , Rating_
SELECT T2.Name ,  T2.Citizenship FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Vehicle_ID  =  (SELECT Vehicle_ID FROM vehicle WHERE Model  =  'DJ1') <MID>     , Total_Production text PRIMARY KEY     , Builder         text     , Top_Speed      int     , Power          int     , Model          text     , Build_Year     text     , STATISTICS   INCREMENTAL SAMPLE 50 ROWS     , PERSISTENT   YES     , FULLY_QUALIFIED_NAME  DB.vehicle     , DISTRIBUTION  HASH(Vehicle_ID)     , PARTITION  BY LIST
SELECT count(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver)'         , '2'     , 3          , 4     , 'SELECT count(*) FROM driver WHERE name != (SELECT T1.name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.name HAVING count(*)  =  0)')
SELECT count(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver)'         , 'answer': 1}     , {'question': 'SELECT count(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver)'}]     , {'question': 'SELECT count(*) FROM vehicle_driver' , 'answer': 285}     , {'question': 'SELECT count(DISTINCT vehicle_id) FROM vehicle_driver' , 'answer': 143}     , {'question': 'SELECT count(DISTINCT driver_id) FROM vehicle_driver' , 'answer': 142}     , {'question': 'SELECT count(*) FROM vehicle' , 'answer': 6}     , {'question': 'SELECT count(*) FROM driver' , 'answer': 5}     , {'question': 'SELECT count(*) FROM vehicle_
SELECT count(*) FROM EXAMS' , '3' , 'SELECT count(*) FROM EXAMS' , ['SELECT count(*) FROM EXAMS'] , ['SELECT count(*) FROM EXAMS'] , [] , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ,
SELECT count(*) FROM EXAMS'         , 'SELECT count(*) FROM EXAMS'         , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'     , 'SELECT count(*) FROM EXAMS'
SELECT DISTINCT subjecT_code FROM exams ORDER BY subjecT_code ASC'         , 'SELECT DISTINCT subjecT_code FROM exams ORDER BY subjecT_code ASC'         , ['SELECT DISTINCT subjecT_code FROM exams ORDER BY subjecT_code ASC']     , ['SELECT count(*) FROM students']     , ['SELECT count(*) FROM questions']     , ['SELECT count(*) FROM exams']     , ['SELECT count(*) FROM questions_in_exams']     , ['SELECT count(*) FROM valid_answers']     , ['SELECT count(*) FROM student_answers']]
SELECT DISTINCT Subject_Code FROM EXAMS ORDER BY Subject_Code ASC'         , 'SELECT DISTINCT Subject_Code FROM EXAMS ORDER BY Subject_Code ASC'         , 'SELECT count(*) FROM students'         , 'SELECT count(*) FROM questions'         , 'SELECT count(*) FROM exams'     , 'SELECT count(*) FROM student_answers'     , 'SELECT count(*) FROM valid_answers'     , 'SELECT count(*) FROM questions_in_exams'     , 'SELECT count(*) FROM student_assessments'     , 'SELECT count(*) FROM student_assessments WHERE Satisfactory_YN  =  'Y'']     FROM DB_FILE SELECT count(*) FROM students'     WHERE first_name LIKE '%a%' AND last_name LIKE '%b%' AND gender_mfu LIKE 'M' <MID>
SELECT exam_name ,  exam_date FROM EXAMS WHERE subject_code != 'Database' <MID>_Teacher (Teacher_ID INTEGER NOT NULL ,  Subject_Code CHAR(15) NOT NULL ,  Exam_Name VARCHAR(255) ,  Exam_Date DATE ,  Exam_Marks INTEGER)')
SELECT exam_date ,  exam_name FROM EXAMS WHERE subject_code != 'Database' <MID>_Teacher (Teacher_ID , Subject_Code){SQL} SELECT teacher_id ,  subject_code FROM Teacher AS T1 JOIN Subject AS T2 ON T1.Subject_Code  =  T2.Subject_Code WHERE T2.Subject_Code != 'Database'{SQL} SELECT T1.exam_date ,  T1.exam_name FROM Exams AS T1 JOIN Questions_in_Exams AS T2 ON T1.exam_id  =  T2.exam_id JOIN Questions AS T3 ON T2.question_id  =  T3.question_id WHERE T3.type_of_question_code != 'DB'{SQL} SELECT T1.exam_date ,  T1.exam_name
SELECT exam_date FROM EXAMS WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC'         , '2018-03-24 17:45:22' : ['SELECT exam_date FROM EXAMS WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC']         , '2018-03-24 17:45:22' : ['SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS']     , '2018-03-24 17:45:22' : ['SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS']     , '2018-03-24 17:45:22' : ['SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS']
SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC'     , '2016-03-28 17:49:28' , 1 , 1 , 'SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC' , 1 , 1 , '2016-03-28 17:49:28' , 'SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC' , 1 , 1 , '2016-03-28 17:49:28' , 'SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC' , 1 , 1 , '2016-03-28
SELECT TYPE_OF_QUESTION_CODE ,  count(*) FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE ORDER BY count(*) DESC LIMIT 3'         , 'SELECT TYPE_OF_QUESTION_CODE ,  count(*) FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE ORDER BY count(*) DESC LIMIT 3'         , ['Multiple Choice', 'True / False', 'Fill in the blank']]     , ['SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE ORDER BY count(*) DESC LIMIT 3'         , 'SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE ORDER BY count(*) DESC LIMIT 3'         , ['Multiple Choice', 'True / False', 'Fill in the blank
SELECT TYPE_OF_QUESTION_CODE ,  COUNT(*) FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE ORDER BY COUNT(*) DESC LIMIT 1'         , 'SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT max(T1.exam_date) FROM EXAMS AS T1 JOIN Questions_in_Exams AS T2 ON T1.exam_id  =  T2.exam_id'     , 'SELECT count(*) FROM students'
SELECT student_answer_text FROM student_answers WHERE Comments  =  'Normal' <MID>_Teacher (Teacher_ID , Subject_Code) ON DELETE CASCADE ON UPDATE CASCADE, valid_answers AS T3 ON T3.Question_ID  =  T1.Question_ID WHERE T1.student_answer_text  =  'Normal' AND T2.exam_name  =  'Math' AND T3.valid_answer_text  =  'Normal' ORDER BY T1.date_of_answer DESC LIMIT 1'     FROM STUDENT_ANSWERS AS T1 JOIN EXAMS AS T2 ON T1.exam_id  =  T2.exam_id WHERE T1.student_answer_text  =  'Normal' AND T2.exam_name  =
SELECT T1.student_answer_text FROM student_answers AS T1 JOIN Student_Assessments AS T2 ON T1.student_answer_id  =  T2.student_answer_id WHERE T2.comments  =  'Normal' UNION SELECT student_answer_text FROM student_answers EXCEPT SELECT T1.student_answer_text FROM student_answers AS T1 JOIN Student_Assessments AS T2 ON T1.student_answer_id  =  T2.student_answer_id WHERE T2.comments != 'Normal' <MID>T1.student_answer_text FROM student_answers AS T1 JOIN Student_Assessments AS T2 ON T1.student_answer_id  =  T2.student_answer_id WHERE T2.comments  =  'Normal' UNION SELECT student_answer_text FROM student_answers EXCEPT SELECT
SELECT count(DISTINCT Comments) FROM Student_Answers WHERE Comments != '' <MID>_Teacher (Teacher_ID , Subject_Code) ON DELETE CASCADE ON UPDATE CASCADE, Students AS T3 ON T2.Student_ID  =  T3.Student_ID WHERE T2.Exam_ID  =  '7' AND T2.Question_ID  =  '23' GROUP BY T3.Student_ID ORDER BY sum(T2.marks) DESC LIMIT 3'
SELECT count(DISTINCT Date_of_Answer) FROM Student_Answers WHERE Comments != '' <MID>_Teacher (Teacher_ID INTEGER NOT NULL , Subject_Code CHAR(15) NOT NULL , Exam_Name VARCHAR(255) NOT NULL , Exam_Date DATE NOT NULL , PRIMARY KEY (Teacher_ID) )'     , 'CREATE TABLE Students (Student_ID INTEGER NOT NULL , First_Name VARCHAR(255) , Middle_Name VARCHAR(255) , Last_Name VARCHAR(255) , Gender_MFU CHAR(1) , Student_Address VARCHAR(255) , Email_Adress VARCHAR(255) , Cell_Mobile_Phone VARCHAR(255) , Home_Phone VARCHAR(255) , PRIMARY KEY (Student_ID) )'     ,
SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY count(*) DESC'         , 'SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY count(*) DESC'     , 'SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY count(*) DESC'     , 'SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY count(*) DESC'      ,  'SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY count(*) DESC'     , 'SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY count(*) DESC'     , 'SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY count(*) DESC'     , 'SELECT student_
SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY count(*) DESC LIMIT 3'         , 'answer': 'SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY count(*) DESC LIMIT 3'     , 'difficulty': 'Hard'     , 'category': 'Identification'     , 'type': 'Multiple Choice'     , 'choices': ['Choice 1', 'Choice 2', 'Choice 3', 'Choice 4']     , 'image': 'https://cdn.quizlet.com/sites/default/files/styles/thumbnail/public/images/869796_ch6_11_mc.png'     , 'level': 'Easy'     , 'hint': 'Hint 1'     , 'solution':
SELECT T1.first_name ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.Date_of_Answer ASC LIMIT 10'         , 'SELECT T1.first_name ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.Date_of_Answer DESC LIMIT 10'     , 'SELECT T1.first_name ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.student_id  =  T2.student_id WHERE T2.Date_of_Answer BETWEEN  '2
SELECT T1.first_name ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T2.Date_of_Answer ASC LIMIT 1'         , 'SELECT T1.first_name FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T2.Date_of_Answer ASC LIMIT 1'     , 'SELECT T1.first_name FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T2.Date_of_Answer DESC LIMIT 1'     , 'SELECT T1.first_name FROM Students AS T1 JOIN Student_Answers
SELECT T1.Email_Adress ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T2.Date_of_Answer DESC'         , 'SELECT T1.Email_Adress ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T2.Date_of_Answer DESC'     , 'SELECT T1.Email_Adress ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T2.Date_of_Answer DESC'     , 'SELECT T1.Email
SELECT T1.Email_Adress ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T2.Date_of_Answer DESC'         , 'email address, date of answer', ['email address', 'date of answer']]     , [r'''SELECT T1.Email_Adress ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T2.Date_of_Answer DESC LIMIT 10''', 'email address, date of answer', ['email address', 'date of answer']]     , [r'''SELECT T1.Email_Adress ,  T2.Date_of_Answer FROM Stud
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) ASC LIMIT 1'     , 'SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) ASC LIMIT 1'     , 'SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) ASC LIMIT 1'     , 'SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) ASC LIMIT 1'
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) ASC LIMIT 1'         , 'TENTATIVE' : False         , 'HINT' : ''         , 'SOLUTION' : 'TENTATIVE'         , 'SATISFACTORY_ANSWER' : 'TENTATIVE'         , 'EXAM_DATE' : '2016:03:15 13:30:00'         , 'SUBJECT_CODE' : 'MATH'         , 'TYPE_OF_QUESTION_CODE' : 'multiplication/division'         , 'FIRST_NAME' : 'Jane'         , 'EMAIL_ADDRESS' : 'null'         , 'HOME_PHONE' : 'null' = 'null'         , 'CELL
SELECT T1.first_name FROM students AS T1 JOIN student_answers AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2'         , 'SELECT T1.first_name FROM students AS T1 JOIN student_answers AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2'     , 'SELECT T1.first_name FROM students AS T1 JOIN student_answers AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2'     , 'SELECT T1.first_name FROM students AS T1 JOIN student_answers AS T2 ON T1.student_
SELECT T1.first_name FROM students AS T1 JOIN student_answers AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2'         , 'SELECT T1.first_name FROM students AS T1 JOIN student_answers AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2'         , ['T1.first_name']     , ['Students']     , ['Student_Answer_Text']     , ['Student_Answer_ID']     , ['Exam_ID']     , ['Question_ID']     , ['SATISFACTORY_YN']     , ['Comments']     , ['Date_of_Answer']
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY count(*) DESC LIMIT 1'         , 'SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Valid_Answer_Text FROM Valid
SELECT T1.valid_answer_text FROM questions AS T1 JOIN valid_answers AS T2 ON T1.question_id  =  T2.question_id GROUP BY T2.valid_answer_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.valid_answer_text FROM questions AS T1 JOIN valid_answers AS T2 ON T1.question_id  =  T2.question_id GROUP BY T2.valid_answer_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.valid_answer_text FROM questions AS T1 JOIN valid_answers AS T2 ON T1.question_id  =  T2.question_id GROUP BY T2.valid_answer_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.valid_answer_text FROM questions AS T1 JOIN valid_
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M' <MID>_Teacher (Teacher_ID) ON DELETE CASCADE ON UPDATE CASCADE,
SELECT Last_Name FROM Students WHERE Gender_MFU  !=  'M' <MID>T13:49:58.767Z', 'Comment1', 'Y') , (2, 1, 'Student2', '2019-04-05 13:49:58.767Z', 'Comment2', 'N') , (3, 2, 'Student3', '2019-04-05 13:49:58.767Z', 'Comment3', 'Y') , (4, 2, 'Student4', '2019-04-05 13:49:58.767Z', 'Comment4', 'N') ] ) AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student
SELECT Gender_MFU ,  count(*) FROM Students GROUP BY Gender_MFU'         , 'SELECT Gender_MFU ,  count(*) FROM Students GROUP BY Gender_MFU'     , 'SELECT T1.Gender_MFU ,  count(*) FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID WHERE T2.Date_of_Answer  >  '2017-01-15' GROUP BY T1.Gender_MFU'         , 'SELECT T1.Gender_MFU ,  count(*) FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID WHERE T2.Date_of_Answer  >  '201
SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU'         , 'SELECT TYPE_of_Question_Code ,  count(*) FROM Questions GROUP BY TYPE_of_Question_Code'     , 'SELECT count(*) FROM students WHERE gender_mfu  =  'F'']     , answers: ['3', '2', '1']     , selected: false     , explanation: 'The first query returns the number of male and female students. The second query returns the number of multi-choice questions and the number of true/false questions.'     , explanation_html: '<p>The first query returns the number of male and female students. The second query returns the number of multi-choice questions and the number of true/false questions.</p>'     , subtask: false     , isCompleted: true     , completedDate: 'Mon Aug
SELECT Last_Name FROM Students WHERE Gender  =  'F' OR Gender  =  'M' ORDER BY Last_Name ASC, First_Name ASC, Student_ID DESC LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT Last_Name FROM Students WHERE Gender_MFU  =  'F' OR Gender_MFU  =  'M' <MID>T13:49:58.767Z'     , update_date: null     , version: 0 } , { id: 2   , create_date: '2018-03-13T13:49:58.767Z'   , update_date: null   , version: 0 } , { id: 3   , create_date: '2018-03-13T13:49:58.767Z'   , update_date: null   , version: 0 } , { id: 4   , create_date: '2018-03-
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers) <MID>_T1.question_id = T3.question_id AND T1.exam_id  =  T3.exam_id GROUP BY T1.exam_id HAVING count(*)  >  1'     FROM EXAMS AS T1 JOIN Questions_in_exams AS T2 ON T1.exam_id  =  T2.exam_id JOIN QUESTIONS AS T3 ON T2.question_id  =  T3.question_id WHERE T1.exam_name LIKE '%Math%' GROUP BY T1.exam_id HAVING count(*)  >  1'     ORDER BY T1.exam_date DESC'     LIMIT 1'     ;
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers) <MID>_T1.Question_ID = T3.Question_ID AND T1.Exam_ID  =  T3.Exam_ID GROUP BY T1.Student_ID HAVING count(*)  >  1 UNION SELECT T1.Student_ID ,  T2.first_name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID JOIN Exams AS T3 ON T1.Exam_ID  =  T3.Exam_ID GROUP BY T1.Student_ID HAVING count(*)  >  1 ORDER BY first_name ASC'
SELECT T1.student_answer_text FROM student_answers AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.Cell_Mobile_Phone  =  '0936474310' AND T1.Comments  =  'Normal' INTERSECT SELECT T1.student_answer_text FROM student_answers AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.Cell_Mobile_Phone  =  '0936474310' AND T1.Comments  =  'Absent' <MID>_T1.question_id = QUESTIONS_T1.question_id JOIN EXAMS AS T2 ON T1.exam_id = T2.exam_id WHERE T
SELECT T1.student_answer_text FROM student_answers AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.Cell_Mobile_Phone  =  'Normal' INTERSECT SELECT T1.student_answer_text FROM student_answers AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.Cell_Mobile_Phone  =  'Absent' <MID>T1.student_id  =  T2.student_id WHERE T2.Cell_Mobile_Phone  =  'Normal' INTERSECT SELECT T1.student_answer_text FROM student_answers AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.Cell_Mobile_Phone  =  '
SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING COUNT(*)  >=  3'         , 'SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING COUNT(*)  >=  3'     , 'SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING COUNT(*)  >=  3'         , 'SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING COUNT(*)  >=  3'     , 'SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING COUNT(*)  >=  3'     , '
SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING count(*)  >=  3'         , 'SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING count(*)  >=  3'     , ['SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING count(*)  >=  3']      , 1     , ['SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING count(*)  >=  3']     , ['SELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING count(*)  >=  3
SELECT * FROM Students'         , 'SELECT * FROM Students'         , 'SELECT DISTINCT gender_mfu FROM Students'         , 'SELECT count(*) FROM Students'     , 'SELECT first_name ,  last_name FROM Students GROUP BY first_name ,  last_name ORDER BY last_name'         , 'SELECT first_name ,  last_name FROM Students WHERE student_id = (SELECT max(student_id) FROM Students)'         , 'SELECT first_name ,  last_name FROM Students WHERE student_id = (SELECT min(student_id) FROM Students)'         , 'SELECT first_name ,  last_name FROM Students WHERE student_id = (SELECT avg(student_id) FROM Students)')     , ('SELECT * FROM Questions'         , 'SELECT * FROM Questions'         ,
SELECT * FROM Students'         , 'SELECT * FROM Students'         , ['SELECT * FROM Students']     , 3     , ['SELECT * FROM Students WHERE Cell_Mobile_Phone LIKE '%333%'']         , 'SELECT * FROM Students WHERE Cell_Mobile_Phone LIKE '%333%''         , ['SELECT * FROM Students WHERE Cell_Mobile_Phone LIKE '%333%'']      ,  4     , ['SELECT * FROM Students WHERE Cell_Mobile_Phone LIKE '%333%'']         , 'SELECT * FROM Students WHERE Cell_Mobile_Phone LIKE '%333%''         , ['SELECT * FROM Students WHERE Cell_Mobile_Phone LIKE '%333%'']      ,  5     , ['SELECT * FROM Students WHERE Cell_Mobile_Phone LIKE '%333%'']         , 'SELECT
SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' , 'SELECT count
SELECT count(*) FROM addresses'         , 'SELECT count(*) FROM addresses'         , 'SELECT count(*) FROM customers'         , 'SELECT count(*) FROM customer_orders'         , 'SELECT count(*) FROM order_items'     , ]     FROM = ['FROM addresses'         ;
SELECT address_id ,  address_details FROM addresses'         , 'SELECT order_id FROM customer_orders WHERE order_status_code  =  'Shipped''         , 'SELECT count(*) FROM order_items'     , 'SELECT sum(order_quantity) FROM order_items'     , 'SELECT count(*) FROM customers'     , 'SELECT count(*) FROM customer_orders WHERE order_status_code  =  'Shipped''     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM addresses'     , 'SELECT count(*) FROM customers WHERE payment_method_code  =  'Credit Card'']     FROM DB_Schema.sql     ORDER BY task_id::integer'     ;
SELECT address_id ,  address_details FROM addresses'         , 'SELECT order_status_code FROM customer_orders WHERE order_id = 101'     , 'SELECT DISTINCT product_type_code FROM products'         , 'SELECT count(*) FROM customers'         , 'SELECT sum(customer_phone) FROM customers'         , 'SELECT min(customer_phone) FROM customers'         , 'SELECT max(customer_phone) FROM customers'         , 'SELECT avg(customer_phone) FROM customers'         , 'SELECT count(*) FROM customer_orders'         , 'SELECT sum(order_quantity) FROM order_items'         , 'SELECT min(order_quantity) FROM order_items'         , 'SELECT max(order_quantity) FROM order_items'         , 'SELECT avg(order_quantity) FROM order_items'         , '
SELECT count(*) FROM products'         , 'SELECT count(*) FROM products'         , ['SELECT count(*) FROM products']         , 9     ,   'How many addresses are there? [SQL] SELECT count(*) FROM addresses'         , 'SELECT count(*) FROM addresses'         , ['SELECT count(*) FROM addresses']         , 3     ,   'How many customers are there? [SQL] SELECT count(*) FROM customers'         , 'SELECT count(*) FROM customers'         , ['SELECT count(*) FROM customers']         , 3     ,   'How many orders do we have? [SQL] SELECT count(*) FROM customer_orders'         , 'SELECT count(*) FROM customer_orders'         , ['SELECT count(*) FROM customer_orders']         , 4     ,   'How many order items are there? [SQL] SELECT count(*) FROM order_items'         , '
SELECT count(*) FROM products'         , 'SELECT count(*) FROM products'         , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , 'SELECT count(*) FROM products'     , '
SELECT product_id ,  product_type_code ,  product_name FROM products'         , 'SELECT product_id ,  product_type_code ,  product_name FROM products'     , 'SELECT product_id ,  product_type_code ,  product_name FROM products'     , 'SELECT product_id ,  product_type_code ,  product_name FROM products'     , 'SELECT product_id ,  product_type_code ,  product_name FROM products'     , 'SELECT product_id ,  product_type_code ,  product_name FROM products'     , 'SELECT product_id ,  product_type_code ,  product_name FROM products'     , 'SELECT product_id ,  product_type_code ,  product_name FROM products'     , 'SELECT product_id ,  product_type_code ,  product_name
SELECT product_id ,  product_type_code ,  product_name FROM products'         , 'SELECT product_id ,  product_type_code ,  product_name FROM products'         , ['product_id' ,  'product_type_code' ,  'product_name']     , ['1' ,  'DVD' ,  'Interstellar']     , ['2' ,  'Book' ,  'Sapiens: A Brief History of Humankind']     , ['3' ,  'Game' ,  'Minecraft']     , ['4' ,  'Game' ,  'Counter-Strike']     , ['5' ,  'Game' ,  'League of Legends']     , ['6' ,  'Game' ,  'Overwatch']]     , ['SELECT order_id FROM customer_orders']
SELECT product_price FROM products WHERE product_name  =  'Monitor' <MID>     , order_status_code VARCHAR(15) NOT NULL DEFAULT 'Pending'     , customer_id INTEGER NOT NULL     , order_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP     , FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)     , PRIMARY KEY (order_id)     , UNIQUE KEY order_number (order_number)     , CHECK (order_status_code  =  'Pending' OR order_status_code  =  'Delivered')     , CONSTRAINT order_number_chk CHECK (order_number  >  1000)     , CONSTRAINT customer_id_chk CHECK (customer_id  >  1000)
SELECT product_price FROM products WHERE product_name  =  'Monitor' <MID>     , address_details FROM addresses AS T1 JOIN customers AS T2 ON T1.address_id  =  T2.address_id WHERE customer_name  =  'Jensen Products' <EOT> <SUF>T1.address_id  =  T2.address_id WHERE customer_name  =  'Jensen Products' AND payment_method_code  =  'Cash' ORDER BY order_date DESC LIMIT 1; SELECT sum(product_price) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id JOIN customer_orders AS T3 ON T3.order_id  =  T1.order_id JOIN customers AS T4 ON T4.customer_id  =  T4.customer_id WHERE T4.customer
SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM products'         , 'SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM products'     , ['SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM products']]          ,   [   'SELECT count(*) FROM customers'         , 'SELECT count(*) FROM customer_orders'         , 'SELECT count(*) FROM order_items'         , 'SELECT count(*) FROM addresses'         , 'SELECT count(*) FROM products'         , 'SELECT count(*) FROM product_types'         , 'SELECT count(*) FROM payment_methods' ]          ,   [   'SELECT count(*) FROM customers'         , 'SELECT count(*) FROM customer_orders
SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM products'         , 'SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM products'     , ['min(product_price) ,  avg(product_price) ,  max(product_price)']]     , ['SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM products']     , ['SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM products']     , ['SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM products']     , ['SELECT min(product_price) ,  avg(product_price)
SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes' GROUP BY product_type_code HAVING sum(product_price) > (SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes') ORDER BY product_price DESC LIMIT 3' <MID>     , order_status_code VARCHAR(15) NOT NULL DEFAULT 'Pending'     , customer_id INTEGER NOT NULL     , order_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP     , FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)     , PRIMARY KEY (order_id)     , UNIQUE KEY order_number (order_number)     , CHECK (order_status_code  =  'Pending' OR order_status_code
SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes' <MID>     , order_status_code VARCHAR(15) NOT NULL     , customer_id INTEGER NOT NULL     , order_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP     , FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)     , PRIMARY KEY (order_id)     , UNIQUE KEY order_number (order_number)     , KEY custkey (customer_id)     , KEY timestamp (order_date)     , KEY status_code (order_status_code)     , CONSTRAINT order_number_uniq UNIQUE (order_number)     , PARTITION BY HASH (order_date)     , SUBPARTITION BY L
SELECT count(*) FROM products WHERE product_type_code  =  'Hardware' <MID>     ,   customer_email VARCHAR(80)     ,   CHECK (payment_method_code  =  'Credit Card' OR payment_method_code  =  'Debit Card' OR payment_method_code  =  'Cash')     ,   CONSTRAINT PK_customers PRIMARY KEY (customer_id)     ,   CONSTRAINT CHK_customers_payment_method_code CHECK (payment_method_code  =  'Credit Card' OR payment_method_code  =  'Debit Card' OR payment_method_code  =  'Cash')     ,   CONSTRAINT CHK_customers_customer_number CHECK (customer_number  =  'Basic' OR customer_number  =  'Premium' OR customer
SELECT count(*) FROM products WHERE product_type_code  =  'Hardware' <MID>     , address_details FROM addresses WHERE address_id  =  3 UNION SELECT customer_name ,  customer_phone ,  customer_email ,  customer_address ,  payment_method_code ,  address_id FROM customers WHERE customer_id  =  2 UNION SELECT T1.product_name ,  T1.product_price ,  T2.order_quantity ,  T2.product_id ,  T2.order_id ,  T1.product_id FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id WHERE T2.order_id  =  1 AND T1.product_type_code  =  'Hardware' ORDER BY T1.product_price DESC LIMIT 10'     , '
SELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products) ORDER BY product_price DESC'         ,
SELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products) ORDER BY product_price DESC'         , 'customers': 'SELECT customer_name FROM customers'     ,   'customer_orders': 'SELECT order_status_code ,  order_id FROM customer_orders'     ,   'order_items': 'SELECT order_quantity ,  order_item_id ,  order_id FROM order_items'     ,   'products': 'SELECT product_name FROM products'     ,   'select_all': 'SELECT * FROM addresses'     ,   'select_all2': 'SELECT * FROM customers'     ,   'select_all3': 'SELECT * FROM customer_orders'     ,   'select_all4': 'SELECT * FROM order_items'     ,   'select_all5': 'SELECT * FROM
SELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products WHERE product_type_code  =  'hardware')'         ,         , ['SELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products WHERE product_type_code  =  'hardware')']     , ['SELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products WHERE product_type_code  =  'hardware')']     , ['SELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products WHERE product_type_code  =  'hardware')']     , ['SELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products WHERE product_type_
SELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products WHERE product_type_code  =  'Hardware') AND product_type_code  =  'Hardware' <MID>_id` INTEGER NOT NULL ,
SELECT product_name FROM products WHERE product_type_code  =  'Clothes' ORDER BY product_price DESC LIMIT 1' SELECT product_name FROM products WHERE product_type_code  =  'Clothes' ORDER BY product_price DESC LIMIT 1' SELECT product_name FROM products WHERE product_type_code  =  'Clothes' ORDER BY product_price DESC LIMIT 1' SELECT product_name FROM products WHERE product_type_code  =  'Clothes' ORDER BY product_price DESC LIMIT 1' SELECT product_name FROM products WHERE product_type_code  =  'Clothes' ORDER BY product_price DESC LIMIT 1' SELECT product_name FROM products WHERE product_type_code  =  'Clothes' ORDER BY product_price DESC LIMIT 1' SELECT product_name FROM products WHERE product_type_code  =  'Clothes'
SELECT product_name FROM products WHERE product_type_code  =  'Clothes' ORDER BY product_price DESC LIMIT 1' <MID>     , order_status_code VARCHAR(15) NOT NULL     , customer_id INTEGER NOT NULL     , order_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP     , FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)     , PRIMARY KEY (order_id)     , UNIQUE KEY order_number (order_number)     , KEY custkey (customer_id)     , KEY timestamp (order_date)     , KEY status_code (order_status_code)     , CONSTRAINT order_items_order_id_fk FOREIGN KEY (order_id) REFERENCES Customer_Orders(order
SELECT product_id ,  product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price LIMIT 1' <MID>_id` INTEGER NOT NULL ,  `order_item_id` INTEGER NOT NULL,  `quantity` INTEGER NOT NULL DEFAULT 1,  `product_price` DECIMAL(10,2) NOT NULL DEFAULT 0.00,  `order_discount` DECIMAL(10,2) NOT NULL DEFAULT 0.00,  `product_total` DECIMAL(10,2) NOT NULL DEFAULT 0.00)')
SELECT product_id ,  product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price LIMIT 1'     ,   'SELECT product_id ,  product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price LIMIT 1' : ['SELECT product_id ,  product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price LIMIT 1']}     ,   {   'database' : 'SELECT DISTINCT payment_method_code FROM customers' ,   'sql' : 'SELECT count(*) FROM customers' ,   'submission' : 'SELECT count(*) FROM customers' ,   'answer' : 'SELECT count(*) FROM customers'}     ,   {   'database' : 'SELECT DISTINCT customer_name FROM customers' ,   '
SELECT product_name FROM products ORDER BY product_price DESC'         ,'SELECT product_name FROM products ORDER BY product_price DESC'         ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'
SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'     ,'SELECT product_name FROM products ORDER BY product_price DESC'
SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price ASC NULLS LAST'     , [3] : ['SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price ASC NULLS LAST']     , [4] : ['SELECT product_name FROM products WHERE product_type_code  =  'Software' ORDER BY product_price DESC NULLS FIRST']}     , {[2] : ['SELECT product_name FROM products WHERE product_type_code  =  'Accessories' ORDER BY product_price DESC NULLS FIRST']}     , {[1] : ['SELECT product_name FROM products WHERE product_type_code  =  'License' ORDER BY product_price ASC NULLS LAST']}     , {
SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price ASC' <MID>_id` INTEGER NOT NULL ,
SELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code'         , 'SELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code'     , 'SELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code'     , 'SELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code'     , 'SELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code'     , 'SELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code'     , 'SELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code'     , 'SELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code'     , 'SELECT product_type_code ,
SELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code'         , 'SELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code'     , 'SELECT product_type_code ,  sum(product_price) FROM products GROUP BY product_type_code'         , 'SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code'     , 'SELECT product_type_code ,  min(product_price) FROM products GROUP BY product_type_code'         , 'SELECT product_type_code ,  max(product_price) FROM products GROUP BY product_type_code'      ,   'SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1'      ,   'SELECT product_type_code FROM products GROUP
SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code'         ,   'SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code'         ,   ['SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code']     ,   'SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code'         ,   ['SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code']          ,   'SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code'         ,   ['SELECT product_type_code ,  avg(product_price) FROM products GROUP
SELECT avg(product_price) ,  product_type_code FROM products GROUP BY product_type_code'         , answers: ['T-Shirt', 'Sweatshirt', 'Polo Shirt', 'Hoodie']     , correctAnswer: 3     , explanation: ''     , subtask: false     , isRequired: true     , isFinal: true     , files: []     , taskId: 4697     , tags: []     , meta: {}     , duration: null     , difficulty: Difficulty.MEDIUM     , group: null     , subtasks: []     , next: null     , stats: null     , title: 'What is the average price of products for each product type?'     , isTemplate: false     , isSubtask: false     , totalScore
SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2'         ,'SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2'         ,'SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2'     ,'SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2'     ,'SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2'     ,'SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2'     ,'SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2'
SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2]'         ,
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1'         , answers: ['T1'], correctAnswer: 0},
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1'         , answers: ['T-Shirt'],         , correctAnswer: 0     , }     , { question: 'What is the name of the customer who placed the most orders?[SQL] SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1'         , answers: ['John Doe'],         , correctAnswer: 0     , }     , { question: 'Which payment method is used by the majority of customers?[SQL] SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1'         , answers: ['Credit
SELECT count(*) FROM Customers'         , 'SELECT count(*) FROM Customers'         , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Customers'     , 'SELECT count
SELECT count(*) FROM Customers WHERE payment_method_code  =  'Credit Card' AND customer_email LIKE '%@gmail.com' <MID>_id` INTEGER NOT NULL ,
SELECT customer_id ,  customer_name FROM Customers'         , 'SELECT customer_id ,  customer_name FROM Customers'         , 'SELECT customer_id ,  customer_name FROM Customers WHERE customer_id  =  103'     , 'SELECT customer_id ,  customer_name FROM Customers ORDER BY customer_name ASC'     , 'SELECT customer_id ,  customer_name FROM Customers WHERE customer_id  =  103 ORDER BY customer_name ASC'     , 'SELECT count(*) FROM customers'     , 'SELECT sum(customer_id) FROM customers'     , 'SELECT min(customer_id) FROM customers'     , 'SELECT max(customer_id) FROM customers'     , 'SELECT avg(customer_id) FROM customers'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT sum(customer
SELECT customer_id ,  customer_name FROM Customers'         , 'SELECT customer_id ,  customer_name FROM Customers'         , 'SELECT customer_id ,  customer_name FROM Customers'     , 'SELECT customer_id ,  customer_name FROM Customers'     , 'SELECT customer_id ,  customer_name FROM Customers'     , 'SELECT customer_id ,  customer_name FROM Customers'      , 'SELECT customer_id ,  customer_name FROM Customers'      , 'SELECT customer_id ,  customer_name FROM Customers'      , 'SELECT customer_id ,  customer_name FROM Customers'      , 'SELECT customer_id ,  customer_name FROM Customers'      , 'SELECT customer_id ,  customer_name FROM Customers'      , 'SELECT customer_id ,  customer_name FROM Customers'
SELECT address_details ,  customer_phone ,  customer_email FROM Addresses AS T1 JOIN Customers AS T2 ON T1.address_id  =  T2.address_id WHERE customer_name  =  'Jeromy' <MID>     ,   customer_email FROM Addresses AS T1 JOIN Customers AS T2 ON T1.address_id  =  T2.address_id WHERE customer_name  =  'Jeromy' <EOT> __author__ = 'Mao'
SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  'Jeromy' <MID>     ,   customer_email FROM Customers WHERE customer_name  =  'Jeromy' LIMIT 1; SELECT order_date FROM customer_orders WHERE order_status_code  =  'Pending' AND customer_id = (SELECT customer_id FROM Customers WHERE customer_name  =  'Jeromy' LIMIT 1); SELECT sum(order_quantity) FROM order_items WHERE product_id = (SELECT product_id FROM products WHERE product_name  =  'iPhone X' ); SELECT count(*) FROM customers; SELECT max(customer_id) FROM customers; SELECT min(customer_id) FROM customers; SELECT avg(customer_id) FROM customers; SELECT count(*) FROM orders; SELECT count(*) FROM order_items; SELECT sum(order_quantity)
SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code'         ,   'SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code'         ,   ['SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code']         ,   'SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code'     ,   'SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code'      ,   'SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code'      ,   'SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code'      ,   'SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method
SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code'         , 'SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code'     , ['SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code']]          , [u'SELECT count(*) FROM customers' , 'count(*) FROM customers' , ['count(*) FROM customers']]          , [u'SELECT count(*) FROM customer_orders' , 'count(*) FROM customer_orders' , ['count(*) FROM customer_orders']]          , [u'SELECT count(*) FROM order_items' , 'count(*) FROM order_items' , ['count(*) FROM order_items']]]
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1 <MID>     , customer_name VARCHAR(80)     , customer_address VARCHAR(255)     , customer_phone VARCHAR(80)     , customer_email VARCHAR(80)     , address_id INTEGER NOT NULL     , FOREIGN KEY (address_id) REFERENCES Addresses(address_id)     , payment_method_code VARCHAR(15)     , customer_number VARCHAR(20)     , customer_name VARCHAR(80)     , customer_address VARCHAR(255)     , customer_phone VARCHAR(80)     , customer_email VARCHAR(80)     , customer_id INTEGER PRIMARY KEY     , order_id INTEGER NOT NULL     , order
SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1'     ,'answer': 'Electronic Payment'}]
SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders WHERE payment_method_code  =  (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1))'         ,
SELECT customer_name FROM customers WHERE payment_method_code  =  (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1) ORDER BY customer_name ASC'         ,'customer_name': 'Acme Foods'}],
SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  'Jeromy' <MID>     ,   order_date     DATETIME NOT NULL ,   order_status_code VARCHAR(15)     ,   FOREIGN KEY customer_id REFERENCES Customers(customer_id)     ,   UNIQUE KEY order_number (order_id)     ,   UNIQUE KEY date_status_code (order_date , order_status_code)     ,   CHECK order_status_code IN ('Pending' ,  'Shipped' ,  'Cancelled')     ,   CHECK order_quantity >= 1     ,   CHECK sum(order_quantity) <= 100     ,   CHECK (order_date != '0000-00-00 00:00:00')
SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  'Jeromy' <MID>     ,   address_details FROM Addresses ORDER BY address_id ASC SQL; SELECT order_id FROM Customer_Orders ORDER BY order_id DESC LIMIT 1 SQL; SELECT order_item_id FROM Order_Items ORDER BY order_item_id DESC LIMIT 1 SQL; SELECT product_id FROM Products ORDER BY product_id DESC LIMIT 1 SQL; SELECT count(*) FROM customers SQL; SELECT count(*) FROM customer_orders SQL; SELECT count(*) FROM order_items SQL; SELECT count(*) FROM products SQL; SELECT sum(order_quantity) FROM order_items SQL; SELECT avg(order_quantity) FROM order_items SQL; SELECT max(order_quantity) FROM order_items SQL; SELECT min(order_quantity) FROM order_items SQL; SELECT count(*) FROM orders SQL; SELECT count
SELECT DISTINCT payment_method_code FROM Customers'         , 'SELECT DISTINCT payment_method_code FROM Customers'         , ['Cash', 'Credit Card', 'Debit Card', 'Wire Transfer']     ,   'What is the name of the customer who placed the most orders?[SQL] SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1'         , ['Jamie R. Olsen']
SELECT DISTINCT payment_method_code FROM Customers'         , 'SELECT DISTINCT payment_method_code FROM Customers'         , 'SELECT DISTINCT payment_method_code FROM Customers'     , 'SELECT count(*) FROM customers'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM order_items'     , 'SELECT count(*) FROM addresses'     , 'SELECT count(*) FROM products'          , 'SELECT sum(order_quantity) FROM order_items'     , 'SELECT avg(order_quantity) FROM order_items'     , 'SELECT min(order_quantity) FROM order_items'     , 'SELECT max(order_quantity) FROM order_items'     , 'SELECT sum(order_quantity) / (SELECT count(*) FROM order_items) FROM order_items'     , 'SELECT count
SELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC'         , 'SELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC'     , ['SELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC']      , 1     , ['SELECT count(*) FROM customers']         , 'SELECT count(*) FROM customers'     , ['SELECT count(*) FROM customers']      , 1     , ['SELECT count(*) FROM customer_orders']         , 'SELECT count(*) FROM customer_orders'     , ['SELECT count(*) FROM customer_orders']      , 1     , ['SELECT count(*) FROM order_items']         , 'SELECT count(*) FROM order_items'     , ['SELECT count(*) FROM order_items']      , 1     , ['SELECT sum(order_quantity
SELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC'         ,'SELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC'         ,'SELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC'     ,'SELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC'     ,'SELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC'     ,'SELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC'     ,'SELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC'     ,'SELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC'     ,'SELECT product_id ,  product_
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1'         , answers: ['T-Shirt'],         , correctAnswer: 0,         , explanation: 'The T-Shirt product type has the least number of products.'     , }
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1'         , 'SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1'         , ['SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1']     ,  34 : ['SELECT max(product_price) FROM products' , 'SELECT max(product_price) FROM products' , ['SELECT max(product_price) FROM products']]     ,  35 : ['SELECT min(product_price) FROM products' , 'SELECT min(product_price) FROM products' , ['SELECT min(product_price) FROM products']]     ,  36 : ['SELECT avg(product_price) FROM products' , 'SELECT avg(product_price) FROM products' , ['
SELECT count(*) FROM customer_orders'         , 'SELECT count(*) FROM customer_orders'         , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'
SELECT count(*) FROM customer_orders'         , 'SELECT count(*) FROM customer_orders'         , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'     , 'SELECT count(*) FROM customer_orders'
SELECT T1.order_id ,  T1.order_date ,  T1.order_status_code FROM Customer_Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  'Jeromy' <MID>     ,   address_details FROM addresses'     ,   'SELECT customer_id ,  address_id ,  payment_method_code FROM customers'     ,   'SELECT order_id ,  order_date ,  order_status_code FROM customer_orders'     ,   'SELECT order_item_id ,  order_id ,  product_id FROM order_items'     ,   'SELECT product_id ,  product_name ,  product_price FROM products'     ,   'SELECT DISTINCT product_type_code FROM products'     ,
SELECT T1.order_id ,  T1.order_date ,  T1.order_status_code FROM customer_orders AS T1 JOIN custom ers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  'Jeromy' <MID>     ,   address_details FROM addresses <EOT> <SUF>tomer_name FROM customers WHERE customer_id  =  $customer_id;';
SELECT T1.customer_name ,  T1.customer_id ,  count(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC'         , 'SELECT T1.customer_name ,  T1.customer_id ,  count(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC'     , ['SELECT T1.customer_name ,  T1.customer_id ,  count(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC']]
SELECT T1.customer_name ,  T1.customer_id ,  count(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC'         , 'SELECT T1.customer_name ,  T1.customer_id ,  count(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC'     , ['SELECT T1.customer_name ,  T1.customer_id ,  count(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC']]
SELECT T1.customer_id ,  T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1'         ,'SELECT T1.customer_id ,  T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1'     ,'SELECT T1.customer_id ,  T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM Customers AS T
SELECT T1.customer_id ,  T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1'         , 'answer': 'SELECT T1.customer_id ,  T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1'     , 'difficulty': 'Hard'     , 'category': 'Basic Select'     , 'image': 'https://raw.githubusercontent.
SELECT order_status_code ,  count(*) FROM customer_orders GROUP BY order_status_code'         , 'SELECT order_status_code ,  count(*) FROM customer_orders GROUP BY order_status_code'     , 'SELECT order_status_code ,  count(*) FROM customer_orders GROUP BY order_status_code'     , 'SELECT order_status_code ,  count(*) FROM customer_orders GROUP BY order_status_code'     , 'SELECT order_status_code ,  count(*) FROM customer_orders GROUP BY order_status_code'     , 'SELECT order_status_code ,  count(*) FROM customer_orders GROUP BY order_status_code'     , 'SELECT order_status_code ,  count(*) FROM customer_orders GROUP BY order_status_code'     , 'SELECT order_status_code ,  count(*) FROM customer_orders GROUP BY order_
SELECT order_status_code ,  count(*) FROM customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1'         , answers: ['Delivered : 374', 'Processing : 213', 'Shipped : 135']     , choices: [       , 'Delivered : 374'       , 'Processing : 213'       , 'Shipped : 135'     , ]     , correctAnswer: 0     , moreInfoUrl: ''     , explanation: ''     , info: ''     , ishtml: true     , subtask: false     , subtasks: []     , tags: []     , title: 'How many orders have each order status code?'   , } , { type: 'quiz'     , question: 'What
SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1'         , answers: ['Shipped']     , choices: [       , 'Processing'       , 'Shipped'       , 'Delivered'     , ]     , correctAnswer: 1     , moreInfoUrl: ''     , explanation: ''     , info: ''     , type: 'Multiple Choice'     , isRequired: true     , hasOther: false     , identifier: 'T2'     , questionNumber: 2     , prompt: 'What is the order status code that is most common?'     , shouldBeRandomized: false     , randomizeOrder: false     , isFixed: false     , choices: [       , 'Processing'       , 'Shipped'
SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1'         , 'answer': 'Shipped'     ,   'difficulty': 3     ,   'category': 'Data Management'     ,   'image': 'https://images.pexels.com/photos/417961/pexels-photo-417961.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'     ,   'subcategory': 'Database'     ,   'position': 11     ,   'title': 'Most Frequent Order Status Code'     ,   'description': 'Given a database of customer orders, find the order status code that occurs most frequently.'     ,   'help':
SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_orders )'         , 'customers_without_orders': 3}     , {'query': 'SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_orders )', 'answer': 3}     , {'query': 'SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_orders )'}     , {'query': 'SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_orders )', 'answer': 3}     , {'query': 'SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_orders )'}     , {'query': 'SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_orders )', 'answer': 3}
SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_orders )'         ,
SELECT DISTINCT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items) UNION SELECT DISTINCT product_name FROM products WHERE product_id IN (SELECT product_id FROM order_items) EXCEPT SELECT DISTINCT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items) <MID>_id` INTEGER NOT NULL ,
SELECT product_name FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items )'         , answers: ['Television','Vacuum Cleaner','Stereo']     , correctAnswer: 0     , explanation: 'The television has not been ordered. The vacuum cleaner and stereo have not been ordered.'     , level: 'easy'     , questionType: 'mysql'     , subtask: false     , isNewCreate: true     , selected: false     , isCompleted: true     , completedDate: 'Mon Jul 26 2021 17:34:49 GMT-0700 (Pacific Daylight Time)'     , createdDate: 'Mon Jul 26 2021 17:34:49 GMT-0700 (
SELECT count(*) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  'Monitor' <MID>     , customer_email VARCHAR(80)     , check_constraint customer_email_isvalid email     , payment_method_code VARCHAR(15) NOT NULL     , customer_number VARCHAR(20) NOT NULL     , customer_name VARCHAR(80) NOT NULL     , customer_address VARCHAR(255) NOT NULL     , customer_phone VARCHAR(80) NOT NULL     , customer_email VARCHAR(80) NOT NULL     , CHECK (payment_method_code  =  'Cash' OR payment_method_code  =  'Credit Card')     , CHECK (customer_number  !=  '' AND customer_name  !=
SELECT sum(ti.order_quantity) FROM order_items AS ti JOIN products AS t1 ON ti.product_id  =  t1.product_id WHERE t1.product_type_code  =  'Monitor' <MID>_id` ) REFERENCES `Products`(`product_id` )'     ,'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY , `customer_id` INTEGER NOT NULL , `order_date` DATETIME NOT NULL , `order_status_code` VARCHAR(15) , FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )'     ,'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER NOT NULL , `order_id` INTEGER NOT NULL , `product_id`
SELECT count(*) FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  'Monitor' GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1' <MID>     , payment_method_code VARCHAR(15) NOT NULL , customer_number VARCHAR(20) NOT NULL , customer_name VARCHAR(80) NOT NULL , customer_address VARCHAR(255) NOT NULL , customer_phone VARCHAR(80) NOT NULL , customer_email VARCHAR(80) NOT NULL ); CREATE TABLE if not exists Addresses ( address_id INTEGER PRIMARY KEY , address_details VARCHAR(255) ); CREATE TABLE if not exists Customer_Orders ( order_id INTE
SELECT count(DISTINCT customer_id) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  'Monitor' <MID>     , address_details FROM addresses AS T1 JOIN customers AS T2 ON T1.address_id  =  T2.address_id WHERE customer_name  =  'JAMES PATTERSON' AND payment_method_code  =  'Credit Card' GROUP BY T1.address_id HAVING sum(customer_price)  >  450 UNION SELECT count(*) FROM customers WHERE customer_name  =  'BOB SMITH' AND payment_method_code  =  'Cash On Delivery' GROUP BY customer_number HAVING sum(customer_price)  >  350;' ] }]'
SELECT count(DISTINCT customer_id) FROM Customer_Orders WHERE order_status_code  =  'Shipped' AND order_date BETWEEN '2017-04-01' AND '2017-04-30' GROUP BY customer_id HAVING count(*)  >  1' <MID>     , T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Shipped' AND T2.order_date BETWEEN '2017-04-01' AND '2017-04-30' GROUP BY T1.customer_id HAVING count(*)  >  1 ORDER BY sum(T2.order_quantity) DESC LIMIT 1' |
SELECT count(DISTINCT customer_id) FROM Customer_Orders WHERE order_status_code  =  'Completed' <MID>     , address_details FROM addresses WHERE address_id  =  $customer_id['address_id'][0] UNION SELECT customer_name ,  customer_address ,  customer_phone ,  customer_email FROM customers WHERE customer_id  =  $customer_id['customer_id'][0] UNION SELECT T1.product_name ,  T1.product_price ,  T2.order_quantity ,  T2.product_id FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id WHERE T2.customer_id  =  $customer_id['customer_id'][0] ORDER BY T2.product_id ASC' > $output_path/query4.csv'
SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_orders)')
SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM customer_orders'         , 'customers' : ['SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM customer_orders']         , 'customer_orders' : ['SELECT order_id FROM customer_orders']     ,   'order_items' : ['SELECT order_item_id FROM order_items']     ,   'products' : ['SELECT product_id FROM products']     ,   'addresses' : ['SELECT address_id FROM addresses']     ,   'create_table_customers': ['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY , `address_id` INTEGER NOT NULL , `payment_method_code` VARCHAR(15) , `customer_number` VARCHAR(20) , `customer_name` VARCHAR(80) , `customer_address
SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING sum(T2.order_quantity)  >  3'         , '2001-04-17', '2001-04-19', '2001-04-25', '2001-04-27', '2001-04-30']     FROM = ['2001-04-17 12:29:24.123456', '2001-04-19 12:29:24.123456', '20
SELECT T1.order_id ,  T1.order_date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING sum(T2.order_quantity)  >  6 UNION SELECT T1.order_id ,  T1.order_date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3'         , 'SELECT T1.order_id ,  T1.order_date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING sum(T2
SELECT count(*) FROM building'         , '2'         , ['SELECT count(*) FROM building']         , ['SELECT count(*) FROM region']     , 3         , ['SELECT count(*) FROM building']         , ['SELECT count(*) FROM region']      , 4         , ['SELECT count(*) FROM building']         , ['SELECT count(*) FROM region']     , 5         , ['SELECT count(*) FROM building']         , ['SELECT count(*) FROM region']     , 6         , ['SELECT count(*) FROM building']         , ['SELECT count(*) FROM region']     , 7         , ['SELECT count(*) FROM building']         , ['SELECT count(*) FROM region']     , 8         , ['SELECT count(*) FROM building']         , ['SELECT count(*) FROM region']     , 9         , ['SELECT count(*) FROM building']         ,
SELECT count(*) FROM building'         , 'SELECT count(*) FROM building'         , 'SELECT count(*) FROM region'     , 'SELECT count(*) FROM city'     , 'SELECT count(*) FROM country'          , 'SELECT count(*) FROM student'     , 'SELECT count(*) FROM teacher'     , 'SELECT count(*) FROM classroom'     , 'SELECT count(*) FROM school'     , 'SELECT count(*) FROM spouse'     , 'SELECT count(*) FROM parent'     , 'SELECT count(*) FROM child'     , 'SELECT count(*) FROM toy'     , 'SELECT count(*) FROM pet'     , 'SELECT count(*) FROM employee'     , 'SELECT count(*) FROM department'     , 'SELECT count(*) FROM CONSTITUTIONAL_OFFICIAL'     , 'SELECT count(*) FROM US_PRESIDENT'     , 'SELECT
SELECT Name FROM building ORDER BY Number_of_Stories ASC'         ,'SELECT Name FROM building ORDER BY Number_of_Stories ASC'         ,'SELECT Name FROM building ORDER BY Number_of_Stories ASC'     ,'SELECT Name FROM building ORDER BY Number_of_Stories DESC'         ,'SELECT Name FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Name FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Name FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Name FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Name FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Name FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Name FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Name
SELECT Name FROM building ORDER BY Number_of_Stories ASC'         ,'Completed_Year FROM building'     ,'SELECT Name FROM building ORDER BY Number_of_Stories ASC'         ,'SELECT Completed_Year FROM building'     ,'SELECT Completed_Year FROM building'     ,'SELECT count(*) FROM building'     ,'SELECT count(*) FROM building'     ,'SELECT max(Number_of_Stories) FROM building'     ,'SELECT min(Number_of_Stories) FROM building'     ,'SELECT avg(Number_of_Stories) FROM building'     ,'SELECT sum(Number_of_Stories) FROM building'     ,'SELECT TYPEOF Region_ID FROM building'               ,'SELECT DISTINCT TYPEOF Region_ID FROM building'     ,'SELECT TYPEOF Name FROM
SELECT Address FROM building ORDER BY Completed_Year DESC'         ,'SELECT Address FROM building ORDER BY Completed_Year DESC'         ,'SELECT Address FROM building ORDER BY Completed_Year DESC'     ,'SELECT Address FROM building ORDER BY Completed_Year DESC'     ,'SELECT Address FROM building ORDER BY Completed_Year DESC'     ,'SELECT Address FROM building ORDER BY Completed_Year DESC'     ,'SELECT Address FROM building ORDER BY Completed_Year DESC'     ,'SELECT Address FROM building ORDER BY Completed_Year DESC'     ,'SELECT Address FROM building ORDER BY Completed_Year DESC'     ,'SELECT Address FROM building ORDER BY Completed_Year DESC'     ,'SELECT Address FROM building ORDER BY Completed_Year DESC'     ,'SELECT Address FROM building ORDER BY Completed_Year DESC'     ,'SELECT Address FROM building ORDER BY Completed
SELECT Address FROM building ORDER BY Completed_Year DESC'         ,'SELECT Address FROM building ORDER BY Completed_Year DESC'     ,'SELECT Name FROM region WHERE Area  =  254859'         ,'SELECT Name FROM region WHERE Area  =  254859'      ,'SELECT Name FROM region WHERE Area  =  254859'     ,'SELECT Name FROM region WHERE Area  =  254859'     ,'SELECT Name FROM region WHERE Area  =  254859'     ,'SELECT Name FROM region WHERE Area  =  254859'     ,'SELECT Name FROM region WHERE Area  =  254859'     ,'SELECT Name FROM region WHERE Area  =  254859'     ,'SELECT Name FROM region WHERE Area  =
SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980 <MID> SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980;'     ,'SELECT count(*) FROM region;'     ,'SELECT count(*) FROM building;'     ,'SELECT min(Number_of_Stories) FROM building WHERE Completed_Year != 1980;'     ,'SELECT avg(Number_of_Stories) FROM building WHERE Completed_Year != 1980;'     ,'SELECT sum(Number_of_Stories) FROM building WHERE Completed_Year != 1980;'     ,'SELECT count(*) FROM region WHERE area  >  250000;'     ,'SELECT count(*) FROM building WHERE number_of_stories  >
SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980 <MID>_ID INTEGER NOT NULL ,  Name TEXT ,  Address TEXT ,  Number_of_Stories INTEGER ,  Completed_Year INTEGER ,  PRIMARY KEY (Building_ID) ,  FOREIGN KEY (Region_ID) REFERENCES region(Region_ID) ) CREATE TABLE region ( Region_ID INTEGER ,  Name TEXT ,  Capital TEXT ,  Area INTEGER ,  Population INTEGER ,  PRIMARY KEY (Region_ID) )'
SELECT avg(population) FROM region WHERE area  >  150000'         , 'SELECT avg(population) FROM region' :  ['SELECT avg(population) FROM region']}     ,   'SELECT count(*) FROM region' :  {'query' :  'SELECT count(*) FROM region', 'answer' :  '2'}     ,   'SELECT name FROM building WHERE completed_year  =  1884' :  {'query' :  'SELECT name FROM building WHERE completed_year  =  1884', 'answer' :  'Houses of Parliament'}     ,   'SELECT name FROM building WHERE completed_year  =  1885' :  {'query' :  'SELECT name FROM building WHERE completed_year  =  1885', 'answer' :  'Big Ben'}     ,   'SELECT name
SELECT avg(population) FROM region WHERE area  >  1500; <MID>     , completed_year INT NOT NULL , building_id SERIAL PRIMARY KEY     , name TEXT NOT NULL UNIQUE     , address TEXT NOT NULL     , number_of_stories INT NOT NULL     , region_id INT NOT NULL     , CONSTRAINT building_region_fk FOREIGN KEY (region_id) REFERENCES region(region_id) ON DELETE NO ACTION ON UPDATE NO ACTION
SELECT Name FROM region ORDER BY Name ASC'         ,'SELECT Name FROM region ORDER BY Name ASC'         ,'SELECT Name FROM region ORDER BY Name DESC'         ,'SELECT Name FROM region ORDER BY Name DESC'     ,'SELECT Name FROM region ORDER BY Name ASC'     ,'SELECT Name FROM region ORDER BY Name DESC'     ,'SELECT Name FROM region ORDER BY Name ASC'      ,'SELECT Name FROM region ORDER BY Name DESC'     ,'SELECT Name FROM region ORDER BY Name ASC'      ,'SELECT Name FROM region ORDER BY Name DESC'     ,'SELECT Name FROM region ORDER BY Name ASC'      ,'SELECT Name FROM region ORDER BY Name DESC'     ,'SELECT Name FROM region ORDER BY Name ASC'      ,'SELECT Name FROM region ORDER BY Name DESC'     ,'SELECT Name FROM region ORDER BY Name ASC'      ,'SELECT Name FROM region ORDER
SELECT Name FROM region ORDER BY Name ASC'         ,'SELECT Name FROM region ORDER BY Name ASC'         ,'SELECT Name FROM region ORDER BY Name DESC'     ,'SELECT Name FROM region ORDER BY Name DESC']     ,['SELECT DISTINCT name FROM building GROUP BY name ORDER BY name ASC'          ,'SELECT DISTINCT name FROM building GROUP BY name ORDER BY name DESC']     ,['SELECT count(*) FROM building GROUP BY Number_of_Stories ORDER BY count(*) DESC LIMIT 1'          ,'SELECT Number_of_Stories FROM building GROUP BY Number_of_Stories ORDER BY count(*) DESC LIMIT 1']     ,['SELECT count(*) FROM building GROUP BY Number_of_Stories ORDER BY count(*) DESC LIMIT 2'          ,'SELECT Number_of_Stories FROM building GROUP BY Number_of_Stories ORDER BY count(*) DESC LIMIT 2']
SELECT Capital FROM region WHERE area  >  10000 <MID> SELECT name FROM building WHERE completed_year  =  (SELECT max(completed_year) FROM building) ORDER BY name ASC LIMIT 5;'     , 'SELECT name FROM building ORDER BY completed_year DESC LIMIT 5;'     , 'SELECT name FROM building ORDER BY completed_year ASC LIMIT 5;'     , 'SELECT name FROM building WHERE completed_year != (SELECT min(completed_year) FROM building);'     , 'SELECT name FROM building WHERE completed_year != (SELECT max(completed_year) FROM building);'     , 'SELECT name FROM building WHERE completed_year != (SELECT avg(completed_year) FROM building);'     , 'SELECT name FROM building WHERE completed_year != (SELECT min(completed_year) FROM building) AND completed_year != (SELECT max(completed
SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id WHERE t1.area  >  10000 <MID>     , t3.name AS completed_by FROM building AS t1 JOIN region AS t2 ON t1.region_id  =  t2.region_id JOIN employee AS t3 ON t1.completed_by  =  t3.e_id WHERE t1.number_of_stories  >  150 ORDER BY t1.completed_year DESC LIMIT 5;'     , 'SELECT DISTINCT t2.name FROM building AS t1 JOIN region AS t2 ON t1.region_id  =  t2.region_id WHERE t1.number_of_stories  >  150 ORDER BY t1.completed_year DESC
SELECT capital FROM region ORDER BY population DESC LIMIT 1'         , 'capital': 'Berlin'}      ,   {   'query': 'SELECT name FROM building WHERE completed_year  =  (SELECT max(completed_year) FROM building)' }      ,   {   'query': 'SELECT name FROM building WHERE completed_year  =  (SELECT max(completed_year) FROM building) AND building_id  =  (SELECT building_id FROM building ORDER BY completion_percentage DESC LIMIT 1)' }     ,   {   'query': 'SELECT name FROM building WHERE completed_year  =  (SELECT max(completed_year) FROM building) AND building_id  =  (SELECT building_id FROM building ORDER BY completion_percentage DESC LIMIT 1) AND name  =  (SELECT name FROM building WHERE completed_year  =  (SELECT max(completed_year)
SELECT capital FROM region ORDER BY population DESC LIMIT 1'         , 'SELECT capital FROM region ORDER BY population DESC LIMIT 1'         , ['capital']     ,   'SELECT name FROM building WHERE completed_year  =   (SELECT max(completed_year) FROM building)']         , ['name']     ,   'SELECT count(*) FROM building']         , ['count(*)']     ,   'SELECT count(*) FROM region']         , ['count(*)']      ,   'SELECT count(*) FROM city']         , ['count(*)']]
SELECT Name FROM region ORDER BY Area DESC LIMIT 5'         , 'region': ['Asia', 'Africa', 'Europe', 'North America', 'Australia']}     , {'query': 'SELECT name FROM building WHERE completed_year  =  1887' , 'answer': [['Chicago Board of Trade']], 'region': []}     , {'query': 'SELECT count(*) FROM building' , 'answer': [[6]] , 'region': []}     , {'query': 'SELECT count(*) FROM region' , 'answer': [[5]] , 'region': []}     , {'query': 'SELECT name FROM building WHERE completed_year  =  1887 AND LENGTH(name) > 25' , 'answer': [[]] , 'region': []}     , {'query': 'SELECT name FROM building WHERE completed_year  =  18
SELECT Name FROM region ORDER BY Area DESC LIMIT 5'         , 'SELECT Name FROM region ORDER BY Area DESC LIMIT 5'     , 'SELECT Name FROM region ORDER BY Area DESC LIMIT 5'     , ['Capital','Area','Population','Name']     , ['Capital','Area','Population']
SELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'         , 'SELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'     , 'SELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'      , 'SELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'     , 'SELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T
SELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'         , 'SELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'     , 'SELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'      ,'SELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'     ,'SELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T
SELECT t1.name FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t1.region_id HAVING count(*)  >  1'         , 'SELECT t1.name FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t1.region_id HAVING count(*)  >  1'     , 'SELECT t1.name FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t1.region_id HAVING count(*)  >  1'     , 'SELECT t1.name FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t1.region_id HAV
SELECT T1.name FROM region AS T1 JOIN building AS T2 ON T1.region_id  =  T2.region_id GROUP BY T1.region_id HAVING count(*)  >  1'         , 'SELECT T1.name FROM region AS T1 JOIN building AS T2 ON T1.region_id  =  T2.region_id GROUP BY T1.region_id HAVING count(*)  >  1'     , 'SELECT T1.name FROM region AS T1 JOIN building AS T2 ON T1.region_id  =  T2.region_id GROUP BY T1.region_id HAVING count(*)  >  1'     , 'SELECT T1.name FROM region AS T1 JOIN building AS T2 ON T1.region_id  =  T2.region_id GROUP BY T1.region_id HAV
SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t1.region_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t1.region_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t1.region_id ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t1.region_id ORDER
SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t2.region_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t2.region_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t2.region_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t2.region_id ORDER
SELECT address ,  capital FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'         , 'SELECT address ,  capital FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'     , [                     ,  'SELECT address ,  capital FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'     ,  2     ,  200]
SELECT T1.address ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'         , 'SELECT T1.address ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'     , 'SELECT T1.address ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'      ,'SELECT T1.address ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id'     ,'SELECT T1.address ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T
SELECT Number_of_Stories FROM building WHERE region_id  =  (SELECT region_id FROM region WHERE name  =  'Abruzzo') <MID> SELECT count(*) FROM building WHERE region_id  =  (SELECT region_id FROM region WHERE name  =  'Abruzzo') GROUP BY Number_of_Stories ORDER BY Number_of_Stories DESC LIMIT 1;'     ,'SELECT max(Number_of_Stories) FROM building WHERE region_id  =  (SELECT region_id FROM region WHERE name  =  'Abruzzo')'     ,'SELECT min(Number_of_Stories) FROM building WHERE region_id  =  (SELECT region_id FROM region WHERE name  =  'Abruzzo')'     ,'SELECT avg(Number_of_Stories) FROM building WHERE region_id  =  (SELECT region_id
SELECT Number_of_Stories FROM building WHERE region_id  =  (SELECT region_id FROM region WHERE name  =  'Abruzzo') <MID> SELECT count(*) FROM building WHERE region_id  =  (SELECT region_id FROM region WHERE name  =  'Abruzzo') GROUP BY region_id HAVING count(*)  >  1000' | python3 check.py
SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year ORDER BY Completed_Year ASC'         , '2016': 3, '2015': 4}     , 'region': {
SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year ORDER BY Completed_Year ASC'         , 'SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year ORDER BY Completed_Year ASC'     , 'SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT max(Completed_Year) FROM building'     , 'SELECT min(Completed_Year) FROM building'               , 'SELECT avg(Completed_Year) FROM building'     , 'SELECT sum(Completed_Year) FROM building' ]
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1'         ,'2054' : 'SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1'     ,'2055' : 'SELECT max(Completed_Year) FROM building'         ,'2056' : 'SELECT max(Completed_Year) FROM building'     ,'2057' : 'SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1'         ,'2058' : 'SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1'     ,'2059' : 'SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1'         ,'
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1'         , '2054'         , 'SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1'     , 'SELECT max(Completed_Year) FROM building'     , 'SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1'     , 'SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1
SELECT name FROM region WHERE region_id NOT IN (SELECT region_id FROM building)',
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building) <MID> SELECT name FROM region WHERE region_id NOT IN (SELECT region_id FROM building) UNION SELECT 'No Building' FROM building WHERE buildng_id  NOT IN (SELECT buildng_id FROM region) GROUP BY buildng_id HAVING count(*)  =  1) T3 ON T3.buildng_id  =  T1.buildng_id ORDER BY T1.buildng_id ASC NULLS LAST'     ,'SELECT T1.name FROM region AS T1 JOIN building AS T2 ON T1.region_id  =  T2.region_id EXCEPT SELECT T1.name FROM region AS T1 JOIN building AS T2 ON T1.region_id  =  T2.region_id'     ,'SELECT T1.name FROM region AS T1 JOIN building AS
SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15]'         ,'answer': '2016 - 2017'}     ,{ 'question': 'Which region has the largest population?', 'sql': 'SELECT t1.Name FROM region AS t1 JOIN city AS t2 ON t1.Region_ID  =  t2.Region_ID WHERE t2.Population  =  (SELECT MAX(Population) FROM city)', 'answer': 'Europe'}     ,{ 'question': 'Find all the cities in Asia.', 'sql': 'SELECT t2.Name FROM region AS t1 JOIN city AS t2 ON t1.Region_ID  =  t2.Region_ID WHERE t1.Name  =  '
SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15'         ,'SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15'     ,'The two completed years are ']     ,'1984 , 1997'     ,'SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15'     ,'1984 , 1997'     ,'SELECT Completed_Year FROM building WHERE Number_of_Stories  >  2
SELECT DISTINCT address FROM building'         , 'SELECT DISTINCT address FROM building'         , 'SELECT DISTINCT address FROM building'     , 'SELECT count(DISTINCT address) FROM building'     , 'SELECT count(*) FROM building'     , 'SELECT count(*) FROM building WHERE number_of_stories  >  240'     , 'SELECT count(*) FROM building WHERE completed_year  <  1850'     , 'SELECT count(*) FROM building WHERE region_id  =  1'     , 'SELECT count(*) FROM building WHERE name  =  'apartment building' ]     , [ 'SELECT count(*) FROM building WHERE name  =  'apartment building''     , 'SELECT count(*) FROM building WHERE completed_year  <  1850' ]     , [ 'SELECT count(*) FROM building WHERE region_id
SELECT DISTINCT address FROM building'         , 'SELECT DISTINCT address FROM building'         , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'     , 'SELECT DISTINCT address FROM building'
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'         ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'         ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'         ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'      ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC'     ,'SELECT Completed_Year FROM building ORDER BY Number_
SELECT channel_details FROM channels ORDER BY channel_details ASC'         , 'channel_1'         , 'channel_2'         , 'channel_3'     , 'SELECT * FROM channels'     , ['channel_1' ,  'channel_2' ,  'channel_3']      ,  2         , 'SELECT count(*) FROM customers'         , 6     , SELECT count(*) FROM services WHERE service_details LIKE '%New%' EXCEPT SELECT count(*) FROM customers_and_services WHERE Customers_and_Services_details  =  'New'     , SELECT count(*) FROM customers_and_services WHERE Customers_and_Services_details  =  'New' EXCEPT SELECT count(*) FROM customers GROUP BY customer_id HAVING count(customer_id)  >  1      , SELECT count(*) FROM customers_and_services WHERE Customers_
SELECT channel_details FROM channels ORDER BY channel_details ASC'         , 'channel_details': ['Email', 'SMS', 'Telephone']}     , {'question': 'What are the list of service IDs that have the details as Email? [SQL] SELECT service_id FROM services WHERE service_details  =  'Email'', 'service_id': [3]}     , {'question': 'For the given customer ID (say 2), list the services and channels interacted with in an integration platform. [SQL] SELECT T1.services_and_channels_details ,  T2.integration_platform_details FROM customers_and_services AS T1 JOIN integration_platform AS T2 ON T1.customer_interaction_id  =  T2.customer_interaction_id WHERE T1.customer_id  =  2'      , 'services_and_channels_details
SELECT count(*) FROM Services WHERE service_id != 0' , '3', 'SELECT count(*) FROM services' ], [ 'SELECT count(*) FROM channels' , '2', 'SELECT count(*) FROM channels' ] ] }
SELECT count(*) FROM Services'         , 'count_services' : 3}     ,   {   'query' : 'SELECT count(*) FROM customers' ,   'answer' : 'SELECT count(*) FROM customers' ,   'count_customers' : 3}     ,   {   'query' : 'SELECT count(*) FROM channels' ,   'answer' : 'SELECT count(*) FROM channels' ,   'count_channels' : 2}     ,   {   'query' : 'SELECT count(*) FROM customers_and_services' ,   'answer' : 'SELECT count(*) FROM customers_and_services' ,   'count_customers_services' : 6}     ,   {   'query' : 'SELECT count(*) FROM customer_interactions' ,   'answer' : 'SELECT count(*) FROM customer_interactions' ,   'count_customer_interactions'
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY count(*) DESC LIMIT 1'         , 'ANALYTICAL_LAYER_TYPE_CODE']     , ['SELECT T1.customer_id ,  T2.service_id FROM customers AS T1 JOIN services AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.service_details LIKE '%Check%'' , 'customer_id service_id']     , ['SELECT T1.customer_id ,  COUNT(*) FROM customers AS T1 JOIN services AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.service_details LIKE '%Check%'' GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1' , 'customer_id count']     ,
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY count(*) DESC LIMIT 1 OFFSET 0'         , 'status': 'published'     , 'difficulty': 'hard'     , 'is_subscriber': False     , 'thumbnail': '/static/images/default.png'     , 'slug': 'task3'     , 'hint': 'Use group by and count'     , 'subtasks': None     , 'point': 50     , 'template': 'TASK'     , 'is_published': True     , 'is_created': True     , 'user': user     , 'created_at': datetime.datetime(2019, 7, 8, 11, 26, 5
SELECT T3.service_details FROM customers AS T1 JOIN customerdetails AS T2 ON T1.customer_id  =  T2.customer_id JOIN customers_and_services AS T3 ON T1.customer_id  =  T3.customer_id WHERE T2.customer_details  =  'Hardy Kutch' GROUP BY T3.service_id HAVING count(*)  >=  2' <MID>_ID INTEGER NOT NULL , channel_details VARCHAR(255) NOT NULL , PRIMARY KEY (channel_id)) CREATE TABLE customer_interactions (customer_interaction_id INTEGER NOT NULL , channel_id INTEGER , customer_id INTEGER , service_id INTEGER , status_code CHAR(15) , services_and_channels_details VARCHAR(255) , PRIMARY KEY (customer_interaction_id) , FO
SELECT T3.Service_details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN Services AS T3 ON T2.Service_ID  =  T3.Service_ID WHERE T1.Customer_Details  =  'Hardy Kutch' <MID>_ID INTEGER NOT NULL , channel_details VARCHAR(255) NOT NULL , PRIMARY KEY (channel_ID) ) CREATE TABLE customer_interactions ( customer_interaction_id INTEGER NOT NULL , channel_id INTEGER , customer_id INTEGER , service_id INTEGER , status_code CHAR(15) , services_and_channels_details VARCHAR(255) , PRIMARY KEY (customer_interaction_id) , FOREIGN KEY (service_id) REFERENCES services (service_id
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T2.service_id HAVING count(*)  >  3'         , 'answer': 'T1.service_details'     , 'difficulty': 'Hard'         , 'category': 'Identify the correct table'     , 'type': 'MULTIPLE CHOICE'     , 'choices': [       , 'customers'       , 'channels'       , 'services'       , 'customers_and_services'       , 'customer_interactions'       , 'integration_platform'       , 'analytical_layer'     , ]     , 'image': 'https://cdn.fs.teachable.com/images/
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id HAVING count(*)  >  3'         , 'SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id HAVING count(*)  >  3'     , 'SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id HAVING count(*)  >  3'         , 'SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T
SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1'         ,'answer': 'Customer 3 uses the services the most times.'}     ,{'question': 'What is the name of the service with the highest number of interactions? [SQL] SELECT T2.service_details FROM customers_and_services AS T1 JOIN services AS T2 ON T1.service_id  =  T2.service_id JOIN customer_interactions AS T3 ON T1.customers_and_services_id  =  T3.customers_and_services_id GROUP BY T2.service_id ORDER BY count(*) DESC LIMIT 1'         ,'answer': 'HIGHLY CUSTOMIZED
SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1'         , 'answer': 'Customer with largest count of used services is CUSTOMER_3 and it used 3 services'     , 'difficulty': 'Hard'     , 'category': 'Data Modeling'     , 'image': 'https://raw.githubusercontent.com/Zizzoz/Coursera-Getting-and-Cleaning-Data/master/Images/analytics.png'     , 'subcategory': 'Analytical Layer'     , 'minutes': 0     , 'hours': 0     , 'days': 0     , 'created_by':
SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1'         ,'answer': 'CUSTOMER_3'     ,   'difficulty': 'hard'         ,   'category': 'Data Warehousing'     ,   'image': 'https://images.pexels.com/photos/736986/pexels-photo-736986.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'     ,   'subcategory': 'Data Warehouse - DWH'     ,   'index': 11     ,   'points
SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1'         ,'SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1'         ,'Customers'     ,'T1.customer_details'     ,'T1.customer_id'     ,'Customers'     ,'T1.customer_id'     ,'Customers_and_Services'     ,'T2.customers_and_services_id'     ,'Customers_and_Services'     ,'T
SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_and_services) <MID>_ID INTEGER NOT NULL ,  Service_Details VARCHAR(255) ,  PRIMARY KEY (Service_ID) ) CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL ,  Customer_Details VARCHAR(255) NOT NULL ,  PRIMARY KEY (Customer_ID) ) CREATE TABLE Channels ( Channel_ID INTEGER NOT NULL ,  Channel_Details VARCHAR(255) NOT NULL ,  PRIMARY KEY (Channel_ID) ) CREATE TABLE Customers_and_Services ( Customers_and_Services_ID INTEGER NOT NULL ,  Customer_ID INTEGER ,  Service_ID INTEGER ,  Customers_and_Services_Details CHAR(15) NOT NULL ,  PRIMARY KEY (Customers_and_Services_ID) ,  FOREIGN KEY
SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_and_services) <MID>_ID INTEGER NOT NULL ,  service_id INTEGER NOT NULL ,  customers_and_services_details CHAR(15) NOT NULL ,  PRIMARY KEY (customers_and_services_id) ,  FOREIGN KEY (service_id) REFERENCES services (service_id) ,  FOREIGN KEY (customer_id) REFERENCES customers (customer_id) ) CREATE TABLE customer_interactions ( customer_interaction_id INTEGER NOT NULL ,  channel_id INTEGER NOT NULL ,  customer_id INTEGER NOT NULL ,  service_id INTEGER NOT NULL ,  status_code CHAR(15) NOT NULL ,  services_and_channels_details VARCHAR(255) NOT NULL ,  PRIMARY KEY (
SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1'         ,'answer': 'CORRECT'     ,'difficulty': 'HARD'     ,'category': 'Data Modeling'     ,'subcategory': 'Relational'     ,'position': 396     ,'is_active': null     ,'created_at': '2020-07-16T13:38:59.238Z'     ,'updated_at': '2021-12-25T09:41:49.308Z'     ,'slug': 'find-the-details-of
SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_details ORDER BY count(*) ASC LIMIT 1'         ,'ANALYTICAL_LAYER': 'SELECT T1.customer_interaction_id ,  T3.integration_platform_details FROM customer_interactions AS T1 JOIN integration_platform AS T3 ON T1.customer_interaction_id  =  T3.customer_interaction_id JOIN services AS T2 ON T2.service_id  =  T1.service_id GROUP BY T1.customer_interaction_id ORDER BY count(*) DESC LIMIT 1'}]
SELECT count(DISTINCT customer_details) ,  count(DISTINCT service_details) FROM customers_and_services'         , 'count(DISTINCT customer_details) count(DISTINCT service_details)'         , ['count(DISTINCT customer_details)', 'count(DISTINCT service_details)']     , ['SELECT count(DISTINCT customer_details) ,  count(DISTINCT service_details) FROM customers_and_services']     , ['count(DISTINCT customer_details)', 'count(DISTINCT service_details)']     , ['count(DISTINCT customer_details)', 'count(DISTINCT service_details)']     , ['count(DISTINCT customer_details)', 'count(DISTINCT service_details)']     , ['count(DISTINCT customer_details)', 'count(DI
SELECT count(*) FROM Customers UNION SELECT count(*) FROM Services'         , 'count(*)'     , 'SELECT count(*) FROM Customers_and_Services'     , 'SELECT count(*) FROM customer_interactions'     , 'SELECT count(*) FROM integration_platform'     , 'SELECT count(*) FROM analytical_layer'     , 'SELECT count(*) FROM channels'     , 'SELECT count(*) FROM services_and_channels'     , 'SELECT count(*) FROM customers_and_services_and_channels'               , ['SELECT count(*) FROM customers UNION SELECT count(*) FROM services']     , ['SELECT count(*) FROM customers_and_services']     , ['SELECT count(*) FROM customer_interactions']     , ['SELECT count(*) FROM integration_platform']     , ['SELECT count(*) FROM analytical_layer']     , ['SELECT count(*) FROM channels']
SELECT customer_details FROM customers WHERE customer_details LIKE '%Kutch%' ESCAPE '/' <MID>_ID INTEGER NOT NULL ,  service_id INTEGER ,  customers_and_services_details CHAR(15) NOT NULL ,  PRIMARY KEY (customers_and_services_id) ,  FOREIGN KEY (service_id) REFERENCES services (service_id) ,  FOREIGN KEY (customer_id) REFERENCES customers (customer_id) ) CREATE TABLE customer_interactions ( customer_interaction_id INTEGER NOT NULL ,  channel_id INTEGER ,  customer_id INTEGER ,  service_id INTEGER ,  status_code CHAR(15) ,  services_and_channels_details VARCHAR(255) ,  PRIMARY KEY (customer_interaction_id) ,  FOREIGN KEY (service
SELECT customer_details FROM customers WHERE customer_details LIKE '%Kutch%' ESCAPE '/' <MID>_ID INTEGER NOT NULL ,  service_id INTEGER ,  customers_and_services_details CHAR(15) NOT NULL ,  PRIMARY KEY (customers_and_services_id) ,  FOREIGN KEY (service_id) REFERENCES services (service_id) ,  FOREIGN KEY (customer_id) REFERENCES customers (customer_id) ) CREATE TABLE customer_interactions ( customer_interaction_id INTEGER NOT NULL ,  channel_id INTEGER ,  customer_id INTEGER ,  service_id INTEGER ,  status_code CHAR(15) ,  services_and_channels_details VARCHAR(255) ,  PRIMARY KEY (customer_interaction_id) ,  FOREIGN KEY (service
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id JOIN customers AS T3 ON T2.customer_id  =  T3.customer_id JOIN customer_interactions AS T4 ON T3.customer_id  =  T4.customer_id WHERE T3.customer_details  =  'Hardy Kutch' OR T4.Status_Code  =  'good' UNION SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id JOIN analytical_layer AS T3 ON T2.customers_and_services_id  =  T3.customers_and_services_id WHERE T3.pattern_recognition  =  'good' UNION SELECT
SELECT T3.Service_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id JOIN services AS T3 ON T2.service_id  =  T3.service_id WHERE T1.customer_details  =  'Hardy Kutch' OR T3.rating  =  'good' UNION SELECT T3.Service_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id JOIN services AS T3 ON T2.service_id  =  T3.service_id WHERE T3.rating  =  'good' INTERSECT SELECT T3.Service_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id JOIN services AS
SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id JOIN customer_interactions AS t3 ON t2.customers_and_services_id  =  t3.customers_and_services_id WHERE t2.customer_id  =  (SELECT customer_id FROM customers WHERE customer_details  =  'Hardy Kutch') AND t3.Status_Code  =  'bad''     ,   'SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id JOIN customer_interactions AS t3 ON t2.customers_and_services_id  =  t3.customers_and_services_id WHERE t2.customer_id
SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id JOIN customer_interactions AS t3 ON t2.customers_and_services_id  =  t3.customers_and_services_id WHERE t3.Status_Code  =  'bad' AND t2.customer_id  =  (SELECT customer_id FROM customers WHERE customer_details  =  'Hardy Kutch') <MID>_ID INTEGER NOT NULL , channel_details VARCHAR(255) NOT NULL , PRIMARY KEY (channel_ID) ) CREATE TABLE customer_interactions ( customer_interaction_ID INTEGER NOT NULL , channel_ID INTEGER , customer_ID INTEGER , service_ID INTEGER , status_code CHAR(15) , services_and_channels_
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id JOIN customer_interactions AS T3 ON T2.customers_and_services_id  =  T3.customers_and_services_id JOIN channels AS T4 ON T3.channel_id  =  T4.channel_id WHERE T4.channel_details  =  '15 ij''
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id JOIN customer_interactions AS T3 ON T2.customers_and_services_id  =  T3.customers_and_services_id JOIN channels AS T4 ON T3.channel_id  =  T4.channel_id WHERE T4.channel_details  =  '15 ij' UNION SELECT T1.service_details FROM services AS T1 JOIN customer_interactions AS T2 ON T1.service_id  =  T2.service_id JOIN channels AS T3 ON T2.channel_id  =  T3.channel_id WHERE T3.channel_details  =  '15 ij' UNION SELECT T1.service_details FROM services AS T1 JOIN customer_interactions
SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id JOIN customer_interactions AS T3 ON T2.service_id  =  T3.service_id WHERE T3.Status_Code  =  'Stuck' AND T3.Services_and_Channels_Details  =  'bad' UNION SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id JOIN customer_interactions AS T3 ON T2.service_id  =  T3.service_id WHERE T3.Status_Code  =  'Stuck' AND T3.Services_and_Channels_Details  =  'bad' UNION SELECT T1.customer_details FROM customers AS T1
SELECT T1.customer_details FROM customers AS T1 JOIN customer_interactions AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.status_code  =  'Stuck' AND T2.services_and_channels_details  =  'bad' UNION SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id JOIN services AS T3 ON T2.service_id  =  T3.service_id WHERE T3.service_details  =  'bad' UNION SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id JOIN channels AS T3 ON T2.channel_id  =  T3.channel_id WHERE
SELECT count(*) FROM customer_interactions WHERE status_code  =  'Successful' GROUP BY status_code HAVING count(*)  >  10000 UNION SELECT count(*) FROM customer_interactions WHERE status_code  =  'Successful' GROUP BY status_code HAVING count(*)  <=  10000 <MID>_details TYPE CHAR(255) NOT NULL ,  service_id INTEGER NOT NULL ,  PRIMARY KEY (service_id) ) CREATE TABLE customers_and_services ( customers_and_services_id INTEGER NOT NULL ,  customers_and_services_details TYPE CHAR(15) NOT NULL ,  customer_id INTEGER ,  service_id INTEGER ,  PRIMARY KEY (customers_and_services_id) ,  FOREIGN KEY (service_id) REFERENCES services (service_id) ,
SELECT count(*) FROM integration_platform WHERE Services_and_Channels_Details  =  'Success' <MID>_details TYPE CHAR(15) NOT NULL ,  channel_id INTEGER NOT NULL ,  customer_id INTEGER NOT NULL ,  status_code CHAR(15) NOT NULL ,  PRIMARY KEY (customer_interaction_id) ,  FOREIGN KEY (service_id) REFERENCES services (service_id) ,  FOREIGN KEY (channel_id) REFERENCES channels (channel_id) ,  FOREIGN KEY (customer_id) REFERENCES customers (customer_id) ) CREATE TABLE analytical_layer ( analytical_id INTEGER NOT NULL ,  customers_and_services_id VARCHAR(40) NOT NULL ,  pattern_recognition VARCHAR(255) NOT NULL ,  analytical_layer_type_
SELECT T1.customer_details FROM customers AS T1 JOIN customer_interactions AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.status_code  =  'Failed' AND T2.channel_id IN (SELECT T3.channel_id FROM channels AS T3 JOIN integration_platform AS T4 ON T3.channel_id  =  T4.channel_id WHERE T4.integration_platform_details  =  'Platform1')'     , ['SELECT T1.customer_details FROM customers AS T1 JOIN customer_interactions AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.status_code  =  'Failed' AND T2.channel_id IN (SELECT T3.channel_id FROM channels AS T3 JOIN integration_platform AS T4 ON T3.channel_id  =
SELECT T1.customer_details FROM customers AS T1 JOIN customer_interactions AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.status_code  =  'Fail' AND T2.services_and_channels_details  =  'Integration Platform''
SELECT service_details FROM services EXCEPT SELECT T1.service_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.service_id != -1'         ,'ANALYTICAL_LAYER']['status'] = 'correct'         ,'ANALYTICAL_LAYER']['detail'] = None     ,'INTEGRATION_PLATFORM']['status'] = 'incorrect'         ,'INTEGRATION_PLATFORM']['detail'] = 'The correct answer is ANALYTICAL_LAYER'     ,'CUSTOMERS_AND_SERVICES']['status'] = 'incorrect'         ,'CUSTOMERS_AND_SERVICES']['detail'] = 'The correct answer is ANALYTICAL_
SELECT service_details FROM services EXCEPT SELECT T1.service_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id JOIN services AS T3 ON T2.service_id  =  T3.service_id WHERE T3.service_details  =  T1.customer_details'         , 'SELECT service_details FROM services EXCEPT SELECT T1.service_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id JOIN services AS T3 ON T2.service_id  =  T3.service_id WHERE T3.service_details  =  T1.customer_details'     , ['SELECT service_details FROM services EXCEPT SELECT T1.service_details FROM customers AS T1 JOIN customers_
SELECT T1.Analytical_Layer_Type_Code ,  COUNT(*) FROM Analytical_Layer AS T1 JOIN Customers_and_Services AS T2 ON T1.Customers_and_Services_ID  =  T2.Customers_and_Services_ID GROUP BY T1.Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1'         ,   'task_code': 'T3'         ,   'task_name': 'Find the top 3 most frequently used layer types.'     ,   'subtasks': [{'subtask_name': 'Task 1', 'subtask_code': 'T1'}, {'subtask_name': 'Task 2', 'subtask_code': 'T2'}, {'subtask_name': 'Task 3', 'subtask_code': 'T3'}]     ,   'parent_task
SELECT Analytical_Layer_Type_Code ,  COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code'         ,   'SELECT Analytical_Layer_Type_Code ,  COUNT(*) FROM Analytical_LAYER GROUP BY Analytical_Layer_Type_Code'     ,   'SELECT Analytical_Layer_Type_Code ,  COUNT(*) FROM Analytical_LAYER GROUP BY Analytical_Layer_Type_Code'     ,   'SELECT Analytical_Layer_Type_Code ,  COUNT(*) FROM Analytical_LAYER GROUP BY Analytical_Layer_Type_Code'      ,   'SELECT Analytical_Layer_Type_Code ,  COUNT(*) FROM Analytical_LAYER GROUP BY Analytical_Layer_Type_Code'     ,   'SELECT Analytical_Layer_Type_Code ,
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id WHERE T2.customers_and_services_details  =  'unsatisfied' UNION SELECT T1.service_details FROM services AS T1 JOIN customer_interactions AS T2 ON T1.service_id  =  T2.service_id WHERE T2.status_code  =  'unsatisfied' UNION SELECT T1.service_details FROM services AS T1 JOIN integration_platform AS T2 ON T1.service_id  =  T2.service_id WHERE T2.Status_Code  =  'unsatisfied' UNION SELECT T1.service_details FROM services AS T1 JOIN analytical_layer AS T2 ON T1.service_id  =  T2.service_id WHERE T2
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id WHERE T2.customers_and_services_details LIKE '%unsatisfied%' <MID>_interaction_id] FOREIGN KEY ([channel_id]) REFERENCES channels ([channel_id])     FROM customers_and_services AS T3 JOIN services AS T1 ON T3.service_id  =  T1.service_id WHERE T3.customers_and_services_details LIKE '%unsatisfied%' SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id WHERE T2.customers_and_services_details LIKE '%unsatisfied%' UNION SELECT T1.service_details FROM services
SELECT count(*) FROM Vehicles'         , 'SELECT count(*) FROM Vehicles'         , ['SELECT count(*) FROM Vehicles']     ,  'SELECT count(*) FROM Renting_history'         , 'SELECT count(*) FROM Renting_history'         , ['SELECT count(*) FROM Renting_history']     ,  'SELECT count(*) FROM Customers'         , 'SELECT count(*) FROM Customers'         , ['SELECT count(*) FROM Customers']     ,  'SELECT count(*) FROM Discount'         , 'SELECT count(*) FROM Discount'         , ['SELECT count(*) FROM Discount']]     ,   [   'SELECT sum(total_hours) FROM Renting_history'         , 'SELECT sum(total_hours) FROM Renting_history'         , ['SELECT sum(total_hours) FROM R
SELECT count(*) FROM Vehicles'         , 'SELECT count(*) FROM Vehicles'         , 'COUNT(id) FROM Vehicles'     , 'SELECT count(*) FROM Renting_history'     , 'SELECT count(*) FROM Customers'     , 'SELECT count(*) FROM Discount'     , 'SELECT sum(total_hours) FROM Renting_history'     , 'SELECT avg(total_hours) FROM Renting_history'     , 'SELECT min(total_hours) FROM Renting_history'     , 'SELECT max(total_hours) FROM Renting_history'     , 'SELECT count(DISTINCT customer_id) FROM Renting_history'     , 'SELECT count(DISTINCT discount_id) FROM Renting_history'     , 'SELECT count(DISTINCT vehicles
SELECT name FROM vehicles ORDER BY Model_year DESC'         , 'SELECT name FROM vehicles ORDER BY Model_year DESC'         , ['SELECT name FROM vehicles ORDER BY Model_year DESC']     ,   'SELECT name FROM vehicles ORDER BY Model_year ASC'         , 'SELECT name FROM vehicles ORDER BY Model_year ASC'         , ['SELECT name FROM vehicles ORDER BY Model_year ASC']      ,   'SELECT name FROM vehicles ORDER BY combined_fuel_economy_rate DESC'         , 'SELECT name FROM vehicles ORDER BY combined_fuel_economy_rate DESC'         , ['SELECT name FROM vehicles ORDER BY combined_fuel_economy_rate DESC']      ,   'SELECT name FROM vehicles ORDER BY city_fuel_economy_rate DESC'         , 'SELECT name FROM vehicles ORDER BY city_fuel_economy_rate DESC'
SELECT name FROM Vehicles ORDER BY Model_year DESC'         ,'SELECT name FROM Vehicles ORDER BY Model_year DESC'         ,'SELECT name FROM Vehicles ORDER BY Model_year DESC'     ,'SELECT name FROM Vehicles ORDER BY Model_year DESC'     ,'SELECT name FROM Vehicles ORDER BY Model_year DESC'     ,'SELECT name FROM Vehicles ORDER BY Model_year DESC'     ,'SELECT name FROM Vehicles ORDER BY Model_year DESC'     ,'SELECT name FROM Vehicles ORDER BY Model_year DESC'     ,'SELECT name FROM Vehicles ORDER BY Model_year DESC'     ,'SELECT name FROM Vehicles ORDER BY Model_year DESC'     ,'SELECT name FROM Vehicles ORDER BY Model_year DESC'     ,'SELECT name FROM Vehicles ORDER BY Model_year DESC'
SELECT DISTINCT Type_of_powertrain FROM Vehicles'         , 'SELECT DISTINCT TYPE_OF_POWERTRAIN FROM Vehicles'     ,   'SELECT count(*) FROM Vehicles'         , 'SELECT sum(Combined_fuel_economy_rate) FROM Vehicles'         , 'SELECT avg(Combined_fuel_economy_rate) FROM Vehicles'         , 'SELECT min(Combined_fuel_economy_rate) FROM Vehicles'         , 'SELECT max(Combined_fuel_economy_rate) FROM Vehicles'     ,   'SELECT count(*) FROM Customers'         , 'SELECT count(*) FROM Discount'         , 'SELECT count(*) FROM Renting_history'     ,   'SELECT count(*) FROM Ve
SELECT DISTINCT Type_of_powertrain FROM Vehicles ORDER BY TYPE_OF_POWERTRAIN ASC NULLS LAST'         , 'SELECT DISTINCT TYPE_OF_POWERTRAIN FROM Vehicles ORDER BY TYPE_OF_POWERTRAIN ASC NULLS LAST'         , ['Combined']     ,   'SELECT count(*) FROM Vehicles WHERE TYPE_of_powertrain  =  'Combined'']     ,   ['SELECT count(*) FROM Vehicles WHERE TYPE_of_powertrain  =  'Electric'']     ,   ['SELECT count(*) FROM Vehicles WHERE TYPE_of_powertrain  =  'Gasoline'']     ,   ['SELECT count(*) FROM Vehicles WHERE TYPE_of_powertrain  =  'Diesel'
SELECT name ,  TYPE_of_powertrain ,  annual_fuel_cost FROM Vehicles WHERE Model_year  =  2013 OR Model_year  =  2014'         , 'SELECT name ,  TYPE_of_powertrain ,  annual_fuel_cost FROM Vehicles WHERE Model_year  =  2013 OR Model_year  =  2014'     , ['SELECT name ,  TYPE_of_powertrain ,  annual_fuel_cost FROM Vehicles WHERE Model_year  =  2013 OR Model_year  =  2014']]
SELECT name ,  Type_of_powertrain ,  cost_per_25_miles FROM Vehicles WHERE Model_year IN (2013 ,  2014) ORDER BY name ASC, Type_of_powertrain ASC, cost_per_25_miles ASC;'         , 'SELECT name ,  Type_of_powertrain ,  cost_per_25_miles FROM Vehicles WHERE Model_year IN (2013 ,  2014) ORDER BY name ASC, Type_of_powertrain ASC, cost_per_25_miles ASC'     , ['SELECT name ,  Type_of_powertrain ,  cost_per_25_miles FROM Vehicles WHERE Model_year IN (2013 ,  2014) ORDER BY name ASC, Type_of_powertrain
SELECT TYPE_OF_POWERTRAIN FROM Vehicles WHERE Model_year  =  2014 INTERSECT SELECT TYPE_OF_POWERTRAIN FROM Vehicles WHERE Model_year  =  2013 <MID>.com/problems/show-types-of-powertrain-with-vehicles-both-from-2014-and-2013/description/
SELECT TYPE_OF_powertrain FROM Vehicles WHERE Model_year BETWEEN 2013 AND 2014 UNION SELECT TYPE_OF_powertrain FROM Vehicles WHERE Model_year BETWEEN 2013 AND 2014'         , 'SELECT TYPE_OF_powertrain FROM Vehicles WHERE Model_year BETWEEN 2013 AND 2014 INTERSECT SELECT TYPE_OF_powertrain FROM Vehicles WHERE Model_year BETWEEN 2013 AND 2014'     ,   'SELECT name FROM discount EXCEPT SELECT name FROM customers'     ,   'SELECT count(*) FROM renting_history'     ,   'SELECT sum(total_hours) FROM renting_history'     ,   'SELECT avg(total
SELECT Type_of_powertrain ,  COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain'         , 'SELECT Type_of_powertrain ,  COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain'     , 'SELECT TYPE_OF_POWERTRAIN FROM VEHICLES GROUP BY TYPE_OF_POWERTRAIN'     , ['Combined fuel economy rate', 'City fuel economy rate', 'Highway fuel economy rate']     , ['Combined fuel economy rate', 'City fuel economy rate', 'Highway fuel economy rate']     , ['Cost per 25 miles', 'Annual fuel cost']     , ['Cost per 25 miles', 'Annual fuel cost']     , ['Notes']     , ['Notes']          , ['SELECT count(*) FROM rent
SELECT TYPE_OF_POWERTRAIN ,  count(*) FROM Vehicles GROUP BY TYPE_OF_POWERTRAIN ORDER BY count(*) DESC LIMIT 1'         , 'SELECT TYPE_OF_POWERTRAIN ,  count(*) FROM Vehicles GROUP BY TYPE_OF_POWERTRAIN ORDER BY count(*) DESC LIMIT 1'     , 'SELECT TYPE_OF_POWERTRAIN ,  count(*) FROM Vehicles GROUP BY TYPE_OF_POWERTRAIN ORDER BY count(*) DESC LIMIT 1'     , 'SELECT TYPE_OF_POWERTRAIN ,  count(*) FROM Vehicles GROUP BY TYPE_OF_POWERTRAIN ORDER BY count(*) DESC LIMIT 1'     , 'SELECT TYPE_OF_POWERTRAIN ,  count(*) FROM Vehicles GROUP BY TYPE_
SELECT TYPE_of_powertrain FROM Vehicles GROUP BY TYPE_of_powertrain ORDER BY count(*) DESC LIMIT 1'         , 'Tesla' ]      , [ 'SELECT name FROM Discount' ,  'SELECT name FROM Customers' ,  'SELECT name FROM Vehicles' ,  'SELECT notes FROM Vehicles' ,  'SELECT total_hours FROM Renting_history' ,  'SELECT TYPE_of_powertrain FROM Vehicles GROUP BY TYPE_of_powertrain ORDER BY count(*) DESC LIMIT 1' ,  'SELECT name FROM Discount' ]     , ['SELECT name FROM Customers' ,  'SELECT name FROM Vehicles' ,  'SELECT notes FROM Vehicles' ,  'SELECT total_hours FROM Renting_history' ,  'SELECT name FROM Discount' ,  'SELECT age
SELECT TYPE_of_powertrain FROM Vehicles GROUP BY TYPE_of_powertrain ORDER BY count(*) DESC LIMIT 1'         , 'TURBO' ]      , [ 'SELECT name FROM Discount WHERE membership_credit  =  3' ]      , [ 'SELECT name FROM Customers WHERE age BETWEEN 60 AND 70' ]      , [ 'SELECT name FROM Vehicles WHERE model_year BETWEEN 2013 AND 2015' ]      , [ 'SELECT name FROM Vehicles WHERE combined_fuel_economy_rate  >  40' ]      , [ 'SELECT name FROM Vehicles WHERE cost_per_25_miles  <  8' ]      , [ 'SELECT name FROM Vehicles WHERE notes LIKE '%service%'' ]      , [ 'SELECT
SELECT avg(annual_fuel_cost) FROM vehicles'         , 'SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) FROM vehicles'     , 'SELECT sum(annual_fuel_cost) FROM vehicles'     , 'SELECT count(*) FROM vehicles'     , 'SELECT avg(combined_fuel_economy_rate) FROM vehicles'     , 'SELECT min(combined_fuel_economy_rate) ,  max(combined_fuel_economy_rate) FROM vehicles'     , 'SELECT sum(combined_fuel_economy_rate) FROM vehicles'     , 'SELECT count(*) FROM vehicles'     , 'SELECT avg(city_fuel_economy_rate) FROM vehicles'     , 'SELECT min(city_fuel_
SELECT avg(annual_fuel_cost) FROM vehicles'     , 'SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles'     , 'SELECT count(*) FROM vehicles'     , 'SELECT sum(annual_fuel_cost) FROM vehicles'     , 'SELECT id FROM vehicles ORDER BY annual_fuel_cost DESC LIMIT 1'     , 'SELECT name FROM vehicles ORDER BY annual_fuel_cost ASC LIMIT 1'     , 'SELECT name FROM vehicles ORDER BY annual_fuel_cost DESC LIMIT 1'     , 'SELECT name FROM vehicles ORDER BY annual_fuel_cost ASC LIMIT 1'     , 'SELECT name FROM vehicles WHERE annual_fuel_cost  =  (SELECT min(
SELECT name ,  model_year FROM Vehicles WHERE City_fuel_economy_rate  <= Highway_fuel_economy_rate'         , 'SELECT name ,  model_year FROM Vehicles WHERE City_fuel_economy_rate  <= Highway_fuel_economy_rate'     , ['SELECT name ,  model_year FROM Vehicles WHERE City_fuel_economy_rate  <= Highway_fuel_economy_rate']     , ['SELECT name ,  model_year FROM Vehicles WHERE City_fuel_economy_rate  > Highway_fuel_economy_rate']     , ['SELECT name ,  model_year FROM Vehicles WHERE City_fuel_economy_rate  < Highway_fuel_economy_rate']
SELECT name ,  model_year FROM vehicles WHERE City_fuel_economy_rate  <= Highway_fuel_economy_rate;[No SQL]Discounts are the products that cost more than $10. Return the names of all discounts that cost more than $10.[Python]Discounts are the products that cost more than $10. Return the names of all discounts that cost more than $10. <MID>_credit FROM Discount ORDER BY membership_credit DESC LIMIT 1;[No SQL]The oldest customer is the customer that has the earliest registration date. Return the name of the oldest customer.[Python]The oldest customer is the customer that has the earliest registration date. Return the name of the oldest customer. SELECT name FROM Customers ORDER BY Registration_date ASC LIMIT 1;[No SQL]The newest customer is the customer that has the latest registration date. Return
SELECT TYPE_of_powertrain ,  avg(Annual_fuel_cost) FROM Vehicles GROUP BY TYPE_of_powertrain HAVING count(*)  >=  2] SELECT TYPE_of_powertrain ,  avg(Annual_fuel_cost) FROM Vehicles GROUP BY TYPE_of_powertrain HAVING count(*)  >=  2] SELECT TYPE_of_powertrain ,  avg(Annual_fuel_cost) FROM Vehicles GROUP BY TYPE_of_powertrain HAVING count(*)  >=  2] SELECT TYPE_of_powertrain ,  avg(Annual_fuel_cost) FROM Vehicles GROUP BY TYPE_of_powertrain HAVING count(*)  >=  2] SELECT TYPE_of_powertrain ,  av
SELECT TYPE_of_powertrain ,  avg(Annual_fuel_cost) FROM Vehicles GROUP BY TYPE_of_powertrain HAVING count(*)  >=  2'         , 'SELECT TYPE_of_powertrain ,  avg(Annual_fuel_cost) FROM Vehicles GROUP BY TYPE_of_powertrain HAVING count(*)  >=  2'     , ['SELECT TYPE_of_powertrain ,  avg(Annual_fuel_cost) FROM Vehicles GROUP BY TYPE_of_powertrain HAVING count(*)  >=  2']]          , [31 ,  'SELECT name FROM Customers WHERE age BETWEEN 16 AND 20' , 'SELECT name FROM Customers WHERE age BETWEEN 16 AND 20
SELECT name ,  age ,  membership_credit FROM Customers'
SELECT name ,  age ,  membership_credit FROM Customers'         , 'SELECT name ,  age ,  membership_credit FROM Customers'         , ['name' , 'age' , 'membership_credit']     ,   'SELECT name ,  age ,  membership_credit FROM Customers'         , ['name' , 'age' , 'membership_credit']      ,   'SELECT name ,  age ,  membership_credit FROM Customers'         , ['name' , 'age' , 'membership_credit']]
SELECT T1.name ,  T1.age FROM Customers AS T1 JOIN Discount AS T2 ON T1.id  =  T2.customer_id GROUP BY T1.id ORDER BY max(T2.membership_credit) DESC LIMIT 1'         , 'SELECT name ,  age FROM Customers GROUP BY id ORDER BY max(membership_credit) DESC LIMIT 1'     , 'SELECT name ,  age FROM Customers GROUP BY id ORDER BY max(membership_credit) DESC LIMIT 1'     , 'SELECT name ,  age FROM Customers GROUP BY id ORDER BY max(membership_credit) DESC LIMIT 1'     , 'SELECT name ,  age FROM Customers GROUP BY id ORDER BY max(membership_credit) DESC LIMIT 1'     , 'SELECT name ,  age FROM Customers GROUP BY
SELECT name ,  age FROM Customers ORDER BY membership_credit DESC LIMIT 1'         , 'SELECT name ,  age FROM Customers ORDER BY membership_credit DESC LIMIT 1'     , 'SELECT name ,  age FROM Customers ORDER BY membership_credit DESC LIMIT 1'     , 'SELECT name ,  age FROM Customers ORDER BY membership_credit DESC LIMIT 1'     , 'SELECT name ,  age FROM Customers ORDER BY membership_credit DESC LIMIT 1'     , 'SELECT name ,  age FROM Customers ORDER BY membership_credit DESC LIMIT 1'     , 'SELECT name ,  age FROM Customers ORDER BY membership_credit DESC LIMIT 1'     , 'SELECT name ,  age FROM Customers ORDER BY membership_credit DESC LIMIT 1'     , 'SELECT name ,  age FROM Customers ORDER BY membership_credit DESC LIMIT
SELECT avg(age) FROM Customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM Customers) <MID>_credit  >  (SELECT avg(membership_credit) FROM Customers) GROUP BY name HAVING count(*)  >=  250'     , 'SELECT name FROM Customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM Customers) GROUP BY name ORDER BY count(*) DESC LIMIT 1'     , 'SELECT name FROM Customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM Customers) GROUP BY name ORDER BY count(*) DESC LIMIT 1'     , 'SELECT name FROM Customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM Customers) GROUP BY name
SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers) <MID>.com/problems/average-age-of-members/submissions/701468391/code/python3     FROM SQL DATABASES SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)     GROUP BY membership_credit HAVING count(*)  >=  250 ORDER BY avg(age) DESC LIMIT 1     ORDER BY avg(age) DESC LIMIT 1'''     LIMIT = 1
SELECT * FROM Discount'         , 'SELECT * FROM DISCOUNT'         , ['SELECT * FROM DISCOUNT']     ,   'SELECT name FROM DISCOUNT'         , ['SELECT name FROM DISCOUNT']     ,   'SELECT membership_credit FROM DISCOUNT'         , ['SELECT membership_credit FROM DISCOUNT']      ,   'SELECT id FROM DISCOUNT'         , ['SELECT id FROM DISCOUNT']     ,   'SELECT count(*) FROM DISCOUNT'         , ['SELECT count(*) FROM DISCOUNT']      ,   'SELECT sum(membership_credit) FROM DISCOUNT'         , ['SELECT sum(membership_credit) FROM DISCOUNT']     ,   'SELECT avg(membership_credit) FROM DISCOUNT'         , ['SELECT avg(membership_credit) FROM DISCOUNT']     ,   'SELECT
SELECT * FROM Discount'         , 'SELECT * FROM DISCOUNT'     , 'SELECT name FROM DISCOUNT'     , 'SELECT membership_credit FROM DISCOUNT'     , 'SELECT id ,  name FROM DISCOUNT'     , 'SELECT id ,  name FROM DISCOUNT WHERE membership_credit  =  1'     , 'SELECT id ,  name FROM DISCOUNT WHERE membership_credit  =  4'     , 'SELECT id ,  name FROM DISCOUNT WHERE membership_credit  =  7'          , 'SELECT id ,  name FROM DISCOUNT ORDER BY id ASC'     , 'SELECT id ,  name FROM DISCOUNT ORDER BY id DESC'     , 'SELECT id ,  name FROM DISCOUNT ORDER BY name ASC'     , 'SELECT id ,  name FROM DISCOUNT ORDER BY name DESC'     , 'SELECT id ,  name FROM DIS
SELECT T1.name ,  sum(T2.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id'         , 'SELECT T1.name ,  sum(T2.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id'     , 'SELECT T1.name ,  sum(T2.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id'     , 'SELECT T1.name ,  sum(T2.total_hours) FROM Veh
SELECT T1.name ,  sum(T2.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id'         , 'SELECT T1.name ,  sum(T2.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id'     , 'SELECT T1.name ,  sum(T2.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id'     , 'SELECT T1.name ,  sum(T2.total_hours) FROM Veh
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history) <MID>.id = T1.discount_id JOIN Customers AS T2 ON T2.id  =  T1.customer_id JOIN Vehicles AS T3 ON T3.id  =  T1.vehicles_id'     ,'SELECT T2.name FROM Renting_history AS T1 JOIN Discount AS T2 ON T1.discount_id  =  T2.id JOIN Customers AS T3 ON T1.customer_id  =  T3.id'     ,'SELECT count(*) FROM Renting_history'     ,'SELECT sum(total_hours) FROM Renting_history'     ,'SELECT avg(total_hours) FROM Renting_history'     ,'SELECT T3.name FROM
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history) <MID>_credit TYPE discount.membership_credit JOIN renting_history ON discount.id  =  renting_history.discount_id JOIN customers ON renting_history.customer_id  =  customers.id JOIN vehicles ON renting_history.vehicles_id  =  vehicles.id SELECT T1.name FROM vehicles AS T1 JOIN renting_history AS T2 ON T1.id  =  T2.vehicles_id EXCEPT SELECT T3.name FROM vehicles AS T3 JOIN renting_history AS T4 ON T3.id  =  T4.vehicles_id WHERE T4.return_date  >  '2016-01-28' GROUP BY T3.id HAVING count(*)
SELECT T1.name FROM Customers AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.customer_id GROUP BY T1.id HAVING count(*)  >=  2'         , 'SELECT T1.name FROM Customers AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.customer_id GROUP BY T1.id HAVING count(*)  >=  2'     , 'SELECT T1.name FROM Customers AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.customer_id GROUP BY T1.id HAVING count(*)  >=  2'     , 'SELECT T1.name FROM Customers AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.customer_id GROUP BY T1
SELECT T1.name FROM customers AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.customer_id GROUP BY T1.id HAVING count(*)  >=  2'         , 'SELECT T1.name FROM customers AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.customer_id GROUP BY T1.id HAVING count(*)  >=  2'     , 'SELECT T1.name FROM customers AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.customer_id GROUP BY T1.id HAVING count(*)  >=  2'         , 'SELECT T1.name FROM customers AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.customer_id GROUP BY T1.id HAV
SELECT T1.name ,  T1.model_year FROM vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.name ,  T1.model_year FROM vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name FROM vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name FROM vehicles AS T1 JOIN Renting_history AS T2 ON T1
SELECT T1.name ,  T1.model_year FROM vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.name ,  T1.model_year FROM vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name ,  T1.model_year FROM vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name ,  T1.model_year FROM
SELECT T1.name FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id ORDER BY total_hours DESC'         , 'SELECT T1.name FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id ORDER BY total_hours DESC'     ,   'SELECT T1.name FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id ORDER BY total_hours DESC LIMIT 1'     ,   'SELECT T1.name FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id ORDER BY total_hours DESC LIMIT 1 O
SELECT T1.name FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T2.vehicles_id ORDER BY sum(T2.total_hours) DESC'         , 'Vehicle_Names': ['Dodge Charger', 'Toyota Corolla', 'Honda Civic'], 'Total_Hours': [720, 540, 360]}]     FROM DB: SELECT T1.name FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T2.vehicles_id ORDER BY sum(T2.total_hours) DESC LIMIT 3'     ORDER BY sum(T2.total_h
SELECT T1.name FROM Discount AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.name FROM Discount AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name FROM Discount AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name FROM Discount AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T
SELECT T1.name FROM discount AS T1 JOIN renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.name FROM discount AS T1 JOIN renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name FROM discount AS T1 JOIN renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name FROM discount AS T1 JOIN renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T1.id ORDER
SELECT T2.name ,  T2.Type_of_powertrain FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicles_id  =  T2.id WHERE T1.total_hours  >  30'         , 'SELECT T2.name ,  T2.Type_of_powertrain FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicles_id  =  T2.id WHERE T1.total_hours  >  30'     , 'SELECT T2.name ,  T2.Type_of_powertrain FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicles_id  =  T2.id WHERE T1.total_hours  >  30'     ,
SELECT T2.name ,  T2.Type_of_powertrain FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicles_id  =  T2.id WHERE T1.total_hours  >  30'         , 'SELECT T2.name ,  T2.Type_of_powertrain FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicles_id  =  T2.id WHERE T1.total_hours  >  30'     , ['SELECT T2.name ,  T2.Type_of_powertrain FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicles_id  =  T2.id WHERE T1.total_hours  >  30']     ,
SELECT avg(city_fuel_economy_rate) ,  avg(highway_fuel_economy_rate) FROM Vehicles WHERE TYPE_of_powertrain  =  'Car' GROUP BY TYPE_of_powertrain'', ''Truck'' UNION SELECT avg(city_fuel_economy_rate) ,  avg(highway_fuel_economy_rate) FROM Vehicles WHERE TYPE_of_powertrain  =  'Semi' GROUP BY TYPE_of_powertrain'', ''Motorcycle'' UNION SELECT avg(city_fuel_economy_rate) ,  avg(highway_fuel_economy_rate) FROM Vehicles WHERE TYPE_of_powertrain  =  'Bus' GROUP BY TYPE_of_powertrain
SELECT avg(city_fuel_economy_rate) ,  avg(highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain ORDER BY TYPE_OF_POWERTRAIN ASC'         , 'SELECT avg(city_fuel_economy_rate) ,  avg(highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain ORDER BY TYPE_OF_POWERTRAIN ASC'         , ['SELECT avg(city_fuel_economy_rate) ,  avg(highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain ORDER BY TYPE_OF_POWERTRAIN ASC']     ,  3     ,  'SELECT count(*) FROM R
SELECT avg(amount_of_loan) FROM Student_Loans <MID>_id`, `date_of_loan`, `amount_of_loan`, `other_details` FROM Student_Loans;'     ,'SELECT count(*) FROM Student_Loans;'     ,'SELECT sum(amount_of_loan) FROM Student_Loans;'     ,'SELECT avg(amount_of_loan) FROM Student_Loans;'     ,'SELECT max(amount_of_loan) FROM Student_Loans;'     ,'SELECT min(amount_of_loan) FROM Student_Loans;'     ,'SELECT student_id FROM Student_Loans GROUP BY student_id ORDER BY count(*) DESC LIMIT 1;'     ,'SELECT student_id FROM Student_Loans GROUP BY student_id
SELECT avg(amount_of_loan) FROM Student_Loans <MID>_id`, `date_of_loan`, `amount_of_loan`, `other_details` FROM Student_Loans GROUP BY student_id ORDER BY amount_of_loan DESC LIMIT 1'     ,'SELECT student_id ,  count(*) FROM Student_Loans GROUP BY student_id ORDER BY count(*) DESC LIMIT 1'     ,'SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id ORDER BY sum(amount_of_loan) DESC LIMIT 1'     ,'SELECT student_id ,  min(amount_of_loan) FROM Student_Loans GROUP BY student_id ORDER BY min(amount_of_loan) ASC LIMIT 1'     ,'SELECT student_id ,  max(amount_of
SELECT bio_data ,  student_id FROM STUDENTS WHERE student_id IN ( SELECT student_id FROM CLASSES GROUP BY student_id HAVING count(*)  >=  2 ) UNION SELECT bio_data ,  student_id FROM STUDENTS WHERE student_id IN ( SELECT student_id FROM Detention GROUP BY student_id HAVING count(*)  <  2 )'         ,'SELECT bio_data ,  student_id FROM STUDENTS WHERE student_id IN ( SELECT student_id FROM CLASSES GROUP BY student_id HAVING count(*)  >=  2 ) UNION SELECT bio_data ,  student_id FROM STUDENTS WHERE student_id IN ( SELECT student_id FROM Detention GROUP BY student_id HAVING count(*)  <  2 )'     ,'SELECT bio_data ,  student_id FROM STUDENTS WHERE student
SELECT bio_data ,  student_id FROM STUDENTS WHERE student_id IN ( SELECT T1.student_id FROM CLASSES AS T1 JOIN CLASSES AS T2 ON T1.student_id  =  T2.student_id WHERE T1.class_id != T2.class_id ) OR student_id IN ( SELECT student_id FROM Detention GROUP BY student_id HAVING count(*)  <  2 )'         , 'SELECT bio_data ,  student_id FROM STUDENTS WHERE student_id IN ( SELECT T1.student_id FROM CLASSES AS T1 JOIN CLASSES AS T2 ON T1.student_id  =  T2.student_id WHERE T1.class_id != T2.class_id ) OR student_id IN ( SELECT student_id FROM Detention GROUP BY student_id H
SELECT T2.teacher_details FROM CLASS AS T1 JOIN TEACHERS AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.class_details LIKE '%data%' EXCEPT SELECT T2.teacher_details FROM CLASS AS T1 JOIN TEACHERS AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.class_details LIKE 'net%' <MID>Teacher ID', 'Teacher Details')]     FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  >  3 ORDER BY sum(T1.class_details LIKE '%data%') - sum(T1.class_details
SELECT teacher_details FROM TEACHERS WHERE teacher_id IN (SELECT teacher_id FROM CLASSES WHERE class_details LIKE '%data%' EXCEPT SELECT teacher_id FROM CLASSES WHERE class_details LIKE 'net%') <MID>_id IN (SELECT student_id FROM CLASSES WHERE teacher_id  =  {teacher_id} INTERSECT SELECT student_id FROM CLASSES WHERE class_details LIKE '%{sub_string}%') GROUP BY student_id HAVING count(*)  =  (SELECT count(*) FROM CLASSES WHERE teacher_id  =  {teacher_id} AND class_details LIKE '%{sub_string}%')'     ,'SELECT teacher_details FROM TEACHERS WHERE teacher_id IN (SELECT teacher_id FROM CLASSES WHERE class_details LIKE '%{sub_string}%' EXCEPT SELECT teacher_id
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans) <MID>_id`, `date_of_loan`, `amount_of_loan`, `other_details` FROM Student_Loans WHERE student_id NOT IN (SELECT student_id FROM Detention) ORDER BY date_of_loan DESC LIMIT 10'
SELECT bio_data FROM STUDENTS WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans) <MID>_id`, `date_of_loan`, `amount_of_loan`, `other_details` FROM Student_Loans WHERE student_id  =  '1' UNION SELECT date_of_loan FROM Student_Loans WHERE student_id  =  '1' ORDER BY date_of_loan DESC LIMIT 1; SELECT amount_of_loan FROM Student_Loans WHERE student_id  =  '1' ORDER BY date_of_loan DESC LIMIT 1; SELECT other_details FROM Student_Loans WHERE student_id  =  '1' ORDER BY date_of_loan DESC LIMIT 1; SELECT date_of_loan FROM Student_Loans WHERE student_id
SELECT T1.amount_of_loan ,  T1.date_of_loan FROM Student_Loans AS T1 JOIN Achievements AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2'         , 'SELECT T1.amount_of_loan ,  T1.date_of_loan FROM Student_Loans AS T1 JOIN Achievements AS T2 ON T1.student_id  =  T2.student_id'     , 'SELECT T1.amount_of_loan ,  T1.date_of_loan FROM Student_Loans AS T1 JOIN Achievements AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'
SELECT T1.student_id ,  T1.date_of_loan FROM Student_Loans AS T1 JOIN Achievements AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2'         , 'SELECT T1.student_id ,  T1.date_of_loan FROM Student_Loans AS T1 JOIN Achievements AS T2 ON T1.student_id  =  T2.student_id'     , 'SELECT count(*) FROM Achievements'     , 'SELECT count(*) FROM Students'     , 'SELECT count(*) FROM Ref_Event_Types'     , 'SELECT count(*) FROM Ref_Address_Types'     , 'SELECT count(*) FROM Ref_Detention_Type'     , 'SELECT count(*) FROM Ref_Achiev
SELECT T1.teacher_id ,  COUNT(*) FROM CLASS AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1'         , 'SELECT T1.teacher_id ,  COUNT(*) FROM CLASS AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT T1.teacher_id ,  COUNT(*) FROM CLASS AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT T
SELECT T1.teacher_details ,  T1.teacher_id FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1 <MID>_id` INTEGER NOT NULL,
SELECT DISTINCT T1.detention_type_description FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code ORDER BY T1.detention_type_description ASC'         , 'SELECT DISTINCT T1.detention_type_description FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code ORDER BY T1.detention_type_description ASC'         , ['SELECT DISTINCT T1.detention_type_description FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code ORDER BY T1.detention_type_description ASC']
SELECT DISTINCT T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code WHERE T1.datetime_detention_start != '1753-01-01 00:00:00' AND T1.datetime_detention_end != '1753-01-01 00:00:00' ORDER BY T2.detention_type_description ASC'     ,   'SELECT DISTINCT T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code WHERE T1.datetime_detention_start != '1753
SELECT T1.bio_data ,  T2.address_type_description FROM Students AS T1 JOIN Ref_Address_Types AS T2 ON T1.student_id = T2.student_id WHERE T2.address_type_code  =  'Residential' UNION SELECT T1.bio_data ,  T2.address_type_description FROM Students AS T1 JOIN Ref_Address_Types AS T2 ON T1.student_id = T2.student_id WHERE T2.address_type_code  =  'Visitor' UNION SELECT T1.bio_data ,  T2.address_type_description FROM Students AS T1 JOIN Ref_Address_Types AS T2 ON T1.student_id = T2.student_id WHERE T2.address_type_code  =  'Temporary' UNION SELECT T1.bio_data ,
SELECT T1.bio_data ,  T2.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id WHERE T2.address_type_code  =  'Home' UNION SELECT T1.bio_data ,  T2.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id WHERE T2.address_type_code  =  'School' UNION SELECT T1.bio_data ,  T2.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id WHERE T2.address_type_code  =  'University' UNION SELECT T1.bio_
SELECT T1.address_details ,  T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.student_address_id WHERE T1.address_type_code  =  'Home' UNION SELECT T1.address_details ,  T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.student_address_id WHERE T1.address_type_code  =  'School' UNION SELECT T1.address_details ,  T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.student_address_id WHERE T1.address_type_code  =  'Work' UNION SELECT T1.address_details ,  T2.bio_data FROM
SELECT T1.address_details ,  T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.student_address_id WHERE T1.address_type_code  =  'Home' UNION SELECT T1.address_details ,  T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.student_address_id WHERE T1.address_type_code  =  'School' UNION SELECT T1.address_details ,  T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.student_address_id WHERE T1.address_type_code  =  'Work' UNION SELECT T1.address_details ,  T2.bio_data FROM
SELECT bio_data ,  date_of_transcript FROM TRANSCRIPTS'         , 'SELECT * FROM STUDENTS'         , 'SELECT * FROM TRANSCRIPTS'     , 'SELECT student_id ,  bio_data ,  date_of_transcript FROM TRANSCRIPTS'     , 'SELECT student_id ,  bio_data ,  date_of_transcript FROM TRANSCRIPTS WHERE student_id  =  2'     , 'SELECT student_id ,  bio_data ,  date_of_transcript FROM TRANSCRIPTS ORDER BY student_id ASC'     , 'SELECT student_id ,  bio_data ,  date_of_transcript FROM TRANSCRIPTS ORDER BY student_id DESC'     , 'SELECT student_id ,  bio_data ,  date_of_transcript FROM TRAN
SELECT bio_data ,  date_of_transcript FROM TRANSCRIPTS'         , 'SELECT * FROM STUDENTS'         , 'SELECT * FROM TRANSCRIPTS'     , 'SELECT * FROM BEHAVIOUR_MONITORING'     , 'SELECT * FROM ADDRESSES'     , 'SELECT * FROM Ref_Event_Types'     , 'SELECT * FROM Ref_Achievement_Type'     , 'SELECT * FROM Ref_Address_Types'     , 'SELECT * FROM Ref_Detention_Type'     , 'SELECT * FROM STUDENT_EVENTS'     , 'SELECT * FROM TEACHERS'     , 'SELECT * FROM STUDENT_LOANS'     , 'SELECT * FROM CLASSES'     , 'SELECT * FROM STUDENTS_ADDRESSES
SELECT count(*) ,  T1.behaviour_monitoring_details FROM Behaviour_Monitoring AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.behaviour_monitoring_details FROM Behaviour_Monitoring AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.behaviour_monitoring_details FROM Behaviour_Monitoring AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1
SELECT count(*) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1'         , 'SELECT count(*) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1'         , ['TASK_behavioral_result']     , ['SELECT count(*) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1']     , ['TASK_behavioral_result']     , ['SELECT count(*) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1']
SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  (SELECT max(count(*) ) FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  3'         ,'SELECT T1.bio_data ,  T1.student
SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 UNION SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details  =  (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 OFFSET 2) LIMIT 3'         ,'SELECT T1.bio_data ,  T1.student_details FROM Stud
SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'         ,'SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'         ,'T1.bio_data'     ,'SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'     ,'T1.bio_data
SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1'         ,'SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1'     ,'SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1'     ,
SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  1 ORDER BY T2.event_date ASC'         ,'SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id WHERE T2.event_date  =  (SELECT max(event_date) FROM Student_Events) GROUP BY T1.student_id HAVING count(*)  >=  1'     ,'SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id
SELECT T1.bio_data ,  T2.event_date FROM STUDENTS AS T1 JOIN STUDENT_EVENTS AS T2 ON T1.student_id  =  T2.student_id WHERE T2.event_id != '' <MID>_id` INTEGER NOT NULL ,  `date_from` DATETIME(3) ,  `date_to` DATETIME(3) ,  `address_type_code` CHAR(10) NOT NULL ,  PRIMARY KEY (`student_address_id`) ,  FOREIGN KEY (student_id) REFERENCES Students (student_id) ,  FOREIGN KEY (address_id) REFERENCES Addresses (address_id) ,  FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code) ) ENG
SELECT count(*) ,  T1.event_type_code ,  T2.event_type_description FROM STUDENT_EVENTS AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code  =  T2.event_type_code GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1'         ,'SELECT count(*) ,  T1.event_type_code ,  T2.event_type_description FROM STUDENT_EVENTS AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code  =  T2.event_type_code GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1'     ,'SELECT count(*) ,  T1.event_type_code ,  T2.event_type_description FROM STUDENT_
SELECT T1.other_details ,  T1.event_type_code FROM STUDENT_EVENTS AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code  =  T2.event_type_code GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1'         , 'SELECT count(*) ,  T1.event_type_code FROM STUDENT_EVENTS AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code  =  T2.event_type_code GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T2.event_type_description ,  count(*) FROM STUDENT_EVENTS AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code  =
SELECT achievement_details ,  T1.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code WHERE date_achievement  =  (SELECT max(date_achievement) FROM Achievements) UNION SELECT achievement_details ,  T1.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code WHERE date_achievement  =  (SELECT min(date_achievement) FROM Achievements) ORDER BY achievement_details ASC'         ,'SELECT achievement_details ,  T1.achievement_type_description FROM Ach
SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code WHERE T1.student_id  =  123' |]
SELECT count(*) FROM CLASSES AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id EXCEPT SELECT count(*) FROM Achievements AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE date_achievement  >  '0001-01-01' GROUP BY T1.student_id HAVING count(*)  =  1' <MID>T1.student_id  =  T2.student_id EXCEPT SELECT count(*) FROM Achievements AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE date_achievement  >  '0001-01-01' GROUP BY T1.student_id HAVING count(*)  =  1' AS teacher_
SELECT count(*) FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN STUDENTS AS T3 ON T2.student_id  =  T3.student_id EXCEPT SELECT count(*) FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN STUDENTS AS T3 ON T2.student_id  =  T3.student_id JOIN Achievements AS T4 ON T3.student_id  =  T4.student_id WHERE T4.achievement_id  =  (SELECT max(achievement_id) FROM Achievements) <MID>T1.teacher_id  =  T2.teacher_id JOIN STUDENTS AS T
SELECT date_of_transcript ,  transcript_details FROM TRANSCRIPTS ORDER BY date_of_transcript ASC'         , '2002-09-28 00:00:00', 'Student Transcript', 'Students current transcript details']     , ['SELECT student_id FROM STUDENTS WHERE bio_data LIKE '%Male%'', 'student_id', 'Student ID', 'Student ID']     , ['SELECT student_id FROM STUDENTS WHERE student_details LIKE '%Good student%'', 'student_id', 'Student ID', 'Student ID']     , ['SELECT student_id FROM STUDENTS WHERE student_details LIKE '%Bad student%'', 'student_id', 'Student ID', 'Student ID']     , ['SELECT student_id FROM STUDENTS WHERE student_details LIKE '%Very Bad student%'',
SELECT date_of_transcript ,  transcript_details FROM TRANSCRIPTS'         , 'SELECT student_id FROM CLASSES'     , 'SELECT T1.student_id ,  count(*) FROM CLASSES AS T1 JOIN CLASSES AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >  1'     , 'SELECT T1.student_id ,  count(*) FROM Achievements AS T1 JOIN Achievements AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >  1'     , 'SELECT T1.student_id ,  count(*) FROM Detention AS T1 JOIN Detention AS T2 ON T1.student_id  =  T
SELECT T1.achievement_type_code ,  T2.achievement_details ,  T2.date_achievement FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code ORDER BY T2.date_achievement DESC LIMIT 3 OFFSET 0'         , 'SELECT T1.achievement_type_code ,  T2.achievement_details ,  T2.date_achievement FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code ORDER BY T2.date_achievement DESC LIMIT 3 OFFSET 0'     , 'SELECT T1.
SELECT T1.achievement_type_code ,  T2.achievement_type_description ,  T1.date_achievement FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code ORDER BY T1.date_achievement DESC' |]
SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start'         , 'SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start'     , 'SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start'     , 'SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start'     , 'SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start'     , 'SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start'     , 'SELECT datetime_detention_start ,  datetime_detention_
SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start ASC'     ,   'SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start ASC'     ,   'SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start ASC'     ,   'SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start ASC'     ,   'SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start ASC'     ,   'SELECT datetime_detention_start ,  datetime_detention_end FROM Detention ORDER BY datetime_detention_start ASC'     ,   'SELECT datetime
SELECT bio_data FROM Students WHERE bio_data LIKE '%Suite%' <MID>_details` VARCHAR(255) NOT NULL,
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%' <MID>_details LIKE '%Suite%' AND student_id NOT IN (SELECT student_id FROM Addresses) ORDER BY student_details ASC' > task6.txt'
SELECT T1.teacher_details ,  T2.student_details FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN STUDENTS AS T3 ON T2.student_id  =  T3.student_id WHERE T2.student_id  =  T3.student_id'         , 'SELECT T1.teacher_details ,  T2.student_details FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN STUDENTS AS T3 ON T2.student_id  =  T3.student_id WHERE T2.student_id  =  T3.student_id'     , ['SELECT T1.teacher_details ,
SELECT T1.teacher_details ,  T2.student_details FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN STUDENTS AS T3 ON T2.student_id  =  T3.student_id WHERE T2.student_id  =  T3.student_id'     ,   'SELECT T1.teacher_details ,  T2.student_details FROM TEACHERS AS T1 JOIN CLASSEES AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN STUDENTS AS T3 ON T2.student_id  =  T3.student_id WHERE T2.student_id  =  T3.student_id'     ,   'SELECT T1.teacher_details
SELECT teacher_id ,  count(*) FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1' , 'SELECT teacher_id FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1' , 'SELECT teacher_id FROM CLASSEES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1' , 'SELECT T1.teacher_id FROM CLASSES AS T1 JOIN CLASSES AS T2 ON T1.class_id  =  T2.class_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1' , 'SELECT teacher_id FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1' , 'SELECT teacher_id FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1' , 'SELECT teacher_id FROM
SELECT teacher_id ,  count(*) FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1'         , 'Teacher ID: 2 Number of Courses: 7'         , 'SELECT teacher_id ,  count(*) FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1'         , 'Teacher ID: 3 Number of Courses: 6'         , 'SELECT teacher_id ,  count(*) FROM CLASSEES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT teacher_id ,  count(*) FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT teacher_id ,  count(*) FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT teacher_id ,  count
SELECT T1.student_id ,  count(*) FROM CLASS AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT student_id FROM CLASS GROUP BY student_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T2.student_id FROM CLASS AS T1 JOIN STUDENTS AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T2.student_id FROM CLASS AS T1 JOIN STUDENTS AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.student_id ,  count(*) FROM CLASS AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'         ,'SELECT student_id FROM CLASS GROUP BY student_id ORDER BY count(*) DESC LIMIT 1'     ,'SELECT student_id FROM CLASS GROUP BY student_id ORDER BY count(*) DESC LIMIT 1'     ,'SELECT student_id FROM CLASS GROUP BY student_id ORDER BY count(*) DESC LIMIT 1'     ,'SELECT student_id FROM CLASS GROUP BY student_id ORDER BY count(*) DESC LIMIT 1'     ,'SELECT student_id FROM CLASS GROUP BY student_id ORDER BY count(*) DESC LIMIT 1'     ,'SELECT student_id FROM CLASS GROUP
SELECT T1.student_id ,  T1.bio_data FROM Students AS T1 JOIN TRANSCRIPTS AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2'         , 'SELECT T1.student_id ,  T1.bio_data FROM Students AS T1 JOIN TRANSCRIPTS AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2'         , ['T1.student_id ,  T1.bio_data']     , ['T1.student_id ,  T1.bio_data']     , 1     , 1     , ['STUDENT_ID ,  BIO_DATA']      , SQL
SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN CLASSES AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2'         , 'SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN CLASSES AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2'     , 'SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN CLASSES AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2'     ,
SELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code ORDER BY count(*) ASC LIMIT 1'         , 'SELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code ORDER BY count(*) ASC LIMIT 1'     , 'SELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code ORDER BY count(*) DESC LIMIT 1'         , 'SELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code ORDER BY count(*) DESC LIMIT 1'     , 'SELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type
SELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code ORDER BY count(*) ASC LIMIT 1'         , 'SELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code ORDER BY count(*) ASC LIMIT 1'     , 'SELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code ORDER BY count(*) ASC LIMIT 1'     , 'SELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code ORDER BY count(*) ASC LIMIT 1'     , 'SELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type
SELECT T1.bio_data ,  T2.student_id ,  T2.date_of_loan ,  T2.amount_of_loan FROM STUDENTS AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans ) ORDER BY T2.amount_of_loan DESC'         , 'SELECT T1.bio_data ,  T2.student_id ,  T2.date_of_loan ,  T2.amount_of_loan FROM STUDENTS AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  (
SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING avg(T2.amount_of_loan)  <  T2.amount_of_loan'         , 'SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING avg(T2.amount_of_loan)  >  T2.amount_of_loan'     , 'SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T
SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1'         ,'SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1'         ,'SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan DESC LIMIT 1'         ,'SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan DESC LIMIT 1'     ,'SELECT count(*) FROM STUDENTS'         ,'SELECT count(*) FROM CLASSES'         ,'SELECT count(*) FROM TEACHERS'         ,'SELECT count(*) FROM ADDRESSES'         ,'SELECT count(*) FROM STUDENT_EVENTS'         ,'SELECT count(*) FROM TRANSCRIPTS'         ,'SELECT count
SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1'         , '2002-07-11 16:13:22'         , 0     , 1     , 'SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1'     , 1     , 'SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan DESC LIMIT 1'     , 1
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan ASC LIMIT 1'         ,'SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan DESC LIMIT 1'     ,'SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan ASC LIMIT 1'     ,'SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan ASC LIMIT 1'         ,'SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan ASC LIMIT 1'     ,'SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan DESC LIMIT 1'         ,'SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER
SELECT T2.date_of_loan FROM Student_Loans AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan DESC LIMIT 1'         ,'SELECT T2.date_of_loan FROM Student_Loans AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan DESC LIMIT 1'     ,'SELECT T2.date_of_loan FROM Student_Loans AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan DESC LIMIT 1'         ,'SELECT T2.date_of_loan FROM Student_Loans AS T1 JOIN Transcripts AS T2 ON
SELECT T2.date_of_loan FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1'         ,'SELECT T2.date_of_loan FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1'     ,'SELECT T2.date_of_loan FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1'     ,'SELECT T2.date_of_loan FROM Students AS T1 JOIN Student_Lo
SELECT T2.teacher_details FROM TRANSCRIPTS AS T1 JOIN CLASSES AS T2 ON T1.student_id  =  T2.student_id JOIN TEACHERS AS T3 ON T2.teacher_id  =  T3.teacher_id ORDER BY T1.date_of_transcript ASC LIMIT 1'         ,'Teacher Details' : 'The Teacher Details'     ,'Teacher ID' : 2}
SELECT T1.teacher_id FROM CLASS AS T1 JOIN STUDENTS AS T2 ON T1.student_id  =  T2.student_id JOIN TRANSCRIPTS AS T3 ON T3.student_id  =  T2.student_id ORDER BY T3.date_of_transcript LIMIT 1'         , 'answer': 'Teacher ID: 2'     , 'difficulty': 'hard'     , 'category': 'Data Querying'     , 'image': 'https://raw.githubusercontent.com/Zzzza/uploads/master/sql.png'     , 'subcategory': 'Reflection'     , 'points': 1000} ,   {   'question': 'Find the names of all the students who were detained for more than 2 days.'         , '
SELECT T1.student_id ,  sum(T2.amount_of_loan) FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id'         ,'SELECT T1.student_id ,  sum(T2.amount_of_loan) FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id'         ,'SELECT T1.student_id ,  sum(T2.amount_of_loan) FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id'     ,'SELECT T1.student_id ,  count(*) FROM Students AS T1 JOIN Student_Loans AS T
SELECT T1.student_id ,  sum(T2.amount_of_loan) FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id'     ,   'SELECT T1.student_id ,  sum(T2.amount_of_loan) FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id'     ,   'SELECT T1.student_id ,  sum(T2.amount_of_loan) FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id'     ,   'SELECT T1.student_id ,  sum(T2.amount_of_loan)
SELECT T1.student_id ,  T1.bio_data ,  COUNT(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 10'         , 'SELECT T1.student_id ,  T1.bio_data ,  COUNT(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 10'     , 'SELECT T1.student_id ,  T1.bio_data ,  COUNT(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT
SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN TRANSCRIPTS AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id'     ,   'SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN TRANSCRIPTS AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id'     ,   'SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN TRANSCRIPTS AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id'     ,   'SELECT T1.student_id ,
SELECT count(*) FROM Detention WHERE datetime_detention_start != '1900-01-01 00:00:00' AND datetime_detention_end != '1900-01-01 00:00:00' AND detention_summary != '' AND other_details != '' AND detention_id != 0' <MID>_id`, `date_from`, `date_to`, `address_type_code` FROM Students_Addresses WHERE student_id = $student_id UNION SELECT address_id ,  address_details FROM Addresses WHERE address_id  =  (SELECT T1.address_id FROM Students_Addresses AS T1 JOIN Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.address_type_code  =  'Home' AND T1.
SELECT count(*) FROM Detention AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T1.detention_summary != ''' <MID>_id`, `date_from`, `date_to` FROM Students_Addresses AS T1 JOIN Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.address_type_code  =  'Home' UNION SELECT count(*) FROM Students WHERE student_gender  =  'Female' UNION SELECT count(*) FROM Students WHERE student_gender  =  'Male' UNION SELECT count(*) FROM Students WHERE student_ethnicity  =  'White' UNION SELECT count(*) FROM Students WHERE student_ethnicity  =  'Asian' UNION SELECT count(*) FROM Students WHERE student_ethnicity  =  'Black' UNION SELECT count
SELECT T1.address_type_code ,  T1.address_type_description FROM Ref_Address_Types AS T1 JOIN Students_Addresses AS T2 ON T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1 <MID>_details` VARCHAR(255) NOT NULL,     FROM datetime_detention_start TO datetime_detention_end AS detention_duration ,  datetime_detention_start - MIN(datetime_detention_start) AS earliest_detention_since FROM Detention GROUP BY student_id ORDER BY detention_duration ASC LIMIT 1' , 'SELECT student_id FROM Detention GROUP BY student_id ORDER BY count(*) DESC LIMIT 1' , 'SELECT student_id FROM Detention GROUP BY student_id ORDER BY count(*) ASC LIMIT
SELECT T1.address_type_code ,  T1.address_type_description FROM Ref_Address_Types AS T1 JOIN Students_Addresses AS T2 ON T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1'         ,'SELECT T1.address_type_code ,  T1.address_type_description FROM Ref_Address_Types AS T1 JOIN Students_Addresses AS T2 ON T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1'     ,'SELECT T1.address_type_code ,  T1.address_type_description FROM Ref_Address_Types AS T1 JOIN Students_Addresses AS T2 ON T1
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id EXCEPT SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans) <MID>_id`, `date_of_loan`, `amount_of_loan`, `other_details` FROM Student_Loans WHERE student_id NOT IN (SELECT student_id FROM Student_Events) UNION SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Loans) ORDER BY bio_data ASC'     ,'SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id EXCEPT SELECT bio_data FROM Students WHERE student_id IN (SELECT student_
SELECT bio_data FROM STUDENTS AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id EXCEPT SELECT bio_data FROM STUDENTS AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id'
SELECT T1.date_from ,  T1.date_to FROM Student_Events AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2'         , 'SELECT T1.date_from ,  T1.date_to FROM Student_Events AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2'     , 'SELECT T1.date_from ,  T1.date_to FROM Student_Events AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2'     ,
SELECT T1.date_from ,  T1.date_to FROM Student_Events AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2) ORDER BY T1.event_date'         , 'SELECT T1.date_from ,  T1.date_to FROM Student_Events AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2) ORDER BY T1.event_date'     , ['SELECT T1.date_from ,  T1.date_to FROM Student_Events AS T1
SELECT min(datetime_detention_start) FROM Detention <MID>_id`, `date_of_loan`, `amount_of_loan`, `other_details` FROM Student_Loans GROUP BY student_id HAVING count(*)  >  1 UNION SELECT student_id FROM Student_Loans EXCEPT SELECT student_id FROM Students) AS T1 JOIN Students ON Students.student_id  =  T1.student_id'
SELECT datetime_detention_start FROM Detention'         , 'SELECT datetime_detention_start FROM Detention'         , 'SELECT datetime_detention_start FROM Detention'     , 'SELECT datetime_detention_start FROM Detention WHERE student_id  =  1'     , 'SELECT datetime_detention_start FROM Detention WHERE detention_type_code  =  'Bad behaviour'']     , answers = [None, None, None, None, None]     , sql = SQLTestCase.psql     , init = DB_SETUP_FILE     , name = 'TASK16 (Detention)'     , package = CURRENT_PACKAGE     , clean_up = True     , use_default_driver = False     , create_database = False     , url = URL     , driver = DRIVER
SELECT T1.Name FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author'         , 'SELECT T1.name FROM Author AS T1 JOIN author_book AS T2 ON T1.idauthor  =  T2.author'         , ['SELECT T1.name FROM Author AS T1 JOIN author_book AS T2 ON T1.idauthor  =  T2.author']         , ['SELECT T1.name FROM Author AS T1 JOIN author_book AS T2 ON T1.idauthor  =  T2.author']     , ['SELECT T1.name FROM Author AS T1 JOIN author_book AS T2 ON T1.idauthor  =  T2.author']     , ['SELECT T1.name FROM Author AS T1 JOIN author_book AS T2 ON T1.idauthor  =
SELECT name FROM author'     , 'SELECT name FROM author'     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name FROM author']     , ['SELECT name
SELECT name ,  address FROM client'         , 'SELECT name ,  address FROM client'         , ['Client Names And Their Addresses']         , ['Client Names And Their Addresses']     , ['Client Names And Their Addresses']]          , [ 29         , 'SELECT name FROM client WHERE numcc LIKE '%41972635987654321%''         , 'SELECT name FROM client WHERE numcc LIKE '%41972635987654321%''         , ['Client Names']         , ['Client Names']     , ['Client Names']]          , [ 30         , 'SELECT title FROM book'         , 'SELECT title FROM book'         , ['Book Titles']         , ['Book Titles']     , ['Book Titles']
SELECT name ,  address FROM client'     , 'SELECT name ,  address FROM client'     , ['name', 'address']     , ['T1', 'T2']     , ['CLIENT_NAME', 'CLIENT_ADDRESS']     , ['T1.name', 'T1.address']     , ['T2.DateOrder', 'T2.DateExped']     , ['DATE_ORDER', 'DATE_EXPED']     , ['T1.DateOrder', 'T1.DateExped']     , ['ORDED_ON', 'DELIVERED_ON']     , ['T1.IdOrder', 'T2.IdOrder']     , ['ORDER', 'SHIPMENT']     , ['T1.numcc', 'T1.dateorder']     , ['NUM_CC', 'DATE_ORDER']
SELECT title ,  isbn ,  saleprice FROM book'         , 'SELECT title ,  isbn ,  saleprice FROM book'         , ['title', 'isbn', 'saleprice']     , ['TITLE', 'ISBN', 'SALEPRICE']     , ['T1', 'I1', 'SP1']     , ['T2', 'I2', 'SP2']     , ['T3', 'I3', 'SP3']     , ['T4', 'I4', 'SP4']     , ['T5', 'I5', 'SP5']     , ['T6', 'I6', 'SP6']     , ['T7', 'I7', 'SP7']     , ['T8', 'I8', 'SP8']     , ['T9', 'I9', 'SP9']     ,
SELECT title ,  isbn ,  saleprice FROM book'     , 'SELECT title ,  isbn ,  saleprice FROM book'     , ['title', 'isbn', 'saleprice']     , ['Titles', 'ISBNs', 'Sale Prices']     , 1     , 100     , False     , False     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True     , True
SELECT count(*) FROM book'         , 'SELECT count(*) FROM book'         , ['SELECT count(*) FROM book']         , 229     ,   'How many authors do we have?[SQL] SELECT count(*) FROM author'         , 'SELECT count(*) FROM author'         , ['SELECT count(*) FROM author']         , 82     ,   'How many clients do we have?[SQL] SELECT count(*) FROM client'         , 'SELECT count(*) FROM client'         , ['SELECT count(*) FROM client']         , 3     ,   'How many orders do we have?[SQL] SELECT count(*) FROM orders'         , 'SELECT count(*) FROM orders'         , ['SELECT count(*) FROM orders']         , 117 ]     , [ 'SELECT name FROM client WHERE numcc LIKE '%3760263593
SELECT count(*) FROM book'         , 'SELECT count(*) FROM book'         , ['SELECT count(*) FROM book']     ,   'How many authors are there?[SQL] SELECT count(*) FROM author'         , 'SELECT count(*) FROM author'         , ['SELECT count(*) FROM author']     ,   'How many clients are there?[SQL] SELECT count(*) FROM client'         , 'SELECT count(*) FROM client'         , ['SELECT count(*) FROM client']     ,   'How many orders are there?[SQL] SELECT count(*) FROM orders'         , 'SELECT count(*) FROM orders'         , ['SELECT count(*) FROM orders']]     ,   [   'SELECT count(*) FROM book'         , 'SELECT count(*) FROM author'         , 'SELECT count(*) FROM client'         , 'SELECT count(*) FROM orders'         , 'SELECT count(*) FROM book
SELECT count(*) FROM author WHERE name != 'null' AND name != '' AND name != NULL AND name != ' ' <MID> SELECT count(*) FROM author WHERE name != 'null' AND name != '' AND name != NULL AND name != ' ' AND name != 'null' AND name != '' AND name != NULL AND name != ' ' GROUP BY name ORDER BY count(*) DESC LIMIT 1'     ,'SELECT name FROM author WHERE name != 'null' AND name != '' AND name != NULL AND name != ' ' GROUP BY name ORDER BY count(*) DESC LIMIT 1'     ,'SELECT name FROM author WHERE name != 'null' AND name != '' AND name != NULL AND name != ' ' GROUP BY name ORDER BY count(*) DESC LIMIT 1'     ,'SELECT name FROM author WHERE name != 'null' AND name != '' AND name != NULL AND name != ' ' GROUP BY name ORDER BY count(*) DESC LIMIT 1'     ,
SELECT count(*) FROM author WHERE name  =  'J. K. Rowling' <MID> SELECT count(*) FROM author WHERE name  =  'J. K. Rowling' AND idAuthor  =  123456789
SELECT count(*) FROM Client'     , '2'     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , SQL     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['SELECT count(*) FROM Client']     , ['
SELECT count(*) FROM Client'         , 'SELECT count(*) FROM Client'         , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , 'SELECT count(*) FROM Client'     , '
SELECT name ,  address FROM client ORDER BY name ASC'         , 'SELECT name ,  address FROM client ORDER BY name ASC'         , ['Cliente A','Cliente B']     ,   'SELECT name ,  address FROM client ORDER BY name DESC'         , 'SELECT name ,  address FROM client ORDER BY name DESC'         , ['Cliente C','Cliente D']      ,   'SELECT name FROM client ORDER BY name ASC'         , 'SELECT name FROM client ORDER BY name ASC'         , ['Cliente A','Cliente B','Cliente C','Cliente D']      ,   'SELECT name FROM client ORDER BY name DESC'         , 'SELECT name FROM client ORDER BY name DESC'         , ['Cliente D','Cliente C','Cliente B','Cliente A']      ,   'SELECT title FROM book ORDER BY title ASC'         , 'SELECT title FROM
SELECT name ,  address FROM client ORDER BY name ASC'         , 'SELECT name ,  address FROM client ORDER BY name ASC'         , ['Cliente A','Cliente B']     ,   'What is the name of the author of the book with isbn 0321886358? [SQL] SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.idauthor  =  T2.author WHERE T2.isbn  =  '0321886358''         , 'SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.idauthor  =  T2.author WHERE T2.isbn  =  '0321886358''         , 'The name of the author of the book with isbn 03218863
SELECT T1.title ,  T2.name FROM book AS T1 JOIN author_book AS T2 ON T1.isbn = T2.isbn'     , 'SELECT T1.title ,  T2.name FROM book AS T1 JOIN author_book AS T2 ON T1.isbn = T2.isbn'     , ['T1.title','T2.name']     , 'SELECT T1.title ,  T2.name FROM book AS T1 JOIN author_book AS T2 ON T1.isbn = T2.isbn'     , 'SELECT T1.title ,  T2.name FROM book AS T1 JOIN author_book AS T2 ON T1.isbn = T2.isbn'     , 'SELECT T1.title ,  T2.name FROM book AS T1 JOIN author_book AS T2 ON T1
SELECT T1.title ,  T3.name FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idauthor AAA SELECT T4.title ,  T3.name FROM author AS T3 JOIN book AS T4 ON T3.idauthorA  =  T4.Author'
SELECT T1.idorder ,  T2.name FROM orders AS T1 JOIN client AS T2 ON T1.idclient  =  T2.idclient'         , 'SELECT T1.idorder ,  T2.name FROM orders AS T1 JOIN client AS T2 ON T1.idclient  =  T2.idclient'     , ['SELECT T1.idorder ,  T2.name FROM orders AS T1 JOIN client AS T2 ON T1.idclient  =  T2.idclient']     , ['SELECT T1.idorder ,  T2.name FROM orders AS T1 JOIN client AS T2 ON T1.idclient  =  T2.idclient']     , ['SELECT T1.idorder ,  T2.name FROM orders AS T1 JOIN client AS T2 ON T1.idclient  =  T2.idclient
SELECT T1.idorder ,  T2.name FROM orders AS T1 JOIN client AS T2 ON T1.idclient  =  T2.idclient'     , 'SELECT T1.idorder ,  T2.name FROM orders AS T1 JOIN client AS T2 ON T1.idclient  =  T2.idclient'     , ['T1.idorder' ,  'T2.name']]
SELECT T1.name ,  count(*) FROM author AS T1 JOIN book AS T2 ON T1.idauthor = T2.author GROUP BY T1.name ORDER BY count(*) DESC'         , 'SELECT T1.name ,  count(*) FROM author AS T1 JOIN book AS T2 ON T1.idauthor = T2.author GROUP BY T1.name ORDER BY count(*) DESC'     , ['SELECT T1.name ,  count(*) FROM author AS T1 JOIN book AS T2 ON T1.idauthor = T2.author GROUP BY T1.name ORDER BY count(*) DESC']     , ['SELECT T1.name ,  count(*) FROM author AS T1 JOIN book AS T2 ON T1.idauthor = T2.author GROUP BY T1.name ORDER BY count(*) DESC']     , ['SELECT T1.name ,  count(*) FROM author AS T1 JOIN book
SELECT T2.Name ,  COUNT(*) FROM author_book AS T1 JOIN author AS T2 ON T1.author  =  T2.idAuthorA GROUP BY T2.Name ORDER BY COUNT(*) DESC'     , 'SELECT T2.Name ,  COUNT(*) FROM author_book AS T1 JOIN author AS T2 ON T1.author  =  T2.idAuthorA GROUP BY T2.Name ORDER BY COUNT(*) DESC'     , ['T1.title','T2.name']     , ['T1.purchaseprice','T2.name']     , ['T1.saleprice','T2.name']]
SELECT T1.isbn ,  COUNT(*) FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder GROUP BY T1.isbn ORDER BY COUNT(*) DESC LIMIT 1'         , 'SELECT T1.isbn ,  COUNT(*) FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder GROUP BY T1.isbn ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT T1.isbn ,  COUNT(*) FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder GROUP BY T1.isbn ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT T1.isbn ,  COUNT(*) FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T
SELECT T1.isbn ,  count(*) FROM books AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.isbn ,  count(*) FROM books AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.isbn ,  count(*) FROM books AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.isbn ,  count(*) FROM books AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1
SELECT T1.isbn ,  sum(T1.amount) FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder GROUP BY T1.isbn'         , 'SELECT title FROM book'     , 'SELECT name FROM author'     , 'SELECT DISTINCT title FROM book'     , 'SELECT count(*) FROM book'     , 'SELECT count(*) FROM author'     , 'SELECT count(*) FROM orders'     , 'SELECT count(*) FROM client'     , 'SELECT count(*) FROM author_book'     , 'SELECT count(*) FROM books_order'     , 'SELECT count(*) FROM books_order WHERE amount  >  10'     , 'SELECT count(*) FROM books_order WHERE amount  <  1'     , 'SELECT count(*) FROM books_order WHERE amount  <=  5'
SELECT T1.isbn ,  sum(T2.amount) FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn'     , 'SELECT T1.isbn ,  sum(T2.amount) FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn'     , ['SELECT T1.isbn ,  sum(T2.amount) FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn']]
SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1'     , ['Client(IdClient, Name ,  Address ,  NumCC)','Orders(IdOrder ,  DateOrder ,  DateExped)','Author(idAuthor ,  Name)','Book(ISBN ,  Title ,  PurchasePrice ,  SalePrice)','Author_Book(ISBN ,  Author)','Books_Order(ISBN ,  idOrder ,  amount)']     , ['T1.title']      , 1     ,
SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1'     , '
SELECT T1.title ,  T1.purchaseprice FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ,  T1.purchaseprice ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.title ,  T1.purchaseprice FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ,  T1.purchaseprice ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.title ,  T1.purchaseprice FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ,  T1.purchaseprice ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T
SELECT T1.title ,  T1.purchaseprice FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn WHERE T2.amount  =  (SELECT max(amount) FROM books_order) LIMIT 1'         , 'SELECT T1.title ,  T1.purchaseprice FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn WHERE T2.amount  =  (SELECT max(amount) FROM books_order) LIMIT 1'     , ['SELECT T1.title ,  T1.purchaseprice FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn WHERE T2.amount  =  (SELECT max(amount) FROM books_order) LIMIT 1']]     , ['SELECT
SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.dateorder  <  {current date} - interval 30 day'         , 'SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.dateorder  <  {current date} - interval 30 day'     , 'SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.dateorder  <  {current date} - interval 30 day'         , 'SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.dateorder  <  {current date
SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn = T2.isbn WHERE T2.dateorder  <  {d '2001-01-01'}''''.format(d='')     ,['SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn = T2.isbn WHERE T2.dateorder  >  {d '2001-01-01'}''''.format(d='')]     ,['SELECT count(*) FROM book']     ,['SELECT count(*) FROM orders']     ,['SELECT count(*) FROM client']     ,['SELECT count(*) FROM author_book']     ,['SELECT count(*) FROM author']     ,['SELECT count(*) FROM books_order']     ,['SELECT count(*) FROM T1 JOIN orders AS T
SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient HAVING count(*)  >=  1'         , 'SELECT name FROM client ORDER BY name'     , 'SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient HAVING count(*)  >=  1'     , 'SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient HAVING count(*)  >=  1'     , 'SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient HAVING count(*)  >=  1'
SELECT DISTINCT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient'     , 'Client Names Who Have Made An Order' : ['Client Names Who Have Made An Order']     , 'What are the names of the clients who have not made an order? [SQL]': 'SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders)'     , 'Client Names Who Have Not Made An Order' : ['Client Names Who Have Not Made An Order']     , 'How many different authors are there in the author table? [SQL]': 'SELECT count(*) FROM author'     , 'Number Of Authors' : ['Number Of Authors']     , 'How many books are there in the book table? [SQL]': 'SELECT count(*) FROM book'     , 'Number Of Books' : ['Number Of Books']}
SELECT T1.name ,  count(*) FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY count(*) DESC LIMIT 1'         , 'SELECT name FROM client ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY count(*)
SELECT T1.name ,  count(*) FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY count(*) DESC'     , 'SELECT T1.name ,  count(*) FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY count(*) DESC'     , ['Client1', 'Client2', 'Client3']     , [3, 2, 1]     , ['Client1', 'Client2', 'Client3']     , [3, 2, 1]     , ['Client1', 'Client2', 'Client3']     , [3, 2, 1]     , ['Client1', 'Client2', 'Client3']     , [3, 2, 1]
SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY count(*) DESC LIMIT 1'         , 'Cliente' : 'Client'     ,   'Orden' : 'Orders'     ,   'Libro' : 'Book'     ,   'Autor' : 'Author'     ,   'Lector' : 'Reader'      ,  'Tarea' : 'Task'     ,   'Base de datos' : 'Database'      ,  'Diagrama' : 'Diagram'      ,  'Ejecutar' : 'Execute'      ,  'Mostrar' : 'Show'      ,  'Cerrar' : 'Close'      ,  'Salir' : 'Exit'     ,   '
SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient  =  T2.idclient GROUP BY T1.idclient ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient  =  T2.idclient GROUP BY T1.idclient ORDER BY count(*) DESC LIMIT 1'     , 'Cliente'     , 'T1.name'      , ['T1.name']      , ['T1.name']      , ['T1.name']      , ['T1.name']      , ['T1.name']      , ['T1.name']      , ['T1.name']      , ['T1.name']      , ['T1.name']      , ['T1.name']
SELECT T1.name ,  sum(T2.amount) FROM client AS T1 JOIN books_order AS T2 ON T1.idclient  =  T2.idorder GROUP BY T1.idclient'     , 'Cliente' : 'Client Name'     , 'Total' : 'Sum(T2.amount)'     , 'query' : ['SELECT T1.name ,  sum(T2.amount) FROM client AS T1 JOIN books_order AS T2 ON T1.idclient  =  T2.idorder GROUP BY T1.idclient']     , 'task' : 'Show the client names and their total amounts of books ordered.'     , 'taskcode' : 'SHOW THE CLIENT NAMES AND THEIR TOTAL AMOUNTS OF BOOKS ORDERED.'     , 'language' : 'SQL'     , 'dataset'
SELECT T1.name ,  sum(T2.amount) FROM client AS T1 JOIN books_order AS T2 ON T1.idclient  =  T2.idorder GROUP BY T1.idclient'     , 'SELECT T1.name ,  sum(T2.amount) FROM client AS T1 JOIN books_order AS T2 ON T1.idclient  =  T2.idorder GROUP BY T1.idclient'     , ['Client Amount']]
SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY sum(amount) DESC LIMIT 1'         , 'SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY sum(amount) DESC LIMIT 1'     , ['Cliente: Ana']     , ['Cliente: Ana']     , ['Cliente: Ana']     , ['Cliente: Ana']     , ['Cliente: Ana']     , ['Cliente: Ana']     , ['Cliente: Ana']     , ['Cliente: Ana']     , ['Cliente: Ana']     , ['Cliente: Ana']     , ['Cliente: Ana']     , ['Cliente:
SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient JOIN books_order AS T3 ON T2.idorder = T3.idorder GROUP BY T1.idclient ORDER BY sum(T3.amount) DESC LIMIT 1'         , 'Cliente' : 'Client'     ,   'Orden' : 'Orders'     ,   'Libro' : 'Books_Order'     ,   'Total' : 'sum(T3.amount)'     ,   'Nombre del cliente' : 'T1.name'     ,   'Nombre de la orden' : 'T2.name'     ,   'Nombre del libro' : 'T3.title'     ,   'Cantidad de libros' : 'T3.amount'     ,
SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T2.idorder != '' WHERE T2.idorder  =  ''' <MID>T1.title FROM book AS T1 JOIN orders AS T2 ON T2.idorder != '' WHERE T2.idorder  =  ''')
SELECT title FROM book WHERE isbn NOT IN (SELECT isbn FROM books_order) <MID>     , T1.title AS Title1 FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name  =  'Joan G. Ross' UNION SELECT T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name  =  'Michael Morpurgo' UNION SELECT T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.
SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders)')
SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders)')
SELECT max(saleprice) ,  min(saleprice) FROM book'     , 'SELECT max(saleprice) ,  min(saleprice) FROM book'     , ['SELECT max(saleprice) ,  min(saleprice) FROM book']     , ['SELECT max(saleprice) ,  min(saleprice) FROM book']     , ['SELECT max(saleprice) ,  min(saleprice) FROM book']     , ['SELECT max(saleprice) ,  min(saleprice) FROM book']     , ['SELECT max(saleprice) ,  min(saleprice) FROM book']     , ['SELECT max(saleprice) ,  min(saleprice) FROM book']     , ['SELECT max(saleprice) ,  min(saleprice) FROM book']     , ['SELECT max
SELECT max(saleprice) ,  min(saleprice) FROM book'     , 'SELECT max(saleprice) ,  min(saleprice) FROM BOOK'     , ['SELECT max(saleprice) ,  min(saleprice) FROM BOOK']     , ['SELECT max(saleprice) ,  min(saleprice) FROM BOOK']     , ['SELECT max(saleprice) ,  min(saleprice) FROM BOOK']     , ['SELECT max(saleprice) ,  min(saleprice) FROM BOOK']     , ['SELECT max(saleprice) ,  min(saleprice) FROM BOOK']     , ['SELECT max(saleprice) ,  min(saleprice) FROM BOOK']     , ['SELECT max(saleprice) ,  min(saleprice) FROM BO
SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK'     , 'SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK'     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['
SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK'     , 'SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK'     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['SELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK']     , ['
SELECT max(saleprice - purchaseprice) FROM book'         , 'SELECT max(saleprice - purchaseprice) FROM book'         , ['max(saleprice - purchaseprice)']         , 0     , 1     , ['SELECT max(saleprice - purchaseprice) FROM book']     , ['SELECT max(saleprice - purchaseprice) FROM book']     		, 1     , 1     , ['SELECT max(saleprice - purchaseprice) FROM book']     , ['SELECT max(saleprice - purchaseprice) FROM book']     		, 1     , 1     , ['SELECT max(saleprice - purchaseprice) FROM book']     , ['SELECT max(saleprice - purchaseprice) FROM book']     		, 1     , 1     , ['SELECT max(s
SELECT max(saleprice - purchaseprice) FROM book'
SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)'         , 'SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)'         , ['The C Programming Language', 'TCP/IP Illustrated', 'Operating Systems: Three Easy Pieces']     , ['The C Programming Language', 'TCP/IP Illustrated', 'Operating Systems: Three Easy Pieces']     , ['The C Programming Language']     , ['TCP/IP Illustrated']     , []      , ['Operating Systems: Three Easy Pieces']     , ['The C Programming Language', 'TCP/IP Illustrated', 'Operating Systems: Three Easy Pieces']     , ['The C Programming Language', 'TCP/IP Illustrated']     , ['TCP/
SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)'         , 'SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)'         , ['The C Programming Language', 'TCP/IP Illustrated', 'Operating Systems: Three Easy Pieces']]     ,   ['SELECT name FROM client WHERE idclient  =  1' , 'SELECT dateorder FROM orders WHERE idorder  =  1' , 'SELECT name FROM author' , 'SELECT title FROM book' , 'SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder WHERE T2.dateorder  <  (SELECT min(dateorder) FROM orders)']         ,   ['Kenneth Applegate' , '1988-07-22'
SELECT title FROM book ORDER BY saleprice ASC LIMIT 1'         , 'SELECT title FROM book ORDER BY saleprice ASC LIMIT 1'         , ['The C Programming Language', 'TCP/IP Illustrated', 'Operating Systems: Three Easy Pieces']]     ,   ['SELECT title FROM book ORDER BY saleprice DESC LIMIT 1'         , 'SELECT title FROM book ORDER BY saleprice DESC LIMIT 1' ]         ,   ['SELECT title FROM book ORDER BY saleprice ASC LIMIT 2'         , 'SELECT title FROM book ORDER BY saleprice ASC LIMIT 2' ]         ,   ['SELECT title FROM book ORDER BY saleprice DESC LIMIT 2'         , 'SELECT title FROM book ORDER BY saleprice DESC LIMIT 2' ]         ,   ['SELECT title FROM book WHERE purchaseprice  <  15.99'         , 'SELECT title FROM book WHERE purchaseprice
SELECT title FROM book WHERE saleprice  =  (SELECT min(saleprice) FROM book) ']
SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 10'         ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 10'         ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 10'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 10'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 10'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 10'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 10'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 10'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 10'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 10'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 10'     ,'SELECT title
SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'         ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'         ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'     ,'SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1'
SELECT avg(T1.saleprice) FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idauthor WHERE T3.name  =  'George Orwell' <MID>     , numcc char(16) NOT NULL UNIQUE     , address varchar(60) NOT NULL     , name varchar(25) NOT NULL UNIQUE     , email varchar(25) NOT NULL UNIQUE     , phone_number char(13) NOT NULL UNIQUE     , date_joined DATE NOT NULL DEFAULT CURRENT_DATE)
SELECT avg(T1.saleprice) FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.author  =  T3.idauthor WHERE T3.name  =  'George Orwell' <MID>     , numcc char(16) NOT NULL UNIQUE     , address varchar(60) NOT NULL     , name varchar(25) NOT NULL UNIQUE     , email varchar(25) NOT NULL UNIQUE     , phone varchar(13) NOT NULL UNIQUE     , datejoined date NOT NULL DEFAULT CURRENT_DATE     , isadministrator boolean NOT NULL DEFAULT false )'''     , '''CREATE TABLE orders( idorder char(10) PRIMARY KEY     , dateorder date NOT NULL DEFAULT CURRENT_DATE
SELECT T1.saleprice FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idauthor WHERE T3.name  =  'Plato' <MID>T1.saleprice FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idauthor WHERE T3.name  =  'Plato' AND T1.title LIKE '%Cave%' AND T1.saleprice BETWEEN 8 AND 10'     , 'SELECT T1.saleprice FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.
SELECT T1.saleprice FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idauthor WHERE T3.name  =  'Plato' <MID>     , saleprice NUMBER(6 , 2) DEFAULT 0.00 CONSTRAINT saleprice_check CHECK (saleprice  >  0)     , purchaseprice NUMBER(6 , 2) DEFAULT 0.00 CONSTRAINT purchaseprice_check CHECK (purchaseprice  >  0)     , title VARCHAR(60) NOT NULL     , isbn CHAR(15) NOT NULL CONSTRAINT unicidad_isbn UNIQUE     , numpages NUMBER(6) DEFAULT 0 CONSTRAINT numpages_check CHECK (numpages
SELECT title FROM book WHERE saleprice  =  (SELECT min(saleprice) FROM book) AND author  =  (SELECT name FROM author WHERE idauthor  =  george.idauthor) ORDER BY title'
SELECT title FROM book WHERE saleprice  =  (SELECT min(saleprice) FROM book) AND author  =  'George Orwell' <MID>     , T1.title AS Title1 FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name  =  'George Orwell' ORDER BY T1.saleprice ASC LIMIT 1) AS subquery1 ON T2.isbn  =  subquery1.isbn WHERE T1.saleprice  =  (SELECT min(T1.saleprice) FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T
SELECT T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name  =  'Plato' AND T1.saleprice  <  (SELECT avg(T1.saleprice) FROM book AS T1)'
SELECT T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name  =  'Plato' AND T1.saleprice  <  (SELECT avg(T1.saleprice) FROM book AS T1)'
SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.idauthor  =  T2.author WHERE T2.title  =  'Pride and Prejudice' <MID>T1.name FROM author AS T1 JOIN book AS T2 ON T1.idauthor  =  T2.author WHERE T2.title  =  'Pride and Prejudice' AND T1.name  =  'Jane Austen' LIMIT 1'     ,'SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.idauthor  =  T2.author WHERE T2.title  =  'Sense and Sensibility' AND T1.name  =  'Jane Austen' LIMIT 1'     ,'SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.idauthor  =
SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.idauthor = T2.author WHERE T2.title  =  'Pride and Prejudice' LIMIT 1' <MID>     , numcc char(16) NOT NULL UNIQUE     , email varchar(50)     , datejoined date NOT NULL DEFAULT CURRENT_DATE     , isactive bool NOT NULL DEFAULT 1     , admin bool NOT NULL DEFAULT 0     , country enum('Spain','Portugal','England') NOT NULL DEFAULT 'England'     , city varchar(50) NOT NULL DEFAULT ''     , address varchar(70) NOT NULL DEFAULT ''     , phone char(9) NOT NULL DEFAULT '-'     , gender enum('male','female') NOT NULL DEFAULT 'male'     , lname varchar(50) NOT NULL DEFAULT
SELECT T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name LIKE '%Plato%' <MID>     , numcc char(16) NOT NULL UNIQUE     , address varchar(60) NOT NULL     , name varchar(25) NOT NULL UNIQUE     , dateorder date NOT NULL     , dateexped date NOT NULL)
SELECT T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name LIKE '%Plato%' <MID>     , saleprice number(6 , 2) default 0  );  CREATE TABLE author_book ( isbn char(15) PRIMARY KEY ,  author number PRIMARY KEY );  CREATE TABLE author ( idauthor ALPHANUMERIC(5) PRIMARY KEY ,  name VARCHAR(25) );  CREATE TABLE books_order ( isbn char(15) ,  idorder char(10) ,  amount number(3) CHECK (amount  >  0) ,  CONSTRAINT lp_pk PRIMARY KEY (isbn ,  idorder) );  CREATE TABLE orders ( idorder char(10) PRIMARY
SELECT count(*) FROM books_order AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn WHERE T2.title  =  'Pride and Prejudice' GROUP BY T2.title ORDER BY count(*) DESC LIMIT 1'     , ['SELECT count(*) FROM books_order AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn WHERE T2.title  =  'Pride and Prejudice' GROUP BY T2.title ORDER BY count(*) DESC LIMIT 1']]     , [['SELECT count(*) FROM books_order AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn WHERE T2.title  =  'Pride and Prejudice' GROUP BY T2.title ORDER BY count(*) DESC LIMIT 1']]     , [['SELECT
SELECT count(*) FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder JOIN book AS T3 ON T3.isbn  =  T1.isbn WHERE T3.title  =  'Pride and Prejudice' <MID>     , numcc char(16) NOT NULL UNIQUE     , address varchar(60) NOT NULL     , name varchar(25) NOT NULL UNIQUE     , email varchar(25) NOT NULL UNIQUE     , phoneNumber char(13) NOT NULL UNIQUE     , dateOfRegistration DATE NOT NULL DEFAULT CURRENT_DATE )ENGINE=InnoDB;'     , 'CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY , name VARCHAR(25) NOT NULL , address VARCHAR(60) NOT NULL , numcc CHAR
SELECT T1.idorder FROM orders AS T1 JOIN books_order AS T2 ON T1.idorder  =  T2.idorder JOIN book AS T3 ON T2.isbn  =  T3.isbn WHERE T3.title  =  'Pride and Prejudice' INTERSECT SELECT T1.idorder FROM orders AS T1 JOIN books_order AS T2 ON T1.idorder  =  T2.idorder JOIN book AS T3 ON T2.isbn  =  T3.isbn WHERE T3.title  =  'The Little Prince' <MID>T1.idorder FROM orders AS T1 JOIN books_order AS T2 ON T1.idorder  =  T2.idorder JOIN book AS T3 ON T2.isbn  =  T3.isbn WHERE T3.title  =  'Pride and Prejud
SELECT T1.idorder FROM orders AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder JOIN book AS T3 ON T3.isbn  =  T1.isbn JOIN book AS T4 ON T4.isbn  =  T2.isbn WHERE T3.title  =  'Pride and Prejudice' AND T4.title  =  'The Little Prince' GROUP BY T1.idorder HAVING count(*)  =  2' <MID>T1.idorder FROM orders AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder JOIN book AS T3 ON T3.isbn  =  T1.isbn JOIN book AS T4 ON T4.isbn  =  T2.isbn WHERE T3.title  =  'Pride and Prejudice' AND T
SELECT T1.isbn FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder JOIN client AS T3 ON T3.IdClient  =  T2.IdClient WHERE T3.Name  =  'Peter Doe' INTERSECT SELECT T1.isbn FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder JOIN client AS T3 ON T3.IdClient  =  T2.IdClient WHERE T3.Name  =  'James Smith' <MID>     , numcc char(16) not null UNIQUE     , primary key (idclient)     , check (name != '')     , check (address != '')     , check (numcc != '')     , check (length(numcc)  =  16)     ,
SELECT T1.isbn FROM book AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder WHERE T2.dateorder  =  (SELECT min(dateorder) FROM orders WHERE idclient  =  (SELECT idclient FROM client WHERE name  =  'Peter Doe')) AND T2.dateorder  =  (SELECT min(dateorder) FROM orders WHERE idclient  =  (SELECT idclient FROM client WHERE name  =  'James Smith'))'     , ['T1.isbn']]     , ['SELECT T1.isbn FROM book AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder WHERE T2.dateorder  =  (SELECT min(dateorder) FROM orders WHERE idclient  =  (SELECT idclient FROM client WHERE name  =  'Peter Doe')) AND T2.date
SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.idclient  =  (SELECT idclient FROM client WHERE name  =  'Peter Doe') EXCEPT SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.idclient  =  (SELECT idclient FROM client WHERE name  =  'James Smith') <MID>     , numcc char(16) NOT NULL UNIQUE     , address varchar(60) NOT NULL     , name varchar(25) NOT NULL UNIQUE     , CONSTRAINT cli_pk PRIMARY KEY (idclient)     , CONSTRAINT cli_numcc_uq UNIQUE (numcc)     , CONSTRAINT cli_name_u
SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.idclient  =  'Doe' EXCEPT SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.idclient  =  'Smith' <MID>T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.idclient  =  'Doe' EXCEPT SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.idclient  =  'Smith' UNION SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.
SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient JOIN books_order AS T3 ON T2.idorder = T3.idorder JOIN book AS T4 ON T3.isbn = T4.isbn WHERE T4.title  =  'Pride and Prejudice' GROUP BY T1.name HAVING count(*)  >=  1' <MID>     , numcc char(16) NOT NULL UNIQUE     , address varchar(60) NOT NULL     , name varchar(25) NOT NULL UNIQUE     , email varchar(25) NOT NULL UNIQUE     , phone number(10,0) NOT NULL UNIQUE     , isadministrator boolean NOT NULL DEFAULT false )
SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient JOIN books_order AS T3 ON T2.idorder = T3.idorder JOIN book AS T4 ON T3.isbn = T4.isbn WHERE T4.title  =  'Pride and Prejudice' AND T1.name LIKE '%Pride and Prejudice%' GROUP BY T1.name HAVING count(*)  >=  1' <MID>T1.name LIKE '%Pride and Prejudice%' GROUP BY T1.name HAVING count(*)  >=  1'     , 'SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient JOIN books_order AS T3 ON T2.idorder = T3.idorder JOIN book AS T4 ON T3.is
SELECT count(*) FROM book' , '274' , 'How many reviews are there?[SQL] SELECT count(*) FROM review' , '1356' , 'On average how many readers read these books?[LINEAR] SELECT avg(Readers_in_Million) FROM review' , '20.5' , 'Which book has the highest number of pages?[SQL] SELECT title ,  pages FROM book ORDER BY pages DESC LIMIT 1' , 'The Silmarillion' , 'Which book has the lowest number of pages?[SQL] SELECT title ,  pages FROM book ORDER BY pages ASC LIMIT 1' , 'Sayings of the Century' , 'Which author wrote the most books?[SQL] SELECT author FROM book GROUP BY author ORDER BY count(*) DESC LIMIT 1' , 'J. R. R. Tolkien' , 'Which author wrote the least books
SELECT Title FROM book ORDER BY Title ASC'         , 'SELECT Title FROM book ORDER BY Title ASC'         , ['The C Programming Language', 'TCP/IP Illustrated', 'Head First PHP', 'Patterns of Enterprise Application Architecture']         , 0     , ['SELECT title FROM book ORDER BY title ASC']     , ['SELECT TYPE FROM book WHERE title  =  'The C Programming Language'']     , ['SELECT title FROM book WHERE TYPE  =  'reference'']      , ['SELECT title FROM book WHERE title != (SELECT min(title) FROM book)']     , ['SELECT title FROM book WHERE title != (SELECT max(title) FROM book)']      , ['SELECT title FROM book WHERE title BETWEEN (SELECT min(title) FROM book) AND (SELECT max(title) FROM book)']     , ['SELECT title FROM book WHERE title != (
SELECT title FROM book ORDER BY pages DESC'         , 'title': 'List the titles of books in descending order of pages.'}      ,   {   'query': 'SELECT title FROM book ORDER BY pages DESC' ,  'answer': ['The Lord of the Rings : The Two Towers', 'The Lord of the Rings : The Return of the King', 'The Lord of the Rings']}      ,   {   'query': 'SELECT title FROM book ORDER BY pages ASC' ,  'answer': ['Sayings of the Century', 'Maeve Ascendant', 'Practical Cryptography', 'The Lord of the Rings']}      ,   {   'query': 'SELECT title FROM book ORDER BY title DESC' ,  'answer': ['The Lord of the Rings : The Two Towers', 'The Lord of the Rings : The Return of the King', 'The Lord
SELECT TYPE ,  Release FROM book WHERE TYPE  =  'fiction' AND Release  >  1960 ORDER BY Release DESC LIMIT 3'     , ['SELECT TYPE ,  Release FROM book WHERE TYPE  =  'nonfiction' AND Release  >  1960 ORDER BY Release DESC LIMIT 3']]
SELECT max(Chapters) ,  min(Chapters) FROM book GROUP BY TYPE'         , 'max(Chapters) ,  min(Chapters)'         , ['SELECT max(Chapters) ,  min(Chapters) FROM book GROUP BY TYPE']     , ['SELECT max(Chapters) ,  min(Chapters) FROM book GROUP BY TYPE']     , ['SELECT max(Chapters) ,  min(Chapters) FROM book GROUP BY TYPE']      , 1     , ['SELECT max(Chapters) ,  min(Chapters) FROM book GROUP BY TYPE']     , ['SELECT max(Chapters) ,  min(Chapters) FROM book GROUP BY TYPE']     , ['SELECT max(Chapters) ,  min(Chapters) FROM book GROUP BY TYPE
SELECT Title FROM book WHERE TYPE != 'Poet' <MID>.com/problems/database-schema-diagram/1065/media/) | [TASK](https://sqlzoo.net/wiki/Diagrams_and_ER_Diagrams) | [DATABASE SCHEMA DIAGRAM](https://sqlzoo.net/wiki/Database_Schema_Diagram) | [ENTITY RELATIONSHIP DIAGRAM](https://sqlzoo.net/wiki/Entity_Relationship_Diagram) | [ER DIAGRAM](https://sqlzoo.net/wiki/ER_diagram) | [RELATIONAL MODEL](https://sqlzoo.net/wiki/Relational_model) | [RELATIONAL DATABASE](https://sqlzoo.net/wiki/Relational_database) | [RELATION](https
SELECT avg(Rating) FROM review'         , '4.257894736842105'     , ['SELECT avg(Rating) FROM review']     , ['SELECT count(*) FROM review']     , ['SELECT min(Rating) FROM review']     , ['SELECT max(Rating) FROM review']     , ['SELECT Rating FROM review ORDER BY Rating ASC LIMIT 1']     , ['SELECT Rating FROM review ORDER BY Rating DESC LIMIT 1']     , ['SELECT TYPE FROM book']     , ['SELECT COUNT(*) FROM book WHERE Pages  <  500']     , ['SELECT COUNT(*) FROM book WHERE Pages  >  500']     , ['SELECT COUNT(*) FROM book WHERE Chapters  <  500']     , ['SELECT COUNT(*) FROM book WHERE Chapters  >
SELECT T2.title ,  T1.rating FROM review AS T1 JOIN book AS T2 ON T1.book_id  =  T2.book_id WHERE T2.audio = 'Yes' AND T1.rating != -1 ORDER BY T1.rating DESC'
SELECT T1.Rating FROM review AS T1 JOIN book AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Chapters DESC LIMIT 1'         , '4.56'         , ['T1.Rating']     , ['T2.Chapters']     , 1     , 100     , ['SELECT max(T2.Chapters) FROM review AS T1 JOIN book AS T2 ON T1.Book_ID  =  T2.Book_ID']     , ['SELECT T1.Rating FROM review AS T1 JOIN book AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Chapters  =  (SELECT max(T2.Chapters) FROM review AS T1 JOIN book AS T2 ON T1.Book
SELECT Rank FROM review AS T1 JOIN book AS T2 ON T1.book_id  =  T2.book_id ORDER BY T2.pages LIMIT 1'         , '3'     ,   'SELECT Rank FROM review AS T1 JOIN book AS T2 ON T1.book_id  =  T2.book_id ORDER BY T2.pages LIMIT 1'     ,   ['T1','T2']     ,   ['rank','T1.Rating','T2.Title','T2.pages','T2.Chapters','T2.Audio','T2.Release']     ,   ['T1.Rating','T2.Title','T2.pages','T2.Chapters','T2.Audio','T2.Release']          ,   ['SELECT T1.Rating FROM review AS T1 JOIN book AS T2 ON
SELECT T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id ORDER BY rank DESC LIMIT 1'         , 'The Da Vinci Code'     , ['TITLE OF THE HIGHEST RANKED BOOK']     , ['SELECT T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id ORDER BY rank DESC LIMIT 1']     , ['SELECT T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id ORDER BY rank DESC LIMIT 1']     , ['SELECT T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id ORDER BY rank DESC LIMIT 1']
SELECT avg(Readers_in_Million) FROM review WHERE book_id IN (SELECT book_id FROM book WHERE TYPE  =  'Novel') <MID>.com/problems/average-number-of-readers/description/
SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE'         , 'audio' : ['SELECT Audio FROM book WHERE TYPE  =  'audio'']}     FROM DB SCHEMA: {'book': [['BOOK_ID', 'Title', 'Type', 'Pages', 'Chapters', 'Audio', 'Release']], 'review': [['Review_ID', 'Book_ID', 'Rating', 'Readers_in_Million', 'Rank']]}     WHERE TYPES ARE: audio     GROUP BY TYPE HAVING TYPE  =  'audio' ORDER BY COUNT(*) DESC LIMIT 1     ORDER BY TYPE ASC     LIMIT 1     ;
SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1'         , 'T1' : 'Audiobook'     , 'T2' : 'Hardcover'     , 'T3' : 'Paperback'     , 'T4' : 'eBook'     , 'T5' : 'Kindle Edition'     , 'T6' : 'Audio CD'     , 'T7' : 'eARC'     , 'T8' : 'Mobile App'     , 'T9' : 'Pamphlet'     , 'T10' : 'Hearing Aid'     , 'T11' : 'Binder'     , 'T12' : 'Broadcast'     , 'T13' : 'Blog'     , 'T14' : 'Newsletter
SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3'         , 'T1' : 'audiobook'         , 'T2' : 'paperback'         , 'T3' : 'hardcover'     , 'Q2' : 'SELECT TYPE FROM book GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1'     , 'Q3' : 'SELECT avg(Rating) FROM review'     , 'Q4' : 'SELECT title FROM book WHERE audio  =  'Yes''     , 'Q5' : 'SELECT max(Pages) FROM book'     , 'Q6' : 'SELECT min(Release) FROM book'     , 'Q7' : 'SELECT title FROM book WHERE chapters  =  0'     , 'Q8' : 'SELECT title FROM book WHERE title LIKE '%The%' AND title LIKE
SELECT T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id ORDER BY T2.rating ASC'         , 'T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id ORDER BY T2.rating ASC'     , ['SELECT title FROM book ORDER BY rating DESC']         , 'SELECT title FROM book ORDER BY rating DESC'     , ['SELECT T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id ORDER BY T2.rating DESC']         , 'SELECT T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id ORDER BY T2.rating DESC'      , ['SELECT T1
SELECT Title ,  Audio FROM book ORDER BY Audio DESC'         , 'T1.Title ,  T1.Audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID'     , 'SELECT avg(Readers_in_Million) FROM review'     , 'SELECT T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id GROUP BY T1.title ORDER BY avg(Readers_in_Million) DESC'     , 'SELECT T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id WHERE T1.audio != '' GROUP BY T1.title ORDER BY avg(Readers_in_Million) DESC'     , 'SELECT T1.title
SELECT count(*) FROM book WHERE book_id NOT IN (SELECT book_id FROM review) <MID>.com/problems/how-many-books-do-not-have-reviews/description/
SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50'         , 'SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50'     , 'SELECT TYPE FROM book WHERE Chapters  >  75 EXCEPT SELECT TYPE FROM book WHERE Chapters  <  50'     , 'SELECT TYPE FROM book WHERE Chapters  <  50 EXCEPT SELECT TYPE FROM book WHERE Chapters  >  75'     , 'SELECT TYPE FROM book WHERE Chapters  =  100 INTERSECT SELECT TYPE FROM book WHERE Pages  =  200'     , 'SELECT TYPE FROM book WHERE Pages  =  200 INTERSECT SELECT TYPE FROM book WHERE Chap
SELECT count(DISTINCT TYPE) FROM book'         , '2'         , ['SELECT count(DISTINCT TYPE) FROM book']         , ['SELECT count(DISTINCT TYPE) FROM book']     , [1]     , 1     , ['SELECT count(DISTINCT TYPE) FROM book']     , ['SELECT count(DISTINCT TYPE) FROM book']          , ['SELECT count(DISTINCT TYPE) FROM book']     , ['SELECT count(DISTINCT TYPE) FROM book']     , ['SELECT count(DISTINCT TYPE) FROM book']     , ['SELECT count(DISTINCT TYPE) FROM book']     , ['SELECT count(DISTINCT TYPE) FROM book']     , ['SELECT count(DISTINCT TYPE) FROM book']     , ['SELECT count(DIST
SELECT TYPE ,  Title FROM book WHERE book_id NOT IN (SELECT book_id FROM review) UNION SELECT TYPE ,  Title FROM review WHERE rating  =  'null' <MID>.com/problems/database-schema-diagram/1048/media/' alt='Diagram' width='750' height='350' />
SELECT count(*) FROM customer'         , '2'         , 'SELECT count(*) FROM customer'         , 'SELECT count(*) FROM branch'         , '3'     , ]     , [ 'SELECT count(*) FROM customer_order'         , '4'     , ]     , [ 'SELECT sum(Quantity) FROM customer_order'         , '5'     , ]     , [ 'SELECT avg(Quantity) FROM customer_order'         , '6'     , ]     , [ 'SELECT Dish_Name FROM customer_order GROUP BY Dish_Name ORDER BY count(*) DESC LIMIT 1'         , '7'     , ]     , [ 'SELECT T1.Dish_Name ,  sum(T1.Quantity) FROM customer_order AS T1 JOIN branch AS T2 ON T1
SELECT count(*) FROM customer'         , 'SELECT count(*) FROM customer'         , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , 'SELECT count(*) FROM customer'     , '
SELECT name FROM customer ORDER BY Level_of_Membership ASC'         , 'SELECT name FROM customer ORDER BY Level_of_Membership ASC'         , 'Customers are ordered by level of membership in ascending order'     , 4     , 1     , ['SELECT name FROM customer ORDER BY Level_of_Membership DESC']     , 'SELECT name FROM customer ORDER BY Level_of_Membership DESC'     , 'Customers are ordered by level of membership in descending order'     , 5     , 1     , []     , ''     , 6     , 1     , ['SELECT DISTINCT nationality FROM customer']     , 'SELECT DISTINCT nationality FROM customer'     , 'List all nationalities of customers'     , 7     , 1     , ['SELECT count(*) FROM customer
SELECT Name FROM customer ORDER BY Level_of_Membership ASC'         ,'SELECT Name FROM customer ORDER BY Level_of_Membership ASC'         ,'SELECT Name FROM customer ORDER BY Level_of_Membership ASC'     ,'SELECT Name FROM customer ORDER BY Level_of_Membership DESC'         ,'SELECT Name FROM customer ORDER BY Level_of_Membership DESC'     ,'SELECT Name FROM customer ORDER BY Level_of_Membership DESC'     ,'SELECT Name FROM customer ORDER BY Level_of_Membership DESC'     ,'SELECT Name FROM customer ORDER BY Level_of_Membership DESC'     ,'SELECT Name FROM customer ORDER BY Level_of_Membership DESC'     ,'SELECT Name FROM customer ORDER BY Level_of_Membership DESC'     ,'SELECT Name FROM customer ORDER BY Level_of_
SELECT Nationality ,  Card_Credit FROM customer'     , 'SELECT Nationality ,  Card_Credit FROM customer'     , ['SELECT Nationality ,  Card_Credit FROM customer']     , 'SELECT DISTINCT Nationality FROM customer'     , ['SELECT DISTINCT Nationality FROM customer']     , 'SELECT count(*) FROM customer'     , ['SELECT count(*) FROM customer']]
SELECT Nationality ,  Card_Credit FROM customer'         , 'SELECT Nationality ,  Card_Credit FROM customer'     , 'SELECT count(*) FROM customer ORDER BY Nationality ASC'         , 'SELECT count(*) FROM customer WHERE Card_Credit  >  2500 ORDER BY Nationality ASC'     , 'SELECT count(*) FROM customer WHERE Card_Credit  <=  2500 ORDER BY Nationality ASC'      , 'SELECT sum(Card_Credit) FROM customer'     , 'SELECT avg(Card_Credit) FROM customer'      , 'SELECT min(Card_Credit) FROM customer'     , 'SELECT max(Card_Credit) FROM customer'      , 'SELECT count(*) FROM customer ORDER BY NAME ASC'      , 'SELECT count(*) FROM customer WHERE NAME  =  'Malcom X' ORDER BY NAME ASC'      , '
SELECT Name FROM customer WHERE Nationality  =  'England' OR Nationality  =  'Australia' <MID>     , manager TEXT     , years_opened INT     , location_of_office TEXT     , PRIMARY KEY (branch_id)     , UNIQUE KEY branch_id_UNIQUE (branch_id)     , FULLTEXT KEY branch_email (email)     , FULLTEXT KEY branch_name_manager (name , manager)     , FULLTEXT KEY branch_city_state_zip (city , state , zip)     , FULLTEXT KEY branch_address (address)     , FULLTEXT KEY branch_city (city)     , FULLTEXT KEY branch_state (state)     , FULLTEXT KEY branch_zip (zip)
SELECT Name FROM customer WHERE Nationality  =  'England' OR Nationality  =  'Australia' <MID>     , manager TEXT     , years_opened INT     , location_of_office TEXT     , PRIMARY KEY (branch_id)     , UNIQUE KEY branch_id_UNIQUE (branch_id)     , FULLTEXT KEY branch_email (email)     , FULLTEXT KEY branch_name_manager (name , manager)     , FULLTEXT KEY branch_city_state_zip (city , state , zip)     , FULLTEXT KEY branch_address (address)     , FULLTEXT KEY branch_city (city)     , FULLTEXT KEY branch_state (state)     , FULLTEXT KEY branch_zip (zip)
SELECT avg(card_credit) FROM customer WHERE Level_of_Membership  >  1'         , 'SELECT avg(card_credit) FROM customer WHERE Level_of_Membership  >  1'         , ['SELECT avg(card_credit) FROM customer WHERE Level_of_Membership  >  1']     , 2     , ['SELECT count(*) FROM customer_order']     , 3     , ['SELECT sum(quantity) FROM customer_order']
SELECT avg(card_credit) FROM customer WHERE Level_of_Membership  >  1'         , 'answer': False     , 'difficulty': 2     , 'category': 'Basic Select'     , 'active': True     , 'created_by': 'admin'     , 'created_on': '2016-05-04T07:59:53.833772Z'     , 'question_type': 'MS'     , 'random_subtasks': null     , 'subtasks': null     , 'rank': 1111     , 'github_username': None     , 'solves': 0     , 'author': 'admin'     , 'difficulty_level': 1     , 'all_submissions': []     , '
SELECT Card_Credit FROM customer ORDER BY LEVEL_of_Membership DESC LIMIT 1'         , 'SELECT Card_Credit FROM customer ORDER BY LEVEL_of_Membership DESC LIMIT 1'     , 'SELECT max(Card_Credit) FROM customer'     , 'SELECT max(Card_Credit) FROM customer'     , 'SELECT max(Card_Credit) FROM customer'     , 'SELECT max(Card_Credit) FROM customer'     , 'SELECT max(Card_Credit) FROM customer'     , 'SELECT max(Card_Credit) FROM customer'     , 'SELECT max(Card_Credit) FROM customer'     , 'SELECT max(Card_Credit) FROM customer'     , 'SELECT max(Card_Credit) FROM customer'     , 'SELECT max(Card_Credit) FROM customer'
SELECT Card_Credit FROM customer ORDER BY LEVEL_of_Membership DESC LIMIT 1'         , 'SELECT Card_Credit FROM customer ORDER BY LEVEL_of_Membership DESC LIMIT 1'     , 'SELECT max(LEVEL_of_Membership) FROM customer'     , 'SELECT max(Card_Credit) FROM customer WHERE LEVEL_of_Membership  =  ( SELECT max(LEVEL_of_Membership) FROM customer )'     , 'SELECT Card_Credit FROM customer WHERE LEVEL_of_Membership  =  ( SELECT max(LEVEL_of_Membership) FROM customer )'     , 'SELECT max(Card_Credit) FROM customer WHERE LEVEL_of_Membership  =  ( SELECT max(LEVEL_of_Membership) FROM customer
SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'         , 'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'      , 'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     , 'SELECT National
SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     ,   'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     ,   'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     ,   'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     ,   'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     ,   'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     ,   'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     ,   'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     ,   'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     ,   'SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality'     ,   'SELECT Nationality ,  COUNT(*) FROM customer GROUP
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1'         , 'SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT max(Card_Credit) FROM customer'         , 'SELECT Card_Credit FROM customer GROUP BY Card_Credit ORDER BY COUNT(*) DESC LIMIT 1'      , 'SELECT DISTINCT Level_of_Membership FROM customer'         , 'SELECT count(*) FROM customer WHERE Level_of_Membership  =  3'      , 'SELECT count(*) FROM customer_order'         , 'SELECT count(*) FROM customer WHERE name  =  'Helen''      , 'SELECT count(*) FROM customer WHERE name  =  'Bob''      , 'SELECT count(*) FROM customer WHERE name  =  'Jenny''      , 'SELECT count(*) FROM customer WHERE
SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1'         , 'Turkish' , 3]      , ['SELECT Name FROM branch WHERE YEARS_opened  =  25' , 'Name' ,  'b1' ,  'SELECT manager FROM branch WHERE YEARS_opened  =  25' , 'manager' ,  'b1' ,  'SELECT DISTINCT manager FROM branch WHERE YEARS_opened  =  25' , 'managers' ,  'SELECT count(DISTINCT manager) FROM branch WHERE YEARS_opened  =  25' , 6]      , ['SELECT TYPE FROM menu' ,  'TYPE' ,  'Vegetable' ,  'SELECT dish_name FROM menu WHERE TYPE  =  'Vegetable'' ,
SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75'         ,'SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75'     ,'SELECT nationality FROM customer WHERE card_credit  <  50 INTERSECT SELECT nationality FROM customer WHERE card_credit  >  75'     ,'SELECT nationality FROM customer WHERE card_credit  <  50 INTERSECT SELECT nationality FROM customer WHERE card_credit  >  75'     ,'SELECT nationality FROM customer WHERE card_credit  <  50 INTERSECT SELECT nationality FROM customer WHERE card_credit  >  75'     ,'SELECT nationality FROM customer
SELECT Nationality FROM customer WHERE card_credit  >  50 INTERSECT SELECT Nationality FROM customer WHERE card_credit  <  75'         , 'SELECT Nationality FROM customer WHERE card_credit  >  50 INTERSECT SELECT Nationality FROM customer WHERE card_credit  <  75'     , 'SELECT Nationality FROM customer WHERE card_credit  >  50 EXCEPT SELECT Nationality FROM customer WHERE card_credit  <  75'     , 'SELECT Nationality FROM customer WHERE card_credit  <  75 EXCEPT SELECT Nationality FROM customer WHERE card_credit  >  50'     , 'SELECT T1.Nationality FROM customer AS T1 JOIN customer AS T2 ON T1.Nationality  =  T2.Nationality WHERE T1.card_credit  >  50 INTERSE
SELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN dish AS T3 ON T2.Dish_Name  =  T3.Dish_Name'         , 'SELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN dish AS T3 ON T2.Dish_Name  =  T3.Dish_Name'     , 'SELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN dish AS T3 ON T2.Dish_Name  =
SELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN dish AS T3 ON T2.Dish_Name  =  T3.Dish_Name'         , 'SELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN dish AS T3 ON T2.Dish_Name  =  T3.Dish_Name'     , 'SELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN dish AS T3 ON T2.Dish_Name  =
SELECT T1.name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id  =  T2.customer_id JOIN dish AS T3 ON T2.dish_name  =  T3.dish_name ORDER BY T2.quantity DESC'         , 'SELECT T1.name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id  =  T2.customer_id JOIN dish AS T3 ON T2.dish_name  =  T3.dish_name ORDER BY T2.quantity DESC'     , 'SELECT T1.name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id  =  T2.customer_id JOIN d
SELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN dish AS T3 ON T2.Dish_Name  =  T3.Dish_Name ORDER BY T2.Quantity DESC'         , 'SELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN dish AS T3 ON T2.Dish_Name  =  T3.Dish_Name ORDER BY T2.Quantity DESC'     , 'SELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID
SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name'         , 'SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name'     , 'SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name'     , 'SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T
SELECT T1.Name ,  sum(T2.quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name'         , 'SELECT T1.Name ,  sum(T2.quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name'     , 'SELECT T1.Name ,  sum(T2.quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name'     , 'SELECT T1.Name ,  sum(T2.quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_
SELECT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING sum(T2.quantity)  >  1'         , 'SELECT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING sum(T2.quantity)  >  1'     , 'SELECT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING sum(T2.quantity)  >  1'     , 'SELECT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1
SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Customer_ID HAVING SUM(T2.quantity)  >  1'         , 'SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Customer_ID HAVING SUM(T2.quantity)  >  1'     , 'SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Customer_ID HAVING SUM(T2.quantity)  >  1'     , 'SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1
SELECT DISTINCT manager FROM branch'         , 'SELECT DISTINCT manager FROM branch'         , 'SELECT DISTINCT manager FROM branch'     , 'SELECT count(DISTINCT manager) FROM branch'     , 'SELECT count(*) FROM branch'     , 'SELECT count(*) FROM customer_order'     , 'SELECT count(*) FROM customer'          , 'SELECT sum(card_credit) FROM customer'     , 'SELECT avg(card_credit) FROM customer' ]     FROM = [ 'FROM customer'     ;
SELECT DISTINCT manager FROM branch ORDER BY manager ASC'         , 'manager'     , ['SELECT DISTINCT manager FROM branch ORDER BY manager ASC']          , ['SELECT count(DISTINCT manager) FROM branch']     , ['SELECT count(*) FROM customer_order']     , ['SELECT count(*) FROM customer']     , ['SELECT count(*) FROM branch']]
SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order)'         , 'SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order)'     ,   'SELECT DISTINCT name FROM customer EXCEPT (SELECT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id  =  T2.customer_id)']
SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order)'         , 'SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order)'     ,   'SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order)', 'SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order)']      , 2: ['SELECT DISTINCT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id  =  T2.customer_id' , 'SELECT DISTINCT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id  =  T2.customer_id' , 'SELECT DISTINCT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T
SELECT count(*) FROM member'         , '2'         , ['SELECT count(*) FROM member']         , ['SELECT count(*) FROM club_leader']     , 3         , ['SELECT count(*) FROM club']     , 4         , ['SELECT count(*) FROM activity']      , 5         , ['SELECT count(*) FROM club_activity_participation']     , 6         , ['SELECT count(*) FROM email']      , 7         , ['SELECT count(*) FROM sms']     , 8         , ['SELECT count(*) FROM activity_email_notification']     , 9         , ['SELECT count(*) FROM activity_sms_notification']      , 10         , ['SELECT count(*) FROM club_activity_participation']     , 11         , ['SELECT count(*) FROM session']      , 12
SELECT Name FROM member ORDER BY Age ASC'         ,'SELECT Name FROM member ORDER BY Age ASC'         ,'List the names of members in descending order of age. [SQL] SELECT Name FROM member ORDER BY Age DESC'         ,'SELECT Name FROM member ORDER BY Age DESC'         ,'List the names of members in ascending order of name. [SQL] SELECT Name FROM member ORDER BY Name ASC'         ,'SELECT Name FROM member ORDER BY Name ASC'         ,'List the names of members in descending order of name. [SQL] SELECT Name FROM member ORDER BY Name DESC'         ,'SELECT Name FROM member ORDER BY Name DESC'     ,'List the club names in ascending order of overall ranking. [SQL] SELECT club_name FROM club ORDER BY overall_ranking ASC'         ,'SELECT club_name FROM club ORDER BY overall_ranking ASC'         ,'
SELECT Name ,  Nationality FROM member'         , 'SELECT Name ,  Nationality FROM member'     , 'SELECT name ,  nationality FROM member'     , ['name ,  nationality FROM member']     , ['name ,  nationality FROM member']      , 0.25185185185185183]      , ['SELECT name ,  nationality FROM member' , 0.25185185185185183]      , ['SELECT name ,  nationality FROM member' , 0.25185185185185183]      , ['SELECT name ,  nationality FROM member' , 0.25185185185185183]      , ['SELECT name ,  nationality FROM member
SELECT Name FROM member WHERE Nationality != 'England' <MID>     , club_leader.year_join  =  T1.year_join ON club.club_id  =  club_leader.club_id JOIN member ON club_leader.member_id  =  member.member_id WHERE club.club_name  =  'ABC' UNION SELECT T3.name FROM club AS T1 JOIN club_leader AS T2 ON club.club_id  =  T1.club_id JOIN member AS T3 ON T2.member_id  =  T3.member_id WHERE T1.club_name  =  'XYZ' ORDER BY T3.age DESC LIMIT 3'
SELECT Name FROM member WHERE Age  =  19 OR Age  =  20'         , 'SELECT Name FROM member WHERE Age  =  19 OR Age  =  20'         , ['SELECT Name FROM member WHERE Age  =  19 OR Age  =  20']     , 3     , ['SELECT Name FROM member WHERE Age  =  19 OR Age  =  20']     , ['SELECT Name FROM member WHERE Age  =  19 OR Age  =  20']
SELECT Name FROM member ORDER BY Age DESC LIMIT 1'         ,'T2']['answer'] = 'SELECT Name FROM member ORDER BY Age DESC LIMIT 1'         ,'T2']['sql'] = 'SELECT Name FROM member ORDER BY Age DESC LIMIT 1'     ,'T3'] = {}         ,'T3']['question'] = 'Which club has the highest overall ranking?[SQL] SELECT club_name FROM club ORDER BY overall_ranking DESC LIMIT 1'         ,'T3']['answer'] = 'SELECT club_name FROM club ORDER BY overall_ranking DESC LIMIT 1'         ,'T3']['sql'] = 'SELECT club_name FROM club ORDER BY overall_ranking DESC LIMIT 1'     ,'T4'] = {}         ,'T4']['question'] = 'Which club has the lowest overall ranking?[SQL] SELECT club_name FROM
SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality'         , 'SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality'      , 'SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality'     , 'SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality'     , 'SELECT National
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1'         , 'answer': 'Italian'     , 'difficulty': 2     , 'tags': ['NATIONALITY']     , 'image': 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/a1/Flag_of_Italy.svg/450px-Flag_of_Italy.svg.png'     , 'precedence': 1     , 'cluster': 'nationality'     , 'author': 'https://github.com/mah60'     , 'timestamp': 1517389685000     , 'index': 11     , 'try': 0     , 'isTest': false     , 'choice1': 'German'
SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2]'         , 'answer': 'England'     , 'difficulty': 1     , 'category': 'Database'     , 'image': 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Badge_of_the_Order_of_the_Green_Cross.png/220px-Badge_of_the_Order_of_the_Green_Cross.png'     , 'subcategory': 'NATIONALITY'     , 'points': 150} ,   {   'question': 'Which club has the highest overall ranking?[SQL] SELECT club_name FROM club ORDER BY overall_ranking LIMIT 1]'         , 'answer': 'German Club'     , 'diff
SELECT T2.Name ,  T1.year_join FROM club_leader AS T1 JOIN club AS T2 ON T1.club_id  =  T2.club_id'         , 'SELECT T2.Name ,  T1.year_join FROM club_leader AS T1 JOIN club AS T2 ON T1.club_id  =  T2.club_id'     , 'SELECT T2.Name ,  T1.year_join FROM club_leader AS T1 JOIN club AS T2 ON T1.club_id  =  T2.club_id'     , 'SELECT T2.Name ,  T1.year_join FROM club_leader AS T1 JOIN club AS T2 ON T1.club_id  =  T2.club_id'     , 'SELECT T2.Name ,  T1.year_
SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T1.Club_ID  =  T3.Club_ID WHERE T3.Overall_Ranking  >  100'         , 'SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T1.Club_ID  =  T3.Club_ID WHERE T3.Overall_Ranking  >  100'     ,'SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T1.Cl
SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T1.Club_ID  =  T3.Club_ID WHERE T1.Year_Join  <  2018'         , 'SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T1.Club_ID  =  T3.Club_ID WHERE T1.Year_Join  <  2018'     , 'SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T1.Club_ID
SELECT t2.Name FROM club AS t1 JOIN club_leader AS t2 ON t1.Club_ID  =  t2.Club_ID WHERE t1.Club_Name  =  'Houston' <MID>_ID  =  t2.Club_ID WHERE t1.Club_Name  =  'Houston' AND t2.Year_Join  =  2003'
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)'         , 'SELECT Name FROM member'     , 'SELECT T1.Name FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID  =  T2.Member_ID'     , 'SELECT T1.Name FROM member AS T1 EXCEPT SELECT T2.Name FROM club_leader AS T2'     , 'SELECT Name FROM member EXCEPT SELECT T1.Name FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID  =  T2.Member_ID'          , 'SELECT name FROM member EXCEPT SELECT T1.name FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID  =  T2.Member_ID'     , 'SELECT
SELECT Nationality FROM member WHERE age  >  22 INTERSECT SELECT Nationality FROM member WHERE age  <  19'         , 'answer': 'Turkey'     , 'difficulty': 3     , 'category': 'Basic Select'     , 'active': True     , 'created_by': 'Tutor'     , 'created_on': '2017-05-24T17:18:58.267773Z'     , 'question_type': 'MULTIPLE_CHOICE'     , 'choices': ['Germany', 'Italy', 'Spain', 'Turkey']     , 'grading_strategy': 'exact'     , 'student_view': False     , 'images': []     , 'code': []     , '
SELECT avg(T1.age) FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T1.Nationality  =  'English' AND T2.year_join  =  '2018' GROUP BY T2.year_join HAVING avg(T1.age)  >  35' <MID>     , club_name FROM club ORDER BY overall_ranking ASC LIMIT 3'     , 'SELECT club_leader FROM club ORDER BY overall_ranking DESC LIMIT 3'     , 'SELECT count(*) FROM club'     , 'SELECT count(*) FROM club_leader'     , 'SELECT count(DISTINCT club_id) FROM club_leader'     , 'SELECT count(DISTINCT name) FROM club'     , 'SELECT count(DIST
SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM club WHERE club_name LIKE '%state%'  SELECT club_name FROM
SELECT t1.collection_subset_name FROM collection_subsets AS t1 JOIN collection_subset_members AS t2 ON t1.collection_subset_id  =  t2.collection_subset_id GROUP BY t2.collection_subset_id ORDER BY count(*) DESC LIMIT 10'         , 'answer': 'Collection Subset 10'     , 'difficulty': 'Hard'     , 'category': 'Identification'     , 'image': 'https://raw.githubusercontent.com/Zizzoz/Coursera-Getting-and-Cleaning-Data/master/Images/task3.png'     , 'choices': ['Collection Subset 1', 'Collection Subset 2', 'Collection Subset 3', 'Collection Subset 4', 'Collection Subset 5', 'Collection Subset 6
SELECT collection_subset_name FROM collection_subsets ORDER BY collection_subset_id ASC'         ,'Collection Subset Names']]     ,['database','SELECT collection_subset_name FROM collection_subsets ORDER BY collection_subset_id ASC']]     ,['database','SELECT document_subset_name FROM document_subsets ORDER BY document_subset_id ASC']]     ,['database','SELECT T1.collection_subset_name FROM collection_subsets AS T1 JOIN collection_subset_members AS T2 ON T1.collection_subset_id  =  T2.collection_subset_id']]     ,['database','SELECT T1.document_subset_name FROM document_subsets AS T1 JOIN document_subset_members AS T2 ON T1.document_subset_id  =  T2.document_subset_id']]     ,['database','SELECT T
SELECT collecrtion_subset_details FROM collection_subsets WHERE collection_subset_name  =  'Top collection' <MID>_Subset_ID INTEGER NOT NULL , Related_Document_Object_ID INTEGER NOT NULL , Document_Subset_ID INTEGER NOT NULL , PRIMARY KEY (Document_Object_ID , Related_Document_Object_ID) , FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID) , FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID) , FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID) ) CREATE TABLE Collections ( Collection_ID INTEGER NOT NULL , Parent_Collection_ID INTEGER , Collection_Name VARCHAR(
SELECT T1.collection_description FROM collections AS T1 JOIN collection_subset_members AS T2 ON T1.collection_id  =  T2.collection_id JOIN collection_subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.collection_subset_name  =  'Top collection' GROUP BY T1.collection_description ORDER BY count(*) DESC LIMIT 1 OFFSET 0'     ,'SELECT T1.collection_description FROM collections AS T1 JOIN collection_subset_members AS T2 ON T1.collection_id  =  T2.collection_id JOIN collection_subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.collection_subset_name  =  'Top collection' GROUP BY T1.collection_description ORDER BY count(*)
SELECT t1.Document_Subset_Name FROM Document_Subsets AS t1 JOIN Document_Subset_Members AS t2 ON t1.Document_Subset_ID  =  t2.Document_Subset_ID GROUP BY t1.Document_Subset_Name HAVING count(*)  >  1 UNION SELECT t1.Document_Subset_Name FROM Document_Subsets AS t1 JOIN Document_Subset_Members AS t2 ON t1.Document_Subset_ID  =  t2.Document_Subset_ID GROUP BY t1.Document_Subset_Name HAVING count(*)  =  1 ORDER BY t1.Document_Subset_Name ASC'         ,'SELECT t1.Document_Subset_Name FROM Document_Subsets AS t1 JOIN Document_Subset_Members AS t2 ON t1.Document_Subset_ID
SELECT Document_Subset_Name FROM Document_Subsets'         , 'Document Subset Names' :  ['Detailed Description', 'Summary Description']}     ,   {   'query' : 'SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID  =  1' ,   'answer' : 'Summary Description'}     ,   {   'query' : 'SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID  =  2' ,   'answer' : 'Detailed Description'}     ,   {   'query' : 'SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID  =  3' ,   'answer' : None}     ,   {   'query' : 'SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000' <MID>subset_members AS T1 ON Document_Subset_ID  =  Document_Subset_ID JOIN documents_in_collections AS T2 ON Document_Object_ID  =  Document_Object_ID WHERE T2.collection_id  =  1 UNION SELECT T2.document_object_id ,  NULL ,  T1.document_subset_id FROM document_subset_members AS T1 JOIN documents_in_collections AS T2 ON Document_Object_ID  =  Document_Object_ID WHERE T2.collection_id  =  1)' AS query UNION SELECT DISTINCT document_object_id FROM documents_in_collections WHERE collection_id  =  1)' AS query UNION SELECT DISTINCT document_object_id FROM documents_in_collections
SELECT Document_Subset_Name ,  Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000' <MID>subset_members AS t3 ON t1.document_object_id  =  t3.document_object_id JOIN document_subsets AS t2 ON t2.document_subset_id  =  t3.document_subset_id WHERE t2.document_subset_name  =  'Best for 2000' GROUP BY t1.document_object_id ORDER BY count(*) DESC LIMIT 10'     ,'SELECT t1.document_object_id FROM document_subset_members AS t3 JOIN document_subsets AS t2 ON t2.document_subset_id  =  t3.document_subset_id JOIN document_objects AS t1 ON t1
SELECT document_id FROM Documents_in_Collections'         , 'answer': 1}     , {'question': 'SELECT document_object_id FROM Document_Subset_Members'         , 'answer': 2}     , {'question': 'SELECT related_document_object_id FROM Document_Subset_Members'         , 'answer': 3}     , {'question': 'SELECT document_subset_id FROM Document_Subset_Members'         , 'answer': 4}     , {'question': 'SELECT document_subset_id FROM Document_Subset_Members WHERE document_subset_id  =  2'         , 'answer': 5}     , {'question': 'SELECT count(*) FROM Document_Subset_Members WHERE document_subset_id  =  2'         , 'answer': 6}
SELECT document_object_id FROM document_objects WHERE description  =  'Test' UNION SELECT document_object_id FROM document_subset_members WHERE related_document_object_id  =  (SELECT document_object_id FROM document_objects WHERE description  =  'Test')'     , '4' ] , [ 'SELECT document_object_id FROM document_objects WHERE description  =  'Test' UNION SELECT document_object_id FROM document_subset_members WHERE related_document_object_id  =  (SELECT document_object_id FROM document_objects WHERE description  =  'Test')'', '4' ] , [ 'SELECT document_object_id FROM document_objects WHERE description  =  'Test' UNION SELECT document_object_id FROM document_subset_members WHERE related_document_object_id  =  (SELECT document_object_id FROM document_objects WHERE description
SELECT T1.document_object_id FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_object_id  =  T2.related_document_object_id WHERE T1.Owner  =  'Marlin' AND T2.document_subset_id  =  2' > parent_document_id.txt'     , ['parent_document_id.txt']     , 'parent_document_id.txt'     , 'T1.document_object_id FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_object_id  =  T2.related_document_object_id WHERE T1.Owner  =  'Marlin' AND T2.document_subset_id  =  2'     , ['SELECT T1.document_object_id
SELECT document_object_id FROM document_objects WHERE Owner  =  'Marlin' UNION SELECT parent_document_object_id FROM document_objects WHERE Owner  =  'Marlin' <MID>subset_members AS t3 ON t1.document_object_id  =  t3.document_object_id JOIN document_subsets AS t4 ON t3.document_subset_id  =  t4.document_subset_id WHERE t4.document_subset_name  =  'Marlin_Group' UNION SELECT t2.document_object_id FROM document_objects AS t1 JOIN document_subset_members AS t2 ON t1.document_object_id  =  t2.related_document_object_id WHERE t1.owner  =  'Marlin' UNION SELECT t2.document_object_id FROM document_objects AS t1 JOIN document_subset_members AS
SELECT Owner FROM Document_Objects WHERE Description  =  'Braeden Collection' UNION SELECT Owner FROM Documents_in_Collections AS T1 JOIN Document_objects AS T2 ON T1.document_object_id  =  T2.document_object_id WHERE T2.Description  =  'Braeden Collection' <MID>_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID ,  Document_Subset_ID) VALUES (406 ,  437 ,  2)', 'INSERT INTO Document_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID ,  Document_Subset_ID) VALUES (437 ,  406 ,  2)', 'INSERT INTO Document_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID ,  Document_Subset
SELECT T1.owner FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.document_object_id  =  T2.document_object_id JOIN Collections AS T3 ON T2.collection_id  =  T3.collection_id WHERE T3.collection_name  =  'Braeden Collection' GROUP BY T1.owner HAVING count(*)  =  (SELECT count(*) FROM Document_Objects AS T4 JOIN Documents_in_Collections AS T5 ON T4.document_object_id  =  T5.document_object_id JOIN Collections AS T6 ON T5.collection_id  =  T6.collection_id WHERE T6.collection_name  =  'Braeden Collection') ORDER BY count(*) DESC LIMIT 1 OFFSET 0 <MID>subset_members', 'document_subset_id', 'document_
SELECT T1.owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_object_id  =  T2.related_document_object_id JOIN Document_Subsets AS T3 ON T3.document_subset_id  =  T2.document_subset_id WHERE T3.Document_Subset_Name  =  'Parent' AND T1.description  =  'Marlin' <MID>_name FROM Document_Subsets WHERE document_subset_name  =  'Parent' UNION SELECT t3.document_subset_name FROM Document_Subsets AS t3 JOIN Document_Subset_Members AS t4 ON t3.document_subset_id  =  t4.document_subset_id JOIN Document_Objects AS t1 ON t1.document_object_id  =  t4.related_document_object_id JOIN
SELECT t1.owner FROM Document_Objects AS t1 JOIN Document_Subset_Members AS t2 ON t1.document_object_id  =  t2.related_document_object_id WHERE t1.owner  =  'Marlin' AND t2.document_subset_id  =  2' > parent_of_every_marlins_documents.sql'
SELECT T1.Description FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID  =  T2.Document_Object_ID WHERE T1.Parent_Document_Object_ID  =  -1'         , 'parentdocumentdescriptions' : ['The root document.']}     , {'question': 'What is the name of the collection subset with the id 2?', 'answer': 'Subset 2', 'collectionsubsetname' : 'Subset 2'}     , {'question': 'Which collections are members of the collection subset with id 2?', 'answer': 'Collection 1 and Collection 3', 'collections' : ['Collection 1', 'Collection 3']}     , {'question': 'Select the name of the document subset with Document_Subset_ID 2.', 'answer': 'Sub
SELECT T1.Description FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID  =  T2.Document_Object_ID WHERE T2.related_document_object_id  =  -1'         , 'parent_descriptions' : ['The root document.', 'Another root document.']}     , {'question': 'What are all the documents that are members of the Collection Subset A?', 'answer': 'SELECT T1.description FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id  =  T2.document_object_id JOIN document_subsets AS T3 ON T2.document_subset_id  =  T3.document_subset_id WHERE T3.document_subset_name  =  'Collection Subset A'',
SELECT count(*) FROM Document_Objects WHERE Owner  =  'Marlin' <MID>_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (103 ,  104)')     , ('INSERT INTO Document_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (104 ,  105)')     , ('INSERT INTO Document_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (105 ,  106)')     , ('INSERT INTO Document_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (106 ,  107)')     , ('INSERT INTO Document_Subset_Members (Document_Object_ID ,
SELECT count(*) FROM Document_Objects WHERE Owner  =  'Marlin' <MID>_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (103 ,  104)')     , ('INSERT INTO Document_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (104 ,  105)')     , ('INSERT INTO Document_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (105 ,  106)')     , ('INSERT INTO Document_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (106 ,  107)')     , ('INSERT INTO Document_Subset_Members (Document_Object_ID ,
SELECT document_object_id FROM document_objects WHERE document_object_id NOT IN (SELECT parent_document_object_id FROM document_objects) UNION SELECT document_object_id FROM document_subset_members WHERE document_object_id NOT IN (SELECT related_document_object_id FROM document_subset_members) UNION SELECT document_object_id FROM collection_subset_members WHERE collection_id NOT IN (SELECT collection_id FROM documents_in_collections) UNION SELECT document_object_id FROM documents_in_collections WHERE document_object_id NOT IN (SELECT document_object_id FROM collection_subset_members) UNION SELECT document_object_id FROM collection_subset_members WHERE collection_subset_id NOT IN (SELECT collection_subset_id FROM collection_subsets) UNION SELECT document_object_id FROM document_subset_members WHERE document_subset_id NOT IN (SELECT document_subset_
SELECT document_object_id FROM document_objects WHERE parent_document_object_id  =  -1 UNION SELECT document_object_id FROM document_subset_members WHERE document_object_id  =  -1'         , 'answer': [3]     ,   'explanation': 'All non-parent documents have document_object_id of 3'     ,   'selected': False     ,   'index': 40     ,   'is_training': True     ,   'is_sample': False     ,   'task_mode': 'verification'     ,   'id': 40     ,   'database': {'table_names': ['document_subsets', 'collection_subsets', 'document_objects', 'collections', 'documents_in_collections', 'document_subset_members', 'collection_subset_members'], 'column
SELECT T1.document_object_id ,  count(*) FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id  =  T2.related_document_object_id GROUP BY T1.document_object_id ORDER BY count(*) DESC LIMIT 1000000'         , 'answer': [['T1.document_object_id' ,  'count(*)']]},
SELECT T1.document_object_id ,  count(*) FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id  =  T2.related_document_object_id GROUP BY T1.document_object_id ORDER BY count(*) DESC'         , 'SELECT T1.document_object_id ,  count(*) FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id  =  T2.related_document_object_id GROUP BY T1.document_object_id ORDER BY count(*) DESC'     , ['SELECT T1.document_object_id ,  count(*) FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id  =  T2.related_document_object_id GROUP BY T1.document_
SELECT collection_name FROM COLLECTIONS'         , 'SELECT collection_name FROM COLLECTIONS'         , 'List the name of all document subsets. [SQL] SELECT document_subset_name FROM document_subsets'         , 'SELECT document_subset_name FROM document_subsets'         , 'List the name of all collection subsets. [SQL] SELECT collection_subset_name FROM collection_subsets'         , 'SELECT collection_subset_name FROM collection_subsets'     ,   'List the name of all document objects. [SQL] SELECT Description FROM document_objects'         , 'SELECT Description FROM document_objects'         , 'List the name of all collections. [SQL] SELECT collection_name FROM collections'         , 'SELECT collection_name FROM collections'         , 'List the name of all document subsets. [SQL] SELECT document_subset_name FROM document_subsets
SELECT collection_name FROM COLLECTIONS'         , 'Collection_1' ]  ,  ['SELECT collection_name FROM COLLECTIONS' ,  'Collection_2' ]  ,  ['SELECT collection_name FROM COLLECTIONS' ,  'Collection_3' ]  ,  ['SELECT collection_name FROM COLLECTIONS' ,  'Collection_4' ]  ,  ['SELECT collection_name FROM COLLECTIONS' ,  'Collection_5' ]  ]     ,   [   'SELECT T1.collection_name FROM COLLECTIONS AS T1 JOIN document_subset_members AS T2 ON T1.collection_id  =  T2.document_subset_id' ,  'SELECT T1.collection_name FROM COLLECTIONS AS T1 JOIN collection_subset_members AS T2 ON T1.collection_id  =  T2.collection_subset_id'
SELECT collection_description FROM COLLECTIONS WHERE collection_name  =  'Best' <MID>_Subset_ID INTEGER NOT NULL, Document_Subset_Name VARCHAR(255) NOT NULL , Document_Subset_Details VARCHAR(255) NOT NULL , PRIMARY KEY (Document_Subset_ID) ) CREATE TABLE Collection_Subsets ( Collection_Subset_ID INTEGER NOT NULL , Collection_Subset_Name VARCHAR(255) NOT NULL , Collecrtion_Subset_Details VARCHAR(255) NOT NULL , PRIMARY KEY (Collection_Subset_ID) ) CREATE TABLE Document_Objects ( Document_Object_ID INTEGER NOT NULL , Parent_Document_Object_ID INTEGER , Owner VARCHAR(255) , Description VARCHAR(255) , Other_Details VARCHAR(255) , PRIMARY KEY (Document_Object_ID) )
SELECT collection_description FROM collections WHERE collection_name  =  'Best' <MID>_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (1003 ,  1004)     , (1004 ,  1005)     , (1005 ,  1006)     , (1006 ,  1007)     , (1007 ,  1008)     , (1008 ,  1009)     , (1009 ,  1010)     , (1010 ,  1011)     , (1011 ,  1012)     , (1012 ,  1013) TYPE =
SELECT t1.collection_name FROM collections AS t1 JOIN documentsincollections AS t2 ON t1.collection_id  =  t2.collection_id WHERE t1.collection_name  =  'Nice' AND t1.parent_collection_id != null'     ,   'SELECT t1.collection_name FROM collections AS t1 JOIN documentsincollections AS t2 ON t1.collection_id  =  t2.collection_id WHERE t1.collection_name  =  'Nice' AND t1.parent_collection_id != null' : 'SELECT t1.collection_name FROM collections AS t1 JOIN documentsincollections AS t2 ON t1.collection_id  =  t2.collection_id WHERE t1.collection_name  =  'Nice' AND t1.parent_collection_id != null',         ,   'SELECT t1.collection
SELECT T1.collection_name FROM Collections AS T1 JOIN documents_in_collections AS T2 ON T1.collection_id  =  T2.collection_id WHERE T2.document_object_id IN (SELECT document_object_id FROM Documents WHERE collection_name  =  'Nice' )'     ,   'SELECT T1.collection_name FROM Collections AS T1 JOIN documents_in_collections AS T2 ON T1.collection_id  =  T2.collection_id WHERE T2.document_object_id IN (SELECT document_object_id FROM Documents WHERE collection_name  =  'Nice' )'     ,   'SELECT T1.collection_name FROM Collections AS T1 JOIN documents_in_collections AS T2 ON T1.collection_id  =  T2.collection_id WHERE T2.document_object_id IN
SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections) <MID>_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID ,  Document_Subset_ID) VALUES ('1003' ,  '4678' ,  2)
SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections) UNION SELECT collection_name FROM collections WHERE collection_id  =  -1'         ,'answer': 'Collection A'     ,   'category': 'DB'     ,   'difficulty': 'Hard'     ,   'note': ''     ,   'image': 'https://raw.githubusercontent.com/Zhenye-N/CSC346_2021_Spring/master/assets/images/task1.png'     ,   'choices': ['Collection A', 'Collection B', 'Collection C']     ,   'correct': 'answer'     ,   'type': 'MS'     ,   'subtasks': []     ,   'min_selection': 1     ,   'max_selection': 10
SELECT parent_document_object_id FROM document_objects GROUP BY parent_document_object_id HAVING count(*)  >  1 UNION SELECT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NULL GROUP BY parent_document_object_id HAVING count(*)  >  1'         , 'answer': 'Document ID: 3'     , 'difficulty': 'Hard'     , 'category': 'Data Structures'     , 'active': True     , 'created_by': 'Tanay'     , 'created_on': '2018-07-26T14:46:58.297172Z'     , 'solved_by': []     , 'images': []     , 'like_count': 0     , 'comment_count':
SELECT document_object_id FROM document_subset_members GROUP BY document_object_id HAVING count(*)  >  1 UNION SELECT document_object_id FROM document_subset_members GROUP BY document_object_id HAVING count(*)  >  1 ORDER BY document_object_id ASC'         , 'answer': [3]     , 'category': 'a'     , 'difficulty': 1     , 'type': 'OR'     , 'image': '/static/images/task4.png'     , 'choices': ['3', '5', '7']     , 'correct': ['3']     , 'description': 'Based on the provided database schema information, What are the ids of the documents that have more than one child?'     , 'meta': {'is_subquery': False}     , 'sql': 'SELECT document_object_
SELECT count(*) FROM Collections WHERE parent_collection_id IN ( SELECT collection_id FROM collections WHERE collection_name  =  'Best' ) AND collection_name != 'Best' GROUP BY parent_collection_id HAVING count(*)  >  1000 UNION ALL SELECT count(*) FROM Collections WHERE parent_collection_id IN ( SELECT collection_id FROM collections WHERE collection_name  =  'Best' ) AND collection_name != 'Best' GROUP BY parent_collection_id HAVING count(*)  <=  1000 UNION ALL SELECT count(*) FROM Collections WHERE parent_collection_id IN ( SELECT collection_id FROM collections WHERE collection_name  =  'Best' ) AND collection_name != 'Best' GROUP BY parent_collection_id HAVING count(*)  >=  3000 UNION ALL SELECT count(*) FROM Collections WHERE parent_collection_id IN ( SELECT collection_id FROM collections
SELECT count(*) FROM Collections WHERE Parent_Collection_ID IN ( SELECT collection_id FROM Collections WHERE collection_name  =  'Best' ) UNION SELECT count(*) FROM Collections WHERE collection_name  =  'Best' <MID>_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (1003 ,  1004) INSERT INTO Document_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (1004 ,  1005) INSERT INTO Document_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (1005 ,  1006) INSERT INTO Document_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (1006 ,  10
SELECT T1.Document_id FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id  =  T2.related_document_object_id WHERE T1.owner  =  'Ransom' UNION SELECT document_id FROM document_objects WHERE owner  =  'Ransom' <MID>_name FROM documents_in_collections AS T1 JOIN collections AS T2 ON T1.collection_id  =  T2.collection_id WHERE T2.collection_name  =  'Group A' UNION SELECT T1.document_id FROM document_objects AS T1 JOIN documents_in_collections AS T2 ON T1.document_object_id  =  T2.document_object_id WHERE T2.collection_id  =  4 AND T1.description  =  'Grade 3' UNION SELECT T1.document_
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID  =  T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T3.Document_Subset_ID  =  T2.Document_Subset_ID WHERE T1.Owner  =  'Ransom' AND T3.Document_Subset_Name  =  'Directly Related' UNION SELECT T1.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID  =  T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T3.Document_Subset_ID  =  T2.Document_Subset_ID WHERE T1.Owner  =  'Ransom'
SELECT T1.collection_subset_id ,  T1.collection_subset_name ,  count(*) FROM collection_subsets AS T1 JOIN collections AS T2 ON T1.collection_subset_id  =  T2.collection_subset_id GROUP BY T1.collection_subset_id <MID>_Subset_ID INTEGER NOT NULL ,  Document_Subset_Name VARCHAR(255) NOT NULL ,  Document_Subset_Details VARCHAR(255) NOT NULL ,  PRIMARY KEY (Document_Subset_ID) ) CREATE TABLE Collection_Subsets ( Collection_Subset_ID INTEGER NOT NULL ,  Collection_Subset_Name VARCHAR(255) NOT NULL ,  Collecrtion_Subset_Details VARCHAR(255) NOT NULL ,  PRIMARY KEY (Collection_Subset_ID) ) CREATE TABLE Document_Objects ( Document_Object_
SELECT T1.collection_subset_id ,  T1.collection_subset_name ,  count(*) FROM collection_subsets AS T1 JOIN collections AS T2 ON T1.collection_subset_id  =  T2.collection_subset_id GROUP BY T1.collection_subset_id <MID>_Subset_ID INTEGER NOT NULL ,  Document_Subset_Name VARCHAR(255) NOT NULL ,  Document_Subset_Details VARCHAR(255) NOT NULL ,  PRIMARY KEY (Document_Subset_ID) ) CREATE TABLE Collection_Subsets ( Collection_Subset_ID INTEGER NOT NULL ,  Collection_Subset_Name VARCHAR(255) NOT NULL ,  Collecrtion_Subset_Details VARCHAR(255) NOT NULL ,  PRIMARY KEY (Collection_Subset_ID) ) CREATE TABLE Document_Objects ( Document_Object_
SELECT document_object_id ,  count(*) FROM document_objects GROUP BY document_object_id ORDER BY count(*) DESC LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT document_object_id ,  count(*) FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY document_object_id ORDER BY count(*) DESC LIMIT 1000'         , 'answer': None}     , {'question': 'Select all documents that are not in any collection.', 'query': 'SELECT * FROM Documents WHERE document_id NOT IN (SELECT document_id FROM collections)', 'answer': None}     , {'question': 'Select all documents that are not in any collection subset.', 'query': 'SELECT * FROM Documents WHERE document_id NOT IN (SELECT document_id FROM document_subsets)', 'answer': None}     , {'question': 'Select all documents that are not in any collection.', 'query': 'SELECT * FROM Documents WHERE document_id NOT IN (SELECT document_id FROM collections)', 'answer': None}     ,
SELECT document_object_id ,  count(*) FROM Document_subset_members GROUP BY document_object_id ORDER BY count(*) ASC LIMIT 1 OFFSET 0'         , 'answer': 34}      , {'question': 'Which document has most number of related documents? List the document id and the number of related documents. [SQL] SELECT document_object_id ,  count(*) FROM Document_subset_members GROUP BY document_object_id ORDER BY count(*) DESC LIMIT 1 OFFSET 0'         , 'answer': 34}      , {'question': 'Select all documents that are directly or indirectly related to document id 34. [SQL] SELECT document_object_id FROM Document_subset_members WHERE document_subset_id IN (SELECT document_subset_id FROM Document_subset_members WHERE document_object_id  =  34) UNION SELECT
SELECT document_object_id FROM documents_in_collections GROUP BY document_object_id ORDER BY count(*) ASC LIMIT 1'         ,'answer':1} , {'question':'What are all the collections that have at least 10 documents? [SQL] SELECT T1.collection_name FROM collections AS T1 JOIN documents_in_collections AS T2 ON T1.collection_id  =  T2.collection_id GROUP BY T1.collection_id HAVING count(*)  >=  10' , 'answer':2} , {'question':'Select all collections that do not have any related collections. [SQL] SELECT T1.collection_name FROM collections AS T1 LEFT JOIN collection_subset_members AS T2 ON T1.collection_id  =  T2.collection_id WHERE T2.collection_id IS NULL' , 'answer':3} , {'question':'Select all documents that are
SELECT t1.document_id ,  count(*) FROM Document_subset_members AS t1 JOIN Document_subsets AS t2 ON t1.document_subset_id  =  t2.document_subset_id GROUP BY t1.document_id HAVING count(*) BETWEEN 2 AND 4'         , 'SELECT t1.document_id ,  count(*) FROM Document_subset_members AS t1 JOIN Document_subsets AS t2 ON t1.document_subset_id  =  t2.document_subset_id GROUP BY t1.document_id HAVING count(*) BETWEEN 2 AND 4'     , 'SELECT t1.document_id ,  count(*) FROM Document_subset_members AS t1 JOIN Document_subsets AS t2 ON t1.document_subset_id  =  t2.document_subset_id GROUP BY
SELECT T1.document_object_id ,  count(*) FROM Document_subset_members AS T1 JOIN document_subsets AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document_subset_name  =  'related' GROUP BY T1.document_object_id HAVING count(*) BETWEEN 2 AND 4'     ,   'SELECT count(*) FROM document_subset_members' ]     ,   [ 'SELECT count(*) FROM document_subset_members' ]     ,   [ 'SELECT count(*) FROM document_subset_members' ]     ,   [ 'SELECT count(*) FROM document_subset_members' ]     ,   [ 'SELECT count(*) FROM document_subset_members' ]     ,   [ 'SELECT count(*) FROM
SELECT T1.owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_object_id  =  T2.related_document_object_id WHERE T2.document_subset_id  =  (SELECT document_subset_id FROM document_subsets WHERE document_subset_name  =  'Braeden')'     ,'SELECT T1.owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_object_id  =  T2.related_document_object_id WHERE T2.document_subset_id  =  (SELECT document_subset_id FROM document_subsets WHERE document_subset_name  =  'Braeden')'     ,'SELECT T1.owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T
SELECT DISTINCT T1.owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_object_id  =  T2.related_document_object_id JOIN Document_Subsets AS T3 ON T2.document_subset_id  =  T3.document_subset_id WHERE T3.Document_Subset_Name  =  'Braeden's Relatives' UNION SELECT OWNER FROM Document_Objects WHERE document_object_id  =  (SELECT related_document_object_id FROM Document_Subset_Members WHERE document_subset_id  =  (SELECT document_subset_id FROM Document_Subsets WHERE Document_Subset_Name  =  'Braeden's Relatives')) EXCEPT SELECT OWNER FROM Document_Objects WHERE document_object_id  =  (SELECT related_document_object_id
SELECT t3.Document_Subset_Name FROM Document_objects AS t1 JOIN document_subset_members AS t2 ON t1.document_object_id  =  t2.document_object_id JOIN document_subsets AS t3 ON t2.document_subset_id  =  t3.document_subset_id WHERE t1.owner  =  'Braeden' GROUP BY t3.Document_Subset_Name HAVING count(*)  = 1 UNION SELECT t3.Document_Subset_Name FROM Document_objects AS t1 JOIN document_subset_members AS t2 ON t1.document_object_id  =  t2.document_object_id JOIN document_subsets AS t3 ON t2.document_subset_id  =  t3.document_subset_id WHERE t1.owner  =  'Braeden' GROUP BY t
SELECT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID  =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.Owner  =  'Braeden' GROUP BY T1.Document_Subset_Name ORDER BY count(*) DESC LIMIT 1'     ,'SELECT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID  =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.Owner  =
SELECT T1.document_subset_id ,  T1.document_subset_name ,  count(DISTINCT T3.document_object_id) FROM document_subsets AS T1 JOIN document_subset_members AS T2 ON T1.document_subset_id  =  T2.document_subset_id JOIN document_objects AS T3 ON T2.related_document_object_id  =  T3.document_object_id GROUP BY T1.document_subset_id ORDER BY count(DISTINCT T3.document_object_id) DESC'         , 'id': 406}      , {'answer': 'SELECT T1.document_subset_id ,  T1.document_subset_name FROM document_subsets AS T1 JOIN document_subset_members AS T2 ON T1.document_subset_id  =  T2.document_
SELECT T1.document_subset_id ,  T1.document_subset_name ,  count(DISTINCT T3.document_object_id) FROM document_subsets AS T1 JOIN document_subset_members AS T2 ON T1.document_subset_id  =  T2.document_subset_id JOIN document_objects AS T3 ON T2.document_object_id  =  T3.document_object_id GROUP BY T1.document_subset_id ORDER BY count(DISTINCT T3.document_object_id) DESC'         , 'SELECT T1.document_subset_id ,  T1.document_subset_name ,  count(DISTINCT T3.document_object_id) FROM document_subsets AS T1 JOIN document_subset_members AS T2 ON T1.document_subset_id  =  T2.document_
SELECT t1.document_subset_id ,  t1.document_subset_name ,  count(*) FROM document_subsets AS t1 JOIN document_subset_members AS t2 ON t1.document_subset_id  =  t2.document_subset_id GROUP BY t1.document_subset_id ORDER BY count(*) DESC LIMIT 1 <MID>_details VARCHAR(255) NOT NULL, PRIMARY KEY (collection_subset_id)) CREATE TABLE collections (collection_id INTEGER NOT NULL , parent_collection_id INTEGER , collection_name VARCHAR(255) NOT NULL , collection_description VARCHAR(255) NOT NULL , PRIMARY KEY (collection_id)) CREATE TABLE documents_in_collections (document_object_id INTEGER NOT NULL , collection_id INTEGER NOT NULL , PRIMARY KEY (document_object_id , collection_id) ) CREATE TABLE collection_subset
SELECT T1.Document_Subset_ID ,  T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID  =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID ORDER BY count(*) DESC LIMIT 1'         , 'answer': [1]     , 'difficulty': 3     , 'category': 'Data Modeling'     , 'question': 'What is the SQL query to list all documents? SELECT doc_id FROM Documents'     , 'type': 'QUERY'     , 'optional': False     , 'reuse': True     , 'image': None     , 'hint': None     , 'sql': None     , 'reference': None     , 'weight': 1
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000') <MID>subset_members AS t1 ON DOCUMENT_SUBSET_ID  =  related_document_object_id JOIN document_objects AS t3 ON t1.document_object_id  =  t3.document_object_id WHERE t3.description  =  'God Bless America' UNION SELECT t1.document_object_id FROM document_subset_members AS t1 JOIN document_objects AS t3 ON t1.document_object_id  =  t3.document_object_id WHERE t3.description  =  'God Bless America' AND t3.owner  =  'John Adams' ORDER BY
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000') <MID>subset_members AS t1 ON t1.document_object_id  =  t2.document_object_id WHERE t2.description  =  'God Bless America' UNION SELECT t1.document_object_id FROM document_subset_members AS t1 JOIN document_subsets AS t2 ON t1.document_subset_id  =  t2.document_subset_id WHERE t2.document_subset_name  =  'Best for 2000' UNION SELECT t1.document_object_id FROM document_subset_members AS t1 JOIN document_subsets AS t2 ON t1.document_subset
SELECT T1.Document_Subset_Name ,  T2.document_id FROM Document_subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document_id  =  4 UNION SELECT T1.Document_Subset_Name ,  T2.document_id FROM Document_subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document_id  =  6 UNION SELECT T1.Document_Subset_Name ,  T2.document_id FROM Document_subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document
SELECT T1.Document_Subset_Name ,  T2.Document_Subset_ID FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID  =  T2.Document_Subset_ID WHERE T2.Document_Object_ID  =  4 UNION SELECT T1.Document_Subset_Name ,  T2.Document_Subset_ID FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID  =  T2.Document_Subset_ID WHERE T2.Document_Object_ID  =  5 UNION SELECT T1.Document_Subset_Name ,  T2.Document_Subset_ID FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset
SELECT T1.collection_name FROM collections AS T1 JOIN documents_in_collections AS T2 ON T1.collection_id  =  T2.collection_id JOIN document_objects AS T3 ON T2.document_object_id  =  T3.document_object_id WHERE T3.owner  =  'Ransom' <MID>subset_members', 'document_subset_id')]     , FOREIGN KEY (related_document_object_id) REFERENCES document_objects (document_object_id)     , FOREIGN KEY (document_subset_id) REFERENCES document_subsets (document_subset_id)     , PRIMARY KEY (document_object_id ,  related_document_object_id)     , UNIQUE KEY document_object_id ()     , CONSTRAINT sub_set_member_
SELECT t3.collection_name FROM Document_Objects AS t1 JOIN documents_in_collections AS t2 ON t1.document_object_id  =  t2.document_object_id JOIN Collections AS t3 ON t2.collection_id  =  t3.collection_id WHERE t1.owner  =  'Ransom' <MID>subset_members (document_object_id , related_document_object_id , document_subset_id) VALUES (4 , 6 , 2)')
SELECT count(*) ,  T1.collection_id FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.collection_id  =  T2.collection_id GROUP BY T1.document_object_id ORDER BY count(*) DESC LIMIT 1000'         , 'SELECT count(*) ,  T1.document_object_id FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.collection_id  =  T2.collection_id GROUP BY T1.document_object_id ORDER BY count(*) DESC LIMIT 1000'     , 'SELECT count(*) ,  T1.collection_id FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.collection_id  =  T2.collection_id GROUP BY T1.collection_id ORDER BY count(*) DESC LIMIT 10
SELECT count(*) FROM Documents_in_Collections GROUP BY Document_Object_ID'         ,'SELECT Document_Object_ID ,  COUNT(*) FROM Documents_in_collections GROUP BY Document_Object_ID'         ,'SELECT count(*) FROM Documents_in_collections'     ,'SELECT count(DISTINCT collection_id) FROM Documents_in_collections'     ,'SELECT count(DISTINCT collection_id) FROM Documents_in_collections'     ,'SELECT count(DISTINCT collection_id) FROM Documents_in_collections'     ,'SELECT count(DISTINCT collection_id) FROM Documents_in_collections'     ,'SELECT count(DISTINCT collection_id) FROM Documents_in_collections'     ,'SELECT count(DISTINCT collection_id) FROM Documents_in_collections'     ,'SELECT count
SELECT count(*) FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name  =  'Best' <MID>subset_members AS T1 ON T1.document_object_id  =  T2.document_object_id JOIN document_subsets AS T3 ON T3.document_subset_id  =  T1.document_subset_id WHERE T3.document_subset_name  =  'Large' AND T2.collection_name  =  'Pictures' UNION SELECT count(*) FROM Document_Subset_Members AS T1 JOIN document_subsets AS T3 ON T3.document_subset_id  =  T1.document_subset_id WHERE T3.document_subset_name  =  'Small' UNION SELECT count(*) FROM Document_Sub
SELECT count(*) FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.collection_id  =  T2.collection_id WHERE T2.Collection_name  =  'Best' <MID>subset_members (document_object_id ,  related_document_object_id ,  document_subset_id) VALUES (4 ,  3 ,  1)')     FROM DOCUMENT_SUBSET_MEMBERS SELECT document_object_id FROM document_subset_members WHERE document_subset_id  =  1 UNION SELECT document_object_id FROM document_subset_members WHERE document_subset_id  =  2 UNION SELECT document_object_id FROM document_subset_members WHERE document_subset_id  =  3 UNION SELECT document_object_id FROM document_subset_members WHERE document_subset_id  =  4 UNION SELECT document_object_
SELECT t1.document_id FROM Documents_in_Collections AS t2 JOIN Document_Objects AS t1 ON t2.document_object_id  =  t1.document_object_id JOIN Collections AS t3 ON t3.collection_id  =  t2.collection_id WHERE t3.Collection_Name  =  'Best' <MID>subset_members', 'document_object_id', 'related_document_object_id')]     , collections = [('collections', 'collection_id')]     , collection_subsets = [('collection_subsets', 'collection_subset_id')]     , document_objects = []     , documents_in_collections = []     , document_subsets = []     , document_subset_members = []     , collection_subsets = []     , collection_subset_members = []     , collections =
SELECT COUNT (DISTINCT document_object_id) FROM Documents_in_Collections WHERE collection_id  =  (SELECT collection_id FROM Collections WHERE collection_name  =  'Best') <MID>_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (1003 ,  1004)     , (1003 ,  1005)     , (1003 ,  1006)     , (1003 ,  1007)     , (1003 ,  1008)     , (1003 ,  1009)     , (1003 ,  1010)     , (1003 ,  1011)     , (10
SELECT T1.collection_name ,  T1.collection_id ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.collection_id  =  T2.collection_id GROUP BY T1.collection_id ORDER BY count(*) DESC LIMIT 1 <MID>subset_members (document_object_id ,  document_subset_id) VALUES (%s ,  %s)'     , (document_object_id ,  document_subset_id))
SELECT T1.collection_name ,  T1.collection_id FROM COLLECTIONS AS T1 JOIN Documents_in_Collections AS T2 ON T1.collection_id  =  T2.collection_id WHERE T1.collection_name  =  'Best' GROUP BY T1.collection_id ORDER BY count(*) DESC LIMIT 1' <MID>subset_members AS T1 ON T1.document_object_id  =  T2.document_object_id JOIN document_subsets AS T3 ON T3.document_subset_id  =  T1.document_subset_id WHERE T2.document_object_id  =  {document_object_id} AND T3.document_subset_name  =  '{document_subset_name}' GROUP BY T3.document_subset_name ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T3.document_
SELECT T1.document_object_id FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document_subset_name  =  'Best for 2000' UNION SELECT T3.document_object_id FROM Collection_Subset_Members AS T2 JOIN Collection_Subsets AS T4 ON T2.collection_subset_id  =  T4.collection_subset_id JOIN Collections AS T3 ON T3.collection_id  =  T2.collection_id WHERE T4.collecrtion_subseet_name  =  'Best'')]     FROM DOCUMENTS_IN_COLLECTIONS AS T1 JOIN Collections AS T3 ON T1.collection_id  =  T
SELECT T1.document_object_id FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document_subset_name  =  'Best for 2000' INTERSECT SELECT T3.document_object_id FROM Documents_in_Collections AS T3 JOIN Collections AS T4 ON T3.collection_id  =  T4.collection_id WHERE T4.collection_name  =  'Best' <MID>_Subset_ID INTEGER NOT NULL , Document_Subset_Name VARCHAR(255) NOT NULL , Document_Subset_Details VARCHAR(255) NOT NULL , PRIMARY KEY (Document_Subset_ID) ) CREATE TABLE Collection_Subsets ( Collection_Subset_ID INTEGER NOT NULL , Collection
SELECT Document_Object_ID FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name  =  'Best' EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID  =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name  =  'Best' FOR YEAR 2000 <MID>subset_members (document_object_id , related_document_object_id , document_subset_id) VALUES (4 , 3 , 1)')
SELECT DO1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Objects AS DO1 ON T1.Document_Object_ID  =  DO1.Document_Object_ID JOIN Document_Subsets AS DS ON T1.Document_Subset_ID  =  DS.Document_Subset_ID WHERE DS.Document_Subset_Name  =  'Best for 2000' EXCEPT SELECT DO2.Document_Object_ID FROM Documents_in_Collections AS T2 JOIN Collection_subset_members AS T3 ON T2.collection_id  =  T3.collection_id JOIN Collections AS C1 ON T2.document_object_id  =  C1.collection_id JOIN Collection_Subsets AS CS ON T3.collection_subset_id  =  CS.collection_subset_id JOIN Document_
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   ( SELECT document_subset_id FROM document_subsets WHERE document_subset_name  =  'Best' ) OR Document_Object_ID IN ( SELECT document_object_id FROM collections WHERE collection_name  =  'Best' AND collection_description LIKE '%2000%' )'         ,'id': 1}      , {'question': 'List ids of documents that are members of document subset Bad.', 'answer': 'SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   ( SELECT document_subset_id FROM document_subsets WHERE document_subset_name  =  'Bad' )' ,'id': 2}      , {'question': 'List ids of documents that are members of document subset Good.', 'answer
SELECT T1.document_id FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document_subset_name  =  'Best for 2000' UNION SELECT T3.document_id FROM Documents_in_Collections AS T2 JOIN Collection_Subset_Members AS T3 ON T2.collection_id  =  T3.collection_id JOIN Collections AS T4 ON T4.collection_id  =  T2.collection_id WHERE T4.collection_name  =  'Best' <MID>_details VARCHAR(255) NOT NULL , primary key (document_object_id) ) CREATE TABLE Documents_in_Collections ( document_object_id INTEGER NOT NULL , collection_id INTEGER NOT NULL , primary key
SELECT T1.collection_name FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.collection_id JOIN Collection_Subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.collecrtion_subset_name  =  'Best' UNION SELECT T1.collection_name FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.related_collection_id JOIN Collection_Subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.collecrtion_subset_name  =  'Best' <MID>_Subset_ID INTEGER NOT NULL , Document_Subset_Name VARCHAR(2
SELECT T1.collection_name FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.collection_id JOIN Collection_Subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.collecrtion_subset_name  =  'Best' UNION SELECT T1.collection_name FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.related_collection_id JOIN Collection_Subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.collecrtion_subset_name  =  'Best' <MID>_Subset_ID INTEGER NOT NULL , Document_Subset_Name VARCHAR(2
SELECT count(*) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.related_collection_id JOIN Collection_Subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.Collection_Subset_Name  =  'Best' GROUP BY T3.Collection_Subset_Name HAVING count(*)  >  1 UNION SELECT count(*) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.related_collection_id JOIN Collection_Subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.Collection_Subset_Name  =  'Best' GROUP BY T3.Collection_Subset_Name HAVING count
SELECT COUNT(*) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.collection_id JOIN Collection_Subsets AS T3 ON T3.collection_subset_id  =  T2.collection_subset_id WHERE T1.collection_name  =  'Best' AND T3.collecrtion_subset_name  =  'Large' AND T3.collecrtion_subset_details  =  'over 100 items' AND T2.related_collection_id != 'null' GROUP BY T1.collection_name HAVING count(*)  >=  2 UNION SELECT count(*) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.collection_id JOIN Collection_Subsets AS T3 ON T
SELECT t1.collection_subset_name FROM collection_subsets AS t1 JOIN collections AS t2 ON t1.collection_subset_id  =  t2.collection_subset_id WHERE t2.collection_name  =  'Best' <MID>_Subset_ID INTEGER NOT NULL, Related_Document_Object_ID INTEGER NOT NULL , Document_Subset_ID INTEGER NOT NULL , PRIMARY KEY (Document_Object_ID , Related_Document_Object_ID) , FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID) , FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID) , FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID
SELECT T1.collection_subset_name FROM collection_subsets AS T1 JOIN collections AS T2 ON T1.collection_subset_id  =  T2.collection_subset_id WHERE T2.collection_name  =  'Best' GROUP BY T1.collection_subset_name ORDER BY count(*) DESC LIMIT 1 OFFSET 0'     ,'SELECT T1.collection_subset_name FROM collection_subsets AS T1 JOIN collections AS T2 ON T1.collection_subset_id  =  T2.collection_subset_id WHERE T2.collection_name  =  'Best' GROUP BY T1.collection_subset_name ORDER BY count(*) DESC LIMIT 1 OFFSET 0'     ,'SELECT T1.collection_subset_name FROM collection_subsets AS T1 JOIN collections AS T2 ON T1
SELECT count(*) FROM songs WHERE name LIKE '%Love%' AND original_artist != 'Love'%'' <MID>     , stage_presence  float NOT NULL     , PRIMARY KEY (participant_id , songs_id)     , FOREIGN KEY (participant_id) REFERENCES participants (id)     , FOREIGN KEY (songs_id) REFERENCES songs (id)     , CHECK (voice_sound_quality >= 1 AND voice_sound_quality <= 5)     , CHECK (rhythm_tempo >= 1 AND rhythm_tempo <= 5)     , CHECK (stage_presence >= 1 AND stage_presence <= 5)     , UNIQUE (participant_id , songs_id)     , CONSTRAINT Songs_Englsh_Translation_Check CHECK (
SELECT name FROM songs ORDER BY name ASC NULLS LAST'         , 'SELECT name FROM songs ORDER BY name ASC NULLS LAST'         , ['SELECT name FROM songs ORDER BY name ASC NULLS LAST']     ,  ['SELECT name FROM songs ORDER BY name ASC NULLS LAST']     ,  ['SELECT name FROM songs ORDER BY name ASC NULLS LAST']
SELECT name ,  language FROM songs WHERE id IN ( SELECT songs_id FROM performance_score ) ORDER BY rhythm_tempo DESC'         , 'SELECT name ,  language FROM songs WHERE id IN ( SELECT songs_id FROM performance_score ) ORDER BY rhythm_tempo DESC'     , ['SELECT name ,  language FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score ) ORDER BY name ASC']         , 'SELECT name ,  language FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score ) ORDER BY name ASC'     , ['SELECT name ,  language FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score ) ORDER BY name ASC'         , 'SELECT name ,  language FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score ) ORDER BY name DESC'     , ['SELECT name ,  language FROM songs WHERE id NOT IN ( SELECT songs
SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score'         , 'MAXIMUM VOICE SOUND QUALITY SCORE  :  1.000000' , 'MINIMUM VOICE SOUND QUALITY SCORE  :  -2.400000'     , ['SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score']     , ['SELECT max(rhythm_tempo) ,  min(rhythm_tempo) FROM performance_score']     , 'MAXIMUM RHYTHM TEMPO  :  3.000000' , 'MINIMUM RHYTHM TEMPO  :  -3.000000'     , ['SELECT max
SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway' <MID>     FROM participants AS T1 JOIN songs AS T2 ON T1.id  =  T2.id WHERE T1.name  =  'Sabrina' AND T2.name  =  'Muhammad' ORDER BY T1.voice_sound_quality DESC LIMIT 1;     GROUP BY T1.voice_sound_quality ORDER BY count(*) DESC LIMIT 1;     HAVING count(*)  >=  2;SELECT max(T1.voice_sound_quality) FROM performance_score AS T1 JOIN participants AS T2 ON T1.
SELECT id ,  language ,  original_artist FROM songs WHERE name != 'Love' UNION SELECT id ,  language ,  original_artist FROM songs WHERE name = 'Love' ORDER BY id ASC LIMIT 3 OFFSET 3'     , ['SELECT id ,  language ,  original_artist FROM songs WHERE name != 'Love' UNION SELECT id ,  language ,  original_artist FROM songs WHERE name = 'Love' ORDER BY id ASC LIMIT 3 OFFSET 3']]
SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love' <MID>     FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id JOIN songs AS T3 ON T1.songs_id  =  T3.id WHERE T3.english_translation  =  'All the streets of love' ORDER BY T2.popularity DESC NULLS LAST; SELECT T2.name FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id JOIN songs AS T3 ON T1.songs_id  =  T3.id WHERE T3.english_translation  =  'All the streets of love' ORDER BY T2.popularity ASC NULLS FIRST; SELECT T2
SELECT DISTINCT T1.stage_presence FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.language  =  'English' ORDER BY T1.stage_presence ASC'     , languages = ['English'], chart_type = 'Bar Chart')],
SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id GROUP BY T1.id HAVING count(*)  >=  2'         , 'SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id GROUP BY T1.id HAVING count(*)  >=  2'     , 'SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id GROUP BY T1.id HAVING count(*)  >=  2'     , 'SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2
SELECT T1.id ,  T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id GROUP BY T1.id ORDER BY count(*) DESC'         , 'SELECT id ,  name ,  popularity FROM participants ORDER BY count(*) DESC LIMIT 3'     , 'SELECT id ,  name ,  popularity FROM participants ORDER BY count(*) DESC LIMIT 5'     , 'SELECT id ,  name ,  popularity FROM participants ORDER BY count(*) DESC LIMIT 10'     , 'SELECT id ,  name ,  popularity FROM participants ORDER BY count(*) DESC LIMIT 20'     , 'SELECT id ,  name ,  popularity FROM participants ORDER BY count(*) DESC LIMIT 50'     , 'SELECT id ,  name ,  popularity FROM participants ORDER BY count
SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id WHERE T2.voice_sound_quality  =  5 OR T2.rhythm_tempo  =  5'         , 'SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id WHERE T2.voice_sound_quality  =  5 UNION SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id WHERE T2.rhythm_tempo  =  5'     , 'SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score
SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  'The Balkan Girls' AND T2.language  =  'English' <MID>     , stage_presence real NOT NULL     , PRIMARY KEY (participant_id , songs_id)     , FOREIGN KEY (participant_id) REFERENCES participants (id)     , FOREIGN KEY (songs_id) REFERENCES songs (id)     , CHECK (voice_sound_quality >= 1 AND voice_sound_quality <= 5)     , CHECK (rhythm_tempo >= 1 AND rhythm_tempo <= 5)     , CHECK (stage_presence >= 1 AND stage_presence <= 5
SELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'         , answers: ['SELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1']     , choices: []     , correctAnswer: 0     , explanation: ''     , subtask: false     , isRequired: true     , isOptimal: false     , minValue: 0     , maxValue: 100     , displayLabel: 'Query 4'     , duration: -1     , image: ''     , force
SELECT count(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9'         , 'SELECT count(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9'     , ['SELECT count(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9']     , ['SELECT count(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9']
SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score )'         , 'answer': 1 }       , { 'question': 'How many different languages are represented in the database? [SQL] SELECT count(DISTINCT language) FROM songs'         , 'answer': 3 }       , { 'question': 'Which song is not performed by any participant? [SQL] SELECT name FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score )'         , 'answer': 'Forever Young' }       , { 'question': 'Which participant has the lowest stage presence score? [SQL] SELECT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id ORDER BY T2.stage_presence LIMIT 1'         , 'answer': 'M
SELECT avg(rhythm_tempo) ,  language FROM songs GROUP BY language'         , 'SELECT avg(rhythm_tempo) ,  language FROM songs GROUP BY language'     , 'SELECT avg(rhythm_tempo) ,  language FROM songs GROUP BY language'     , 'SELECT avg(rhythm_tempo) ,  language FROM songs GROUP BY language'     , 'SELECT avg(rhythm_tempo) ,  language FROM songs GROUP BY language'     , 'SELECT avg(rhythm_tempo) ,  language FROM songs GROUP BY language'     , 'SELECT avg(rhythm_tempo) ,  language FROM songs GROUP BY language'     , 'SELECT avg(rhythm_tempo) ,  language FROM songs GROUP BY language'     , 'SELECT avg(rhythm_tempo) ,  language FROM songs GROUP
SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id JOIN songs AS T3 ON T2.songs_id  =  T3.id WHERE T3.language  =  'English' <MID>     , stage_presence REAL NOT NULL DEFAULT 0.500000e+00     , UNIQUE KEY participant_song_key (participant_id , songs_id)     , CONSTRAINT songs_id_fk FOREIGN KEY (songs_id) REFERENCES songs (id) ON DELETE NO ACTION ON UPDATE NO ACTION     , CONSTRAINT participant_id_fk FOREIGN KEY (participant_id) REFERENCES participants (id) ON DELETE NO ACTION
SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id JOIN songs AS T3 ON T2.songs_id  =  T3.id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id JOIN songs AS T3 ON T2.songs_id  =  T3.id WHERE T3.language  =  'English' <MID>     FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id JOIN songs AS T3 ON T2.songs_id  =  T3
SELECT name FROM songs WHERE name LIKE '%Is%'  SELECT name FROM songs WHERE name LIKE 'Is%' SELECT name FROM songs WHERE name LIKE '%Is' SELECT name FROM songs WHERE name = 'Is' SELECT name FROM songs WHERE name IN ('Is') SELECT name FROM songs WHERE name NOT LIKE '%Is%' SELECT name FROM songs WHERE name NOT LIKE 'Is%' SELECT name FROM songs WHERE name NOT LIKE '%Is' SELECT name FROM songs WHERE name != 'Is' SELECT name FROM songs WHERE name NOT IN ('Is') SELECT name FROM songs WHERE name = 'Is' SELECT name FROM songs WHERE name != 'Is' SELECT name FROM songs WHERE name IN ('Is') SELECT name FROM songs WHERE name NOT IN ('Is') SELECT name FROM songs WHERE name LIKE '%Is%' SELECT name FROM songs WHERE name LIKE 'Is%' SELECT name FROM songs WHERE name LIKE '%Is' SELECT name FROM songs WHERE name = 'Is' SELECT name FROM songs WHERE name IN ('Is') SELECT name FROM songs
SELECT T1.original_artist FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T2.rhythm_tempo  >  5 ORDER BY T2.voice_sound_quality DESC'         , 'SELECT T1.original_artist FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T2.rhythm_tempo  >  5 ORDER BY T2.voice_sound_quality DESC'     , ['SELECT T1.original_artist FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T2.rhythm_tempo  >  5 ORDER BY T2.voice_sound_quality DESC']     , ['SELECT T1.original_artist
SELECT count(*) FROM city'
SELECT count(*) FROM city'
SELECT DISTINCT state FROM city  ORDER BY state ASC  LIMIT 50  OFFSET 0  SELECT count(*) FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1'
SELECT DISTINCT state FROM city  SELECT DISTINCT state FROM city GROUP BY state ORDER BY state ASC  SELECT count(DISTINCT state) FROM city GROUP BY state ORDER BY count(DISTINCT state) DESC LIMIT 1  SELECT min(distance) FROM direct_distance  SELECT max(distance) FROM direct_distance  SELECT avg(distance) FROM direct_distance  SELECT city_name FROM city WHERE state  =  'TX'  SELECT city_name FROM city WHERE state  =  'CA'  SELECT city_name FROM city WHERE state  =  'NY'  SELECT city_name FROM city WHERE state  =  'FL' SELECT city_name FROM city WHERE state  =  'IL' SELECT city_name FROM city WHERE state  =  'PA' SELECT city_name FROM city WHERE state  =  'MA' SELECT city_name FROM city WHERE state  =  'CT' SELECT city_
SELECT count(DISTINCT country) FROM city <MID>     FROM student AS T1 JOIN advisor AS T2 ON T1.stuid  =  T2.stuid WHERE T2.advisor_name  =  'Burns' AND T1.major  =  1012; SELECT firstname ,  lastname FROM student WHERE major  =  1012; SELECT T1.firstname ,  T1.lastname FROM student AS T1 JOIN advisor AS T2 ON T1.stuid  =  T2.stuid WHERE T2.advisor_name  =  'Burns' AND T1.major  =  1012; SELECT DISTINCT firstname ,  lastname FROM student WHERE major  =  1012; SELECT DISTINCT T1.firstname ,  T1.lastname FROM student AS T1 JOIN advisor AS
SELECT count(DISTINCT country) FROM city <MID>     FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city1_code JOIN city AS T3 ON T3.city_code  =  T2.city2_code WHERE T1.country  =  'United States' AND T3.country  =  'United Kingdom' GROUP BY T1.country ORDER BY count(*) DESC LIMIT 1;'
SELECT city_name ,  city_code ,  state ,  country FROM city <MID>     FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city1_code WHERE T2.distance  =  (SELECT min(distance) FROM direct_distance) ORDER BY T1.city_name;'     WHERE CITY IS THE MOST POPULAR DESTINATION FOR STUDENTS ENROLLED IN MAJOR 3456. [SQL] SELECT T1.city_name FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city2_code WHERE T2.distance  =  (SELECT min(distance) FROM direct_distance) AND T1.major  =  3456;'     LIMIT 10 CIT
SELECT city_name ,  city_code ,  state ,  country FROM city'
SELECT latitude ,  longitude FROM city WHERE city_name  =  'Baltimore' AND state  =  'MD' AND country  =  'USA' <MID>     FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city1_code WHERE T1.city_name  =  'New York' AND T1.state  =  'NY' AND T1.country  =  'USA' AND T2.distance  =  253. SELECT T2.distance FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city1_code WHERE T1.city_name  =  'Washington' AND T1.state  =  'DC' AND T1.country  =  'USA' AND T2.distance  =  386. SELECT T
SELECT latitude ,  longitude FROM city WHERE city_name  =  'Baltimore' AND state  =  'MD' AND country  =  'USA' <MID>     FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city1_code WHERE T1.city_name  =  'Baltimore' AND T1.state  =  'MD' AND T1.country  =  'USA' UNION SELECT T2.distance FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city1_code WHERE T1.city_name  =  'New York' AND T1.state  =  'NY' AND T1.country  =  'USA' UNION SELECT T2.distance FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_
SELECT city_name FROM city WHERE state  =  'PA' <MID>     FROM student AS T1 JOIN advisor AS T2 ON T1.advisor  =  T2.AdvisorID WHERE T2.LName  =  'Johnson' AND T2.Fname  =  'Margaret' AND T1.Sex  =  'F' ORDER BY T1.StuID;'     LIMIT 100'     ;
SELECT city_name FROM City WHERE state  =  'PA' <MID>     , major FROM Student WHERE advisor  =  'Yes' GROUP BY major ORDER BY count(*) DESC LIMIT 1;'     , 'SELECT DISTINCT city_code FROM city;'     , 'SELECT count(*) FROM student;'     , 'SELECT count(*) FROM city;'     , 'SELECT count(*) FROM direct_distance;'     , 'SELECT city_name FROM city WHERE state  =  'PA';'     , 'SELECT city_name FROM city WHERE state  =  'NY';'     , 'SELECT city_name FROM city WHERE state  =  'CT';'     , 'SELECT city_name FROM city WHERE state  =  'MA';'     , 'SELECT city_name FROM city WHERE state  =  'CA';'     , 'SELECT city_name FROM city WHERE
SELECT count(*) FROM city WHERE country  =  'Canada' <MID>     FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city1_code AND T1.city_code  =  T2.city2_code GROUP BY T1.city_name ORDER BY sum_distance DESC LIMIT 10;'     WHERE CITY IS THE NAME OF THE CITY YOU ARE SEARCHING FOR AND DIRECT_DISTANCE IS THE NAME OF THE MATRIX THAT HOLDS ALL THE DISTANCES BETWEEN CITIES.  DIRECT_DISTANCE HAS 2 COLUMNS:  CITY1_CODE AND CITY2_CODE.  CITY1_CODE REPRESENTS THE ORIGINAL CITY AND CITY2_CODE REPRESENTS THE
SELECT count(*) FROM city WHERE country  =  'Canada' <MID>     FROM city WHERE country  =  'Canada' AND state != 'Ontario' AND state != 'Quebec' AND state != 'Nunavut' AND state != 'Northwest Territories' AND state != 'Yukon' AND state != 'Nova Scotia' AND state != 'New Brunswick' AND state != 'Prince Edward Island' AND state != 'Newfoundland and Labrador' AND state != 'Manitoba' AND state != 'Saskatchewan' AND state != 'Alberta' AND state != 'British Columbia' AND state != 'Yukon' AND state != 'Nunavut' AND state != 'Northwest Territories'     GROUP BY state ORDER BY sum_population DESC LIMIT 1     ;
SELECT city_name FROM city WHERE country  =  'USA' ORDER BY latitude ASC NULLS LAST <MID>     , major: MajorType     , advisor: AdvisorType     , city_code: CityCodeType     , direct_distance: DirectDistanceType     , city: CityType     , student: StudentType     , advisor: AdvisorType     , major: MajorType     , direct_distance: DirectDistanceType     , city: CityType     , student: StudentType     , advisor: AdvisorType     , major: MajorType     , direct_distance: DirectDistanceType     , city: CityType     , student: StudentType     , advisor: AdvisorType     , major: MajorType     , direct_distance: DirectDistanceType     , city: CityType     , student: StudentType     , advisor: Ad
SELECT city_name FROM city WHERE country  =  'USA' ORDER BY latitude ASC NULLS LAST <MID>     FROM student AS T1 JOIN advisor AS T2 ON T1.advisor  =  T2.Advisor NODE MATCH (student)-[advisor:ADVISOR]->(advisor) RETURN DISTINCT advisor.LName AS Advisor_Last_Name , COUNT(*) AS Student_Number OF T1 GROUP BY advisor.LName ORDER BY Student_Number DESC LIMIT 1;',     LIMIT 1;',     ;
SELECT state ,  count(*) FROM city GROUP BY state'
SELECT count(*) ,  state FROM city GROUP BY state'
SELECT country ,  count(*) FROM city GROUP BY country'
SELECT count(*) ,  country FROM city GROUP BY country'
SELECT DISTINCT state FROM city GROUP BY state HAVING count(*)  >=  2]'
SELECT DISTINCT state FROM city GROUP BY state HAVING count(*)  >=  2'
SELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1' , 'state1' : 'CA', 'distance1' : 408.2} , {'city1' : 'Raleigh', 'city2' : 'Charlotte', 'distance' : 163.7} , {'city1' : 'San Antonio', 'city2' : 'Dallas', 'distance' : 185.7}]
SELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1'
SELECT country FROM city GROUP BY country ORDER BY count(*) ASC LIMIT 1'
SELECT country FROM city GROUP BY country ORDER BY count(*) LIMIT 1'
SELECT Fname , Lname FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state  =  'MD') <MID>     , major FROM Student WHERE age BETWEEN 18 AND 22 AND sex  =  'F' AND major != '' ORDER BY major;'     , major FROM Student WHERE age BETWEEN 18 AND 22 AND sex  =  'M' AND major != '' ORDER BY major;'     , major FROM Student WHERE age BETWEEN 18 AND 22 AND sex  =  'F' AND major  =  '' ORDER BY major;'     , major FROM Student WHERE age BETWEEN 18 AND 22 AND sex  =  'M' AND major  =  '' ORDER BY major;'     , major FROM Student WHERE age BETWEEN 18 AND 22 AND sex  =
SELECT Fname ,  Lname FROM Student WHERE city_code  =  'MD' <MID>     , major: MAJOR  ,  advisor: ADVISOR}     , ...     ]     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }     , ... }
SELECT count(*) FROM student WHERE city_code IN (SELECT city_code FROM city WHERE country  =  'China') <MID>     , major FROM student WHERE major  =  104;'     , 'SELECT DISTINCT city_code FROM student;'     , 'SELECT count(DISTINCT city_code) FROM student;'     , 'SELECT count(DISTINCT advisor) FROM student;' ]
SELECT count(*) FROM Student WHERE city_code IN (SELECT city_code FROM city WHERE country  =  'China') <MID>     , major: MAJOR  ,  advisor: ADVISOR } FROM Student WHERE city_code IN (SELECT city_code FROM city WHERE country  =  'China')'     , output: 467}   , { question: 'How many students are there that live in the United States? (Subquestion 1)'     , answer: 'SELECT count(*) FROM Student WHERE city_code IN (SELECT city_code FROM city WHERE country  =  'United States')'     , output: 3185}   , { question: 'How many students are there that do not have an advisor? (Subquestion 2)'     , answer: 'SELECT count(*) FROM Student WHERE advisor  =  'Null' '
SELECT fname ,  major FROM Student WHERE city_code  =  'baltimore'  AND advisor != 'null'  AND sex  =  'F' ORDER BY major ASC LIMIT 50000;[No Data] SELECT fname ,  major FROM Student WHERE city_code  =  'baltimore'  AND advisor != 'null'  AND sex  =  'M' ORDER BY major ASC LIMIT 50000;[No Data] SELECT fname ,  major FROM Student WHERE city_code  =  'baltimore'  AND advisor != 'null' ORDER BY major ASC LIMIT 50000;[No Data] SELECT fname ,  major FROM Student WHERE city_code  =  'baltimore' AND advisor  =  'null' ORDER BY major ASC LIMIT 50000;[No Data] SELECT fname ,
SELECT fname ,  major FROM Student WHERE city_code  =  'baltimore'  ORDER BY fname ASC ,  major DESC  LIMIT 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT count(*) ,  country FROM student GROUP BY country'
SELECT count(*) ,  country FROM student GROUP BY country ORDER BY count(*) DESC LIMIT 10'
SELECT count(*) ,  city_code FROM Student GROUP BY city_code'
SELECT count(*) ,  city_name FROM Student AS T1 JOIN city AS T2 ON T1.city_code  =  T2.city_code GROUP BY T2.city_name'
SELECT state FROM student GROUP BY state ORDER BY count(*) DESC LIMIT 1' , 'CA' ] , [ 'Which advisor has the most number of students?', 'SELECT T1.Lname ,  T1.Fname ,  T2.advisor FROM student AS T1 JOIN advisor AS T2 ON T1.Advisor  =  T2.StuID GROUP BY T2.advisor ORDER BY count(*) DESC LIMIT 1' ] , [ 'Which major has the most number of students?', 'SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1' ] , [ 'How many students are there in each city?', 'SELECT T1.city_name ,  count(*) FROM city AS T1 JOIN student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_name' ] , [
SELECT T1.state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1'         , 'answer': 'CA'     , 'difficulty': 1     , 'category': 'Student Information'     , 'image': 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Map_of_the_United_States.svg/400px-Map_of_the_United_States.svg.png'     , 'subcategory': 'Students'     , 'points': 1000     , 'hint': 'Group by state and then use order by to sort them in descending order. Limit it to 1.'     , 'sql': 'SELECT
SELECT T1.country FROM city AS T1 JOIN student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) ASC LIMIT 1'         , 'Direct_distance': ['SELECT * FROM direct_distance WHERE distance  =  (SELECT min(distance) FROM direct_distance)']}
SELECT T1.country FROM city AS T1 JOIN student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) ASC LIMIT 1'
SELECT DISTINCT T1.city_name FROM city AS T1 JOIN student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_name HAVING count(*)  >=  3'
SELECT T1.city_name FROM city AS T1 JOIN student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_name HAVING count(*)  >=  3'
SELECT DISTINCT state FROM student GROUP BY state HAVING count(*)  >  5'
SELECT T1.state FROM student AS T1 JOIN city AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5'         , 'SELECT T1.state FROM student AS T1 JOIN city AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.state FROM student AS T1 JOIN city AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.state FROM student AS T1 JOIN city AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1'         ,
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM city WHERE country != 'USA') <MID>     FROM student AS T1 JOIN city AS T2 ON T1.city_code  =  T2.city_code WHERE T2.country != 'USA' GROUP BY T1.StuID HAVING count(*)  >=  10' > direct_distance.txt'
SELECT StuID FROM Student WHERE city_code != '860'  UNION SELECT StuID FROM Student WHERE city_code != '720'  UNION SELECT StuID FROM Student WHERE city_code != '660'  UNION SELECT StuID FROM Student WHERE city_code != '580'  UNION SELECT StuID FROM Student WHERE city_code != '440'  UNION SELECT StuID FROM Student WHERE city_code != '340'  UNION SELECT StuID FROM Student WHERE city_code != '220'  UNION SELECT StuID FROM Student WHERE city_code != '110'  UNION SELECT StuID FROM Student WHERE city_code != '50'  UNION SELECT StuID FROM Student WHERE city_code != '170'  UNION SELECT StuID FROM Student WHERE city_code != '120'  UNION SELECT StuID FROM Student WHERE city_code != '210
SELECT StuID FROM Student WHERE sex  =  'F' AND city_code IN (SELECT city_code FROM City WHERE state  =  'PA') <MID>     , major FROM Student WHERE advisor  =  $a080697 AND sex  =  'F' AND city_code IN (SELECT city_code FROM City WHERE state  =  'PA') UNION SELECT StuID ,  firstname ,  lastname ,  major FROM Student WHERE advisor  =  $a080697 AND sex  =  'M' AND city_code IN (SELECT city_code FROM City WHERE state  =  'PA') ORDER BY firstname ,  lastname ASC;'     , array($a080697));
SELECT StuID FROM Student WHERE sex  =  'F' AND city_code IN (SELECT city_code FROM city WHERE state  =  'PA') <MID>     , major FROM student WHERE advisor  =  'Yes' AND city_code IN (SELECT city_code FROM city WHERE state  =  'TX') ORDER BY major ASC;'     , 'SELECT DISTINCT city_code FROM city WHERE state  =  'TX';'     , 'SELECT count(*) FROM student WHERE city_code IN (SELECT city_code FROM city WHERE state  =  'TX') AND sex  =  'F';'     , 'SELECT count(*) FROM student WHERE city_code IN (SELECT city_code FROM city WHERE state  =  'TX') AND sex  =  'M';'     , 'SELECT count(*) FROM student WHERE city_code IN (SELECT city_code FROM city WHERE state  =  '
SELECT StuID FROM Student WHERE sex  =  'M' AND city_code != 'USA'
SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Student WHERE country != 'USA' <MID>     FROM student AS T1 JOIN city AS T2 ON T1.city_code  =  T2.city_code WHERE T2.country != 'USA' AND T1.sex  =  'F' GROUP BY T1.StuID HAVING count(*)  >  1 ORDER BY max_age - min_age DESC LIMIT 1'
SELECT distance FROM direct_distance WHERE city1_code  =  'BAL' AND city2_code  =  'CHI' <MID>     FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code JOIN city AS T3 ON T1.city2_code  =  T3.city_code ORDER BY distance DESC LIMIT 10;'
SELECT distance FROM direct_distance WHERE city1_code  =  'BAL' AND city2_code  =  'CHI' <MID>     FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code JOIN city AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  'New York' AND T3.city_name  =  'Chicago'     GROUP BY T1.distance ORDER BY count(*) DESC LIMIT 10;     ;
SELECT distance FROM direct_distance WHERE city1_code  =  'Boston' AND city2_code  =  'Newark' <MID>     FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code JOIN city AS T3 ON T1.city2_code  =  T3.city_code ORDER BY distance ASC LIMIT 10;'
SELECT distance FROM direct_distance WHERE city1_code  =  'Boston' AND city2_code  =  'Newark' <MID>     FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code JOIN city AS T3 ON T1.city2_code  =  T3.city_code ORDER BY distance DESC LIMIT 10;'
SELECT avg(distance) ,  min(distance) ,  max(distance) FROM direct_distance <MID>.city_code = city2.city_code WHERE city1.city_name  =  'New York' AND city2.city_name  =  'Los Angeles' UNION SELECT avg(distance) ,  min(distance) ,  max(distance) FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code JOIN city AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  'New York' AND T3.city_name  =  'Los Angeles' <EOT> <MID>     FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code JOIN city AS T3 ON T
SELECT avg(distance) ,  min(distance) ,  max(distance) FROM direct_distance <MID>.city_code = city2.city_code WHERE city1.city_name  =  'New York' AND city2.city_name  =  'Los Angeles' UNION SELECT avg(distance) ,  min(distance) ,  max(distance) FROM direct_distance WHERE city1.city_name  =  'Chicago' AND city2.city_name  =  'New York' UNION SELECT avg(distance) ,  min(distance) ,  max(distance) FROM direct_distance WHERE city1.city_name  =  'San Francisco' AND city2.city_name  =  'Los Angeles' UNION SELECT avg(distance) ,  min(distance) ,  max(distance) FROM direct_distance WHERE city1.city_name  =  'Dallas
SELECT city1_code FROM direct_distance UNION SELECT city2_code FROM direct_distance ORDER BY distance DESC LIMIT 2'
SELECT city1_code FROM direct_distance ORDER BY distance DESC LIMIT 1 UNION SELECT city2_code FROM direct_distance ORDER BY distance DESC LIMIT 1'
SELECT city1_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) UNION SELECT city2_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) LIMIT 2'         , 'SELECT city_code FROM city ORDER BY rand() LIMIT 2'         , 'SELECT city1_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) UNION SELECT city2_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) LIMIT 2'         , 'SELECT city_code FROM city ORDER BY rand() LIMIT 2'         , 'SELECT city1_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) UNION SELECT city2_code FROM direct_distance WHERE distance  >  (
SELECT city1_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) UNION SELECT city2_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) <MID>     FROM direct_distance;'     GROUP BY city1_code HAVING sum(distance)  >  (SELECT avg(distance) FROM direct_distance) UNION SELECT city2_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) GROUP BY city2_code HAVING sum(distance)  >  (SELECT avg(distance) FROM direct_distance) <EOT> <MID>     HAVING sum(distance)  >  (SELECT avg(distance) FROM direct_distance) UNION SELECT city2_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance)
SELECT city1_code FROM direct_distance WHERE distance  <  1000 UNION SELECT city2_code FROM direct_distance WHERE distance  <  1000'
SELECT city1_code FROM direct_distance WHERE distance  <  1000 UNION SELECT city2_code FROM direct_distance WHERE distance  <  1000'
SELECT sum(distance) FROM direct_distance WHERE city1_code  =  'BAL' <MID>     FROM direct_distance AS T1 JOIN city AS T2 ON T1.city2_code  =  T2.city_code WHERE T2.city_name  =  'New York' GROUP BY T1.city1_code HAVING count(*)  >=  2) AS T3 ON T3.city1_code  =  T1.city1_code GROUP BY T1.city1_code HAVING count(*)  >=  2) AS T4 ON T4.city1_code  =  T1.city1_code GROUP BY T1.city1_code HAVING count(*)  >=  2) AS T5 ON T5.city1_code  =  T1.city1_code GROUP BY T1.city1_code HAVING count
SELECT sum(T1.distance) FROM direct_distance AS T1 JOIN city AS T2 ON T1.city2_code  =  T2.city_code WHERE T2.city_name  =  'BAL' <MID>     FROM direct_distance AS T1 JOIN city AS T2 ON T1.city2_code  =  T2.city_code WHERE T2.city_name  =  'BAL' GROUP BY T1.city1_code HAVING count(*)  >=  4; SELECT sum(T1.distance) FROM direct_distance AS T1 JOIN city AS T2 ON T1.city2_code  =  T2.city_code WHERE T2.city_name  =  'BAL' EXCEPT SELECT T1.distance FROM direct_distance AS T1 JOIN city AS T2 ON T1.city2_code  =  T2
SELECT avg(distance) FROM direct_distance WHERE city1_code  =  'BSN' AND city2_code != 'BSN' <MID>     FROM direct_distance AS T1 JOIN city AS T2 ON T1.city2_code  =  T2.city_code WHERE T2.city_name  =  'Boston' GROUP BY T2.city_name ORDER BY avg_distance ASC LIMIT 10;'
SELECT avg(distance) FROM direct_distance WHERE city1_code  =  '247' AND city2_code != '247' <MID>.city_code = T1.city_code AND T1.city_code = '247' GROUP BY T2.city_code HAVING count(*)  >=  100 ORDER BY avg(distance) ASC LIMIT 1'
SELECT city_name FROM city WHERE city_name != 'Chicago' AND distance  =  (SELECT min(distance) FROM direct_distance WHERE city1_code != 'Chicago') ORDER BY distance LIMIT 1 <MID>     FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city2_code WHERE T1.city_name  =  'New York' AND T2.distance  =  (SELECT min(distance) FROM direct_distance WHERE city1_code != 'New York') ORDER BY distance LIMIT 1;'
SELECT city_name FROM city WHERE city_name  =  (SELECT city_name FROM direct_distance WHERE city1_code  =  (SELECT city_code FROM city WHERE city_name  =  'Chicago') ORDER BY distance LIMIT 1) ORDER BY distance ASC
SELECT city_name FROM city WHERE city_code != 'bos' ORDER BY distance DESC LIMIT 1' <MID>     FROM direct_distance AS T1 JOIN city AS T2 ON T1.city2_code  =  T2.city_code WHERE T2.city_name  =  'Boston' ORDER BY distance DESC LIMIT 1' > task4.sql
SELECT city_name FROM city WHERE city_code NOT IN (SELECT city1_code FROM direct_distance WHERE city2_code  =  'BSN') ORDER BY distance DESC LIMIT 1' <MID>     FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city2_code WHERE T1.city_name  =  'Boston' ORDER BY distance DESC LIMIT 1' > task4.sql
SELECT city_code ,  sum(distance) FROM direct_distance GROUP BY city_code'         , 'SELECT city_code ,  sum(distance) FROM direct_distance GROUP BY city_code'         , ['CREATE TABLE Student (StuID INTEGER PRIMARY KEY , LName VARCHAR(12) , Fname VARCHAR(12) , Age INTEGER , Sex VARCHAR(1) , Major INTEGER , Advisor INTEGER , city_code VARCHAR(3) , FOREIGN KEY(city_code) REFERENCES city(city_code))', 'CREATE TABLE Direct_distance (city1_code VARCHAR(3) , city2_code VARCHAR(3) , distance INTEGER , FOREIGN KEY(city1_code) REFERENCES city(city_code) , FOREIGN KEY(city2_code) REFERENCES city(city_code
SELECT city1_code ,  sum(distance) FROM direct_distance GROUP BY city1_code'
SELECT city_name ,  avg(distance) FROM direct_distance GROUP BY city_name'         , 'SELECT city_name ,  avg(distance) FROM direct_distance GROUP BY city_name'         , ['SELECT city_name ,  avg(distance) FROM direct_distance GROUP BY city_name']]     , [  'SELECT city_name ,  avg(distance) FROM direct_distance GROUP BY city_name'         , 'SELECT city_name ,  avg(distance) FROM direct_distance GROUP BY city_name'         , ['SELECT city_name ,  avg(distance) FROM direct_distance GROUP BY city_name']]]
SELECT T1.city_name ,  avg(T2.distance) FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city1_code GROUP BY T2.city1_code ORDER BY avg(T2.distance) ASC'         , 'New York' : ['SELECT city_name FROM city WHERE city_name  =  'New York']}     FROM = {'Direct_distance': ['SELECT city1_code ,  avg(distance) FROM direct_distance GROUP BY city1_code ORDER BY avg(distance) DESC LIMIT 1']}     ORDER BY = {'Student': 'Age'}     LIMIT = 10
SELECT distance FROM direct_distance WHERE city1_code  =  (SELECT city_code FROM student WHERE firstname  =  'Linda' AND lastname  =  'Smith') AND city2_code  =  (SELECT city_code FROM student WHERE firstname  =  'Tracy' AND lastname  =  'Kim') UNION SELECT distance FROM direct_distance WHERE city1_code  =  (SELECT city_code FROM student WHERE firstname  =  'Tracy' AND lastname  =  'Kim') AND city2_code  =  (SELECT city_code FROM student WHERE firstname  =  'Linda' AND lastname  =  'Smith') <MID>     FROM student AS T1 JOIN advisor AS T2 ON T1.major  =  T2.major WHERE T2.lname  =  'Smith' AND T2.fname  =  'L
SELECT T1.distance FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code JOIN city AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  (SELECT LName FROM student WHERE Fname  =  'Linda' AND Sex  =  'F') AND T3.city_name  =  (SELECT LName FROM student WHERE Fname  =  'Tracy' AND Sex  =  'F') UNION SELECT T1.distance FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code JOIN city AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  (SELECT LName FROM student WHERE Fname
SELECT fname ,  lname FROM Student WHERE city_code IN (SELECT city_code FROM Student WHERE fname  =  'Linda' AND lname  =  'Smith') ORDER BY distance DESC LIMIT 1 <MID>     FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code JOIN city AS T3 ON T1.city2_code  =  T2.city_code JOIN student AS T4 ON T4.city_code  =  T2.city_code WHERE T4.fname  =  'Linda' AND T4.lname  =  'Smith' GROUP BY T2.city_name ORDER BY max(T1.distance) ASC LIMIT 1;'     WHERE fname  =  'Linda' AND lname  =  'Smith' GROUP BY city_name ORDER BY max(
SELECT fname ,  lname FROM Student WHERE city_code IN ( SELECT city_code FROM Student WHERE fname  =  'Linda' AND lname  =  'Smith') ORDER BY distance DESC LIMIT 1 <MID>     FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code JOIN city AS T3 ON T1.city2_code  =  T2.city_code ORDER BY distance DESC LIMIT 1;'     LIMIT 1 - Returns only one row of data. The default value is 'LIMIT 1'.  If you want all the rows of data, set this to a large number.  <EOT> <MID>     ;
SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.fname  =  'Linda' <MID>T1.state] FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.fname  =  'Linda' AND T2.lname  =  'Jones' AND T2.sex  =  'F' AND T2.age  =  18 AND T1.country  =  'United States' GROUP BY T1.state HAVING count(*)  >=  260 ORDER BY sum(T1.distance) ASC LIMIT 10'
SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.fname  =  'Linda' <MID>     , major: 3     , advisor: 5     , city_code: 'CITY4'   , } , { stuid: 6     , lname:  'Jones'     , fname:  'Ben'     , age: 25     , sex: 'M'     , major: 3     , advisor: 5     , city_code: 'CITY3'   , } , { stuid: 7     , lname:  'Williams'     , fname:  'Scott'     , age: 24     , sex: 'M'
SELECT * FROM Sailors WHERE age  >  30'         , 'SELECT * FROM Sailors WHERE age  >  30'     , 'SELECT name FROM Sailors WHERE age  >  30'     , 'SELECT name FROM Sailors WHERE age  >  30'     , 'SELECT name FROM Sailors WHERE age  >  30'     , 'SELECT name FROM Sailors WHERE age  >  30'     , 'SELECT name FROM Sailors WHERE age  >  30'     , 'SELECT name FROM Sailors WHERE age  >  30'     , 'SELECT name FROM Sailors WHERE age  >  30'     , 'SELECT name FROM Sailors WHERE age  >  30'     , 'SELECT name FROM Sailors WHERE age  >  30'     , 'SELECT name
SELECT name FROM sailors WHERE age  >  30'         , 'SELECT name FROM sailors WHERE age  >  30'         , ['Reserves(sid)', 'Sailors(sid)']     , ['SELECT T2.name FROM reserves AS T1 JOIN sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.age  >  30']     , ['SELECT T2.name FROM reserves AS T1 JOIN boats AS T2 ON T1.bid  =  T2.bid']     , ['SELECT count(*) FROM reserves']     , ['SELECT count(*) FROM sailors']     , ['SELECT count(*) FROM boats']]
SELECT name ,  age FROM Sailors WHERE age  <  30'         , 'SELECT name ,  age FROM Sailors WHERE age  <  30'     , 'SELECT name ,  age FROM Sailors WHERE age  <  30'     , 'SELECT name ,  age FROM Sailors WHERE age  <  30'     , 'SELECT name ,  age FROM Sailors WHERE age  <  30'     , 'SELECT name ,  age FROM Sailors WHERE age  <  30'     , 'SELECT name ,  age FROM Sailors WHERE age  <  30'     , 'SELECT name ,  age FROM Sailors WHERE age  <  30'     , 'SELECT name ,  age FROM Sailors WHERE age  <  30'     , 'SELECT name ,  age FROM Sailors WHERE age
SELECT name ,  age FROM Sailors WHERE age  <  30'         , 'name' : 'Reserve' ,  'age' : 22} , {'sql' : 'SELECT name FROM Sailors WHERE rating  >  185' ,  'name' : 'Sailor' ,  'age' : 25 ,  'day' : 'Monday'} , {'sql' : 'SELECT name FROM Sailors WHERE rating  >  185' ,  'name' : 'Sailor' ,  'age' : 25 ,  'day' : 'Tuesday'} , {'sql' : 'SELECT name FROM Sailors WHERE rating  >  185' ,  'name' : 'Sailor' ,  'age' : 25 ,  'day' : 'Wednesday'} , {'sql' :
SELECT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid JOIN Sailors AS T3 ON T1.sid  =  T3.sid WHERE T3.id  =  1; SELECT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid JOIN Sailors AS T3 ON T1.sid  =  T3.sid WHERE T3.id  =  1; SELECT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid JOIN Sailors AS T3 ON T1.sid  =  T3.sid WHERE T3.id  =  1; SELECT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1
SELECT DISTINCT T1.bid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.name  =  'Gilbert' AND T1.day  =  'Thursday' ORDER BY T1.bid ASC'     , ['SELECT DISTINCT T1.bid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.name  =  'Gilbert' AND T1.day  =  'Thursday' ORDER BY T1.bid ASC']]
SELECT DISTINCT sid FROM Reserves WHERE bid  =  102'         , answers: ['sailor_1', 'sailor_3'], correctAnswer: 0, explanation: '' }       , { question: 'Which sailor is not assigned to any boat?[SQL] SELECT name FROM sailors EXCEPT SELECT T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid' }     , { question: 'Assign sailor_4 to boat number 105. Then query all the assignments. [SQL] UPDATE Reserves SET bid  =  105 WHERE sid  =  sailor_4' }     , { question: 'Find all the sailors who are not assigned to a boat. [SQL] SELECT name FROM sailors EXCEPT SELECT T1.name FROM sailors
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102' , 'Reserved By' , 'Sailor')]     FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.bid  =  102 SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102' , 'Reserved By' , 'Sailor')]     WHERE T1.bid  =  102 SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2
SELECT DISTINCT bid FROM Reserves'         , 'SELECT DISTINCT bid FROM Reserves'     , 'SELECT count(*) FROM Reserves'     , 'SELECT count(DISTINCT bid) FROM Reserves'     , 'SELECT count(DISTINCT name) FROM Sailors'     , 'SELECT count(DISTINCT color) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Sailors'     , 'SELECT count(DISTINCT name) FROM Sailors'     , 'SELECT count(DISTINCT color) FROM Boats'     , 'SELECT count(*) FROM Reserves'     , 'SELECT count(DISTINCT day) FROM Reserves'     , 'SELECT count(DISTINCT name) FROM Sailors'     , 'SELECT count(DISTINCT color) FROM Boats'
SELECT DISTINCT bid FROM Reserves'         , 'SELECT DISTINCT bid FROM Reserves'         , 'SELECT count(*) FROM Reserves'     , 'SELECT count(DISTINCT name) FROM Sailors'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(DISTINCT name) FROM Reserves'     , 'SELECT count(DISTINCT day) FROM Reserves'     , 'SELECT count(DISTINCT name) FROM Boats'     , 'SELECT count(DISTINCT name) FROM Sailors'     , 'SELECT count(DISTINCT color) FROM Boats'     , 'SELECT count(*) FROM Reserves'     , 'SELECT count(DISTINCT name) FROM Sailors'     , 'SELECT count(DISTINCT color) FROM Boats'     , 'SELECT count(DISTINCT name) FROM Bo
SELECT name FROM sailors WHERE name LIKE '%e%' ESCAPE '!' <MID>     FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T1.bid  =  T3.bid;'     WHERE name LIKE '%e%' ESCAPE '!';'     ORDER BY name ASC;'     LIMIT 1;'     ;
SELECT name FROM sailors WHERE name LIKE '%e%' <MID>.com/problemset/problem/524/D)
SELECT sid FROM sailors WHERE age  >  (SELECT max(age) FROM sailors) UNION SELECT sid FROM sailors WHERE age  >  21 GROUP BY name HAVING count(*)  >=  2'         , 'SELECT sid FROM sailors WHERE age  >  21 GROUP BY name HAVING count(*)  >=  2'     , 'SELECT sid FROM sailors WHERE age  >  21 GROUP BY name HAVING count(*)  >=  2'     , 'SELECT sid FROM sailors WHERE age  >  21 GROUP BY name HAVING count(*)  >=  2'     , 'SELECT sid FROM sailors WHERE age  >  21 GROUP BY name HAVING count(*)  >=  2'     , 'SELECT sid FROM sailors WHERE age  >  21 GROUP BY name HAVING count(*)  >=  2'     , 'SELECT sid FROM sailors
SELECT DISTINCT sid FROM sailors WHERE rating != (SELECT min(rating) FROM sailors) SQL] SELECT DISTINCT sid FROM sailors WHERE rating != (SELECT min(rating) FROM sailors) SQL] SELECT DISTINCT sid FROM sailors WHERE rating != (SELECT min(rating) FROM sailors) SQL] SELECT DISTINCT sid FROM sailors WHERE rating != (SELECT min(rating) FROM sailors) SQL] SELECT DISTINCT sid FROM sailors WHERE rating != (SELECT min(rating) FROM sailors) SQL] SELECT DISTINCT sid FROM sailors WHERE rating != (SELECT min(rating) FROM sailors) SQL] SELECT DISTINCT sid FROM sailors WHERE rating != (SELECT min(rating) FROM sailors) SQL] SELECT DISTINCT sid FROM sailors WHERE rating != (SELECT min(rating) FROM sailors) SQL] SELECT DISTINCT sid FROM sailors WHERE rating != (SELECT min(rating
SELECT DISTINCT name FROM sailors WHERE age  >  (SELECT min(age) FROM sailors WHERE rating  >  7) UNION SELECT DISTINCT name FROM sailors WHERE age  >  (SELECT min(age) FROM sailors WHERE rating  >  7) ORDER BY name ASC'         , 'sid': 1}     , {'query': 'SELECT name FROM sailors WHERE rating  >  7 AND age  >  (SELECT min(age) FROM sailors WHERE rating  >  7)', 'sid': 2}     , {'query': 'SELECT name FROM sailors WHERE rating  >  7 AND age  >  (SELECT min(age) FROM sailors WHERE rating  >  7)', 'sid': 3}     , {'query': 'SELECT name FROM sailors WHERE rating  >  7 AND age  >  (SELECT min(age) FROM sailors
SELECT name FROM sailors WHERE age  >  (SELECT max(age) FROM sailors WHERE rating  >  7) UNION SELECT name FROM sailors WHERE age  >  (SELECT min(age) FROM sailors WHERE rating  >  7) ORDER BY name ASC' , 'Reserve a boat for a specific sailor on a specific day. If the sailor is already reserved on that day, then unreserve them first. For example: reserve 123 for mon' , 'UPDATE Reserves SET day  =  'tue' WHERE sid  =  123' , 'Unreserve a boat for a specific sailor on a specific day. For example: unreserve 123 for mon' , 'DELETE FROM Reserves WHERE sid  =  123 AND day  =  'mon'']
SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T1.sid HAVING count(*)  >=  1'         , 'SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid'     , 'SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.day  =  'Mon'']     , answers: ['SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.s
SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid'         , 'SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T1.sid HAVING count(*)  >=  1'     , 'SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.day  =  'Mon' AND T2.bid  =  4'     , 'SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid
SELECT T1.sid ,  T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid GROUP BY T1.sid HAVING count(*)  >  1'         , 'SELECT T1.sid ,  T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid GROUP BY T1.sid HAVING count(*)  >  1'     , 'SELECT T1.sid ,  T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid GROUP BY T1.sid HAVING count(*)  >  1'     , 'SELECT T1.sid ,  T2.name FROM Reserves AS T1 JOIN S
SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T1.name HAVING COUNT(*)  >=  2'         , 'SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid'     , 'SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T1.name HAVING COUNT(*)  >=  2'     , 'SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T1.name HAVING COUNT(*)  <=  2
SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  'red' OR t2.color  =  'blue'')]     , [('Sid', 'INTEGER')]     , ['SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color  =  'red' OR color  =  'blue')')]     , ['SELECT count(*) FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color  =  'red' OR color  =  'blue')')]     , ['SELECT count(*) FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color  =  'green')')]     , ['SELECT count(*) FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color  =  '
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color  =  'Red' OR color  =  'Blue') <MID>.com/problemset/problem/524/D)
SELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.bid IN (SELECT T3.bid FROM Boats AS T3 WHERE T3.color  =  'red' OR T3.color  =  'blue')'         , 'Sailor Name' , 'SID' , 'Reserved Boat' , 'Red or Blue Boat' , 'T1.sid' , 'T2.name' , 'T1.bid' , 'T3.name' , 'T3.color' , 'Reserved Boat' , 'Red or Blue Boat'     , ['SELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2
SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid IN (SELECT T3.bid FROM Boats AS T3 WHERE T3.color  =  'red' UNION SELECT T4.bid FROM Boats AS T4 WHERE T4.color  =  'blue')'         , 'SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid IN (SELECT T3.bid FROM Boats AS T3 WHERE T3.color  =  'red' INTERSECT SELECT T4.bid FROM Boats AS T4 WHERE T4.color  =  'blue')'     , 'SELECT T1.name
SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  'red' INTERSECT SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  'blue'', SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  'red' EXCEPT SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  'blue'', SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t
SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  'red' INTERSECT SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  'blue'', ['4 5'], ['SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  'red' INTERSECT SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  'blue'']]
SELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.bid IN (SELECT T3.bid FROM Boats AS T3 WHERE T3.color  =  'red' INTERSECT SELECT T4.bid FROM Boats AS T4 WHERE T4.color  =  'blue')'         , 'Sid': 1}     , {'query': 'SELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.bid IN (SELECT T3.bid FROM Boats AS T3 WHERE T3.color  =  'red' EXCEPT SELECT T4.bid FROM Boats AS T4 WHERE T4.color
SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid IN (SELECT id FROM Boats WHERE name  =  'red' OR name  =  'blue')'         , ['CREATE TABLE Sailors (sid INTEGER primary key , name TEXT , rating INTEGER , age INTEGER) CREATE TABLE Boats (bid INTEGER primary key , name TEXT , color TEXT) CREATE TABLE Reserves (sid INTEGER , bid INTEGER , day TEXT , foreign key (sid) references Sailors(sid) , foreign key (bid) references Boats(bid))']]     , [['SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =
SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves GROUP BY sid HAVING COUNT(*)  =  1'         , '23' : 'SELECT name FROM sailors WHERE rating  >  75'         , '24' : 'SELECT name FROM sailors ORDER BY name ASC'         , '25' : 'SELECT name FROM boats ORDER BY name DESC'         , '26' : 'SELECT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid JOIN Sailors AS T3 ON T1.sid  =  T3.sid WHERE T3.name  =  'Guy' AND T2.color  =  'red' GROUP BY T3.name ORDER BY count(*) DESC LIMIT 1'     , '27' : 'SELECT count(*) FROM Reserves'
SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves'         , 'SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves)',
SELECT name ,  sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves) <MID>.color FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid'     , 'SELECT T1.name ,  T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid'     , 'SELECT T1.name ,  T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid EXCEPT SELECT T1.name ,  T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid'     , 'SELECT T1.name ,  T1.sid FROM sailors AS T1 JOIN reserves AS T
SELECT name ,  sid FROM sailors EXCEPT SELECT T1.name ,  T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid'         , 'SELECT name ,  sid FROM sailors EXCEPT SELECT T1.name ,  T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid'     , 'SELECT name ,  sid FROM sailors EXCEPT SELECT T1.name ,  T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid'     , 'SELECT name ,  sid FROM sailors EXCEPT SELECT T1.name ,  T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1
SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves GROUP BY sid HAVING count(*)  =  1'         , '295'         , 'SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves GROUP BY sid HAVING count(*)  >  1'     , 'SELECT bid FROM reserves GROUP BY bid HAVING count(*)  >  1'     , 'SELECT bid FROM reserves GROUP BY bid HAVING count(*)  =  1'     , 'SELECT bid FROM reserves GROUP BY bid HAVING count(*)  <  2'
SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves'         , 'SELECT name FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves)', 'SELECT name FROM boats WHERE bid NOT IN (SELECT bid FROM reserves)']     , ['SELECT count(*) FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves)', 'SELECT count(*) FROM boats WHERE bid NOT IN (SELECT bid FROM reserves)']     , ['SELECT count(*) FROM sailors EXCEPT SELECT count(*) FROM reserves', 'SELECT count(*) FROM boats EXCEPT SELECT count(*) FROM reserves']     , ['SELECT count(*) FROM sailors INTERSECT SELECT count(*) FROM reserves', 'SELECT count(*) FROM boats INTERSECT SELECT count(*) FROM reserves']     , ['SELECT count(*) FROM sailors UNION SELECT count(*) FROM boats']     , ['SELECT count(*) FROM sailors UNION SELECT count(*) FROM reserves
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  103'         , 'SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  103'         , ['T1.name']     , ['Reserved By']     , ['Sailor']     , ['Boat 103']     , ['T2.bid']     , ['103']     , ['color']     , ['T2.color']     , ['Boat']     , ['T2.name']     , ['T1.rating']     , ['T1.age']     , ['T1
SELECT T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.bid  =  103'         , 'SELECT T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.bid  =  103'     , 'SELECT T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.bid  =  103'     , 'SELECT T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.bid  =  103'     , 'SELECT T2.name FROM Reserves
SELECT name FROM sailors WHERE rating  >  (SELECT max(rating) FROM sailors WHERE name  =  'Luis') UNION SELECT name FROM sailors WHERE rating  <  100 AND name != 'Luis' EXCEPT SELECT name FROM sailors WHERE name  =  'Luis' <MID>.com/problemset/problem/524/D)
SELECT name FROM sailors WHERE rating  >  (SELECT max(rating) FROM sailors WHERE name  =  'Luis') UNION SELECT name FROM sailors WHERE rating  <  100 AND name != 'Luis' ORDER BY name'
SELECT name FROM sailors WHERE rating  >  (SELECT max(rating) FROM sailors WHERE name  =  'Luis') UNION SELECT name FROM sailors WHERE rating  <  100 AND name != 'Luis' EXCEPT SELECT name FROM sailors WHERE name  =  'Luis' <MID>.com/problemset/problem/524/D)
SELECT name FROM sailors WHERE rating  >  (SELECT max(rating) FROM sailors WHERE name  =  'Luis') UNION SELECT name FROM sailors WHERE rating  >  (SELECT min(rating) FROM sailors WHERE name  =  'Luis')'     , 'Reserves' : ['CREATE TABLE Reserves (sid INTEGER , bid INTEGER , day DATE , foreign key (sid) references Sailors(sid) , foreign key (bid) references Boats(bid))']}
SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T1.rating  >  2'         , 'SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid'     , 'SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T1.rating  >  2'     , 'SELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T1.rating  >  2'
SELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.rating  >=  3'         , 'SELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.rating  >=  3'     , 'SELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.rating  >=  3'     , 'SELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T
SELECT name ,  age FROM Sailors ORDER BY age DESC LIMIT 1'         , 'Reserve a boat for a specific sailor on a specific day. If the sailor is already reserved a boat on that day, then change the date to the new date. If the sailor is not yet reserved a boat on that day, then add a new reserve record with the sailor ID and the boat ID and the date. [SQL]RESERVE A BOAT FOR A SPECIFIC SAILOR ON A SPECIFIC DAY'         , 'Find all the sailors who are rated higher than or equal to the rating given. [SQL]SELECT name FROM Sailors WHERE rating  >=  $Rating'     , 'Find all the sailors who have a rating in the range given. [SQL]SELECT name FROM Sailors WHERE rating BETWEEN $rating1 AND $rating2'
SELECT name ,  age FROM Sailors ORDER BY age DESC LIMIT 1'         , 'Reserve a boat for a specific sailor on a specific day. If the sailor is already reserved a boat on that day, then change the date to T1. For example: if the current reserve date is 2001-05-30 then change it to 2001-05-31.[SQL]RESERVE sid = 233 ,  day = 2001-06-02'         , 'List all sailors whose age is more than 21. Use an index on the age column if possible. [SQL]SELECT name FROM Sailors WHERE age  >  21'         , 'Find the names of all sailors with a rating higher than 2.5. [SQL]SELECT name FROM Sailors WHERE rating  >  2.
SELECT count(*) FROM sailors' , '3' , SELECT count(*) FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid WHERE T1.rating  >  200' , SELECT count(*) FROM sailors WHERE rating  >  200 UNION SELECT count(*) FROM reserves' , SELECT count(*) FROM sailors WHERE rating  >  200 INTERSECT SELECT count(*) FROM reserves' , SELECT count(*) FROM sailors WHERE rating  >  200 EXCEPT SELECT count(*) FROM reserves' , SELECT count(*) FROM sailors WHERE rating  >  200' , SELECT count(*) FROM sailors WHERE rating  >  200' , SELECT count(*) FROM reserves' , SELECT count(*) FROM sailors WHERE rating  >  200' , SELECT count(*) FROM sailors WHERE rating  >  200' ,
SELECT count(*) FROM sailors' , 'SELECT count(*) FROM sailors' , '3' , 'SELECT count(*) FROM sailors' , 'SELECT count(*) FROM sailors' , '3' , 'SELECT count(*) FROM sailors' , 'SELECT count(*) FROM sailors' , '3' , 'SELECT count(*) FROM sailors' , 'SELECT count(*) FROM sailors' , '3' , 'SELECT count(*) FROM sailors' , 'SELECT count(*) FROM sailors' , '3' , 'SELECT count(*) FROM sailors' , 'SELECT count(*) FROM sailors' , '3' , 'SELECT count(*) FROM sailors' , 'SELECT count(*) FROM sailors' , '3' , 'SELECT count(*) FROM sailors' , 'SELECT count(*) FROM sailors' , '3' , 'SELECT count(*) FROM sailors' , 'SELECT count(*) FROM sailors' , '3' , 'SELECT count
SELECT avg(age) FROM sailors WHERE rating  =  7'         , '25.0' : 'SELECT count(*) FROM sailors WHERE rating  =  7'         , '30.0' : 'SELECT count(*) FROM sailors'     , '40.0' : 'SELECT count(*) FROM boats'     , '50.0' : 'SELECT count(*) FROM reserves'     , '60.0' : 'SELECT count(*) FROM sailors WHERE rating  =  7'     , '70.0' : 'SELECT count(*) FROM boats'     , '80.0' : 'SELECT count(*) FROM reserves'     , '90.0' : 'SELECT count(*) FROM sailors EXCEPT SELECT count(*) FROM sailors WHERE rating  =  7'     , '100.0' : 'SELECT count(*)
SELECT avg(age) FROM Sailors WHERE rating  =  7'         , '25.0' : 'SELECT count(*) FROM Sailors WHERE rating  =  7'         , '31.0' : 'SELECT count(*) FROM Sailors'         , '46.0' : 'SELECT count(*) FROM Reserves'         , '59.0' : 'SELECT count(*) FROM Boats'     , }     , 'Q3' : {                  , '28.0' : 'SELECT count(*) FROM Sailors WHERE rating  =  7'         , '35.0' : 'SELECT count(*) FROM Sailors'         , '52.0' : 'SELECT count(*) FROM Reserves'         , '69.0' : 'SELECT count(*) FROM Boats'     , }
SELECT count(*) FROM sailors WHERE name LIKE 'D%'' <MID>     FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T1.bid  =  T3.bid;'     WHERE T2.name  =  'Dennis' AND T3.name  =  'White Pearl';'     ORDER BY T1.day DESC LIMIT 1;'     ;
SELECT COUNT(*) FROM SAILORS WHERE name LIKE 'D%' <MID>     FROM RESERVES AS T1 JOIN BOATS AS T2 ON T1.bid  =  T2.bid JOIN SAILORS AS T3 ON T1.sid  =  T3.sid WHERE T3.name  =  'Roger' AND T2.name  =  'White Pearl' AND T1.day  =  'Monday' UNION SELECT T2.name FROM RESERVES AS T1 JOIN BOATS AS T2 ON T1.bid  =  T2.bid JOIN SAILORS AS T3 ON T1.sid  =  T3.sid WHERE T3.name  =  'Jane' AND T2.name  =  'Blue Water' AND T1.day  =  'Tuesday' UNION SELECT T2
SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)  >=  250'         , 'SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)  <=  250'     , 'SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)  =  250'     , 'SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)  !=  250'     , 'SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)  >  250'     , 'SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)
SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)  >=  250'         , 'SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)  <=  250'     , 'SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)  =  250'     , 'SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)  !=  250'     , 'SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)  >  250'     , 'SELECT avg(rating) ,  max(age) FROM Sailors GROUP BY name HAVING count(*)
SELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name'         , 'number_of_reservations': 3}     , {'sql': 'SELECT count(*) FROM reserves' , 'number_of_reservations': 3}     , {'sql': 'SELECT count(*) FROM sailors' , 'number_of_sailors': 5}     , {'sql': 'SELECT count(*) FROM boats' , 'number_of_boats': 2}     , {'sql': 'SELECT count(*) FROM reserves WHERE day  =  'monday'' , 'number_of_monday_reservations': 2}     , {'sql': 'SELECT count(*) FROM reserves WHERE day  =  'tuesday'' , 'number_of_
SELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name'         , 'SELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name'     , 'SELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name'     , 'SELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name'     , 'SELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =
SELECT count(*) ,  bid FROM Reserves WHERE bid  >  50 GROUP BY bid'         , 'number_of_reservations' : 3} , {'sql' : 'SELECT count(*) FROM Reserves WHERE bid  >  50' , 'number_of_reservations' : 3}]     , 'output' : [{'sql' : 'SELECT count(*) FROM Reserves WHERE bid  >  50' , 'number_of_reservations' : 3}]}      , {'input' : [{'sql' : 'SELECT count(*) FROM Reserves WHERE bid  >  100' , 'number_of_reservations' : 2}]}      , {'input' : [{'sql' : 'SELECT count(*) FROM Reserves WHERE bid  >  150' , 'number_of_reservations' : 1}]}
SELECT count(*) ,  T1.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid WHERE T2.bid  >  50 GROUP BY T1.bid ORDER BY count(*) DESC LIMIT 3'         , 'CREATE TABLE Sailors (sid INTEGER primary key , name TEXT , rating INTEGER , age INTEGER) CREATE TABLE Boats (bid INTEGER primary key , name TEXT , color TEXT) CREATE TABLE Reserves (sid INTEGER , bid INTEGER , day TEXT , foreign key (sid) references Sailors(sid) , foreign key (bid) references Boats(bid))'     , 'SELECT count(*) ,  T1.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid WHERE T2.bid
SELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name HAVING count(*)  >  1'         , 'number_of_reservations': 2}     , {'sql': 'SELECT count(*) FROM reserves' , 'number_of_reservations': 3}     , {'sql': 'SELECT count(DISTINCT sid) FROM reserves' , 'number_of_reservations': 2}     , {'sql': 'SELECT count(DISTINCT bid) FROM reserves' , 'number_of_reservations': 1}     , {'sql': 'SELECT count(DISTINCT name) FROM boats' , 'number_of_reservations': 1}     , {'sql': 'SELECT count(DISTINCT T1
SELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name HAVING count(*)  >  1'         , 'CREATE TABLE Sailors (sid INTEGER primary key , name TEXT , rating INTEGER , age INTEGER) CREATE TABLE Boats (bid INTEGER primary key , name TEXT , color TEXT) CREATE TABLE Reserves (sid INTEGER , bid INTEGER , day TEXT , foreign key (sid) references Sailors(sid) , foreign key (bid) references Boats(bid))'     , 'SELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name HAVING count(*)  >  1'
SELECT count(*) ,  T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid WHERE T1.sid  >  1 GROUP BY T2.name'         , 'number_of_reservations_by_boat' : 3}     , {'query' : 'SELECT count(*) ,  T3.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T1.bid  =  T3.bid WHERE T2.rating  >  76 GROUP BY T3.name' , 'answer' : 'Number of reservations by boat for sailors with rating greater than 76: 4'}     , {'query' : 'SELECT count(*) ,  T3.name FROM Reserves AS T1
SELECT count(*) ,  T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid WHERE T1.sid  >  1 GROUP BY T2.name ORDER BY count(*) DESC LIMIT 3'         , 'CREATE TABLE Sailors (sid INTEGER primary key , name TEXT , rating INTEGER , age INTEGER) CREATE TABLE Boats (bid INTEGER primary key , name TEXT , color TEXT) CREATE TABLE Reserves (sid INTEGER , bid INTEGER , day TEXT , foreign key (sid) references Sailors(sid) , foreign key (bid) references Boats(bid))'     , 'SELECT count(*) ,  T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid WHERE T1.sid
SELECT T1.rating ,  avg(T2.age) FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  1 GROUP BY T1.rating ORDER BY T1.rating DESC NULLS LAST'         , 'SELECT T1.rating ,  avg(T2.age) FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  1 GROUP BY T1.rating ORDER BY T1.rating DESC NULLS LAST'     , 'SELECT T1.rating ,  avg(T2.age) FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  1 GROUP BY T1.rating
SELECT T1.rating ,  AVG (T2.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T2.bid  =  T3.bid WHERE T3.color  =  'red' GROUP BY T1.rating'     , SELECT avg(age) FROM Sailors WHERE rating  =  'novice' UNION SELECT avg(age) FROM Sailors WHERE rating  =  'advanced' UNION SELECT avg(age) FROM Sailors WHERE rating  =  'expert' UNION SELECT avg(age) FROM Sailors WHERE rating  =  'master' UNION SELECT avg(age) FROM Sailors WHERE rating  =  'none' UNION SELECT avg(age) FROM Sailors WHERE rating  =  'invalid' UNION SELECT av
SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age ASC'         , 'SID': 1}     , {'query': 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age DESC'         , 'SID': 2}     , {'query': 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age ASC'         , 'SID': 3}     , {'query': 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age DESC'         , 'SID': 4}     , {'query': 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age ASC'         , 'SID': 5}     , {'query': 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating
SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age ASC'         , 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age ASC'     , 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age DESC'         , 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age DESC'     , 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age ASC'     , 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age DESC'     , 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age ASC'     , 'SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age DESC'     , 'SELECT name ,  rating ,  age
SELECT count(*) FROM Boats'         , 'SELECT count(*) FROM Boats'         , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count(*) FROM Boats'     , 'SELECT count
SELECT count(*) FROM Boats' , '3' , 'How many sailors are there?[SQL] SELECT count(*) FROM Sailors' , '12' , 'How many reserves are there?[SQL] SELECT count(*) FROM Reserves' , '6' , 'How many days are reserved?[SQL] SELECT count(DISTINCT day) FROM Reserves' , '3' , '' , 'SELECT count(*) FROM RESERVES WHERE bid  =  1' , '3' , 'SELECT count(*) FROM RESERVES WHERE bid  =  2' , '2' , 'SELECT count(*) FROM RESERVES WHERE bid  =  3' , '1' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , ''
SELECT count(*) FROM Boats WHERE color  =  'red' <MID>     FROM Boats WHERE color  =  'red' AND name  =  'Speedster' AND age BETWEEN 16 AND 25; SELECT count(*) FROM Sailors WHERE rating  >  90; SELECT count(*) FROM Reserves WHERE day  =  'Monday'; SELECT count(*) FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.name  =  'Kelly'; SELECT count(*) FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid WHERE T2.name  =  'Speedster' AND T2.color  =  'red' AND T1.day  =  'Tuesday'; SELECT count(*) FROM Reserves AS T1 JOIN Boats AS
SELECT count(*) FROM Boats WHERE color  =  'red' <MID>     FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.name  =  'Paul' AND T1.day  =  'Monday' UNION SELECT count(*) FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.name  =  'Paul' AND T1.day  =  'Tuesday' UNION SELECT count(*) FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.name  =  'Paul' AND T1.day  =  'Wednesday' UNION SELECT count(*) FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.
SELECT T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid JOIN sailors AS T3 ON T2.sid  =  T3.sid WHERE T3.age BETWEEN 20 AND 30'         , 'SELECT T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid JOIN sailors AS T3 ON T2.sid  =  T3.sid WHERE T3.age BETWEEN 20 AND 30'     , 'SELECT T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid JOIN sailors AS T3 ON T2.sid  =  T3.sid WHERE T3.age BETWEEN 20 AND
SELECT T1.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid JOIN Sailors AS T3 ON T1.sid  =  T3.sid WHERE T3.age BETWEEN 20 AND 30'         , 'SELECT T1.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid JOIN Sailors AS T3 ON T1.sid  =  T3.sid WHERE T3.age BETWEEN 20 AND 30'     , 'SELECT T1.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid JOIN Sailors AS T3 ON T1.sid  =  T3.sid WHERE T3.age BETWE
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T2.bid  =  T3.bid WHERE T3.color  =  'red' AND T1.rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T2.bid  =  T3.bid WHERE T3.color  =  'red')'         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,
SELECT name FROM sailors WHERE rating  >  (SELECT max(t1.rating) FROM reserves AS T1 JOIN boats AS T2 ON T1.bid  =  T2.bid WHERE T2.color  =  'Red') <MID>     , age INTEGER NOT NULL DEFAULT -1;';
SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' ] , ['SELECT name FROM Sailors WHERE rating  =  (SELECT max(rating) FROM Sailors)', 'SELECT name FROM Sailors WHERE rating  =  (SELECT max(rating) FROM Sailors)', 'SELECT name FROM Sailors WHERE rating  =  (SELECT max(rating) FROM Sailors)', 'SELECT name FROM Sailors WHERE rating  =  (SELECT max(rating) FROM Sailors)', 'SELECT name FROM Sailors WHERE rating  =  (SELECT max(rating) FROM Sailors)'] , ['Reserve a
SELECT max(rating) FROM Sailors' , '3' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating) FROM Sailors' , 'SELECT max(rating
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon' <MID>     , age INTEGER     , rating INTEGER     , PRIMARY KEY (sid)     , UNIQUE (name)     , CHECK (rating >= 0 AND rating <= 250)     , CHECK (age >= 18 AND age <= 70)     , CHECK (name NOTNULL)     , CHECK (rating NOT NULL)     , CHECK (age NOT NULL)     , CHECK (rating != 0)     , CHECK (age != 0)     , CHECK (name != '')     , CHECK (rating != '')     , CHECK (age !=
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon' <MID>     FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T1.bid WHERE T3.name  =  'Melon' AND T2.name  =  'Sparrow' AND T1.day  =  'Thursday' UNION SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.
SELECT name ,  age FROM Sailors ORDER BY rating DESC'         , 'Sailor1' , 25 , 'Boat1' , 'Red' , 'Tuesday' , 'Reserve1' , 'Sailor1' , 'Boat1' , 'Red' , 'Tuesday' , 'Reserve1' , 'Sailor1' , 'Boat1' , 'Red' , 'Tuesday' , 'Reserve1' , 'Sailor1' , 'Boat1' , 'Red' , 'Tuesday' , 'Reserve1' , 'Sailor1' , 'Boat1' , 'Red' , 'Tuesday' , 'Reserve1' , 'Sailor1' , 'Boat1' , 'Red' , 'Tuesday' , 'Reserve1' , 'Sailor1
SELECT name ,  age FROM Sailors ORDER BY rating DESC'         , 'Sid' : 123}     , {'query' : 'SELECT name FROM Sailors WHERE rating  >  85' , 'Sid' : 124}     , {'query' : 'SELECT name FROM Sailors WHERE rating  <  75' , 'Sid' : 125}     , {'query' : 'SELECT name FROM Sailors WHERE rating  =  85' , 'Sid' : 126}     , {'query' : 'SELECT name FROM Sailors WHERE rating != 85' , 'Sid' : 127}     , {'query' : 'SELECT name FROM Sailors WHERE rating BETWEEN 75 AND 85' , 'Sid' : 128}     ,
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1'         , 'SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1'     ,   'SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1'         , 'SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1'     ,   'SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1'     ,   'SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1'     ,   'SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1'     ,   'SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1'     ,   'SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1'     ,   'SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1'     ,   'SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1'     ,   'SELECT Model FROM head
SELECT model FROM headphone ORDER BY price DESC LIMIT 1'         , 'model': 'Sennheiser HD 650'     ,   'query': 'SELECT model FROM headphone ORDER BY price DESC LIMIT 1'     ,   'image': 'https://raw.githubusercontent.com/Zhenye-N/HCI-Database/master/Task%203/images/T3_Q4.png'     ,   'name': 'Highest priced headphone model'     ,   'category': 'Headphones'     ,   'difficulty': 'Easy'     ,   'chi2': 29.78     ,   'null_percentage': 0.0     ,   'id': 4     ,   'sql': 'SELECT model FROM headphone ORDER BY price DESC LIMIT 1'     ,
SELECT Model FROM headphone ORDER BY Model ASC'         , 'SELECT Model FROM headphone ORDER BY Model ASC'     ,   'SELECT DISTINCT Model FROM headphone ORDER BY Model ASC'         , 'SELECT count(DISTINCT model) FROM headphone'     ,   'SELECT count(DISTINCT class) FROM headphone'     ,   'SELECT count(*) FROM stock'     ,   'SELECT sum(quantity) FROM stock'     ,   'SELECT avg(quantity) FROM stock' ]     FROM = [ 'FROM headphone AS h JOIN stock AS s ON h.headphone_id  =  s.headphone_id' ]     WHERE = [ 'WHERE s.quantity  >  0' ]     GROUP BY = [ 'GROUP BY h.model' ]     ORDER BY = [ 'ORDER BY h.model ASC' ]
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC'         , 'SELECT DISTINCT Model FROM headphone ORDER BY Model ASC'     ,   'SELECT count(*) FROM stock'         , 'SELECT count(*) FROM stock'     ,   'SELECT sum(quantity) FROM stock'         , 'SELECT sum(quantity) FROM stock'     ,   'SELECT count(*) FROM store'         , 'SELECT count(*) FROM store'     ,   'SELECT count(*) FROM headphone'         , 'SELECT count(*) FROM headphone'     ,   'SELECT min(price) FROM headphone'         , 'SELECT min(price) FROM headphone'     ,   'SELECT max(price) FROM headphone'         , 'SELECT max(price) FROM headphone'     ,   'SELECT avg(price) FROM headphone'         , 'SELECT avg(price) FROM
SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1'         , 'class2'     , ['SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT
SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1'         , 'class3' ]      , [ 'SELECT model FROM headphone WHERE class  =  'class2' LIMIT 3'         , 'DEEP HIFI'        , 'SUPER DEEP HIFI'        , 'ULTRA DEEP HIFI' ]      , [ 'SELECT model FROM headphone WHERE class  =  'class4' LIMIT 3'         , 'SUPER LOW PROFILE'        , 'LOW PROFILE'        , 'NORMAL PROFILE' ]      , [ 'SELECT model FROM headphone WHERE class  =  'class3' LIMIT 3' ONLY OVER EARS'         , 'OVER THE EDGE'        , 'SUPER COMFORTABLE'        , '
SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2'         , 'CLASS' : 'Class'     ,   'model' : 'Model'     ,   'driver-matched_dB' : 'Driver-matched_dB'     ,   'construction' : 'Construction'     ,   'earpads' : 'Earpads'     ,   'price' : 'Price'     ,   'headphone_id' : 'Headphone_ID'     ,   'store_id' : 'Store_ID'     ,   'quantity' : 'Quantity'     ,   'name' : 'Name'     ,   'neighborhood' : 'Neighborhood'     ,   'parking' : 'Parking'     ,   'date_open
SELECT Class FROM headphone GROUP BY Class HAVING count(*)  <=  2'         , 'class1' : 'Class = 'class1'' , 'class2' : 'Class = 'class2'' , 'class3' : 'Class = 'class3''}     , { 'query' : 'SELECT model FROM headphone WHERE driver-matched_dB  >  70' }     , { 'query' : 'SELECT model FROM headphone WHERE construction  =  'wireless'' }     , { 'query' : 'SELECT model FROM headphone WHERE earpads  =  'yes'' }     , { 'query' : 'SELECT model FROM headphone WHERE price  <  300' }     , { 'query' : 'SELECT model FROM headphone EXCEPT SELECT model FROM headphone WHERE price  <  300' }     , { 'query
SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS'         , 'CLASS	count()'         , 'Class A	4'         , 'Class B	3'         , 'Class C	6'     , 'Class D	5'      , ''     , 'Class E	2'      , ''     , 'Class F	1'      , ''     , 'Class G	2'      , ''     , 'Class H	3'      , ''     , 'Class I	3'      , ''     , 'Class J	3' ]
SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS'         , 'CLASS	count'         , ['EARPHONES	6', 'HEADSETS	1', 'ON-EAR-HEADPHONES	3', 'OVER-THE-EAR-HEADPHONES	4']         , 'HEADPHONE CLASS	COUNT'         , ['EARPHONES	6', 'HEADSETS	1', 'ON-EAR-HEADPHONES	3', 'OVER-THE-EAR-HEADPHONES	4']     , 'SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS'     , 'SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS'     , 'SELECT
SELECT count(DISTINCT Earpads) FROM headphone'         , '2'         , ['CREATE TABLE headphone ( Headphone_ID int , Model text , Class text , Driver-matched_dB real , Construction text , Earpads text , Price int , PRIMARY KEY ( Headphone_ID ) )']     , ['SELECT count(DISTINCT Earpads) FROM headphone']     , ['CREATE TABLE store ( Store_ID int , Name text , Neighborhood text , Parking text , Date_Opened text , PRIMARY KEY ( Store_ID ) )']     , ['CREATE TABLE stock ( Store_ID int , Headphone_ID int , Quantity int , PRIMARY KEY ( Store_ID , Headphone_ID ) )']]
SELECT count(DISTINCT Earpads) FROM headphone'         , '2'     , 3     , 4     , 5     , 6     , 7     , 8     , 9     , 10     , 11     , 12     , 13     , 14     , 15     , 16     , 17     , 18     , 19     , 20     , 21     , 22     , 23     , 24     , 25     , 26     , 27     , 28     , 29     , 30     , 31     , 32     , 33
SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2'         , 'SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2'     , 'SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2'     , 'SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2'     , 'SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2'     , 'SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2'     , 'SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2'     , 'SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2'     , '
SELECT Earpads ,  COUNT(*) FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2'         , 'class': 'code'     , 'language': 'sql'     , 'name': 'query__task_1'     , 'schema': 'CREATE TABLE headphone ( Headphone_ID int , Model text , Class text , Driver-matched_dB real , Construction text , Earpads text , Price int , PRIMARY KEY ( Headphone_ID ) ) CREATE TABLE store ( Store_ID int , Name text , Neighborhood text , Parking text , Date_Opened text , PRIMARY KEY ( Store_ID ) ) CREATE TABLE stock ( Store_ID int , Headphone_ID int , Quantity int , PRIMARY KEY ( Store_ID , Headphone_ID ) )'     , 'type': 'query'     , 'uid': 'e408b
SELECT Model ,  CLASS ,  Construction FROM headphone ORDER BY price LIMIT 1'         , 'LG K900' ,  'class-1' ,  'closed' ]      , [ 'SELECT max(price) FROM headphone' ,  350 ]      , [ 'SELECT T2.model ,  T2.class ,  T2.construction FROM stock AS T1 JOIN headphone AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T1.headphone_id ORDER BY avg(T1.quantity) DESC LIMIT 1' ,  'Huawei P20 Pro' ,  'class-1' ,  'open' ]      , [ 'SELECT count(*) FROM stock' ,  7 ]      , [ 'SELECT count(*) FROM headphone' ,  3 ]      , [
SELECT Model ,  CLASS ,  Construction FROM headphone ORDER BY Price ASC LIMIT 1'         ,   'SELECT Model ,  CLASS ,  Construction FROM headphone ORDER BY Price ASC LIMIT 1'     ,   'SELECT * FROM stock WHERE quantity  =  1'         ,   'SELECT headphone_id FROM stock WHERE quantity  =  1'     ,   'SELECT model FROM headphone ORDER BY price ASC LIMIT 1'         ,   'SELECT model FROM headphone ORDER BY price ASC LIMIT 1'     ,   'SELECT class FROM headphone ORDER BY price ASC LIMIT 1'         ,   'SELECT class FROM headphone ORDER BY price ASC LIMIT 1'     ,   'SELECT construction FROM headphone ORDER BY price ASC LIMIT 1'         ,   'SELECT construction FROM headphone ORDER BY price ASC LIMIT 1'     ,   'SELECT TYPE
SELECT avg(price) ,  Construction FROM headphone GROUP BY Construction'         , 'SELECT avg(price) ,  Construction FROM headphone GROUP BY Construction'     , 'SELECT avg(price) ,  Construction FROM headphone GROUP BY Construction'     , 'SELECT avg(price) ,  Construction FROM headphone GROUP BY Construction'     , 'SELECT avg(price) ,  Construction FROM headphone GROUP BY Construction'     , 'SELECT avg(price) ,  Construction FROM headphone GROUP BY Construction'     , 'SELECT avg(price) ,  Construction FROM headphone GROUP BY Construction'     , 'SELECT avg(price) ,  Construction FROM headphone GROUP BY Construction'     , 'SELECT avg(price) ,  Construction FROM headphone GROUP BY Construction'     , 'SELECT av
SELECT avg(price) ,  CONSTRUCTION FROM headphone GROUP BY CONSTRUCTION'         , 'SELECT avg(price) ,  CONSTRUCTION FROM headphone GROUP BY CONSTRUCTION'     , ['CONSTRUCTION	avg(price)']     , ['In-Ear-Monitors	129.6667']     , ['On-Ear-Headphones	154.3333']     , ['Over-the-ear-Headphones	108.6667']     , ['Virtual-Reality-Headsets	179.6667']     , ['Smartphones-with-Headphones	139.6667']]     , [['SELECT count(*) FROM stock'] , 'SELECT count(*) FROM stock' , ['count'] ,
SELECT DISTINCT T1.class FROM headphone AS T1 JOIN headphone AS T2 ON T1.Headphone_ID != T2.Headphone_ID WHERE T1.Earpads  =  'Bowls' AND T2.Earpads  =  'Comfort Pads' UNION SELECT DISTINCT class FROM headphone WHERE Earpads  =  'Bowls' INTERSECT SELECT DISTINCT class FROM headphone WHERE Earpads  =  'Comfort Pads' <MID>_ID`, `Quantity`) VALUES (3 ,  4 ,  50) INSERT INTO stock SELECT 2 ,  3 FROM stock LIMIT 1 INSERT INTO stock SELECT 2 ,  4 FROM stock LIMIT 1 INSERT INTO stock SELECT 2 ,  5 FROM stock LIMIT 1 INSERT INTO stock SELECT 3 ,  6 FROM stock LIMIT 1 INSERT INTO stock SELECT 3 ,  7 FROM stock LIMIT
SELECT DISTINCT class FROM headphone WHERE Earpads  =  'Bowls' INTERSECT SELECT DISTINCT class FROM headphone WHERE Earpads  =  'Comfort Pads' <MID>.com/problems/headphone-class/description/
SELECT Earpads FROM headphone EXCEPT SELECT Construction FROM headphone WHERE Construction  =  'Plastic' <MID>.com/problems/database-schema-diagram/1043/description/     ,headphone(Headphone_ID ,  Model ,  Class ,  Driver_matched_dB ,  Construction ,  Earpads ,  Price)     ,store(Store_ID ,  Name ,  Neighborhood ,  Parking ,  Date_Opened)     ,stock(Store_ID ,  Headphone_ID ,  Quantity)
SELECT Earpads FROM headphone WHERE Construction != 'Plastic' <MID>.com/problems/database-schema-diagram/1043/description/     ,   SELECT model FROM headphone WHERE earpads  =  'No' UNION SELECT model FROM headphone WHERE earpads  =  'None' UNION SELECT model FROM headphone WHERE earpads  =  'null' UNION SELECT model FROM headphone WHERE earpads  =  'nil' UNION SELECT model FROM headphone WHERE earpads  =  'na' UNION SELECT model FROM headphone WHERE earpads  =  'n/a' UNION SELECT model FROM headphone WHERE earpads  =  '-' UNION SELECT model FROM headphone WHERE earpads  =  ' ' UNION SELECT model FROM headphone WHERE earpads  =  '' UNION SELECT model FROM headphone WHERE earpads  =  'true' UNION SELECT
SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)'         , 'SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)'     , 'SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone) AND class  =  'Class1'')]     FROM = ['FROM headphone']     WHERE = [('SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)', 'SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)'), ('SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone) AND class  =  'Class1'', 'SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone
SELECT Model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)'         , 'SELECT Model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)'     , ['SELECT Model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)']         , ['SELECT Model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)']     , ['SELECT Model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)']     , ['SELECT Model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)']     , ['SELECT Model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)']     , ['SELECT Model FROM headphone WHERE price  <  (SELECT avg(price) FROM head
SELECT name FROM store ORDER BY date_opened ASC'         , '2018-04-09 17:36:28.577872' , 0 , 'SELECT name FROM store ORDER BY date_opened ASC' , 'SELECT name FROM store ORDER BY date_opened ASC' , 'SELECT name FROM store ORDER BY date_opened ASC' , 'SELECT name FROM store ORDER BY date_opened ASC' , 'SELECT name FROM store ORDER BY date_opened ASC' , 'SELECT name FROM store ORDER BY date_opened ASC' , 'SELECT name FROM store ORDER BY date_opened ASC' , 'SELECT name FROM store ORDER BY date_opened ASC' , 'SELECT name FROM store ORDER BY date_opened ASC' , 'SELECT name FROM store ORDER BY date_opened ASC' , 'SELECT name FROM store ORDER BY date_opened ASC'
SELECT name FROM store ORDER BY date_opened ASC'         , 'SELECT name FROM store ORDER BY date_opened ASC'         , ['SELECT name FROM store ORDER BY date_opened ASC']         , ['SELECT name FROM store ORDER BY date_opened DESC']     ,   'SELECT name FROM store ORDER BY date_opened DESC'         , ['SELECT name FROM store ORDER BY date_opened DESC']     ,   'Give me the list of stock quantities for all headphones from every store. Note that you may find it convenient to use an alias (e.g. SELECT quantity FROM stock AS T1 JOIN headphone AS T2 ON T1.headphone_id  =  T2.headphone_id)'         , 'SELECT quantity FROM stock AS T1 JOIN headphone AS T2 ON T1.headphone_id  =  T2.headphone_id'
SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana' <MID>     ,   TYPE                     = MEMORY     ,   PAGE_SIZE                = 4096     ,   FREELISTS               = 1     ,   FREELIST_GROUPS         = 1     ,   BACKGROUND_SCAN         = FALSE     ,   INITIAL_EXTENT          = 65536     ,   NEXT_EXTENT             = 131072     ,   MAX_EXTENTS             = 262144     ,   PCT_INCREASE           = 0     ,   MIN_EXTENT_SIZE        = 16384     ,   DEGRADED              = 'YES'     ,   EXTENT_SIZES
SELECT t1.name ,  t1.parking FROM store AS t1 JOIN neighborhood AS t2 ON t1.neighborhood  =  t2.neighborhood WHERE t2.name  =  'Tarzana' <MID>     , driver_matched_dB float     , construction text     , earpads text     , price int     , PRIMARY KEY (headphone_id)     , FOREIGN KEY (headphone_id) REFERENCES stock(headphone_id)     , FOREIGN KEY (headphone_id) REFERENCES sales(headphone_id)     , FORENEIGN KEY (headphone_id) REFERENCES review(headphone_id)     )'''     , '''CREATE TABLE neighborhood ( name text PRIMARY KEY )'''     , '''CREATE TABLE admin ( username text PRIMARY KEY
SELECT count(DISTINCT neighborhood) FROM store' , '4' ] , [ 'SELECT count(DISTINCT neighborhood) FROM store' , 4 ] , [ 'SELECT count(*) FROM stock' , 12 ] , [ 'SELECT count(*) FROM headphone' , 3 ] , [ 'SELECT sum(quantity) FROM stock' , 36 ] , [ 'SELECT avg(quantity) FROM stock' , 12 ] , [ 'SELECT min(quantity) FROM stock' , 1 ] , [ 'SELECT max(quantity) FROM stock' , 27 ] , [ 'SELECT headphone_id FROM stock GROUP BY headphone_id ORDER BY count(*) DESC LIMIT 1' , 2 ] , [ 'SELECT model FROM headphone WHERE headphone_id  =  2' , 'Sennheiser HD 580' ] , [ '
SELECT count(DISTINCT Neighborhood) FROM store'         , '2'     ,  ['SELECT count(DISTINCT Neighborhood) FROM store' ]     ,  ['SELECT count(DISTINCT Neighborhood) FROM store' ]          ,  ['SELECT count(DISTINCT name) FROM headphone' ]         , '3'     ,  ['SELECT count(DISTINCT name) FROM headphone' ]          ,  ['SELECT count(*) FROM stock' ]         , '4'     ,  ['SELECT count(*) FROM stock' ]          ,  ['SELECT count(DISTINCT headphone_id) FROM stock' ]         , '5'     ,  ['SELECT count(DISTINCT headphone_id) FROM stock' ]          ,  ['SELECT count(DISTINCT store_id
SELECT count(*) ,  Neighborhood FROM store GROUP BY Neighborhood'         , 'SELECT count(*) ,  Neighborhood FROM store GROUP BY Neighborhood'     , 'SELECT count(*) ,  name FROM headphone GROUP BY name'     , 'SELECT count(*) ,  model FROM headphone GROUP BY model'     , 'SELECT count(*) ,  class FROM headphone GROUP BY class'     , 'SELECT count(*) ,  construction FROM headphone GROUP BY construction' ]     , [ 'SELECT count(*) ,  earpads FROM headphone GROUP BY earpads'     , 'SELECT count(*) ,  driver_matched_DB FROM headphone GROUP BY driver_matched_DB' ]     , [ 'SELECT count(*) ,  price FROM headphone GROUP BY price' ]     , [ 'SELECT count(*) ,  headphone_id FROM stock GROUP BY head
SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood ORDER BY count(*) DESC LIMIT 1'         , 'TOP 1 SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood ORDER BY count(*) DESC'     , 'SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood ORDER BY count(*) DESC LIMIT 1'     , 'SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood ORDER BY count(*) DESC TOP 1'     , 'SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood ORDER BY count(*) DESC FETCH FIRST 1 ROWS ONLY'     , 'SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood ORDER BY count(*) DESC OFFSET 0 LIMIT 1'     , 'SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood ORDER BY count(*) DESC LIMIT 1'     , 'SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood ORDER BY count(*) DESC
SELECT T2.name ,  count(*) FROM stock AS T1 JOIN headphone AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T1.store_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T2.name ,  count(*) FROM stock AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id GROUP BY T1.store_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T2.name ,  count(*) FROM stock AS T1 JOIN headphone AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T1.store_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T2.name ,  count(*) FROM stock AS T1 JOIN store AS T2 ON T1.store_id
SELECT T1.name ,  sum(T2.quantity) FROM store AS T1 JOIN stock AS T2 ON T1.store_id  =  T2.store_id JOIN headphone AS T3 ON T2.headphone_id  =  T3.headphone_id GROUP BY T1.store_id HAVING sum(T2.quantity) >  0'         , 'SELECT T1.name ,  sum(T2.quantity) FROM store AS T1 JOIN stock AS T2 ON T1.store_id  =  T2.store_id JOIN headphone AS T3 ON T2.headphone_id  =  T3.headphone_id GROUP BY T1.store_id HAVING sum(T2.quantity) >  0'     , ['SELECT T1.name ,  sum(T2.quantity) FROM store AS T1 JOIN
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)'         , 'SELECT Name FROM store'     ,   'SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)'     ,   'SELECT Name FROM store EXCEPT SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)'          ,   'SELECT Name FROM store EXCEPT SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)'     ,   'SELECT Name FROM store EXCEPT SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Headphone_ID FROM stock)'     ,   'SELECT Name FROM store EXCEPT SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Headphone_ID FROM stock)'     ,   'SELECT Name FROM store EXCEPT SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Head
SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)'         , 'SELECT name FROM store'     ,   'SELECT headphone_id FROM stock'     ,   'SELECT model FROM headphone'          ,   'SELECT model FROM headphone EXCEPT SELECT T1.model FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id'     ,   'SELECT name FROM store EXCEPT SELECT T2.name FROM stock AS T2 JOIN headphone AS T1 ON T1.headphone_id  =  T2.headphone_id'     ,   'SELECT name FROM store EXCEPT SELECT T2.name FROM stock AS T2 JOIN headphone AS T1 ON T1.headphone_id  =  T2.headphone_id'     ,
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock) <MID>.driver_matched_dB DESC LIMIT 10'     ,'SELECT * FROM headphone ORDER BY driver_matched_dB ASC LIMIT 10'     ,'SELECT * FROM headphone ORDER BY driver_matched_dB DESC LIMIT 10'     ,'SELECT * FROM headphone ORDER BY construction ASC LIMIT 10'     ,'SELECT * FROM headphone ORDER BY construction DESC LIMIT 10'     ,'SELECT * FROM headphone ORDER BY earpads ASC LIMIT 10'     ,'SELECT * FROM headphone ORDER BY earpads DESC LIMIT 10'     ,'SELECT * FROM headphone ORDER BY price ASC LIMIT 10'     ,'SELECT * FROM headphone ORDER BY price DESC LIMIT 10'     ,'
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock) <MID>.driver_matched_db BETWEEN 50 AND 70 ORDER BY avg_rating DESC LIMIT 1'     ,'SELECT t3.model FROM rating AS t2 JOIN headphone AS t3 ON t2.headphone_id  =  t3.headphone_id JOIN store AS t4 ON t4.store_id  =  t2.store_id GROUP BY t2.headphone_id ORDER BY avg_rating DESC LIMIT 1'     ,'SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t2.headphone_id ORDER BY count(*) DESC LIMIT 1'     ,'SELECT t1.model FROM headphone AS t
SELECT T1.model FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T2.headphone_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.model FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T2.headphone_id ORDER BY count(*) DESC LIMIT 1'     , ['SELECT T1.model FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T2.headphone_id ORDER BY count(*) DESC LIMIT 1']     , ['T1.model']     , ['T1.model']
SELECT T1.model FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T1.headphone_id ORDER BY sum(T2.quantity) DESC LIMIT 1'         , 'SELECT T1.model FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T1.headphone_id ORDER BY sum(T2.quantity) DESC LIMIT 1'     , 'SELECT T1.model FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T1.headphone_id ORDER BY sum(T2.quantity) DESC LIMIT 1'     , 'SELECT T1.model FROM headphone AS T1 JOIN stock AS T2 ON
SELECT count(*) FROM stock AS T1 JOIN headphone AS T2 ON T1.headphone_id  =  T2.headphone_id JOIN store AS T3 ON T1.store_id  =  T3.store_id WHERE T3.name  =  'Woodman' <MID>     , driver_matched_dB float     , construction text     , earpads text     , price int     , PRIMARY KEY (headphone_ID)     , UNIQUE KEY model ()     , KEY class ()     , FULLTEXT KEY driver_matched_dB (driver_matched_dB)     , FULLTEXT KEY construction (construction)     , FULLTEXT KEY earpads (earpads)     , FULLTEXT KEY price (price)     , FULLTEXT KEY headphone_ID (headphone_ID)
SELECT sum(t3.quantity) FROM stock AS t3 JOIN headphone AS t1 ON t3.headphone_id  =  t1.headphone_id JOIN store AS t2 ON t2.store_id  =  t3.store_id WHERE t2.name  =  'Woodman' <MID>     , driver_matched_dB float     , construction text     , earpads text     , price int     , PRIMARY KEY (headphone_ID)     , UNIQUE KEY model ()     , KEY class ()     , KEY driver_matched_dB ()     , FULLTEXT KEY earpads (earpads)     , FULLTEXT KEY construction (construction)     , FULLTEXT KEY driver_matched_dB (driver_matched_dB)     , FULLTEXT KEY className (class, name
SELECT T2.neighborhood FROM stock AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id GROUP BY T2.neighborhood HAVING sum(T1.quantity)  =  0'         , 'SELECT T2.neighborhood FROM stock AS T1 JOIN headphone AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T2.neighborhood HAVING sum(T1.quantity)  =  0'     , 'SELECT T2.neighborhood FROM stock AS T1 JOIN headphone AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T2.neighborhood HAVING sum(T1.quantity)  =  0'     , 'SELECT T2.neighborhood
SELECT T2.neighborhood FROM stock AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id EXCEPT SELECT T2.neighborhood FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id'         , 'SELECT T2.neighborhood FROM stock AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id EXCEPT SELECT T2.neighborhood FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id'     , 'SELECT T2.neighborhood FROM stock AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id EXCEPT SELECT T2.ne
SELECT count(*) FROM author WHERE name != 'null' AND email != 'null' GROUP BY name ORDER BY COUNT ( DISTINCT paper_id ) DESC LIMIT 10000;' <MID>     , t4.citation_count FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id JOIN citation AS t3 ON t1.paper_id  =  t3.paper_id JOIN author AS t4 ON t4.author_id  =  t2.author_id GROUP BY t1.title ORDER BY t4.citation_count DESC LIMIT 10000;' SELECT DISTINCT t1.title FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t1.title ORDER BY COUNT ( DIST
SELECT count(*) FROM author_list'         , 'SELECT count(DISTINCT author_id) FROM author_list'     , 'SELECT count(DISTINCT t1.author_id) FROM author_list AS t1 JOIN paper AS t2 ON t1.paper_id  =  t2.paper_id WHERE YEAR  =  2016'     , 'SELECT COUNT ( DISTINCT t1.author_id ) FROM author_list AS t1 JOIN paper AS t2 ON t1.paper_id  =  t2.paper_id WHERE t2.venue  =  'SIGMOD' AND t2.year  =  2016'     , 'SELECT COUNT ( DISTINCT t1.author_id ) FROM author_list AS t1 JOIN paper AS t2 ON t1.paper_id  =  t2.paper_id
SELECT DISTINCT COUNT ( DISTINCT paper_id ) FROM paper' , '4' ] , [ 'SELECT COUNT ( DISTINCT affiliation_id ) FROM affiliation' , 6 ] , [ 'SELECT COUNT ( DISTINCT author_id ) FROM author' , 7 ] , [ 'SELECT COUNT ( DISTINCT t1.paper_id ) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id' , 2 ] , [ 'SELECT COUNT ( DISTINCT t2.cited_paper_id ) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id' , 3 ] , [ 'SELECT COUNT ( DISTINCT t1.paper_id ) FROM paper AS t1 JOIN citation AS t
SELECT DISTINCT COUNT ( DISTINCT paper_id ) FROM paper'         , 'SELECT COUNT ( DISTINCT paper_id ) FROM paper'     , 'SELECT COUNT ( DISTINCT paper_id ) FROM paper'         , 'SELECT COUNT ( DISTINCT paper_id ) FROM paper'     , 'SELECT COUNT ( DISTINCT paper_id ) FROM paper'         , 'SELECT COUNT ( DISTINCT paper_id ) FROM paper'     , 'SELECT COUNT ( DISTINCT paper_id ) FROM paper'         , 'SELECT COUNT ( DISTINCT paper_id ) FROM paper'     , 'SELECT COUNT ( DISTINCT paper_id ) FROM paper'         , 'SELECT COUNT ( DISTINCT paper_id ) FROM paper'     , 'SELECT COUNT ( DISTINCT paper_id ) FROM paper'         , 'SELECT COUNT ( DISTINCT paper_id )
SELECT count(*) FROM Affiliation'         , '4'         , ['SELECT count(*) FROM Affiliation']         , ['SELECT count(*) FROM Author_list']     , ['SELECT count(*) FROM Paper']     , ['SELECT count(*) FROM Citation']]     , [ 'SELECT DISTINCT t2.name FROM author_list AS t1 JOIN affiliation AS t2 ON t1.affiliation_id  =  t2.affiliation_id GROUP BY t2.name ORDER BY COUNT (*) DESC LIMIT 1'         , 'Prof. A'         , ['SELECT DISTINCT t2.name FROM author_list AS t1 JOIN affiliation AS t2 ON t1.affiliation_id  =  t2.affiliation_id GROUP BY t2.name ORDER BY COUNT (*) DESC LIMIT 1']         , ['SELECT D
SELECT count(*) FROM Affiliation'         , 'SELECT count(*) FROM Affiliation'         , 'COUNT OF AFFILIATIONS'     , [ 'SELECT count(*) FROM Author' ,  SELECT count(*) FROM Author_list' ,  SELECT count(*) FROM Citation' ,  SELECT count(*) FROM Paper' ]         , [ 1 ,  1 ,  1 ,  1 ]      , 1, 1, 1, 1]     , [ 'SELECT count(*) FROM Affiliation' ,  'SELECT count(*) FROM Author' ,  'SELECT count(*) FROM Author_list' ,  'SELECT count(*) FROM Citation' ,  'SELECT count(*) FROM Paper' ]         , [ 1 ,  1 ,  1 ,  1 ]      , 1, 1, 1, 1]     , [ 'SELECT count(*) FROM Affiliation
SELECT COUNT ( DISTINCT paper_id ) FROM paper WHERE venue  =  'NAACL 2000' AND YEAR  =  2000; SELECT COUNT ( DISTINCT paper_id ) FROM paper WHERE venue  =  'NAACL 2000' AND YEAR  =  2000; SELECT COUNT ( DISTINCT paper_id ) FROM paper WHERE venue  =  'NAACL 2000' AND YEAR  =  2000; SELECT COUNT ( DISTINCT paper_id ) FROM paper WHERE venue  =  'NAACL 2000' AND YEAR  =  2000; SELECT COUNT ( DISTINCT paper_id ) FROM paper WHERE venue  =  'NAACL 2000' AND YEAR  =  2000; SELECT COUNT ( DIST
SELECT DISTINCT COUNT ( t1.paper_id ) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id WHERE t1.venue  =  'NAACL' AND t1.year  =  2000 <MID>_id INTEGER DEFAULT NULL CONSTRAINT author_list_ibfk_3 FOREIGN KEY TO affiliation_id) */;
SELECT COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Columbia University' AND t3.year  =  2009; <MID>     , t3.year  =  2009; SELECT count ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Columbia University' AND t3.year  =  2
SELECT COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Columbia University' AND t3.year  =  2009 <MID>     , t3.paper_id  =  t4.paper_id WHERE t1.name  =  'Columbia University' AND t3.year  =  2009 GROUP BY t3.paper_id ORDER BY COUNT ( DISTINCT t3.paper_id ) DESC LIMIT 1; SELECT COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id
SELECT name ,  address FROM Affiliation ORDER BY affiliation_id ASC'         , 'SELECT name ,  address FROM Affiliation ORDER BY affiliation_id ASC'     , ['SELECT name ,  address FROM Affiliation ORDER BY affiliation_id ASC']      , 1     , ['SELECT DISTINCT COUNT (DISTINCT t2.paper_id) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t1.name  =  'abc'']      , ['SELECT DISTINCT COUNT (DISTINCT t2.paper_id) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t1.name  =  'xyz'']      , ['SELECT COUNT ( DISTINCT t2.paper_id
SELECT name ,  address FROM Affiliation ORDER BY affiliation_id ASC'         , 'SELECT name ,  address FROM Affiliation ORDER BY affiliation_id ASC'     , ['SELECT name ,  address FROM Affiliation ORDER BY affiliation_id ASC']      , 1     , ['SELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.year  =  2004']      , 2     , ['SELECT COUNT (DISTINCT t1.name) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =
SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR ASC NULLS LAST'         , 'SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR ASC NULLS LAST'     , 'SELECT COUNT (DISTINCT venue) FROM paper'         , 'SELECT COUNT (DISTINCT YEAR) FROM paper'     , 'SELECT COUNT (*) FROM paper'      , 'SELECT COUNT (DISTINCT author_email) FROM author'      , 'SELECT COUNT (DISTINCT t2.paper_id) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t1.name  =  'abc' GROUP BY t2.paper_id ORDER BY COUNT (t2.paper_id) DESC LIMIT 1'      , 'SELECT t2.paper_id FROM
SELECT DISTINCT venue FROM paper ORDER BY YEAR ASC NULLS LAST] SELECT DISTINCT venue FROM paper ORDER BY YEAR ASC NULLS LAST'     , 'SELECT DISTINCT venue FROM paper ORDER BY YEAR ASC NULLS LAST'     , ['SELECT DISTINCT venue FROM paper ORDER BY YEAR ASC NULLS LAST']     , ['SELECT DISTINCT venue FROM paper ORDER BY YEAR ASC NULLS LAST']     , ['SELECT DISTINCT venue FROM paper ORDER BY YEAR ASC NULLS LAST']     , ['SELECT DISTINCT venue FROM paper ORDER BY YEAR ASC NULLS LAST']     , ['SELECT DISTINCT venue FROM paper ORDER BY YEAR ASC NULLS LAST']     , ['SELECT DISTINCT venue FROM paper ORDER BY YEAR ASC NULLS LAST']     , ['SELECT DISTINCT venue
SELECT DISTINCT t3.title  ,  t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id JOIN affiliation AS t4 ON t2.affiliation_id  =  t4.affiliation_id WHERE t4.name  =  'Harvard University' UNION SELECT DISTINCT t3.title  ,  t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id JOIN affiliation AS t4 ON t2.affiliation_id  =  t4.affiliation_id WHERE t
SELECT DISTINCT t1.title  ,  t3.paper_id FROM paper AS t1 JOIN author_list AS t2 ON t1.paper_id  =  t2.paper_id JOIN affiliation AS t3 ON t2.affiliation_id  =  t3.affiliation_id WHERE t3.name  =  'Harvard University' UNION SELECT DISTINCT t1.title  ,  t3.paper_id FROM paper AS t1 JOIN author_list AS t2 ON t1.paper_id  =  t2.paper_id JOIN affiliation AS t3 ON t2.affiliation_id  =  t3.affiliation_id WHERE t3.name  =  'Yale University' INTERSECT SELECT DISTINCT t1.title  ,  t3.paper_id FROM paper AS t1 JOIN author_list AS
SELECT DISTINCT t3.title ,  t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.name  =  'Mckeown'; <MID>     , affiliation_id INTEGER DEFAULT NULL; CREATE TABLE IF NOT EXISTS Citation ( paper_id VARCHAR(25) NOT NULL , cited_paper_id VARCHAR(25) NOT NULL ); ALTER TABLE IF EXISTS Citation ADD PRIMARY KEY ( paper_id , cited_paper_id ); ALTER TABLE IF EXISTS Citation ADD CONSTRAINT Citation_ibfk_1 FOREIGN KEY ( paper_id ) REFERENCES Paper ( paper_id ); ALTER TABLE IF EXISTS Citation ADD CONSTRAINT
SELECT DISTINCT t3.paper_id ,  t3.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Mckeown' ORDER BY t3.title ASC; <MID>     , affiliation_id INTEGER DEFAULT NULL );
SELECT DISTINCT t3.paper_id FROM author_list AS t2 JOIN affiliation AS t1 ON t2.affiliation_id  =  t1.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Stanford University' INTERSECT SELECT DISTINCT t3.paper_id FROM author_list AS t2 JOIN affiliation AS t1 ON t2.affiliation_id  =  t1.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Columbia University' ORDER BY t3.year DESC; <MID>     , t3.year DESC;
SELECT DISTINCT t3.paper_id FROM author_list AS t2 JOIN affiliation AS t1 ON t2.affiliation_id  =  t1.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Stanford' INTERSECT SELECT DISTINCT t3.paper_id FROM author_list AS t2 JOIN affiliation AS t1 ON t2.affiliation_id  =  t1.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Columbia' <MID>_id  =  t1.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =
SELECT DISTINCT t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.name  =  'Mckeown' AND t2.affiliation_id IN ( SELECT affiliation_id FROM author_list WHERE author_id  =  t2.author_id AND t1.name  =  'Rambow' ) AND t1.name  =  'Kathleen'; <MID>     , affiliation_id INTEGER DEFAULT NULL );''')     FROM = '''FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =
SELECT DISTINCT t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Mckeown' AND t2.name  =  'Kathleen' INTERSECT SELECT DISTINCT t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Rambow' AND t2.name  =  'Owen' UNION SELECT DISTINCT t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1
SELECT DISTINCT t3.paper_id ,  t3.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Mckeown' EXCEPT SELECT DISTINCT t3.paper_id ,  t3.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Rambow' <MID>     , affiliation_id INTEGER DEFAULT NULL );
SELECT DISTINCT t3.paper_id ,  t4.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t4 ON t2.paper_id  =  t4.paper_id JOIN author AS t3 ON t3.author_id  =  t2.author_id WHERE t1.name  =  'Mckeown' AND t3.name != 'Rambow' GROUP BY t3.paper_id HAVING COUNT ( DISTINCT t4.title )  >=  2;  [NoSQL] SELECT DISTINCT t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id
SELECT DISTINCT t3.paper_id ,  t3.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Mckeown, Kathleen' OR t1.name  =  'Rambow, Owen' GROUP BY t3.paper_id HAVING COUNT ( DISTINCT t1.name )  >=  2; <MID>     FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Mckeown, Kathleen' OR t1.name  =
SELECT DISTINCT t3.paper_id ,  t3.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Mckeown, Kathleen' OR t1.name  =  'Rambow, Owen' ORDER BY t3.title ASC;  SELECT DISTINCT t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Rambow', Owen' ORDER BY t3.title ASC;  SELECT DISTINCT t3.paper_
SELECT t1.name ,  COUNT(*) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t1.name ORDER BY COUNT(*) DESC'         , 'SELECT t1.name ,  COUNT(*) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t1.name ORDER BY COUNT(*) DESC'     , 'SELECT t1.name ,  COUNT(*) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t1.name ORDER BY COUNT(*) DESC'     , 'SELECT t1.name ,  COUNT(*) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t1
SELECT t1.name ,  COUNT(*) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t1.name ORDER BY COUNT(*) DESC'     , 'SELECT t1.name ,  COUNT(*) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t1.name ORDER BY COUNT(*) DESC'     , ['t1.name' ,  'COUNT(*)']     , []     , 'How many authors have published at least 1000 papers? (Return first author_id if there are multiple authors with 1000 or more papers) [SQL]SELECT t2.author_id FROM author_list AS t2 JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id GROUP BY
SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.paper_id ) ASC'         , 'SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.paper_id ) ASC'     , 'SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC'         , 'SELECT t1.name FROM affiliation
SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id GROUP BY t1.name ORDER BY count(*) DESC'         , 'SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id GROUP BY t1.name ORDER BY count(*) DESC'     , 'SELECT DISTINCT t3.name FROM paper AS t2 JOIN citation AS t1 ON t2.paper_id  =  t1.cited_paper_id JOIN paper AS t3 ON t3.paper_id  =  t1.paper_id'         , 'SELECT DISTINCT t4.title FROM paper AS t2 JOIN citation AS t1 ON t2.paper_id  =
SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING COUNT ( DISTINCT t2.paper_id )  >  50'         , 'SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING COUNT ( DISTINCT t2.paper_id )  >  50'     , 'SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING COUNT ( DISTINCT t2.paper_id )  >  50'     , 'SELECT t
SELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING COUNT ( DISTINCT t2.paper_id )  >  50 UNION SELECT name FROM author WHERE paper_id IN ( SELECT paper_id FROM author_list GROUP BY author_id HAVING COUNT ( DISTINCT paper_id )  >  50 );'         , 'SELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING COUNT ( DISTINCT t2.paper_id )  >  50 UNION SELECT name FROM author WHERE paper_id IN ( SELECT paper_id FROM author_list GROUP BY author_id H
SELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE paper_id IN ( SELECT paper_id FROM author_list GROUP BY paper_id HAVING COUNT  ( DISTINCT author_id )  =  1 ) <MID>     , affiliation_id INTEGER DEFAULT NULL CONSTRAINT author_list_ibfk_3 REFERENCES Affiliation(affiliation_id) ON DELETE CASCADE ON UPDATE CASCADE; CREATE TABLE IF NOT EXISTS Citation ( paper_id VARCHAR(25) NOT NULL CONSTRAINT citation_ibfk_1 REFERENCES Paper(paper_id) , cited_paper_id VARCHAR(25) NOT NULL CONSTRAINT citation_ibfk_2 REFEREN
SELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE paper_id IN ( SELECT DISTINCT t3.paper_id FROM paper AS t3 JOIN citation AS t4 ON t3.paper_id  =  t4.cited_paper_id GROUP BY t3.paper_id HAVING COUNT ( DISTINCT t4.paper_id )  =  1 ) ORDER BY t1.name ASC'         , 'SELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE paper_id IN ( SELECT DISTINCT t3.paper_id FROM paper AS t3 JOIN citation AS t4 ON t3.paper_id  =  t4.cited
SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY COUNT(*) DESC LIMIT 1 <MID> SELECT DISTINCT t2.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t1.name  =  'susan' AND t2.affiliation_id IN ( SELECT affiliation_id FROM affiliation WHERE name  =  'Research Lab' );     FROM paper AS t3 JOIN citation AS t4 ON t3.paper_id  =  t4.cited_paper_id WHERE t4.paper_id IN ( SELECT t2.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t1.name  =  'susan' AND t2.
SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY COUNT(*) DESC LIMIT 1;  SELECT YEAR FROM paper GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1; <MID>_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`) ,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`) ,  CONSTRAINT `Author_list
SELECT venue FROM paper GROUP BY venue ORDER BY COUNT ( DISTINCT paper_id ) LIMIT 1; <MID>_id` integer DEFAULT NULL ,  `affiliation_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `paper` (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`) ,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`) } - Author_list : { paper_id : cited_paper_id }
SELECT venue FROM paper GROUP BY venue ORDER BY COUNT ( DISTINCT paper_id ) ASC LIMIT 1; <MID> SELECT t3.paper_id FROM author_list AS t2 JOIN author AS t1 ON t2.author_id  =  t1.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.email  =  'bob@gmail.com' AND t3.year  =  2004 GROUP BY t3.paper_id ORDER BY COUNT ( DISTINCT t3.paper_id ) DESC LIMIT 1; SELECT t3.paper_id FROM author_list AS t2 JOIN author AS t1 ON t2.author_id  =  t1.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.email  =
SELECT COUNT ( DISTINCT tapepapercitation.paper_id ) FROM paper AS t3 JOIN citation AS tapepapercitation ON t3.paper_id  =  tapepapercitation.cited_paper_id WHERE tapepapercitation.paper_id  =  'A00-1002' AND t3.year  =  2016; <MID>_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `paper` (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`) ,  CONSTRAINT `
SELECT COUNT ( DISTINCT t2.paper_id ) FROM citation AS t1 JOIN paper AS t2 ON t1.cited_paper_id  =  t2.paper_id JOIN citation AS t1a ON t1.paper_id  =  t1a.cited_paper_id WHERE t1a.paper_id  =  'A00-1002' GROUP BY t1.paper_id ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC LIMIT 1000;[NoSQL] SELECT COUNT ( DISTINCT t2.paper_id ) FROM citation AS t1 JOIN paper AS t2 ON t1.cited_paper_id  =  t2.paper_id JOIN citation AS t1a ON t1.paper_id  =  t1a.cited_paper_id WHERE t1a.
SELECT COUNT ( DISTINCT t2.cited_paper_id ) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id WHERE t1.paper_id  =  'D12-1027' GROUP BY t1.paper_id HAVING COUNT ( DISTINCT t2.cited_paper_id )  >  200' <MID>_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `paper` (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)
SELECT COUNT ( DISTINCT t2.cited_paper_id ) FROM citation AS t2 JOIN paper AS t1 ON t2.paper_id  =  t1.paper_id WHERE t1.paper_id  =  'D12-1027' GROUP BY t1.paper_id HAVING COUNT ( DISTINCT t2.cited_paper_id )  >  200' <MID>_id` integer DEFAULT NULL , PRIMARY KEY (`paper_id`) , CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`) , CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`) , CONSTRAINT `Author_list_ibf
SELECT t1.cited_paper_id ,  COUNT(*) FROM Citation AS t1 JOIN Paper AS t2 ON t1.paper_id  =  t2.paper_id GROUP BY t1.cited_paper_id ORDER BY COUNT(*) DESC LIMIT 1 <MID>_id IN ( SELECT DISTINCT affiliation_id FROM author_list ) GROUP BY affiliation_id ORDER BY count(*) DESC LIMIT 1;'     , 'SELECT t1.cited_paper_id FROM Citation AS t1 JOIN Paper AS t2 ON t1.paper_id  =  t2.paper_id GROUP BY t1.cited_paper_id ORDER BY COUNT(*) DESC LIMIT 1;'     , 'SELECT t1.paper_id FROM Citation AS t1 JOIN Paper AS t2 ON t1.cited_paper_id  =  t2.paper_id
SELECT t2.cited_paper_id ,  COUNT(*) FROM Citation AS t1 JOIN Citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.cited_paper_id ORDER BY COUNT(*) DESC LIMIT 1 <MID>     FROM Author_list AS t3 JOIN Author AS t1 ON t3.author_id  =  t1.author_id WHERE t3.paper_id  =  t4.paper_id;  SELECT DISTINCT COUNT ( DISTINCT t5.cited_paper_id ) FROM Citation AS t5;';  // Most cited paper      GROUP BY t5.cited_paper_id ORDER BY COUNT ( DISTINCT t5.cited_paper_id ) DESC LIMIT 1;';  // Number of citations
SELECT DISTINCT t2.title FROM paper AS t2 JOIN citation AS t1 ON t2.paper_id  =  t1.cited_paper_id GROUP BY t1.cited_paper_id ORDER BY COUNT ( DISTINCT t1.cited_paper_id ) DESC LIMIT 1; <MID>     , affiliation_id INTEGER DEFAULT NULL CONSTRAINT fk_affiliation_id REFERENCES Affiliation(affiliation_id) ON DELETE SET NULL ON UPDATE CASCADE
SELECT DISTINCT t2.title FROM paper AS t2 JOIN citation AS t1 ON t2.paper_id  =  t1.cited_paper_id GROUP BY t1.cited_paper_id ORDER BY COUNT ( DISTINCT t1.paper_id ) DESC LIMIT 1; <MID>     , affiliation_id INTEGER DEFAULT NULL UNIQUE MULTIPLE ASSIGNMENT TRUE     , CONSTRAINT author_list_ibfk_1 FOREIGN KEY paper_id REFERENCES paper ( paper_id ) ON DELETE CASCADE ON UPDATE CASCADE     , CONSTRAINT author_list_ibfk_2 FOREIGN KEY author_id REFERENCES author ( author_id ) ON DELETE CASCADE ON UPDATE CASCADE     , CONSTRAINT author_list_ibf
SELECT t2.cited_paper_id  ,  COUNT ( * ) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.cited_paper_id ORDER BY COUNT ( * ) DESC LIMIT 10'         , 'SELECT t2.cited_paper_id  ,  COUNT ( * ) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.cited_paper_id ORDER BY COUNT ( * ) DESC LIMIT 10'     , 'SELECT t2.cited_paper_id  ,  COUNT ( * ) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.
SELECT t2.cited_paper_id ,  COUNT (*) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.cited_paper_id ORDER BY COUNT (*) DESC LIMIT 10'         , 'SELECT t2.cited_paper_id ,  COUNT (*) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.cited_paper_id ORDER BY COUNT (*) DESC LIMIT 10'     , 'SELECT t2.cited_paper_id ,  COUNT (*) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.cited_paper_id ORDER BY
SELECT COUNT ( DISTINCT t3.paper_id ) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.name  =  'Mckeown , Kathleen' GROUP BY t3.paper_id ORDER BY COUNT ( DISTINCT t3.paper_id ) DESC LIMIT 1;  # Query 1 SELECT COUNT ( DISTINCT t3.paper_id ) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.name  =  'Mckeown , Kathleen' GROUP BY t3.paper_id ORDER BY
SELECT COUNT ( DISTINCT t3.paper_id ) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.name  =  'Mckeown , Kathleen' AND t2.affiliation_id  =  4; <MID>     FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.name  =  'Mckeoh , Kathleen' AND t2.affiliation_id  =  4; SELECT COUNT ( DISTINCT t3.paper_id ) FROM author AS t1 JOIN author_list AS t
SELECT COUNT ( DISTINCT t2.paper_id ) FROM Citation AS t2 JOIN Paper AS t1 ON t2.cited_paper_id  =  t1.paper_id JOIN Author_list AS t3 ON t3.paper_id  =  t2.paper_id JOIN Author AS t4 ON t4.author_id  =  t3.author_id WHERE t4.name  =  'Mckeown , Kathleen' GROUP BY t2.paper_id ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC LIMIT 1;  # Returns number of citations for Mckeown , Kathleen. If no author by that name is found in the database this query returns 0. If more than one author by that name is found in the database this query returns the sum of all their citations. If both are supported then this query returns the sum of
SELECT COUNT ( DISTINCT t4.cited_paper_id ) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id JOIN citation AS t4 ON t3.paper_id  =  t4.paper_id WHERE t1.name  =  'Mckeown , Kathleen' GROUP BY t1.name HAVING SUM ( t4.year )  >  1960;  # Returns: 7555555555555555555555555555555555555555555555555555555555555555555
SELECT t1.name ,  COUNT (t3.paper_id) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.author_id  =  ( SELECT author_id FROM author_list GROUP BY author_id ORDER BY COUNT ( DISTINCT paper_id ) DESC LIMIT 1 ) GROUP BY t1.name ORDER BY COUNT ( t3.paper_id ) DESC';
SELECT t1.name ,  COUNT (t3.paper_id) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id GROUP BY t1.author_id ORDER BY COUNT (t3.paper_id) DESC LIMIT 1'         , 'SELECT t1.name ,  COUNT (t3.paper_id) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id GROUP BY t1.author_id ORDER BY COUNT (t3.paper_id) DESC LIMIT 1'     , 'SELECT t1.name ,  COUNT (t3.paper_
SELECT DISTINCT t3.venue  ,  t3.year FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Mckeown , Kathleen' ORDER BY t3.venue  ,  t3.year DESC; <MID>     FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Mckeown , Kathleen' ORDER BY t3.venue  ,  t3.year DESC;';     GROUP BY t3.venue  ,  t3.year;';
SELECT DISTINCT t3.venue ,  t3.year FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Mckeown , Kathleen' ORDER BY t3.venue ASC ,  t3.year DESC; <MID>     , affiliation_id INTEGER DEFAULT NULL );
SELECT DISTINCT t3.venue  ,  t3.year FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id JOIN affiliation AS t4 ON t2.affiliation_id  =  t4.affiliation_id WHERE t4.name  =  'Columbia University' GROUP BY t3.venue  ,  t3.year ORDER BY t3.venue  ,  t3.year DESC; <MID>_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id`) ,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`) ,  CONSTRAINT `Citation_
SELECT DISTINCT t3.venue  ,  t3.year FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id JOIN affiliation AS t4 ON t2.affiliation_id  =  t4.affiliation_id WHERE t4.name  =  'Columbia University' ORDER BY t3.venue  ,  t3.year DESC; <MID>_id` integer DEFAULT NULL , PRIMARY KEY (`paper_id` ,  `author_id`) , CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`) , CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY
SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t2.paper_id IN ( SELECT t3.paper_id FROM paper AS t3 WHERE t3.year  =  2009 ) GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1'         , 'SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t2.paper_id IN ( SELECT t3.paper_id FROM paper AS t3 WHERE t3.year  =  2009 ) GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1'     , 'SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t
SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t2.paper_id IN ( SELECT t3.paper_id FROM paper AS t3 WHERE t3.year  =  2009 ) GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1'         , 'SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t2.paper_id IN ( SELECT t3.paper_id FROM paper AS t3 WHERE t3.year  =  2009 ) GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1'     , 'SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t
SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t2.paper_id IN ( SELECT t3.paper_id FROM paper AS t3 WHERE t3.year  =  2009 ) GROUP BY t1.affiliation_id ORDER BY count(*) DESC LIMIT 3'         , 'SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t2.paper_id IN ( SELECT t3.paper_id FROM paper AS t3 WHERE t3.year  =  2009 ) GROUP BY t1.affiliation_id ORDER BY count(*) DESC LIMIT 3'     , ['t1.name']     , ['SELECT
SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t2.paper_id IN ( SELECT t2.paper_id FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id WHERE t1.year  =  2009 ) GROUP BY t1.name ORDER BY count(*) DESC LIMIT 3; <MID>     ,  t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t2.paper_id IN ( SELECT t2.paper_id FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id
SELECT COUNT ( DISTINCT t2.paper_id ) FROM affiliation AS t3 JOIN author_list AS t1 ON t3.affiliation_id  =  t1.affiliation_id JOIN paper AS t2 ON t2.paper_id  =  t1.paper_id WHERE t3.name  =  'Columbia University' AND t2.year  <=  2009; <MID>     , t3.name AS affil_name FROM affiliation AS t3 JOIN author_list AS t1 ON t3.affiliation_id  =  t1.affiliation_id JOIN paper AS t2 ON t2.paper_id  =  t1.paper_id WHERE t3.name  =  'Columbia University' AND t2.year  <=  2009; SELECT COUNT ( DISTINCT t2.paper_id
SELECT COUNT ( DISTINCT t2.paper_id ) FROM affiliation AS t3 JOIN author_list AS t1 ON t3.affiliation_id  =  t1.affiliation_id JOIN author AS t2 ON t2.author_id  =  t1.author_id WHERE t3.name  =  'Columbia University' AND t2.year  <=  2009 GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC LIMIT 1' <MID>_id` integer DEFAULT NULL ,  `affiliation_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `paper` (`paper_id`) ,  CONSTRAINT `Author
SELECT COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Stanford University' AND t3.year  >=  2000 AND t3.year  <=  2009' <MID>_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `paper` (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `
SELECT COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Stanford University' AND t3.year  >=  2000 AND t3.year  <=  2009' <MID>     , t3.paper_id  =  t4.paper_id WHERE t1.name  =  'Stanford University' AND t3.year  >=  2000 AND t3.year  <=  2009; SELECT count ( DISTINCT t4.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id
SELECT t3.title FROM author_list AS t2 JOIN author AS t1 ON t2.author_id  =  t1.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id GROUP BY t2.paper_id ORDER BY count(*) DESC LIMIT 1; <MID>     , affiliation_id INTEGER DEFAULT NULL );
SELECT t2.title FROM author_list AS t1 JOIN paper AS t2 ON t1.paper_id  =  t2.paper_id GROUP BY t1.paper_id ORDER BY count(*) DESC LIMIT 1]'         , 'answer': 'How Many Authors Does Each Paper Have'     ,   'category': 'Author List'     ,   'difficulty': 'Hard'     ,   'image': 'https://raw.githubusercontent.com/Zzzza/CSC648-Team7/master/images/task1.png'     ,   'subcategory': 'Subtask 1 (How Many Authors Does Each Paper Have)'     ,   'sql': 'SELECT t2.title ,  count(*) FROM author_list AS t1 JOIN paper AS t2 ON t1.paper_id  =  t2.paper_
SELECT COUNT ( DISTINCT t2.author_id ) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t1.name  =  'Mckeown , Kathleen' GROUP BY t2.paper_id ORDER BY COUNT ( DISTINCT t2.author_id ) DESC LIMIT 1;  # PAPERS WITH THE MOST COLLABORATORS THIS AUTHOR HAS; SELECT t2.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t1.name  =  'Mckeown , Kathleen' GROUP BY t2.paper_id ORDER BY COUNT ( DISTINCT t2.author_id ) DESC LIMIT 1;  # PAPERS WITH THE LEAST COLLABOR
SELECT COUNT ( DISTINCT t2.author_id ) FROM author AS t3 JOIN author_list AS t2 ON t3.author_id  =  t2.author_id JOIN paper AS t5 ON t5.paper_id  =  t2.paper_id JOIN citation AS t4 ON t5.paper_id  =  t4.cited_paper_id JOIN paper AS t1 ON t1.paper_id  =  t4.paper_id WHERE t3.name  =  'Mckeown , Kathleen' GROUP BY t2.paper_id HAVING t2.paper_id  =  t4.paper_id ORDER BY COUNT ( DISTINCT t2.author_id ) DESC LIMIT 1; <MID>_id` integer DEFAULT NULL ,  `affiliation_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,
SELECT DISTINCT t3.name FROM author AS t3 JOIN author_list AS t1 ON t3.author_id  =  t1.author_id JOIN paper AS t2 ON t2.paper_id  =  t1.paper_id WHERE t3.email  =  'mckeown@uiuc.edu' ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC LIMIT 1;  SELECT COUNT ( DISTINCT t2.paper_id ) FROM author AS t3 JOIN author_list AS t1 ON t3.author_id  =  t1.author_id JOIN paper AS t2 ON t2.paper_id  =  t1.paper_id WHERE t3.email  =  'mckeown@uiuc.edu';  SELECT t3.name FROM author AS t3 JOIN author_list AS t1 ON t3.author_id
SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.title LIKE '%Mckeown , Kathleen%' GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1'     , 't1.name': 'Kathleen Mckeown'}]
SELECT paper_id FROM paper WHERE title LIKE '%translation%'  */; <MID> = $row['affiliation_id'];
SELECT paper_id FROM paper WHERE title LIKE '%translation%' <MID>_id IN ( SELECT DISTINCT t4.paper_id FROM citation AS t3 JOIN paper AS t1 ON t3.cited_paper_id  =  t1.paper_id JOIN citation AS t4 ON t4.paper_id  =  t3.paper_id WHERE t1.title LIKE '%translation%' ) ORDER BY t4.year DESC LIMIT 3;',
SELECT paper_id ,  title FROM paper WHERE paper_id NOT IN ( SELECT paper_id FROM citation )'         , 'answer': False     ,   'category': 'Data Mining'     ,   'difficulty': 'Hard'     ,   'subcategory': 'Recommendation Systems'     ,   'question': 'Find the id and title of the papers that are never cited by others.'     ,   'type': 'Regular'     ,   'references': None      , 'url': 'https://en.wikipedia.org/wiki/Graph_theory'     ,   'satisfiability': 'Unsatisfiable'     ,   'is_question': True     ,   'statements': None      , 'paper_id': 'd0782f8a3e7af602f84bd
SELECT paper_id ,  title FROM paper WHERE paper_id NOT IN ( SELECT paper_id FROM citation ) ORDER BY paper_id DESC LIMIT 500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id GROUP BY t1.name HAVING COUNT ( DISTINCT t2.paper_id )  =  ( SELECT max ( COUNT ( DISTinct paper_id ) ) FROM author_list GROUP BY affiliation_id HAVING t1.name LIKE '%China%' ) ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC LIMIT 1 OFFSET 0; <MID>_id` integer DEFAULT NULL ,  `affiliation_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `paper` (`paper_id`) ,  CON
SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t1.address LIKE '%China%' GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1' <MID>     ,  t1.author_id  =  t2.author_id WHERE t1.address LIKE '%China%' GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1'     ,  'SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t1.address LIKE '%China%' GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1'     ,  'SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON
SELECT DISTINCT COUNT ( t1.paper_id )  ,  t1.venue ,  t1.year FROM paper AS t1 GROUP BY t1.venue ,  t1.year ORDER BY t1.venue ,  t1.year DESC'     , 'SELECT DISTINCT COUNT ( t1.paper_id )  ,  t1.year FROM paper AS t1 GROUP BY t1.year ORDER BY t1.year DESC'     , 'SELECT COUNT ( DISTINCT t1.paper_id ) FROM paper AS t1'     , 'SELECT COUNT ( DISTINCT t1.paper_id ) FROM paper AS t1 WHERE t1.venue  =  'AAAI' AND t1.year  =  2016'     , 'SELECT COUNT ( DISTINCT t1.paper_id ) FROM paper AS t1 WHERE t1.venue  =
SELECT COUNT ( DISTINCT t2.paper_id )  ,  t2.venue ,  t2.year FROM paper AS t2 GROUP BY t2.venue ,  t2.year ORDER BY t2.venue ,  t2.year DESC LIMIT 1000; - - SELECT COUNT ( DISTINCT t2.paper_id )  ,  t2.year FROM paper AS t2 GROUP BY t2.year ORDER BY t2.year DESC LIMIT 1000; - - SELECT COUNT ( DISTINCT t2.paper_id )  ,  t2.venue FROM paper AS t2 GROUP BY t2.venue ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC LIMIT 1; - - SELECT COUNT ( DISTINCT t2.paper_id ) FROM paper AS t2; - - SELECT COUNT ( DISTINCT t2.paper_id )  ,
SELECT count(*) ,  T1.name FROM affiliation AS T1 JOIN author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 3'         , 'SELECT count(*) ,  T1.name FROM affiliation AS T1 JOIN author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 3'     , 'SELECT count(*) ,  T1.name FROM affiliation AS T1 JOIN author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 3'     , 'SELECT count(*) ,  T1.name FROM affiliation AS T1 JOIN author
SELECT t1.name ,  COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.paper_id ) DESC'         , 'SELECT t1.name ,  COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.paper_id ) DESC'     , 'SELECT t
SELECT DISTINCT t2.title FROM paper AS t2 JOIN citation AS t1 ON t2.paper_id  =  t1.cited_paper_id GROUP BY t1.cited_paper_id HAVING COUNT ( DISTINCT t1.cited_paper_id )  >  50 ORDER BY COUNT ( DISTINCT t1.cited_paper_id ) DESC LIMIT 100'         , 'DOI': '10.1145/2697844.2697855'     , 'URL': 'http://dl.acm.org/citation.jsp?id=2697844'     , 'Venue': 'ACM Transactions on Information Systems'     , 'Year': 2008     , 'Authors': [{'name': 'S
SELECT DISTINCT t2.title FROM paper AS t2 JOIN citation AS t1 ON t2.paper_id  =  t1.cited_paper_id GROUP BY t1.cited_paper_id HAVING COUNT ( DISTINCT t1.cited_paper_id )  >  50 ORDER BY COUNT ( DISTINCT t1.cited_paper_id ) DESC LIMIT 1 OFFSET 0'         , 'SELECT DISTINCT t2.title FROM paper AS t2 JOIN citation AS t1 ON t2.paper_id  =  t1.cited_paper_id GROUP BY t1.cited_paper_id HAVING COUNT ( DISTINCT t1.cited_paper_id )  >  50 ORDER BY COUNT ( DISTINCT t1.cited_paper_id ) DESC LIMIT 1 OFFSET
SELECT COUNT ( DISTINCT author_id ) FROM author_list WHERE paper_id NOT IN ( SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT ( * )  >  50 )'         , 'answer': 4786 }       , { 'question': 'Find the total number of citations from all the papers. [SQL] SELECT count ( DISTINCT t2.paper_id ) FROM citation AS t2 JOIN paper AS t1 ON t1.paper_id  =  t2.cited_paper_id'         , 'answer': 91111 }       , { 'question': 'Find the total number of citations from all the papers. [SQL] SELECT count ( DISTINCT t2.paper_id ) FROM citation AS t2 JOIN paper AS t1 ON t1.paper_id
SELECT COUNT ( DISTINCT author_id ) FROM author WHERE author_id NOT IN ( SELECT t2.author_id FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.author_id HAVING COUNT ( DISTINCT t1.paper_id )  >  50 )'         , 'SELECT COUNT ( DISTINCT author_id ) FROM author WHERE author_id NOT IN ( SELECT t2.author_id FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.author_id HAVING COUNT ( DISTINCT t1.paper_id )  >  50 )'     , ['SELECT COUNT ( DISTINCT author_id ) FROM author WHERE author_id NOT IN ( SELECT
SELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.venue  =  'NAACL' AND t3.venue  =  'ACL' AND YEAR  =  2009' <MID>     , affiliation_id: 4294967295   , paper_id: 18   , author_id: 11   , affiliation_id: 4294967295   , paper_id: 18   , author_id: 12   , affiliation_id: 4294967295   , paper_id: 1
SELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.year  =  2009 AND t3.venue  =  'NAACL' INTERSECT SELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.year  =  2009 AND t3.venue  =  'ACL' <MID>_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list
SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM paper WHERE venue  =  'ACL') <MID>     , affiliation_id INTEGER DEFAULT NULL CONSTRAINT Author_list_ibfk_3 REFERENCES Affiliation (affiliation_id) ON DELETE CASCADE ON UPDATE CASCADE; CREATE TABLE IF NOT EXISTS Citation (paper_id VARCHAR(25) NOT NULL CONSTRAINT Citation_ibfk_1 REFERENCES Paper (paper_id) ON DELETE CASCADE ON UPDATE CASCADE , cited_paper_id VARCHAR(25) NOT NULL CONSTRAINT Citation_ibfk_2 REFERENCES Paper (paper_id) ON DELETE CASCADE ON UPDATE CASCADE); CREATE TABLE IF NOT EXISTS Paper (paper_id
SELECT name FROM author WHERE author_id NOT IN (SELECT t1.author_id FROM paper AS t2 JOIN author_list AS t1 ON t2.paper_id  =  t1.paper_id WHERE t2.venue  =  'ACL') GROUP BY name HAVING COUNT ( DISTINCT paper_id )  =  1 ORDER BY name ASC'         , ['SELECT name FROM author WHERE author_id NOT IN (SELECT t1.author_id FROM paper AS t2 JOIN author_list AS t1 ON t2.paper_id  =  t1.paper_id WHERE t2.venue  =  'ACL') GROUP BY name HAVING COUNT ( DISTINCT paper_id )  =  1 ORDER BY name ASC']]     , [u'What is the name of the venue with the most papers published there?', u'SELECT venue FROM paper GROUP BY
SELECT count(*) FROM conference' , 'SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference' , 45] SELECT count(*) FROM conference
SELECT count(*) FROM conference'         , 'SELECT count(*) FROM conference'         , '12'         , ['SELECT count(*) FROM conference']     , 3     , ['SELECT count(*) FROM institution']         , 'SELECT count(*) FROM institution'         , '3'         , ['SELECT count(*) FROM staff']         , 'SELECT count(*) FROM staff'         , '24'      ,  2     ,   ['SELECT count(*) FROM conference_participation']         , 'SELECT count(*) FROM conference_participation'         , '168'      ,  3     ,   ['SELECT count(*) FROM conference PARTICIPATION IN ROLE = 'organizer'']         , 'SELECT count(*) FROM conference PARTICIPATION IN ROLE = 'organizer''         , '4'      ,   ['SELECT count(*) FROM conference
SELECT DISTINCT Conference_Name FROM conference  '         , 'CONFERENCE_PARTICIPATION AS T1 JOIN conference AS T2 ON T1.Conference_ID  =  T2.Conference_ID'     , 'SELECT DISTINCT CONFERENCE_NAME FROM conference'     , 'SELECT DISTINCT T2.Conference_Name FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID  =  T2.Conference_ID'     , 'SELECT DISTINCT T2.Conference_Name FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID  =  T2.Conference_ID'     , 'SELECT DISTINCT T2.Conference_Name FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Con
SELECT DISTINCT Conference_Name FROM conference  '         ,'CONFERENCE15' , 'CONFERENCE16' , 'CONFERENCE17' ]     , [ 'SELECT CONFERENCE_NAME FROM conference WHERE YEAR  =  2015' , 'CONFERENCE15' ]     , [ 'SELECT CONFERENCE_NAME FROM conference WHERE YEAR  =  2016' , 'CONFERENCE16' ]     , [ 'SELECT CONFERENCE_NAME FROM conference WHERE YEAR  =  2017' , 'CONFERENCE17' ]     , [ 'SELECT T3.Conference_Name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id
SELECT Conference_Name ,  YEAR ,  LOCATION FROM conference;'         , 'answer': 'CONFERENCE_NAME ,  YEAR ,  LOCATION'     , 'image': ''}
SELECT Conference_Name ,  YEAR ,  LOCATION FROM conference ORDER BY YEAR ASC NULLS LAST'         , 'CONFERENCE_NAME YEAR LOCATION'     , ['CONFERENCE_NAME YEAR LOCATION']     , ['CONFERENCE_NAME YEAR LOCATION']     , ['CONFERENCE_NAME YEAR LOCATION']     , ['CONFERENCE_NAME YEAR LOCATION']     , ['CONFERENCE_NAME YEAR LOCATION']     , ['CONFERENCE_NAME YEAR LOCATION']     , ['CONFERENCE_NAME YEAR LOCATION']     , ['CONFERENCE_NAME YEAR LOCATION']     , ['CONFERENCE_NAME YEAR LOCATION']     , ['CON
SELECT T1.Conference_Name ,  COUNT(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_Name'         , 'CONFERENCE_NAME COUNT(DISTINCT CONFERENCE_NAME)'     , ['CONFERENCE_NAME COUNT(DISTINCT CONFERENCE_NAME)']]     , [r'''SELECT T1.Conference_Name ,  COUNT(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_Name ORDER BY COUNT(*) DESC LIMIT 1''', 'CONFERENCE_NAME COUNT(DISTINCT CONFERENCE_NAME)']]
SELECT T2.Conference_Name ,  COUNT(*) FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T2.Conference_Name ORDER BY COUNT(*) DESC'         , 'CONFERENCE_NAME COUNT(DISTINCT CONFERENCE_NAME)'     , ['CONFERENCE_NAME COUNT(DISTINCT CONFERENCE_NAME)']     , ['CONFERENCE_NAME COUNT(DISTINCT CONFERENCE_NAME)']     , ['COUNT(DISTINCT CONFERENCE_NAME)']      , SQLSTATEMENT = 'SELECT COUNT(DISTINCT conference_name) FROM conference' , SCHEMA_NAME = 'DB' , QUERY_TYPE = 'Column' , COLUMN_NAME = 'CON
SELECT YEAR ,  COUNT(*) FROM conference GROUP BY YEAR'         , 'CONFERENCE_PARTICIPATION': ['SELECT T2.role ,  T1.Conference_ID FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_ID ,  T2.year ORDER BY T2.year ASC'             , 'SELECT T2.role ,  count(*) FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T2.year ORDER BY T2.year ASC'         , 'SELECT count(*) FROM conference GROUP BY YEAR']}     FROM = {'staff': ['SELECT name FROM staff'], 'conference_participation': ['SELECT
SELECT COUNT(*) ,  YEAR FROM conference GROUP BY YEAR'         , '2' : ['SELECT COUNT(*) FROM conference' , 18] ,  'SELECT count(DISTINCT YEAR) FROM conference' , 6] ,  'SELECT count(DISTINCT location) FROM conference' , 3] ,  'SELECT count(DISTINCT conference_name) FROM conference' , 10] ,  'SELECT count(DISTINCT T3.conference_name) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id JOIN conference_participation AS T3 ON T2.staff_id  =  T3.staff_id' , 6] ,  'SELECT count(*) FROM conference_participation' , 134] ,  'SELECT count(DISTINCT role) FROM conference
SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) ASC LIMIT 1'         , '2005'         , ['SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) ASC LIMIT 1']         , ['SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1']     ,   'SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1'         , '2015'     ,   ['SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1']     ,   ['SELECT TIMESTAMPDIFF(YEAR , YEAR) FROM conference GROUP BY TIMESTAMPDIFF(YEAR , YEAR) ORDER BY count(*) ASC LIMIT 1']     ,   ['SELECT TIMESTAMPDIFF(YEAR , YEAR) FROM conference GROUP BY TIMESTAMPDIFF
SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) ASC LIMIT 1'         , '2005' ]      , [ 'SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1'         , '2010' ]      , [ 'SELECT TIMESTAMPDIFF(YEAR , YEAR , role) AS Difference FROM conference_participation WHERE role  =  'conferencemanager' GROUP BY Difference ORDER BY COUNT(*) DESC LIMIT 1'         , '4' ]      , [ 'SELECT COUNT (DISTINCT conference_name) FROM conference'         , '18' ]      , [ 'SELECT COUNT (DISTINCT institution_name) FROM institution'         , '7' ]      , [ 'SELECT COUNT (DISTINCT name) FROM staff'         , '24' ]
SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*)  >=  2]'         , 'answer': 'Berlin' }       , { 'question': 'Select all roles that have at least 5 participants at a given conference. [SQL] SELECT role FROM conference_participation WHERE Conference_ID  =  104 GROUP BY role HAVING count(*)  >=  5' }       , { 'question': 'Select all roles that have at least 5 participants at a given conference. [SQL] SELECT role FROM conference_participation WHERE Conference_ID  =  104 GROUP BY role HAVING count(*)  >=  5' }     , { 'question': 'Select all roles that have at least 5 participants at a given conference. [SQL] SELECT role FROM conference_participation WHERE Conference_ID  =  104 GROUP BY role HAVING count
SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*)  >=  2'         , 'LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*)  >=  2'     , 'SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*)  >=  2'     , ['LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*)  >=  2']      , 1     , ['SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*)  >=  2']      , 1     , ['SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*)  >=  2']      , 1     , ['SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*)  >=  2']      , 1     , ['SELECT LOCATION FROM conference GROUP BY LO
SELECT institution_name ,  LOCATION ,  founded FROM institution'         , 'SELECT institution_name ,  LOCATION ,  founded FROM institution'     , 'SELECT institution_name ,  LOCATION ,  founded FROM institution'         , 'SELECT institution_name ,  LOCATION ,  founded FROM institution'     , 'SELECT institution_name ,  LOCATION ,  founded FROM institution'         , 'SELECT institution_name ,  LOCATION ,  founded FROM institution'     , 'SELECT institution_name ,  LOCATION ,  founded FROM institution'         , 'SELECT institution_name ,  LOCATION ,  founded FROM institution'     , 'SELECT institution_name ,  LOCATION ,  founded FROM institution'         , 'SELECT institution_name ,  LOCATION ,  founded FROM institution'     , 'SELECT institution_name ,  LOCATION ,
SELECT institution_name ,  LOCATION ,  founded FROM institution ORDER BY founded DESC NULLS LAST'         , 'SELECT institution_name ,  LOCATION ,  founded FROM institution ORDER BY founded DESC NULLS LAST'     , ['SELECT institution_name ,  LOCATION ,  founded FROM institution ORDER BY founded DESC NULLS LAST']]          , [32 ,  'SELECT name FROM staff WHERE age  >  70' ,  'SELECT name FROM staff WHERE age  >  70' ,  ['SELECT name FROM staff WHERE age  >  70']]          , [33 ,  'SELECT T1.role FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID  =  T2.Conference_ID WHERE T2.year  =  2005 AND T1.role  =
SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900'         , 'SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900'         , ['SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900']     ,  2: ['SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900' , 'SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900']     ,  3: ['SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900' , 'SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900']     ,  4: ['SELECT count(*) FROM institution WHERE
SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900'         , 'SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900'         , ['SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900']     ,  3: ['SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900' , 'SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900' , 'SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900']     ,  4: ['SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900' , 'SELECT count(*) FROM institution WHERE founded BETWEEN
SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1'         , 'SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1'     , ['SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1']      , 1     , ['SELECT count(*) FROM conference_participation']     , ['SELECT count(*) FROM staff']     , ['SELECT count(DISTINCT role) FROM conference_participation']      , ['SELECT count(DISTINCT nationality) FROM staff']]
SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 3'         , 'SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 3'     , ['SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 3']      , 1     , ['SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 3']      , 1     , ['SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 3']      , 1     , ['SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 3']      , 1     , ['SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 3']      , 1     , ['SELECT institution_name ,  LOCATION FROM institution ORDER BY founded
SELECT T1.Institution_Name ,  COUNT(*) FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Founded  >  1800 GROUP BY T1.Institution_Name'         , 'institution_id': 3}      , {'answer': 'SELECT count(*) FROM conference_participation' , 'institution_id': 4}      , {'answer': 'SELECT count(DISTINCT role) FROM conference_participation' , 'institution_id': 5}      , {'answer': 'SELECT count(DISTINCT staff_ID) FROM conference_participation' , 'institution_id': 6}]     FROM = ['SELECT count(*) FROM conference_participation' , 'SELECT count(DISTINCT role) FROM conference_part
SELECT T1.name FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T1.institution_id HAVING count(*)  >  25'         , 'SELECT T1.name FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T1.institution_id HAVING count(*)  >  25'     , [('T1.name', 'SELECT T1.name FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T1.institution
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)'         , 'SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)'     , ['SELECT DISTINCT role FROM conference_participation' , 'SELECT COUNT(*) FROM conference_participation' , 'SELECT COUNT(DISTINCT role) FROM conference_participation' ] , [] , [1] , 0.524898]      ,   [3 ,  'SELECT count(*) FROM staff' , 'SELECT count(*) FROM institution' , 'SELECT count(*) FROM conference_participation' , 'SELECT count(DISTINCT role) FROM conference_participation' , 'SELECT count(DISTINCT nationality) FROM staff' , 'SELECT count(DISTINCT name) FROM institution' , 'SELECT count(DISTINCT name) FROM conference_
SELECT Institution_Name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)  ']     , ['SELECT Institution_Name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)']     , ['SELECT count(*) FROM conference_participation']     , ['SELECT count(DISTINCT role) FROM conference_participation']     , ['SELECT count(*) FROM staff']     , ['SELECT count(*) FROM institution']     , ['SELECT count(*) FROM conference']     , ['SELECT count(DISTINCT nationality) FROM staff']     , ['SELECT count(DISTINCT role) FROM conference_participation']     , ['SELECT count(DISTINCT name) FROM staff']     , ['SELECT count(DISTINCT institution_id) FROM staff']     , ['SELECT count(DISTINCT Conference
SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)',
SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)',
SELECT max(Age) ,  min(Age) FROM staff WHERE Nationality  =  'United States' <MID>_ID) REFERENCES institution(Institution_ID)',             , 'CREATE TABLE conference (Conference_ID int , Conference_Name text , Year int , Location text , PRIMARY KEY (Conference_ID))',             , 'CREATE TABLE conference_participation (Conference_ID int , staff_ID int , role text , PRIMARY KEY (staff_ID , Conference_ID), FOREIGN KEY (staff_ID) REFERENCES staff(staff_ID), FOREIGN KEY (Conference_ID) REFERENCES conference(Conference_ID))'         , ]     , answers: [              ,  25 ,      30         , ]     , solution: 'SELECT max(Age) ,  min(Age) FROM
SELECT max(age) ,  min(age) FROM staff'         , 'SELECT max(age) ,  min(age) FROM staff'         , ['SELECT max(age) ,  min(age) FROM staff']     , ['SELECT max(age) ,  min(age) FROM staff']     , ['SELECT max(age) ,  min(age) FROM staff']      , 0      , ['SELECT max(age) ,  min(age) FROM staff']      , ['SELECT max(age) ,  min(age) FROM staff']      , ['SELECT max(age) ,  min(age) FROM staff']      , ['SELECT max(age) ,  min(age) FROM staff']      , ['SELECT max(age) ,  min(age) FROM staff']      , ['SELECT max(age) ,  min(age) FROM staff']
SELECT T3.Conference_Name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id JOIN conference AS T3 ON T1.conference_ID  =  T3.Conference_ID WHERE T2.Nationality  =  'Canada' <MID>_ID  =  T3.Conference_ID WHERE T2.Nationality  =  'Canada' AND T3.Year  =  2018'     , ['SELECT T3.Conference_Name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id JOIN conference AS T3 ON T1.conference_ID  =  T3.Conference_ID WHERE T2.Nationality  =  'Canada' AND T3.
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID JOIN staff AS T3 ON T2.staff_ID  =  T3.staff_ID WHERE T3.Nationality  =  'Canada' GROUP BY T1.Conference_Name HAVING COUNT(*)  >=  1' <MID>_ID  =  T2.Conference_ID JOIN staff AS T3 ON T2.staff_ID  =  T3.staff_ID WHERE T3.Nationality  =  'Canada' GROUP BY T1.Conference_Name HAVING COUNT(*)  >=  1' IF EXISTS (SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'sponsor' <MID>_ID  =  T2.Conference_ID WHERE T2.role  =  'speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'sponsor'',         ,'SELECT T1.name FROM staff AS T1 JOIN conference_
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'sponsor' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'speaker' <MID>     , role FROM conference_participation;',     , 'SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'sponsor' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id JOIN conference AS T3 ON T2.conference_id  =  T3.conference_id WHERE T3.Conference_Name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id JOIN conference AS T3 ON T2.conference_id  =  T3.conference_id WHERE T3.Conference_Name  =  'NACCL' <MID>_ID`, `role`) VALUES (4 ,  3 ,  'chair') , (5 ,  3 ,  'author') , (6 ,  3 ,  'author') , (7 ,
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id JOIN conference AS T3 ON T2.conference_id  =  T3.conference_id WHERE T3.Conference_Name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id JOIN conference AS T3 ON T2.conference_id  =  T3.conference_id WHERE T3.Conference_Name  =  'NACCL' <MID>_ID  =  T2.Conference_ID INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.year  =  2003 OR T2.year  =  2004'         , 'SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.year  =  2003 OR T2.year  =  2004'     , ['SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.year  =  2003 OR T2.year  =  2004']     , ['SELECT T
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.conference_id IN (SELECT T2.conference_id FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.year  =  2003 OR T1.year  =  2004) ORDER BY T1.name'         , 'SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.conference_id IN (SELECT T2.conference_id FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id
SELECT T1.Conference_Name ,  T1.Year ,  COUNT(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_ID'         , 'CONFERENCE PARTICIPATION ROLE COUNT :  '.count_roles()     , 'TOTAL NUMBER OF CONFERENCES PARTICIPATED IN :  '.total_conferences_participated_in()          , 'MOST ATTENDED CONFERENCE :  '.most_attended_conference()     , 'LEAST ATTENDED CONFERENCE :  '.least_attended_conference()]
SELECT T1.Conference_Name ,  T1.Year ,  COUNT(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_ID'         , 'CONFERENCE_PARTICIPATION' : ['SELECT * FROM conference_participation']}     ,   {   'DATABASE' : 'conferences' ,   'STAFF_ROLES' : ['faculty' ,  'student']}     ,   {   'DATABASE' : 'authors' ,   'TASK' : ['Find all authors of books published in 1997.']}     ,   {   'DATABASE' : 'books' ,   'TASK' : ['Find all titles of books published in 1997
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_Name ORDER BY COUNT(*) DESC LIMIT 2'         , 'answer': 'CONFERENCE_NAME'     , 'difficulty': 'Hard'         , 'category': 'Staff Role'     , 'type': 'Multiple Choice'     , 'choices': {1: 'CONFERENCE_NAME', 2: 'T1.Conference_Name', 3: 'T2.Conference_ID'}     , 'image': 'images/staff_role_4.png'     , 'subtasks': {1: 'Find the name of the conferences that have the top 2 most number of attendants.'
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY COUNT(*) DESC LIMIT 2'         , 'CONFERENCE_ATTENDANCE': ['SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY COUNT(*) DESC LIMIT 5']}     , {'id': '3', 'question': 'What is the name of the role that has the most participants?', 'answer': 'role' , 'correct_answer': 'Director', 'database': 'CREATE TABLE institution ( institution_id int , institution_name text ) CREATE TABLE staff ( staff
SELECT t1.name ,  t1.nationality FROM staff AS t1 JOIN conference_participation AS t2 ON t1.staff_id != t2.staff_id WHERE t2.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_name  =  'ACL')'     , ['SELECT t1.name ,  t1.nationality FROM staff AS t1 JOIN conference_participation AS t2 ON t1.staff_id != t2.staff_id WHERE t2.Conference_ID NOT IN (SELECT Conference_ID FROM conference WHERE Conference_name  =  'ACL')']]
SELECT name ,  Nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE Conference_ID  =  1)  AND role != 'organizer' AND role != 'admin' AND role != 'student' AND role != 'poster' AND role != 'none' AND role != 'self' AND role != 'author' AND role != 'invited' AND role != 'commentor' AND role != 'tag' AND role != 'none' AND role != 'null' AND role != '' AND role IS NOT NULL. <MID>_ID` REFERENCES `institution`(`Institution_ID`)     , CREATE TABLE conference_participation (         , Conference_ID INT         , staff_ID INT         , role TEXT         , PRIMARY KEY (staff_ID , Conference_ID)         , FOREIGN KEY (staff_ID) RE
SELECT institution_name ,  LOCATION FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM conference_participation WHERE YEAR  =  2004) <MID>_ID`) REFERENCES `institution`(`Institution_ID`)     , CONFERENCE_participation(role , Staff_ID , Conference_ID)     , STARTS_AT(Staff_ID , date)     , CONFERENCE_participation AS T1 ON T1.Staff_ID  =  STARTS_AT.Staff_ID AND YEAR  =  2004 SELECT T1.role FROM CONFERENCE_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID  =  T2.Conference_ID WHERE T2.YEAR  =  2004 SELECT T1
SELECT institution_name ,  LOCATION FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM conference_participation WHERE YEAR  =  2004) <MID>_ID`) REFERENCES `institution`(`Institution_ID`)     , CONFERENCE_participation(role , Staff_ID , Conference_ID)     , STARTS_AS_CHAIR(Staff_ID) JOIN staff ON staff.staff_ID  =  STARTS_AS_CHAIR.Staff_ID JOIN conference AS Chair_Conference ON staff.staff_ID  =  Chair_Conference.staff_ID SET role  =  'chair' WHERE YEAR  =  2004;')] SELECT name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM conference_participation WHERE YEAR  =
SELECT pilot_name FROM PilotSkills ORDER BY age ASC LIMIT 1'     , 'SELECT pilot_name FROM PilotSkills ORDER BY age ASC LIMIT 1'     , ['Tony Stark']     , ['pilot1']     , ['pilot2']     , ['pilot3']     , ['pilot4']     , ['pilot5']     , ['pilot6']     , ['pilot7']     , ['pilot8']     , ['pilot9']     , ['pilot10']     , ['pilot11']     , ['pilot12']     , ['pilot13']     , ['pilot14']     , ['pilot15']     , ['pilot16']
SELECT pilot_name FROM PilotSkills ORDER BY age ASC LIMIT 1'     , 'SELECT pilot_name FROM PilotSkills ORDER BY age ASC LIMIT 1'     , 'Taylor'     , 'SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1'     , 'Jim'     , 'SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1'     , 'SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1'     , 'SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1'     , 'SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1'     , 'SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1'     , 'SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1'
SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age ASC'     , 'p1', 'p2', 'p3']     , ['T1', 'T2', 'T3']     , ['H1', 'H2', 'H3']]     , [['P1', 'Plane1'], ['P2', 'Plane2'], ['P3', 'Plane3']]     , [['T1', 'H1'], ['T2', 'H2'], ['T3', 'H3']]]     , [['Plane1', 'Location1'], ['Plane2', 'Location2'], ['Plane3', 'Location3']]]     , [['P1', 'T1'], ['P2', 'T2'], ['P
SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age ASC'
SELECT * FROM PilotSkills WHERE age  <  30'
SELECT * FROM PilotSkills WHERE age  <  30'
SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' AND age  <  35'
SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub' <MID>   FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub' LIMIT 1; SELECT pilot_name FROM PilotSkills WHERE age  >  50 AND plane_name  =  'Cessna 172' LIMIT 1; SELECT pilot_name FROM PilotSkills WHERE age  >  55 AND plane_name  =  'Cessna 172' LIMIT 1; SELECT pilot_name FROM PilotSkills WHERE age  <  25 AND plane_name  =  'Cessna 172' LIMIT 1; SELECT pilot_name FROM PilotSkills WHERE age  <  30 AND plane_name  =  'Cessna 172' LIMIT
SELECT LOCATION FROM Hangar WHERE plane_name  =  'F-14 Fighter' <MID>     , location CHAR(15)     , PRIMARY KEY (plane_name)     , FOREIGN KEY (plane_name) REFERENCES PilotSkills(plane_name)     , CHECK (location IN ('Norway', 'England', 'Germany', 'France'))     , CHECK (plane_name IN ('B-17 Flying Fortress', 'B-24 Liberator', 'B-29 Superfortress', 'F-84 Thunderjet', 'F-14 Fighter'))     , CHECK (age BETWEEN 18 AND 25)     , CHECK (pilot_name LIKE 'Joe%')     , CHECK (pilot_name LIKE 'Jim%')     , CHECK
SELECT location FROM Hangar WHERE plane_name  =  'F-14 Fighter' <MID>     , location CHAR(15)     , PRIMARY KEY (plane_name)     , FOREIGN KEY (plane_name) REFERENCES PilotSkills(plane_name)     , UNIQUE KEY location (location)     , CHECK (location != '')     , CHECK (location != ' ' )     , CHECK (location != NULL )     , CHECK (location != '' )     , CHECK (location != 'NULL')     , CHECK (location != 'PLACEHOLDER')     , CHECK (location != 'placeholder')     , CHECK (location != 'PlAceHolder')     , CHECK (location != 'placheholder')     , CHECK (location != 'PlaCeHolder')     , CHECK (location != 'PLACEHOLDER
SELECT count(DISTINCT location) FROM Hangar WHERE plane_name  =  'Plane0' <MID>     , location CHAR(15) NOT NULL UNIQUE     , PRIMARY KEY (plane_name)     , FOREIGN KEY (plane_name) REFERENCES PilotSkills(plane_name)     , CHECK (location != '')     , CHECK (location != 'invalid')     , CHECK (location != 'random')     , CHECK (location != 'Plane3')     , CHECK (location != 'Plane4')     , CHECK (location != 'Plane5')     , CHECK (location != 'Plane6')     , CHECK (location != 'Plane7')     , CHECK (location != 'Plane8')     , CHECK (location != 'Plane9')     , CHECK (location != 'Plane10')
SELECT count(DISTINCT location) FROM Hangar'     , 'location': 'Hangar'     , 'correct_answer': 3     , 'type': 'quiz'     , 'value': 20     , 'category': 'planes'     , 'question': 'How many different locations are there in the hangar?'     , 'subcategory': 'counting'   , } , {       , 'image': 'https://cdn.shopify.com/s/files/1/0446/6937/products/WhatsApp Image 2018-03-08 at 1.31.45 PM.jpg?v=1520524372'     , 'answer': 'The answer is D'     , 'database_schema': 'CREATE TABLE Plane
SELECT T2.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.pilot_name  =  'Jones' AND T1.age  =  32' SELECT T2.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.pilot_name  =  'Jones' AND T1.age  =  32' SELECT T2.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.pilot_name  =  'Jones' AND T1.age  =  32' SELECT T2.plane
SELECT T2.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.pilot_name  =  'Jones' AND T1.age  =  32' <MID>     , location CHAR(15)     , PRIMARY KEY (plane_name)     , FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)     , UNIQUE KEY Uidx_location (location)     , CONSTRAINT Hangar_check CHECK (location != '')     , CONSTRAINT Hangar_check1 CHECK (location != ''  &&  LOCATION LIKE '%[a-zA-Z0-9]%' )     , CONSTRAINT Hangar_check2 CHECK (LOCATION NOT LIKE '%
SELECT count(*) FROM PilotSkills WHERE age  >  40'   , '2' : ['SELECT count(*) FROM PilotSkills WHERE age  >  40', 2] ,   , '3' : ['SELECT count(*) FROM PilotSkills WHERE age  <  40', 1] }   , 'Q3' : { '1' : 'SELECT count(*) FROM Hangar' , '2' : 3} }   , 'Q4' : { '1' : 'SELECT sum(age) FROM PilotSkills' , '2' : 96} }   , 'Q5' : { '1' : 'SELECT avg(age) FROM PilotSkills' , '2' : 32.5} }   , 'Q6' : { '1' : 'SELECT min(age)
SELECT count(*) FROM PilotSkills WHERE age  >  40'   , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'   , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'   , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'   , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'   , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'   , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'   , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'   , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'   , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'   ,
SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber' <MID>     , location FROM hangar;     , CREATE TABLE pilotskills (pilot_name CHAR(15) NOT NULL , plane_name CHAR(15) NOT NULL , age INTEGER , PRIMARY KEY (pilot_name , plane_name) , FOREIGN KEY (plane_name) REFERENCES hangar(plane_name)); SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'; SELECT count(*) FROM pilotskills WHERE age  >  35 AND plane_name  =  'B-52 Bomber'; SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'Concorde'; SELECT count(*) FROM pilot
SELECT count(*) FROM PilotSkills WHERE plane_name  =  'B-52 Bomber' AND age  <  35'
SELECT min(age) FROM PilotSkills WHERE plane_name  =  'Piper Cub' <MID>   FROM PilotSkills WHERE plane_name  =  'Cessna 172' GROUP BY pilot_name ORDER BY min(age) ASC LIMIT 1'
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location LIKE '%Piper%' AND T1.age  =  (SELECT min(age) FROM pilotskills) ORDER BY T1.pilot_name ASC'
SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1'     , 'Tupac' : 'What is Tupac's first name?[LOGIC]' , 'Tupac Shakur' : 'Who is Tupac Shakur?' , 'Tupac Shakur III' : 'Who is Tupac Shakur?' , 'Tupac Amaru' : 'Who is Tupac Amaru?' }     , 'HANGAR' : { 'location' : 'Where is the hangar located?[LOGIC]' , 'New York' : 'Where is the hangar located?' , 'Los Angeles' : 'Where is the hangar located?' , 'Chicago' : 'Where is the hangar located?' }     , 'PILOTSKILLS' : { 'age' : 'How old
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1'     , 'Tupac' : 'What is Tupac's last name?[English]'     , 'Shakira' : 'What is Shakira's first name?[Spanish]' }     , correctAnswer = 'Tupac'     , question = 'Who is Tupac?[English]'     , choices = ['Tupac', 'Shakira', 'Michael Jackson']     , answer = 'Tupac'     , explanation = 'Tupac was an American rapper.'     , level = 0     , category = 'general_knowledge'     , subcategory = ''     , meta = {
SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY count(*) ASC LIMIT 1'     , 'Tupelo' : 'SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Tupelo' GROUP BY pilot_name ORDER BY count(*) DESC LIMIT 1' }     , 'Titan' : { 'pilot_skill_db' : 'pilot_skill_db3.sqlite' , 'query' : 'SELECT * FROM PilotSkills WHERE plane_name  =  'Titan' GROUP BY pilot_name ORDER BY count(*) DESC LIMIT 1' }     , 'Huron' : { 'pilot_skill_db' : 'pilot_skill_db4.sqlite' , 'query' : 'SELECT * FROM PilotSkills WHERE plane_name  =  'Hur
SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY count(*) ASC LIMIT 1'     , 'Tupac' : 'What is Tupac Shakur's middle name?[English]'     , 'Ada Lovelace' : 'What is Ada Lovelace''s middle name?[English]' }     , 'Mathematics' : { 'Addition' : 'How to add two numbers?[Math]'     , 'Subtraction' : 'How to subtract two numbers?[Math]'     , 'Multiplication' : 'How to multiply two numbers?[Math]'     , 'Division' : 'How to divide two numbers?[Math]' }     , 'Poker' : { 'Pair' : 'What is a pair in poker?[Poker]'     , 'Two Pair
SELECT count(*) FROM hangar AS T1 JOIN pilotskills AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.location  =  'Chicago' GROUP BY T1.location HAVING count(*)  >  100' <MID>     , age INTEGER NOT NULL UNIQUE     , PRIMARY KEY (pilot_name , plane_name)     , FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)     , CONSTRAINT age_check CHECK (age  >  13)     , CONSTRAINT pilot_name_length_check CHECK (LENGTH(pilot_name) > 15)     , CONSTRAINT plane_name_length_check CHECK (LENGTH(plane_name)  >  15)     , CONSTRAINT pilot
SELECT count(*) FROM hangar WHERE LOCATION  =  'Chicago' AND plane_name IN (SELECT plane_name FROM pilotskills) <MID>     , location CHAR(15)     , PRIMARY KEY (plane_name)     , FOREIGN KEY (plane_name) REFERENCES pilotskills (plane_name)     , UNIQUE KEY U1 (plane_name , location)     , CONSTRAINT LOC_CHECK CHECK (location  =  'Chicago')     , CONSTRAINT PLANE_CHECK CHECK (plane_name LIKE 'B737-%' OR plane_name LIKE 'A320-%')     , CONSTRAINT AGE_CHECK CHECK (age  >  25)     , CONSTRAINT AGE_CHECK2 CHECK (age  <  75)     , CON
SELECT T2.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.pilot_name  =  'Smith' AND T1.age  =  41' <MID>     , location CHAR(15) NOT NULL PRIMARY KEY , hangar_name CHAR(15) NOT NULL UNIQUE   , capacity INTEGER   , available BOOLEAN   , FOREIGN KEY (hangar_name) REFERENCES Plane(hangar_name)   , CHECK (available  =  (capacity >  0))   , CHECK (available != (capacity =  0))   , CHECK (available != (capacity <  0))   , CHECK (available != (capacity != 0) OR available != (capacity !=
SELECT T2.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.pilot_name  =  'Smith' AND T1.age  =  41 <MID>     , location CHAR(15)     , PRIMARY KEY (plane_name)     , FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)     , UNIQUE KEY Uidx_location (location)     , CONSTRAINT Hangar_check CHECK (location != '')     , CONSTRAINT Hangar_check1 CHECK (location != '')     , CONSTRAINT Hangar_check2 CHECK (location != '')     , CONSTRAINT Hangar_check3 CHECK (location != '')     , CONSTRA
SELECT count(DISTINCT plane_name) FROM pilotskills <MID>   FROM hangar AS T1 JOIN pilotskills AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.location  =  'Hangar 1' AND T2.age  >  70 GROUP BY T1.plane_name ORDER BY count(*) DESC LIMIT 1'
SELECT count(DISTINCT plane_name) FROM pilotskills <MID>   FROM hangar AS T1 JOIN pilotskills AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.location  =  'Hangar 1' GROUP BY T1.plane_name ORDER BY count(*) DESC LIMIT 3'
SELECT count(*) FROM PilotSkills WHERE pilot_name  =  'Smith' <MID>     , location CHAR(15) NOT NULL PRIMARY KEY   , age INTEGER NOT NULL   , pilot_name CHAR(15) NOT NULL   , plane_name CHAR(15) NOT NULL   , CHECK (age  >  0)   , CHECK (pilot_name != plane_name)   , FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)   , UNIQUE (pilot_name , plane_name)   , CONSTRAINT Plane_Age_check CHECK (age  >  105 || age  <  10)   , CONSTRAINT Pilot_Name_check CHECK (pilot_name != '')   , CONSTRAINT Plane_Name_check
SELECT count(*) FROM Hangar WHERE pilot_name  =  'Smith' <MID>     , location CHAR(15)     , PRIMARY KEY (plane_name)     , FOREIGN KEY (plane_name) REFERENCES PilotSkills(plane_name)     , UNIQUE KEY U1 (pilot_name , plane_name)     , CONSTRAINT U1 UNIQUE (pilot_name , plane_name)     , CONSTRAINT PK_Hangar PRIMARY KEY (plane_name)     , CONSTRAINT FK_Hangar FOREIGN KEY (plane_name) REFERENCES PilotSkills(plane_name) ON DELETE CASCADE ON UPDATE CASCADE  );  SELECT count(*) FROM Hangar WHERE pilot_name  =  'Smith' ;  CREATE TABLE PilotSk
SELECT count(*) FROM PilotSkills WHERE age  >  40'     , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'     , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'     , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'     , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'     , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'     , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'     , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'     , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'     , 'SELECT count(*) FROM PilotSkills WHERE age  >  40'     ,
SELECT count(*) FROM PilotSkills WHERE age  >  40 GROUP BY pilot_name HAVING count(*)  >=  2'
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC'
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC'
SELECT pilot_name FROM PilotSkills ORDER BY age DESC'   , 'SELECT pilot_name FROM PilotSkills ORDER BY age DESC'   , ['Tony', 'Jerry', 'Mike']] , ['SELECT pilot_name FROM PilotSkills WHERE pilot_name  =  'Tony'', 'SELECT pilot_name FROM PilotSkills WHERE pilot_name  =  'Jerry'', 'SELECT pilot_name FROM PilotSkills WHERE pilot_name  =  'Mike''] , [20, 37, 45]] , ['SELECT age FROM PilotSkills WHERE pilot_name  =  'Tony'', 'SELECT age FROM PilotSkills WHERE pilot_name  =  'Jerry'', 'SELECT age FROM PilotSkills WHERE pilot_name  =  'Mike''] , [2
SELECT pilot_name FROM PilotSkills ORDER BY age DESC'   , ['Tony', 'Joe', 'Sally']] , ['What are the names of planes in the hangar, ordered alphabetically? [SQL] SELECT plane_name FROM Hangar ORDER BY plane_name ASC'   , ['747', 'C-130', 'F-16']] , ['What are the names of planes in the hangar that are more than 20 years old? [SQL] SELECT plane_name FROM Hangar WHERE YEARS  >  20 ORDER BY plane_name ASC'   , ['C-130']] , ['What are the names of pilots who have a plane that is more than 20 years old? [SQL] SELECT pilot_name FROM PilotSkills WHERE YEARS  >  20'
SELECT T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T2.plane_name'     , 'SELECT T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T2.plane_name'     , ['T1.location']     , ['T1']     , ['Hangar']     , ['T1']     , ['SELECT T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T2.plane_name']     , ['SELECT T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON
SELECT T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T1.plane_name'     , 'T1.location' : ['London', 'Paris', 'New York'], 'T1.plane_name' : ['Plane1', 'Plane2', 'Plane3']}     , {'question' : 'What is the average age of pilots?', 'answer' : 28.333333333333335, 'sql' : 'SELECT avg(age) FROM PilotSkills'}     , {'question' : 'How many pilots are there?', 'answer' : 6, 'sql' : 'SELECT count(*) FROM PilotSkills'}     , {'question' : '
SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name ASC'     , 'SELECT DISTINCT plane_name FROM hangar ORDER BY location ASC'     , 'SELECT DISTINCT plane_name FROM pilotskills EXCEPT SELECT DISTINCT plane_name FROM hangar'     , 'SELECT TYPE FROM Information_schema.columns WHERE table_name  =  'Hangar' AND column_name  =  'location' '     , 'SELECT TYPE FROM Information_schema.columns WHERE table_name  =  'pilotskills' AND column_name  =  'age' '     , 'SELECT count(*) FROM hangar'     , 'SELECT count(*) FROM pilotskills'     , 'SELECT count(*) FROM TYPEOFPLANES'     , 'SELECT TYPE FROM Information_schema.columns WHERE table_name  =  '
SELECT plane_name FROM Hangar ORDER BY plane_name ASC'   , 'SELECT plane_name FROM Hangar ORDER BY plane_name ASC'   , ['Plane Name1', 'Plane Name2', 'Plane Name3']] , ['Q4. How many pilots are there named William? [SQL] SELECT count(*) FROM PilotSkills WHERE pilot_name  =  'William'' , 'SELECT count(*) FROM PilotSkills WHERE pilot_name  =  'William'' , 4] , ['Q5. On which planes is William skillful? [SQL] SELECT plane_name FROM PilotSkills WHERE pilot_name  =  'William''] , ['Q6. How old is the youngest pilot? [SQL] SELECT min(age) FROM PilotSkills' , 'SELECT min(age) FROM PilotSkills
SELECT count(*) FROM PilotSkills WHERE age  >  40 OR age  <  30'     , 'SELECT count(*) FROM PilotSkills WHERE age  >  40 OR age  <  30'     , ['2']     , ['SELECT count(*) FROM PilotSkills WHERE age  >  40 OR age  <  30']     , ['SELECT count(*) FROM PilotSkills WHERE age  >  40 OR age  <  30']     , ['SELECT count(*) FROM PilotSkills WHERE age  >  40 OR age  <  30']     , ['SELECT count(*) FROM PilotSkills WHERE age  >  40 OR age  <  30']     , ['SELECT count(*) FROM PilotSkills WHERE age  >  40 OR age  <  30']     , ['SELECT count(*) FROM
SELECT count(*) FROM PilotSkills WHERE age  >  40 OR age  <  30'
SELECT pilot_name ,  age FROM PilotSkills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM PilotSkills WHERE plane_name  =  'F-14 Fighter' AND age  <  30'
SELECT T1.pilot_name ,  T1.age FROM PilotSkills AS T1 JOIN PlaneTypes AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.type_of_plane  =  'Piper Cub' AND T1.age  >  35 OR T2.type_of_plane  =  'F-14 Fighter' AND T1.age  <  30'     FROM PLANETYPES AS T2 JOIN PILOTSKILLS AS T1 ON T1.plane_name  =  T2.plane_name WHERE T2.type_of_plane  =  'Piper Cub' AND T1.age  >  35 OR T2.type_of_plane  =  'F-14 Fighter' AND T1.age  <
SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'B-52 Bomber' <MID>     , location CHAR(15) NOT NULL PRIMARY KEY   , age INTEGER   , pilot_name CHAR(15) NOT NULL   , plane_name CHAR(15) NOT NULL   , CHECK (age  >  0)   , CHECK (pilot_name != plane_name)   , FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)   , UNIQUE (pilot_name ,  plane_name)   , CONSTRAINT Plane_exists FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name) ON DELETE
SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'B-52 Bomber' <MID>     , location CHAR(15) NOT NULL PRIMARY KEY   , age INTEGER   , skill_level INTEGER   , pilot_name CHAR(15) NOT NULL   , plane_name CHAR(15) NOT NULL   , CHECK (skill_level >= 1 && skill_level <= 3)   , FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)   , UNIQUE (pilot_name ,  plane_name)   , CONSTRAINT Plane_Skill_Level CHECK (skill_level >= 1 && skill_level <= 3)
SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.plane_name IN ('Piper Cub', 'B-52 Bomber') <MID>000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location LIKE '%Piper Cub%' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location LIKE '%B-52 Bomber%' <MID>T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location LIKE '%Piper Cub%' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2
SELECT avg(age) ,  min(age) FROM PilotSkills GROUP BY pilot_name ORDER BY avg(age) DESC LIMIT 1'     , 'SELECT avg(age) ,  min(age) FROM PilotSkills GROUP BY pilot_name ORDER BY avg(age) DESC LIMIT 1' : ['42.0', '37']}     , 'SELECT avg(age) ,  min(age) FROM PilotSkills GROUP BY pilot_name ORDER BY avg(age) DESC LIMIT 1' : ['42.0', '37']}     , 'SELECT avg(age) ,  min(age) FROM PilotSkills GROUP BY pilot_name ORDER BY avg(age) DESC LIMIT 1' : ['42.0', '37']}     , 'SELECT avg(age) ,
SELECT avg(age) ,  min(age) FROM PilotSkills'     FROM HANGAR WHERE plane_name  =  'PlaneName1' UNION SELECT avg(age) ,  min(age) FROM PilotSkills WHERE pilot_name  =  'PilotName1' UNION SELECT avg(age) ,  min(age) FROM PilotSkills WHERE pilot_name  =  'PilotName2' UNION SELECT avg(age) ,  min(age) FROM PilotSkills WHERE pilot_name  =  'PilotName3' UNION SELECT avg(age) ,  min(age) FROM PilotSkills WHERE pilot_name  =  'PilotName4' UNION SELECT avg(age) ,  min(age) FROM PilotSkills WHERE pilot_name  =  'PilotName5'
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Austin' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Boston' <MID> pilot_name CHAR(15) NOT NULL, plane_name CHAR(15) NOT NULL , age INTEGER , PRIMARY KEY (pilot_name , plane_name) , FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name) ) CREATE TABLE Hangar ( plane_name CHAR(15) NOT NULL PRIMARY KEY , location CHAR(15) )
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Austin' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Boston' <MID> pilot_name CHAR(15) NOT NULL, plane_name CHAR(15) NOT NULL, age INTEGER , PRIMARY KEY (pilot_name ,  plane_name), FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)) CREATE TABLE Hangar (plane_name CHAR(15) NOT NULL PRIMARY KEY , location CHAR(15)) SELECT T
SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter' <MID>     , location CHAR(15) NOT NULL UNIQUE     , PRIMARY KEY (plane_name)     , FOREIGN KEY (plane_name) REFERENCES PilotSkills(plane_name)     , CHECK (location != '')     , CHECK (location != 'Invalid')     , CHECK (location != 'Untracked')     , CHECK (location != 'Moved')     , CHECK (location != 'Lost')     , CHECK (location != 'Stolen')     , CHECK (location != 'Crashed')     , CHECK (location != 'On Loan')     , CHECK (location != 'Unknown')     , CHECK (location != 'Wrecked')     , CHECK
SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter' <MID>   FROM Hangar WHERE location  =  'off-site' AND plane_name  =  T2.plane_name GROUP BY T2.plane_name HAVING count(*)  >  75 UNION SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'on-site' AND T2.plane_name  =  'Cessna 172' GROUP BY T1.pilot_name HAVING count(*)  >  75) AS subquery WHERE ROWNUM  <=  25'
SELECT avg(age) ,  plane_name FROM PilotSkills GROUP BY plane_name'     , 'SELECT avg(age) ,  pilot_name FROM PilotSkills GROUP BY pilot_name'     , 'SELECT avg(age) FROM PilotSkills'     , 'SELECT avg(age) FROM PilotSkills WHERE plane_name  =  'Boing'']     , answers: ['32.5', '28', '30.6667', '34'],     , correctAnswerNumber: 0   , }   , { question: 'Which plane has the highest average age of all pilots?[SQL] SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY avg(age) DESC LIMIT 1'     , answers: ['Boing']     , correctAnswerNumber:
SELECT plane_name ,  avg(age) FROM PilotSkills GROUP BY plane_name'     , 'SELECT plane_name ,  avg(age) FROM PilotSkills GROUP BY plane_name'     , ['Tupac', 'Don Juan']     , ['Tupac', 'Shakira']     , ['Don Juan', 'Michael Jackson']     , ['Plane 1', 'Plane 2']     , ['Plane 3', 'Plane 4']]     , ['Tupac', 'Don Juan']     , ['Tupac', 'Shakira']     , ['Don Juan', 'Michael Jackson']     , ['Plane 1', 'Plane 2']     , ['Plane 3', 'Plane 4']]]     , ['Tupac', 'Don Juan']     ,
SELECT count(*) ,  plane_name FROM Hangar GROUP BY plane_name'     , 'count(*)', 'plane_name'     , [230, 'Jet']     , [175, 'Passenger Plane']     , [42, 'Military Plane']     , [18, 'Single Engine Plane']     , [16, 'Two Engine Plane']     , [545, 'Jet']     , [42, 'Military Plane']     , [77, 'Passenger Plane']     , [16, 'Single Engine Plane']     , [54, 'Two Engine Plane']     , [295, 'Jet']     , [37, 'Passenger Plane']     , [86, 'Military Plane
SELECT plane_name ,  count(*) FROM Hangar GROUP BY plane_name'     , 'count_of_planes': [2, 3, 4]     , 'db_schema': ['CREATE TABLE PilotSkills (pilot_name CHAR(15) NOT NULL ,  plane_name CHAR(15) NOT NULL ,  age INTEGER ,  PRIMARY KEY (pilot_name ,  plane_name) ,  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name))', 'CREATE TABLE Hangar (plane_name CHAR(15) NOT NULL PRIMARY KEY ,  location CHAR(15))']     , 'expected_result_type': 'dict'     , 'inputs': {'count_of_planes': [2, 3, 4]}     , 'outputs': {'T
SELECT T1.pilot_name ,  T1.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T1.plane_name ORDER BY T2.location ASC'     , 'T1.plane_name' : ['Boeing737', 'Boeing737', 'Boeing737', 'Boeing737', 'Boeing737', 'Boeing737', 'Boeing737', 'Boeing737', 'Boeing737', 'Boeing737'], 'T1.pilot_name' : ['Jimmy', 'Sally', 'Ron', 'Mike', 'Linda', 'Jack', 'Jill', 'Tom', '
SELECT T2.plane_name ,  T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T2.plane_name ASC'     , 'T1.age  =  (SELECT max(age) FROM pilotskills WHERE plane_name  =  T2.plane_name)')     , ['T1.age  =  (SELECT max(age) FROM pilotskills WHERE plane_name  =  T2.plane_name)'])     , ['T1.age  =  (SELECT max(age) FROM pilotskills WHERE plane_name  =  T2.plane_name)'])     , ['T1.age  =  (SELECT max(age) FROM pilotskills WHERE plane_name  =  T2
SELECT T1.pilot_name ,  T1.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT max(age) FROM pilotskills WHERE pilot_name  =  T1.pilot_name AND plane_name  =  T1.plane_name) GROUP BY T1.plane_name ORDER BY T2.location ASC'
SELECT T1.plane_name ,  T2.pilot_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T1.plane_name ORDER BY max(T2.age) ASC LIMIT 3'   , 'T1.plane_name ,  T2.pilot_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T1.plane_name ORDER BY max(T2.age) DESC LIMIT 1'   , 'SELECT T1.plane_name ,  T2.pilot_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T
SELECT pilot_name ,  max(age) FROM PilotSkills GROUP BY pilot_name'     , 'max_age': 32}
SELECT pilot_name ,  max(age) FROM PilotSkills GROUP BY pilot_name'   , ['Tony' ,  43] , ['Jim' ,  37] , ['Sally' ,  35]]]   , ['Tony' ,  43] , ['Jim' ,  37] , ['Sally' ,  35]]]   , ['TONY' ,  43] , ['JIM' ,  37] , ['SALLY' ,  35]]]   , ['TONY' ,  43] , ['JIM' ,  37] , ['SALLY' ,  35]]]   , ['TONY' ,  43] , ['JIM' ,  37] , ['SALLY' ,  35]]]
SELECT count(*) ,  avg(age) ,  location FROM PilotSkills GROUP BY location'     , 'location': 'London'   , 'count': 2   , 'avg(age)': 37.5   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , 'null': ''   , '
SELECT T2.location ,  count(*) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location'     , 'SELECT avg(age) ,  LOCATION FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location'     , 'SELECT count(*) ,  T1.plane_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T1.plane_name'     , 'SELECT count(*) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location'
SELECT count(*) ,  avg(age) FROM PilotSkills WHERE age  <  35 GROUP BY plane_name'   , 'CREATE TABLE Plane (plane_name CHAR(15) NOT NULL PRIMARY KEY)')   , 'CREATE TABLE PilotSkills (pilot_name CHAR(15) NOT NULL, plane_name CHAR(15) NOT NULL, age INTEGER, PRIMARY KEY (pilot_name ,  plane_name), FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name))')   , 'CREATE TABLE Hangar (plane_name CHAR(15) NOT NULL PRIMARY KEY ,  location CHAR(15))')   , 'SELECT count(*) ,  avg(age) FROM PilotSkills WHERE age  <  35 GROUP BY plane_name')   , '
SELECT T2.plane_name ,  count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.plane_name HAVING avg(T1.age)  <  35 <MID>     , location CHAR(15) PRIMARY KEY ,  plane_name CHAR(15) NOT NULL ,  age INTEGER NOT NULL ,  pilot_name CHAR(15) NOT NULL ,  CHECK (age  >  0) ,  CHECK (pilot_name  !=  'null') ,  CHECK (plane_name  !=  'null') ,  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name) ); CREATE TABLE Hangar ( plane_name CHAR(15) NOT NULL PRIMARY KEY ,  location CHAR(15) );
SELECT T2.location FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T1.age LIMIT 1'     , 'answer': 'T2.location'   , 'choices': [  ]   , 'correct': true   , 'value': ''   , 'type': 'text'   , 'isList': false   , 'isCompleted': true} , { 'question': 'Find the name of the pilot who owns the oldest plane in the hangar.',
SELECT T2.location FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T1.age LIMIT 1'     , 'T1.age' : 25}     , {'question': 'What is the name of the pilot who has flown the oldest plane?', 'answer': 'PILOT_1', 'T1.age' : 32}     , {'question': 'Find all pilots whose age is greater than any in the database.', 'answer': 'PILOT_4', 'T1.age' : 28}     , {'question': 'Find all planes that are located in New York.', 'answer': 'PLANE_3', 'T2.location' : 'New York'}
SELECT T1.pilot_name ,  T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Austin' <MID> pilot_name CHAR(15) NOT NULL,
SELECT T1.pilot_name ,  T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Austin' <MID> pilot_name CHAR(15) NOT NULL,
SELECT pilot_name FROM PilotSkills WHERE age  >  (SELECT max(age) FROM PilotSkills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name ASC'
SELECT pilot_name FROM PilotSkills WHERE age  >  (SELECT max(age) FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub')) ORDER BY pilot_name ASC'
SELECT count(*) FROM PilotSkills WHERE age  <  (SELECT min(age) FROM PilotSkills WHERE plane_name  =  'F-14 Fighter') <MID>     , location CHAR(15) NOT NULL PRIMARY KEY   , hangar_name CHAR(15) NOT NULL UNIQUE   , capacity INTEGER NOT NULL   , available INTEGER NOT NULL   , materials CHAR(15) NOT NULL   , notes CHAR(15) NOT NULL   , created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP   , updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP   , created_by VARCHAR(255) NOT NULL   , updated_by VARCHAR(255) NOT NULL   , is_active BOOLEAN NOT NULL DEFAULT 1
SELECT count(*) FROM PilotSkills WHERE age  <  (SELECT min(age) FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'F-14')) <MID>   FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'F-14') GROUP BY pilot_name ORDER BY avg(age) ASC LIMIT 1'
SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' <MID>     , location CHAR(15)     , PRIMARY KEY (plane_name)     , FOREIGN KEY (plane_name) REFERENCES PilotSkills(plane_name)     , UNIQUE KEY Uidx_location (location)     , KEY IDX_plane_name (plane_name)     , CONSTRAINT Hangar_plane_name_bomber_substring FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name) ON DELETE RESTRICT ON UPDATE CASCADE     , CONSTRAINT Hangar_plane_name_bomber_substring CHECK (plane_name LIKE '%Bomber%')  */   , CREATE TABLE PilotSkills (pilot_name
SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' <MID>   FROM hangar WHERE plane_name LIKE '%Bomber%' UNION SELECT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%' ORDER BY plane_name ASC'
SELECT count(*) FROM pilotskills WHERE age  >  (SELECT max(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') <MID>     , location CHAR(15) NOT NULL PRIMARY KEY   , hangar_name CHAR(15) NOT NULL UNIQUE   , capacity INTEGER   , available_spaces INTEGER   , CONSTRAINT hangar_location_check CHECK (location  =  'indoors' OR location  =  'outdoors')   , CONSTRAINT hangar_capacity_check CHECK (capacity  >  0)   , CONSTRAINT hangar_available_spaces_check CHECK (available_spaces  <  capacity)   , CONSTRAINT hangar_hangar_name_unique UNIQUE (hangar_name)   , CONSTRAINT hangar_location_check
SELECT count(*) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') <MID>     , location CHAR(15)     , PRIMARY KEY (plane_name)     , FOREIGN KEY (plane_name) REFERENCES hangar(plane_name)     , CHECK (location != 'invalid')     , CHECK (location != 'on fire')     , CHECK (location != 'out of control')     , CHECK (location != 'crashed')     , CHECK (location != 'exploded')     , CHECK (location != 'burned out')     , CHECK (location != 'smashed')     , CHECK (location != 'write off')     , CHECK (location != 'total loss')     , CHECK (location != 'wrecked')     , CHECK (location != 'scra
SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1'         , 'SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1'         , ['Name']     , 2     , 0      ,['SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1']     , 1     , ['SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1']     , ['SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1']     , ['SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1']     , ['SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1']     , ['SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1']     , ['SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1']     , ['SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1']     ,
SELECT Area_km ,  Government_website FROM district ORDER BY Population ASC LIMIT 1'         , 'SELECT Area_km ,  Government_website FROM district ORDER BY Population ASC LIMIT 1'     , 'SELECT Name FROM spokesman WHERE Age > 65 AND Speach_title  =  'Highly influential'' UNION SELECT Name FROM spokesman WHERE Rank_position  =  2 AND Points  >  250' <MID>SELECT Name FROM spokesman WHERE Age > 65 AND Speach_title  =  'Highly influential'' UNION SELECT Name FROM spokesman WHERE Rank_position  =  2 AND Points  >  250' UNION SELECT Name FROM spokesman WHERE Rank_position  =  3 AND Points  >  150' UNION SELECT Name FROM spokesman WHERE Rank_position  =  4 AND Points  >  75' UNION SELECT
SELECT Name ,  Population FROM district WHERE Area_km  >  (SELECT avg(Area_km) FROM district) <EOT> __author__ = 'Mohamed Amine'
SELECT max(Area_km) ,  avg(Area_km) FROM district WHERE Government_website LIKE '%www.example.gov%' AND Name LIKE '%County%'  */; <MID>_ID INTEGER NOT NULL ,  Start_year TEXT NOT NULL ,  PRIMARY KEY (Spokesman_ID) , FOREIGN KEY (Spokesman_ID) REFERENCES spokesman (Spokesman_ID) , FOREIGN KEY (District_ID) REFERENCES district (District_ID) ) */;
SELECT SUM(POPULATION) FROM district WHERE area_km IN (SELECT area_km FROM district ORDER BY area_km DESC LIMIT 3) <MID>_ID) REFERENCES spokesman_district(District_ID) ON DELETE CASCADE ON UPDATE CASCADE'     , 'ALTER TABLE spokesman_district ADD CONSTRAINT Start_Year CHECK (Start_year LIKE '[12][50][4-9][0-9][0-9]')'     , 'CREATE INDEX Start_Year ON spokesman_district(Start_year)'     , 'CREATE UNIQUE INDEX Spokesman_ID ON spokesman(Spokesman_ID)'     , 'CREATE UNIQUE INDEX District_ID ON spokesman_district(District_ID)'     , 'INSERT INTO spokesman VALUES
SELECT District_ID ,  Name ,  Government_website FROM district ORDER BY Population ASC]'         , 'SELECT District_ID ,  Name ,  Government_website FROM district ORDER BY Population ASC'     , 'SELECT District_ID ,  Name ,  Government_website FROM district ORDER BY Population DESC'         , 'SELECT District_ID ,  Name ,  Government_website FROM district ORDER BY Population DESC'     , 'SELECT District_ID ,  Name ,  Government_website FROM district ORDER BY Population ASC'         , 'SELECT District_ID ,  Name ,  Government_website FROM district ORDER BY Population DESC'     , 'SELECT District_ID ,  Name ,  Government_website FROM district ORDER BY Population ASC'     , 'SELECT District_ID ,  Name ,  Government_website FROM district ORDER BY Population DESC'     , 'SELECT District_ID ,  Name ,  Government_website FROM district ORDER
SELECT Name FROM district WHERE Government_website LIKE '%.gov%') ORDER BY Name ASC' <MID>     , Start_year FROM spokesman_district WHERE District_ID  =  10 ORDER BY Start_year DESC LIMIT 1'     , function(err, row) {
SELECT District_ID ,  Name FROM district WHERE Population  >  4000 OR Area_km  >  3000 <MID>     , rank_position FROM spokesman ORDER BY Speach_title ASC LIMIT 5;'     , 'SELECT Spokesman_ID ,  Name FROM spokesman ORDER BY Rank_position DESC LIMIT 5;'     , 'SELECT MAX(Points) FROM spokesman;'     , 'SELECT MIN(Points) FROM spkesman;'     , 'SELECT COUNT(*) FROM spokesman;'     , 'SELECT SUM(Points) FROM spokesman;'     , 'SELECT AVG(Points) FROM spokesman;'     , 'SELECT Start_year FROM spokesman_district ORDER BY Start_year ASC LIMIT 1;'     , 'SELECT Start_year FROM spokesman_district ORDER BY Start_
SELECT Name ,  Speach_title FROM spokesman WHERE Age BETWEEN 25 AND 35 UNION SELECT Name ,  Speach_title FROM spokesman WHERE Rank_position  >  650 EXCEPT SELECT Name ,  Speach_title FROM spokesman WHERE Population  <  150000 OR Area_km  <  1500; <MID>     FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID JOIN spokesman AS T3 ON T2.Spokesman_ID  =  T3.Spokesman_ID WHERE T1.Name  =  'New York' AND T3.Name  =  'Jimmy' AND T3.Speach_title  =  'Chairman';SELECT T3.Name FROM spokesman AS
SELECT avg(Points) ,  avg(Age) FROM spokesman WHERE Rank_position  =  1 <MID>     FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID  =  T2.Spokesman_ID GROUP BY T2.District_ID HAVING AVG(T1.Rank_position)  >=  0.75'     ;
SELECT Name ,  Points FROM spokesman WHERE Age  <  40'         , 'SELECT Name ,  Points FROM spokesman WHERE Age  <  40'     , ['SELECT Name ,  Points FROM spokesman WHERE Age  <  40']     , ['SELECT Name ,  Points FROM spokesman WHERE Age  <  40']      , 120.0]     , [356.0 ,  'SELECT Name FROM district WHERE Area_km  >  3000' , 'SELECT Name FROM district WHERE Area_km  >  3000' , ['SELECT Name FROM district WHERE Area_km  >  3000'] , ['SELECT Name FROM district WHERE Area_km  >  3000']]     , [187.0 ,  'SELECT Name FROM spokesman WHERE Rank_position
SELECT max(Age) FROM spokesman; SELECT Name FROM spokesman WHERE Age  =  (SELECT max(Age) FROM spokesman) LIMIT 1;'         , 'answer': 'Oldest Spokesman'     , 'difficulty': 2     , 'category': 'Data Definition Languages'     , 'subcategory': 'SQL'     , 'active': True     , 'created_by': 'admin'     , 'created_on': '2016-07-25T14:43:48.974Z'     , 'question_code': ''     , 'type': 'MULTIPLE CHOICE'     , 'choice_1': 'SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1'     , 'choice_2': 'SELECT Name FROM spokesman ORDER BY Age ASC
SELECT Name FROM spokesman WHERE Points  <  (SELECT avg(Points) FROM spokesman) ORDER BY Points ASC LIMIT 1'         , 'SELECT Name FROM spokesman WHERE Points  <  (SELECT avg(Points) FROM spokesman) ORDER BY Points ASC LIMIT 1'     , 'SELECT Name FROM spokesman WHERE Points  >  (SELECT avg(Points) FROM spokesman) ORDER BY Points DESC LIMIT 1'         , 'SELECT Name FROM spokesman WHERE Points  >  (SELECT avg(Points) FROM spokesman) ORDER BY Points DESC LIMIT 1'     , 'SELECT Name FROM spokesman WHERE Points  =  (SELECT avg(Points) FROM spokesman) ORDER BY Points DESC LIMIT 1'         , 'SELECT Name FROM spokesman WHERE Points  =  (SELECT av
SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.district_id  =  t2.district_id GROUP BY t2.district_id ORDER BY count(*) DESC LIMIT 1 <MID>     , government_website TEXT NOT NULL UNIQUE     , start_year         TEXT NOT NULL     , speach_title      TEXT NOT NULL     , rank_position     TEXT NOT NULL     , points            TEXT NOT NULL     , district_id       INTEGER NOT NULL     , PRIMARY KEY (spokesman_id)     , FOREIGN KEY (district_id) REFERENCES district (district_id)     , UNIQUE (district_id)     , CHECK (start_year  =  '2005' || start_year  =  '20
SELECT T1.Name FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID  =  T2.Spokesman_ID WHERE T2.District_ID IN (SELECT District_ID FROM district WHERE Start_year  <  2004) <MID>     , government_website FROM district;'     , 'SELECT name FROM spokesman;'     , 'SELECT T1.name FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID  =  T2.Spokesman_ID WHERE T2.District_ID IN (SELECT District_ID FROM district WHERE Start_year  >  2012)';     FROM district WHERE start_year  <  2004;'     ;
SELECT T1.Name ,  COUNT(*) FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID GROUP BY T1.District_ID'         , 'SELECT T1.Name ,  COUNT(*) FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID GROUP BY T1.District_ID'     , ['SELECT T1.Name ,  COUNT(*) FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID GROUP BY T1.District_ID']]
SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID WHERE T2.Rank_position  =  1 INTERSECT SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID WHERE T2.Rank_position  =  2'         , 'SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID WHERE T2.Rank_position  =  1 INTERSECT SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_
SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.district_id  =  t2.district_id GROUP BY t2.district_id HAVING count(*)  >  1 <MID>     , government_website FROM district WHERE area_km  >  3000;     , SELECT name FROM district WHERE area_km  >  3000;     , SELECT name FROM district WHERE area_km  >  3000 AND population  >  450000;     , SELECT name FROM district WHERE area_km  >  3000 AND population  >  450000 AND density_km  <  150;     , SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.district_id  =
SELECT count(*) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)'         , 'answer': 1}       , {'question': 'Find the name of the district that has the most spokesmen.', 'sql': 'SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.district_id  =  t2.district_id GROUP BY t1.district_id ORDER BY count(*) DESC LIMIT 1' , 'answer': 'Find the name of the district that has the most spokesmen.'}       , {'question': 'Find the name of the district that has the least spokesmen.', 'sql': 'SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.district_id  =  t2.district_id
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district) <MID>_ID PRIMARY KEY , Name TEXT , Age INT , Speach_title TEXT , Rank_position REAL , Points REAL); CREATE TABLE spokesman_district AS SELECT * FROM spokesman; ALTER TABLE spokesman_district ADD Start_year TEXT; INSERT INTO spokesman VALUES (1 , 'Mohammad' , 32 , 'Senator' , 8.5 , 256); INSERT INTO spokesman VALUES (2 , 'Hassan' , 26 , 'Minister' , 7.2 , 184); INSERT INTO spokesman VALUES (3 , 'Ali' , 31 , 'Member of Parliament' , 6 , 135); INSERT INTO spokesman VALUES
SELECT sum(population) ,  avg(population) FROM district WHERE District_ID IN ( SELECT District_ID FROM spokesman_district ) UNION SELECT 0 ,  0'         , 'SELECT sum(population) ,  avg(population) FROM district WHERE District_ID NOT IN ( SELECT District_ID FROM spokesman_district )'     , 'SELECT count(*) FROM spokesman'     , 'SELECT count(*) FROM district WHERE District_ID NOT IN ( SELECT District_ID FROM spokesman_district )'     , 'SELECT count(*) FROM spokesman_district'     , 'SELECT count(*) FROM spokesman WHERE name  =  'King''
SELECT title FROM Sculptures WHERE YEAR  =  (SELECT max(YEAR) FROM Sculptures) LIMIT 1'         , '2015', 'The Thinker', '1970']     , ['Which location has the most paintings?', 'Location with most paintings.', 'New York']     , ['How many immigrants were there in New York City in 1890?', 'Number of immigrants in New York City in 1890.', '36225']     , ['How many citizens were there in New York City in 1890?', 'Number of citizens in New York City in 1890.', '1815']     , ['How many people were there in New York City in 1890?', 'Total number of people in New York City in 1
SELECT title FROM sculptures ORDER BY year DESC LIMIT 1'         , 'title': 'Mona Lisa', 'year': 1503 }]      , 'medium': 'Oil on Canvas', 'location': 'Louvre Museum', 'sculptorID': 124 }]     , 'paintingID': 8675309, 'title': 'The Persistence of Memory', 'year': 1992, 'height_mm': 229, 'width_mm': 166 }]  , 'artistID': 770, 'lname': 'Hirshberg', 'fname': 'Allan', 'birthYear': 1930, 'deathYear': 2001 }] , 'painterID': 770 }] , 'sculptorID
SELECT title ,  LOCATION FROM paintings ORDER BY YEAR ASC LIMIT 1'         , 'title and location of the oldest painting' : 'The Red Chair' , 'London' ,         , 'Which artist had the most students? [SQL] SELECT T2.lname FROM Students AS T1 JOIN Artists AS T2 ON T1.ArtistID  =  T2.artistID GROUP BY T2.fname ORDER BY count(*) DESC LIMIT 1' , 'Claude Monet' ,         , 'Which student has the highest GPA? [SQL] SELECT T1.studentid ,  T1.gpa FROM Students AS T1 JOIN Enrollment AS T2 ON T1.studentid  =  T2.studentid WHERE T1.gpa  =  (SELECT max(gpa) FROM students)' , 'Sonya Pierson'
SELECT title ,  location FROM paintings ORDER BY year LIMIT 1'         , 'The oldest painting is The Night Watch by Sandro Botticelli and it is located in the National Gallery in London.', 'paintingID': 309} , {'task': 'What is the name of the oldest sculpture and where is it located? [SQL]' , 'answer': 'Antique Venus by Praxiteles and located in the Metropolitan Museum of Art in New York.' , 'sculptureID': 4} , {'task': 'Who was the oldest living artist in 1672? [SQL]' , 'answer': 'Pieter Paul Rubens (1577 - 1640).' , 'artistID': 4} , {'task': 'Which artist had the most children? [SQL]' , 'answer': 'Anthony van Dyck (1
SELECT T2.title FROM SCULPTURES AS T1 JOIN PAINTINGS AS T2 ON T1.painterID  =  T2.painterID WHERE T2.location  =  'gallery 226' UNION SELECT title FROM SCULPTURES WHERE location  =  'gallery 226' <MID>     , height_mm INTEGER     , width_mm INTEGER     , medium TEXT     , mediumOn TEXT     , location TEXT     , painterID INTEGER     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES Artists (artistID)     , UNIQUE KEY (year, title)     , CONSTRAINT title_unique UNIQUE (title)     , CONSTRAINT location_check CHECK (
SELECT T2.title FROM SCULPTURES AS T1 JOIN PAINTINGS AS T2 ON T1.painterID  =  T2.painterID WHERE T2.location  =  'gallery 226' UNION SELECT T1.title FROM SCULPTURES AS T1 JOIN PAINTINGS AS T2 ON T1.painterID  =  T2.painterID WHERE T2.location  =  'gallery 226' <MID>T1.painterID  =  T2.painterID WHERE T2.location  =  'gallery 226' UNION SELECT T1.title FROM SCULPTURES AS T1 JOIN PAINTINGS AS T2 ON T1.painterID  =  T2.painterID WHERE T2.location  =  'gallery
SELECT title ,  location FROM paintings WHERE medium = 'Oil' AND height_mm > 600 AND width_mm > 900; SELECT title ,  location FROM paintings WHERE medium = 'Acrylic' AND height_mm > 200 AND width_mm < 200; SELECT title ,  location FROM paintings WHERE medium = 'Watercolor' AND height_mm < 150 AND width_mm < 150; SELECT title ,  location FROM paintings WHERE medium = 'Pencil' AND height_mm > 750 AND width_mm > 600; SELECT title ,  location FROM paintings WHERE medium = 'Charcoal' AND height_mm > 450 AND width_mm > 350; SELECT title ,  location FROM paintings WHERE medium = 'Oil' AND height_mm > 850 AND width
SELECT title ,  location FROM paintings WHERE title LIKE '%Seated Nude%' AND location != 'undefined'
SELECT title ,  location FROM Sculptures'         , 'SELECT title ,  location FROM Sculptures'     , 'SELECT title ,  location FROM paintings'     , 'SELECT title ,  location FROM sculptures'     , 'SELECT title ,  location FROM paintings UNION SELECT title ,  location FROM sculptures'     , 'SELECT title FROM paintings UNION SELECT title FROM sculptures'     , 'SELECT title FROM paintings INTERSECT SELECT title FROM sculptures'               , 'SELECT title FROM paintings EXCEPT SELECT title FROM sculptures'     , 'SELECT title FROM sculptures EXCEPT SELECT title FROM paintings'     , 'SELECT title FROM paintings MINUS SELECT title FROM sculptures'     , 'SELECT title FROM sculptures MINUS SELECT title FROM paintings
SELECT title ,  location FROM Sculptures'         , 'title ,  location FROM Sculptures'         , 'Titles and locations of sculptures'     , ['SELECT title FROM Sculptures' , 'SELECT location FROM Sculptures']     , ['Titles of sculptures' , 'Locations of sculptures']     , [None , None]     , ['SELECT title FROM Sculptures' , 'SELECT location FROM Sculptures']     , ['Titles of sculptures' , 'Locations of sculptures']     , ['SELECT title FROM Sculptures' , 'SELECT location FROM Sculptures']     , ['Titles of sculptures' , 'Locations of sculptures']     , ['SELECT title FROM Sculptures' , 'SELECT location FROM Sculptures']     , ['Titles of sculpt
SELECT medium FROM paintings WHERE paintingID  =  80 UNION SELECT mediumOn FROM paintings WHERE paintingID  =  80' |]
SELECT medium FROM paintings WHERE paintingID  =  80
SELECT fname ,  lname FROM artists WHERE birthyear  >  1850'         , 'SELECT fname ,  lname FROM artists WHERE birthyear  >  1850'     , 'SELECT DISTINCT fname ,  lname FROM artists WHERE birthyear  >  1850'         , 'SELECT DISTINCT fname ,  lname FROM artists WHERE birthyear  >  1850'     , 'SELECT DISTINCT fname ,  lname FROM artists WHERE birthyear  >  1850'     , 'SELECT DISTINCT fname ,  lname FROM artists WHERE birthyear  >  1850'     , 'SELECT DISTINCT fname ,  lname FROM artists WHERE birthyear  >  1850'     , 'SELECT DISTINCT fname ,  lname FROM artists WHERE birthyear  >
SELECT fname ,  lname FROM Artists WHERE birthYear  >  1850 ORDER BY fname ,  lname ASC NULLS LAST' , 'SELECT fname ,  lname FROM Artists WHERE birthYear  >  1850 ORDER BY fname ,  lname ASC NULLS LAST' , ['Tiepolo' , 'Canova' , 'Ingres' , 'Marc Chagall' , 'Paul Cezanne' , 'Edgar Degas' , 'Henri Fantin-Latour' , 'Pablo Picasso' , 'Auguste Rodin' , 'James McNeill Whistler']] , [['SELECT DISTINCT title FROM paintings'] , 'SELECT DISTINCT title FROM sculptures']] , [['Edgar Degas' , 'Henri Fantin-Latour' , 'James McNeill Whistler' , '
SELECT title ,  year FROM Sculptures WHERE location != 'Gallery 226' UNION SELECT title ,  year FROM Paintings WHERE location != 'Gallery 226' <MID>     , height_mm INTEGER     , width_mm INTEGER     , medium TEXT     , mediumOn TEXT     , location TEXT     , painterID INTEGER     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES Artists (artistID)     , UNIQUE KEY unique_title (title)     , UNIQUE KEY unique_year_painter (year , painterID)     , CHECK (height_mm  >=  0)     , CHECK (width_mm  >=  0)     , CHECK (year  >=  1800)     ,
SELECT Title ,  YEAR FROM Sculptures WHERE location != 'Gallery 226' AND sculptorID IN (SELECT DISTINCT sculptorID FROM Sculptures WHERE location != 'Gallery 226') ORDER BY YEAR DESC NULLS LAST'
SELECT DISTINCT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900'         , 'T1.lname ,  T1.fname' , ['T1.lname' , 'T1.fname']]      , ['SELECT DISTINCT T3.lname ,  T3.fname FROM Artists AS T3 JOIN Paintings AS T4 ON T3.artistID  =  T4.painterID JOIN Sculptures AS T2 ON T3.artistID  =  T2.sculptorID WHERE T4.year  >  1980 AND T2.year  <  1900' , 'T3.l
SELECT DISTINCT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900'         , 'T1.lname ,  T1.fname' , ['T1.lname' , 'T1.fname']]      , [3 , 'Which locations did more than 15% of the paintings have in 1978?[SQL] SELECT LOCATION FROM Paintings WHERE YEAR  =  1978 GROUP BY LOCATION HAVING COUNT(*)  >  15%' , 'LOCATION' , []]      , [4 , 'How many different kinds of media are used for paintings in 1978?[SQL] SELECT count(DI
SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920'         , '1934', '1956', '1978']     , ['SELECT count(*) FROM paintings' , 'SELECT count(*) FROM scultures' , 'SELECT count(*) FROM artists']     , ['SELECT count(*) FROM paintings WHERE title LIKE '%Seated Nude%' AND year = 1908' , 'SELECT count(*) FROM scultures WHERE title LIKE '%Seated Nude%' AND year = 1908' , 'SELECT count(*) FROM artists WHERE birthYear = 1908']     , ['SELECT count(*) FROM paintings WHERE title LIKE '%Self-portrait%' AND year = 1910
SELECT DISTINCT T1.birthyear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorID WHERE T2.year  >  1920'         , '1934', '1956', '1978']     , ['SELECT COUNT (*) FROM paintings WHERE height_mm  <  400 OR width_mm  <  300' , '2']     , ['SELECT COUNT (*) FROM scultures WHERE height_mm  <  400 OR width_mm  <  300' , '2']     , ['SELECT COUNT (*) FROM paintings WHERE height_mm  >=  400 AND width_mm  >=  300' , '13']     , ['SELECT COUNT (*) FROM scultures WHERE height_mm  >=
SELECT fname , lname FROM artists ORDER BY birthYear ASC LIMIT 1'         , 'SELECT fname , lname FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname , lname FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname , lname FROM artists ORDER BY birthYear ASC LIMIT 1'     , 'SELECT fname , lname FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname , lname FROM artists ORDER BY birthYear ASC LIMIT 1'     , 'SELECT fname , lname FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname , lname FROM artists ORDER BY birthYear ASC LIMIT 1'     , 'SELECT fname , lname FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname , lname FROM artists ORDER BY birth
SELECT T2.lname ,  T2.fname FROM Artists AS T1 JOIN Artists AS T2 ON T1.birthYear  =  T2.birthYear WHERE T1.deathYear - T1.birthYear  =  T2.deathYear - T2.birthYear ORDER BY T1.deathYear - T1.birthYear DESC LIMIT 1'         , 'T1' : 'Artists'         , 'T2' : 'Artists'     , }     , { 'query' : 'SELECT count(*) FROM paintings' , 'answer' : '475' }     , { 'query' : 'SELECT count(*) FROM scultures' , 'answer' : '346' }     , { 'query' : 'SELECT count
SELECT min(deathyear - birthyear) FROM artists WHERE birthyear != 'null' AND deathyear != 'null' <MID>     , height_mm INTEGER     , width_mm INTEGER     , medium TEXT     , mediumOn TEXT     , location TEXT     , painterID INTEGER     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES Artists (artistID)     , UNIQUE UUID ()     , CONSTRAINT chk_is_square CHECK (width_mm  =  height_mm)     , CONSTRAINT chk_valid_year RANGE (1400 -> 2100)     , CONSTRAINT chk_valid_height_mm RANGE (15 -> 1250)     , CON
SELECT min(birthYear - deathYear) AS age FROM artists WHERE birthYear != 'null' AND deathYear != 'null' GROUP BY birthYear - deathYear ORDER BY age ASC LIMIT 1; SELECT lname FROM artists WHERE birthYear != 'null' AND deathYear != 'null' GROUP BY birthYear - deathYear ORDER BY min(birthYear - deathYear) ASC LIMIT 1; SELECT fname FROM artists WHERE birthYear != 'null' AND deathYear != 'null' GROUP BY birthYear - deathYear ORDER BY min(birthYear - deathYear) ASC LIMIT 1; SELECT birthYear FROM artists WHERE birthYear != 'null' AND deathYear != 'null' GROUP BY birthYear - deathYear ORDER BY min(birthYear - deathYear) ASC LIMIT 1; SELECT deathYear FROM artists WHERE birthYear != 'null' AND deathYear != 'null' GROUP BY birthYear - deathYear ORDER BY min(b
SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'         , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT f
SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'         , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1'     , 'SELECT f
SELECT count(*) FROM paintings WHERE location  =  'gallery 240' <MID>     , height_mm INTEGER NOT NULL     , width_mm INTEGER NOT NULL     , medium TEXT NOT NULL     , mediumOn TEXT NOT NULL     , location TEXT NOT NULL     , painterID INTEGER NOT NULL     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES Artists (artistID)     , UNIQUE KEY (year, title)     , CHECK (height_mm  >  0 && width_mm  >  0)     , CHECK (year  >=  1800 && year  <=  2100)     , CHECK (medium  =  'oil' || medium  =  'acrylic' || medium  =  'watercolor
SELECT count(*) FROM paintings WHERE location LIKE '%240%' <MID>     , height_mm INTEGER NOT NULL  ,  width_mm INTEGER NOT NULL  ,  medium TEXT NOT NULL  ,  mediumOn TEXT NOT NULL  ,  location TEXT NOT NULL  ,  painterID INTEGER NOT NULL  ,  PRIMARY KEY (paintingID) ,  FOREIGN KEY (painterID) REFERENCES Artists (artistID) ); CREATE TABLE Sculptures ( sculptureID INTEGER NOT NULL  ,  title TEXT NOT NULL  ,  year INTEGER NOT NULL  ,  medium TEXT NOT NULL  ,  location TEXT NOT NULL  ,  sculptorID INTEGER NOT NULL  ,  PRIMARY KEY (sculptureID) ,  FOREIGN KEY (sculptorID) REFERENCES Artists (artist
SELECT count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.birthyear  =  (SELECT min(birthyear) FROM artists) AND T1.deathyear  =  (SELECT max(deathyear) FROM artists) ORDER BY T1.deathyear - T1.birthyear DESC LIMIT 1'         ,'4'         ,'3'     ,'2'         ,'1'     ,'0'     ,'SELECT count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.birthyear  =  (SELECT min(birthyear) FROM artists) AND T1.deathyear  =  (SELECT max(deathyear) FROM artists)
SELECT COUNT(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID WHERE T2.birthYear  =  (SELECT min(birthYear) FROM artists) AND T2.deathYear  =  (SELECT max(deathYear) FROM artists) ORDER BY T2.lname'
SELECT T2.title ,  T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  'Mary' UNION SELECT title ,  year FROM paintings EXCEPT SELECT T2.title ,  T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  'Mary' <MID>T1.artistid  =  T2.painterid WHERE T1.fname  =  'Mary' UNION SELECT title ,  YEAR FROM paintings EXCEPT SELECT T2.title ,  T2.YEAR FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE
SELECT T2.title ,  T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  'Mary' AND T1.lname != ''; SELECT T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  'Mary' AND T1.lname != '' ORDER BY T2.year DESC LIMIT 1; SELECT T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  'Mary' AND T1.lname != '' ORDER BY T2.year ASC LIMIT 1; SELECT count(*) FROM artists AS T1 JOIN paint
SELECT t2.width_mm FROM paintings AS t2 JOIN artists AS t1 ON t2.painterID  =  t1.artistID WHERE t1.birthyear  <  1850 CONNECT BY t2.paintingID  =  PaintingID <MID>     , width_mm INTEGER NOT NULL     , medium TEXT NOT NULL     , mediumOn TEXT NOT NULL     , location TEXT NOT NULL     , painterID INTEGER NOT NULL     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES artists (artistID)     , CONNECT BY painterID  =  PaintingID) SELECT width_mm FROM paintings WHERE title  =  'The Last Supper' AND painterID IN (SELECT artistid FROM artists WHERE firstname  =
SELECT max(width_mm) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID WHERE T2.birthyear  <  1850 <MID>     , width_mm INTEGER NOT NULL     , year INTEGER NOT NULL     , medium TEXT NOT NULL     , mediumOn TEXT NOT NULL     , location TEXT NOT NULL     , painterID INTEGER NOT NULL     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES artists (artistID)     , CHECK (year >= 1800)     , CHECK (width_mm >= 10)     , CHECK (height_mm <= 2000)     , CHECK (mediumOn != 'null')     , CHECK (location != '
SELECT T2.location ,  T2.medium FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  'Pablo' AND T2.title != '' AND T2.year != -9999 AND T2.height_mm != -9999 AND T2.width_mm != -9999; <MID>T1.artistid  =  T2.painterid WHERE T1.fname  =  'Pablo' AND T2.title != '' AND T2.year != -9999 AND T2.height_mm != -9999 AND T2.width_mm != -9999;',
SELECT T2.location ,  T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  'Pablo' UNION SELECT NULL ,  NULL ,  T3.location FROM artists AS T1 JOIN sculptures AS T3 ON T1.artistid  =  T3.sculptorid WHERE T1.fname  =  'Pablo' <MID>T1.artistid  =  T2.painterid WHERE T1.fname  =  'Pablo' UNION SELECT NULL ,  NULL ,  T3.location FROM artists AS T1 JOIN sculptures AS T3 ON T1.artistid  =  T3.sculptorid WHERE T1.fname  =  'Pablo' ORDER BY T3.year DESC LIMIT 1'
SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid INTERSECT SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistid  =  T2.sculptorid'         , 'SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid INTERSECT SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistid  =  T2.sculptorid'     , 'SELECT T1.lname ,
SELECT T1.fname ,  T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid UNION SELECT T1.fname ,  T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistid  =  T2.sculptorid <MID>     , height_mm INTEGER  ,  width_mm INTEGER  ,  medium TEXT  ,  mediumOn TEXT  ,  location TEXT  ,  painterID INTEGER  ,  PRIMARY KEY (paintingID) ,  FOREIGN KEY (painterID) REFERENCES Artists (artistID) ) CREATE TABLE Sculptures ( sculptureID INTEGER ,  title TEXT ,  year INTEGER ,  medium TEXT ,
SELECT DISTINCT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' INTERSECT SELECT DISTINCT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'lithographic' <MID>     , height_mm INTEGER     , width_mm INTEGER     , medium TEXT     , mediumOn TEXT     , location TEXT     , painterID INTEGER     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES Artists (art
SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  'oil' INTERSECT SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  'lithographic' <MID>T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  'oil' INTERSECT SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2
SELECT T1.birthyear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'canvas' AND T2.year  =  1884 LIMIT 1'     , '1763' ] , [ 'SELECT T1.lname FROM artists AS T1 JOIN scultures AS T2 ON T1.artistid  =  T2.sculptorid WHERE T2.year  =  1904 LIMIT 1' , 'Grant' ] , [ 'SELECT T1.fname FROM artists AS T1 JOIN scultures AS T2 ON T1.artistid  =  T2.sculptorid WHERE T2.year  =  1904 LIMIT 1' , 'Joseph' ] , [ 'SELECT T
SELECT T2.birthyear FROM paintings AS T1 JOIN artists AS T2 ON T1.painterid  =  T2.artistid WHERE T1.year  =  1884 LIMIT 1'         , '1763', '1765', '1901', '1922']     , ['SELECT count(*) FROM artists WHERE birthyear  =  1765' , 'SELECT count(*) FROM artists WHERE birthyear  =  1901' , 'SELECT count(*) FROM artists WHERE birthyear  =  1922' , 'SELECT count(*) FROM artists WHERE birthyear  =  1763']     , ['2', '1', '1', '0']     , ['Artist #2', 'Artist #3', 'Artist #4', 'Artist #1']     , ['T2
SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.location  =  'gallery 241' AND T2.medium  =  'oil' ORDER BY T1.fname ASC' <MID>T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.location  =  'gallery 241' AND T2.medium  =  'oil' ORDER BY T1.fname ASC'     , 'SELECT DISTINCT T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.location  =  'gallery 2
SELECT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.location  =  'gallery 241' AND T2.medium  =  'oil' ORDER BY T1.lname'
SELECT count(*) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 10'         , 'SELECT count(*) ,  medium FROM scultures GROUP BY medium ORDER BY count(*) DESC LIMIT 10'     , 'SELECT count(*) ,  medium FROM paintings GROUP BY medium UNION SELECT count(*) ,  medium FROM scultures GROUP BY medium'     , 'SELECT count(*) ,  medium FROM paintings GROUP BY medium INTERSECT SELECT count(*) ,  medium FROM scultures GROUP BY medium'     , 'SELECT count(*) ,  medium FROM paintings GROUP BY medium EXCEPT SELECT count(*) ,  medium FROM scultures GROUP BY medium'     , 'SELECT count(*) ,  medium FROM paintings GROUP BY medium UNION SELECT count(*) ,  medium FROM scultures GROUP BY medium'     , 'SELECT count(*) ,  medium FROM paintings GROUP BY medium INTERSECT SELECT count
SELECT count(*) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 10'         , 'SELECT count(*) ,  medium FROM scultures GROUP BY medium ORDER BY count(*) DESC LIMIT 10'     , 'SELECT count(*) ,  mediumFrom FROM paintings GROUP BY mediumFrom ORDER BY count(*) DESC LIMIT 10'     , 'SELECT count(*) ,  mediumOn FROM paintings GROUP BY mediumOn ORDER BY count(*) DESC LIMIT 10'      , 'SELECT count(*) ,  medium FROM scultures GROUP BY medium ORDER BY count(*) DESC LIMIT 10'     , 'SELECT count(*) ,  mediumFrom FROM paintings GROUP BY mediumFrom ORDER BY count(*) DESC LIMIT 10'     , 'SELECT count(*) ,  mediumOn FROM paintings GROUP BY mediumOn ORDER BY count(*) DESC LIMIT 10'     , 'SELECT count(*) ,  medium FROM sc
SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'         , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'     , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'     , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'     , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'     , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'     , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count
SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'         , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'     , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'     , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'     , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'     , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count(*) DESC LIMIT 1'     , 'SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY count
SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'         , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'     , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'     , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'      , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'     , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'     , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR
SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'         , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'     , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'     , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'          , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'     , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'     , 'SELECT count(*) ,  LOCATION FROM paintings WHERE
SELECT title FROM paintings WHERE medium  =  'oil' AND YEAR  >  1910' <MID>     , height_mm INTEGER NOT NULL     , width_mm INTEGER NOT NULL     , medium TEXT NOT NULL     , mediumOn TEXT NULLABLE     , location TEXT NOT NULL     , painterID INTEGER NOT NULL     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES Artists (artistID)     , CHECK (height_mm  >  12.5 && width_mm  >  12.5)     , CHECK (YEAR  >  1850)     , CHECK (medium  =  'oil' || medium  =  'acrylic' || medium  =  'watercolor' || medium  =  'graph
SELECT title FROM Paintings WHERE medium  =  'oil' AND YEAR  >  1910' <MID>     , sculpteeID int NOT NULL FOREIGN KEY REFERENCES Artists(artistID) ON DELETE CASCADE ON UPDATE CASCADE  );  CREATE TABLE Paintings (  paintingID INT AUTO_INCREMENT PRIMARY KEY  ,  title TEXT  ,  year INT  ,  height_mm INT  ,  width_mm INT  ,  medium TEXT  ,  mediumOn TEXT  ,  location TEXT  ,  painterID INT NOT NULL FOREIGN KEY REFERENCES Artists(artistID) ON DELETE CASCADE ON UPDATE CASCADE );  SELECT title FROM paintings WHERE YEAR  >  1950;  SELECT title FROM paintings WHERE medium  =  'o
SELECT DISTINCT T1.artistid FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' AND T2.location  =  'gallery 240' <MID>     , height_mm INTEGER NOT NULL     , width_mm INTEGER NOT NULL     , medium TEXT NOT NULL     , mediumOn TEXT NULLABLE     , location TEXT NOT NULL     , painterID INTEGER NOT NULL     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES Artists (artistID)     , CHECK (height_mm  >  0 && width_mm  >  0)     , UNIQUE (year , title , painterID)     , CONST
SELECT DISTINCT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' AND T2.location  =  'gallery 240' UNION SELECT DISTINCT T1.artistID FROM artists AS T1 JOIN scultures AS T2 ON T1.artistid  =  T2.sculptorid WHERE T2.location  =  'gallery 240' EXCEPT SELECT DISTINCT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium != 'oil' AND T2.location  =  'gallery 240'')]
SELECT DISTINCT title FROM paintings WHERE height_mm > (SELECT max(height_mm) FROM paintings WHERE medium  =  'Canvas') UNION SELECT DISTINCT title FROM paintings EXCEPT SELECT DISTINCT title FROM paintings WHERE medium  =  'Canvas' <MID>     , sculpteeID INTEGER NOT NULL REFERENCES Artists (artistID) ON DELETE CASCADE ON UPDATE CASCADE     , PRIMARY KEY (sculptureID)     , FOREIGN KEY (sculpteeID) REFERENCES Artists (artistID) ON DELETE CASCADE ON UPDATE CASCADE     , UNIQUE UUID ()     , CONSTRAINT chk_sculpture_year CHECK (year >= 1900 && year <= 2100)     , CONSTRAINT chk
SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings WHERE medium  =  'Canvas') AND medium != 'Canvas' UNION SELECT DISTINCT title FROM paintings WHERE medium  =  'Canvas' AND height_mm  >  (SELECT max(height_mm) FROM paintings WHERE medium  =  'Canvas') UNION SELECT DISTINCT title FROM paintings WHERE medium  =  'Mixed Media' AND height_mm  >  (SELECT max(height_mm) FROM paintings WHERE medium  =  'Mixed Media') UNION SELECT DISTINCT title FROM paintings WHERE medium  =  'Other' AND height_mm  >  (SELECT max(height_mm) FROM paintings WHERE medium  =  'Other') UNION SELECT DISTINCT title FROM paintings WHERE medium  =  'Pastel' AND height_mm  >  (
SELECT DISTINCT painterID FROM paintings WHERE location != 'gallery 240' AND YEAR  <  (SELECT MAX(YEAR) FROM paintings WHERE location  =  'gallery 240') UNION SELECT DISTINCT sculptorID FROM sculptures WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE location  =  'gallery 240') <MID>     , height_mm INTEGER NOT NULL     , width_mm INTEGER NOT NULL     , medium TEXT NOT NULL     , mediumOn TEXT NOT NULL     , location TEXT NOT NULL     , painterID INTEGER NOT NULL     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES Artists (artistID)     , CHECK (height_mm  >  0 AND width_mm
SELECT DISTINCT painterID FROM paintings WHERE year  <  (SELECT max(year) FROM paintings WHERE location  =  'Gallery 240') UNION SELECT DISTINCT sculptorID FROM sculptures WHERE year  <  (SELECT max(year) FROM paintings WHERE location  =  'Gallery 240')'
SELECT painterid FROM paintings ORDER BY year ASC LIMIT 1'         , '4256'         , '4257'     , 'SELECT painterid FROM paintings ORDER BY year DESC LIMIT 1'         , '4258'     , 'SELECT COUNT(*) FROM artists'         , '4259'     , 'SELECT COUNT(*) FROM paintings'         , '4260'     , 'SELECT COUNT(*) FROM sculptures'         , '4261' ]     , [ 'SELECT COUNT(*) FROM artists WHERE birthyear  >  1880 AND deathyear  <  1920'         , '4262' ]     , [ 'SELECT COUNT(*) FROM artists WHERE birthyear  >  1880 AND deathyear  <  1920'         , '4263
SELECT painterID FROM paintings ORDER BY year ASC LIMIT 1'         , '267'         , 'SELECT painterID FROM paintings ORDER BY year DESC LIMIT 1'         , '435'     , ]     , [ 'SELECT COUNT (*) FROM artists'         , 'SELECT COUNT (*) FROM paintings'         , 'SELECT COUNT (*) FROM sculptures'         , 'SELECT COUNT (*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid'         , 'SELECT COUNT (*) FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorid'         , 'SELECT COUNT (*) FROM paintings AS T1 JOIN sculptures AS T2 ON T1.paintingid  =  T2.sculpture
SELECT T2.lname ,  T2.fname FROM Sculptures AS T1 JOIN Artists AS T2 ON T1.sculptorID  =  T2.artistID WHERE T1.title LIKE '%female%' <MID>T1.sculptorID  =  T2.artistID WHERE T1.title LIKE '%female%' AND T1.year  =  1980'     , 'SELECT T2.lname ,  T2.fname FROM Sculptures AS T1 JOIN Artists AS T2 ON T1.sculptorID  =  T2.artistID WHERE T1.title LIKE '%female%' AND T1.year  =  1980'     , 'SELECT T2.lname ,  T2.fname FROM Sculptures AS T1 JOIN Artists AS T
SELECT T2.lname ,  T2.fname FROM Sculptures AS T1 JOIN Artists AS T2 ON T1.sculptorID  =  T2.artistID WHERE T1.title LIKE '%female%' <MID>T1.sculptorID  =  T2.artistID WHERE T1.title LIKE '%female%' AND T1.medium  =  'marble' OR T1.medium  =  'stone' OR T1.medium  =  'granite' OR T1.medium  =  'concrete' OR T1.medium  =  'terra cotta' OR T1.medium  =  'wood' OR T1.medium  =  'gold' OR T1.medium  =  'silver' OR T1.medium  =  'bronze' OR T1.medium  =
SELECT DISTINCT title FROM paintings ORDER BY title ASC]'         , 'answer': [['title']]     , 'explanation': ''} ,   {   'query': 'SELECT title FROM paintings WHERE title LIKE %Flowers% ORDER BY title ASC'         , 'answer': [['title']]     , 'explanation': ''} ,   {   'query': 'SELECT title FROM paintings WHERE title LIKE %Sea% ORDER BY title ASC'         , 'answer': [['title']]     , 'explanation': ''} ,   {   'query': 'SELECT title FROM paintings WHERE title LIKE %Boat% ORDER BY title ASC'         , 'answer': [['title']]     , 'explanation': ''} ,   {   'query': 'SELECT title FROM paintings WHERE title LIKE %Building
SELECT DISTINCT title FROM paintings ORDER BY title ASC' , 'SELECT DISTINCT title FROM paintings' , ['title']] , ['Every distinct painting in alphabetical order.' , 'SELECT DISTINCT title FROM paintings ORDER BY title ASC' , ['Every distinct painting in alphabetical order.']]]]
SELECT DISTINCT title FROM paintings ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DISTINCT title FROM paintings ORDER BY LENGTH(title) DESC NULLS FIRST] SELECT DISTINCT title FROM paintings ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DISTINCT title FROM paintings ORDER BY LENGTH(title) DESC NULLS FIRST] SELECT DISTINCT title FROM paintings ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DISTINCT title FROM paintings ORDER BY LENGTH(title) DESC NULLS FIRST] SELECT DISTINCT title FROM paintings ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DISTINCT title FROM paintings ORDER BY LENGTH(title) DESC NULLS FIRST] SELECT DISTINCT title FROM paintings ORDER BY LEN
SELECT title FROM paintings ORDER BY height_mm ASC'         , 'SELECT title FROM paintings ORDER BY height_mm DESC'     , 'SELECT DISTINCT title FROM paintings'     , 'SELECT COUNT (DISTINCT title) FROM paintings'     , 'SELECT COUNT (*) FROM paintings'     , 'SELECT COUNT (DISTINCT location) FROM paintings'     , 'SELECT COUNT (DISTINCT sculptorID) FROM sculptures'     , 'SELECT COUNT (DISTINCT painterID) FROM paintings'               , 'SELECT count(*) FROM (SELECT * FROM paintings EXCEPT SELECT * FROM sculptures) '     , 'SELECT count(*) FROM (SELECT * FROM paintings INTERSECT SELECT * FROM sculptures) ']
SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950'         , 'SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 INTERSECT SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950'     , 'SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 EXCEPT SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950'     , 'SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 IS NULL'     , 'SELECT title FROM sculptures WHERE YEAR B
SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM scupltures WHERE YEAR BETWEEN 1900 AND 1950'         , 'SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 INTERSECT SELECT title FROM scupltures WHERE YEAR BETWEEN 1900 AND 1950'     , 'SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 EXCEPT SELECT title FROM scupltures WHERE YEAR BETWEEN 1900 AND 1950'     , 'SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 IS NULL'     , '
SELECT T2.title FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID WHERE T2.artistID  =  222 UNION SELECT T3.title FROM sculptures AS T2 JOIN artists AS T3 ON T2.sculptorID  =  T3.artistID WHERE T3.artistID  =  222'         , 'SELECT T2.title FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID WHERE T2.artistID  =  222 INTERSECT SELECT T3.title FROM sculptures AS T2 JOIN artists AS T3 ON T2.sculptorID  =  T3.artistID WHERE T3.artistID  =  222'     , 'SELECT
SELECT T3.title FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID JOIN paintings AS T3 ON T3.painterID  =  T2.artistID WHERE T2.artistID  = 222 UNION SELECT T4.title FROM sculptures AS T4 JOIN artists AS T2 ON T4.sculptorID  =  T2.artistID WHERE T2.artistID  =  222'         , 'SELECT T3.title FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID JOIN paintings AS T3 ON T3.painterID  =  T2.artistID WHERE T2.artistID  =  222 INTERSECT SELECT T4.title FROM
SELECT T2.artistid FROM paintings AS T1 JOIN artists AS T2 ON T1.painterid  =  T2.artistid WHERE T1.year  <  1900 GROUP BY T2.artistid ORDER BY count(*) DESC LIMIT 1'         , '467'         , 'SELECT T2.artistid FROM paintings AS T1 JOIN artists AS T2 ON T1.painterid  =  T2.artistid WHERE T1.year  <  1900 GROUP BY T2.artistid ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T2.artistid FROM paintings AS T1 JOIN artists AS T2 ON T1.painterid  =  T2.artistid WHERE T1.year  <  1900 GROUP BY T2.artistid ORDER
SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1'         , '479'         , 'SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER
SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorid GROUP BY T1.fname ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorid GROUP BY T1.fname ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.fname ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.fname FROM artists AS T1 JOIN sculputres AS T2 ON T1.artistid  =  T2.sculptorid GROUP BY
SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorid GROUP BY T1.fname ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.fname ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.lname FROM artists AS T1 JOIN scultures AS T2 ON T1.artistid  =  T2.sculptorid GROUP BY T1.lname ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T
SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm >  800'         , 'SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm >  800'         , ['title']     , ['Titles of paintings with width  <  600 or height  >  800']     , ['T1', 'T2']     , ['T1', 'T2']     , ['T1', 'T2']     , ['T1', 'T2']     , ['T1', 'T2']     , ['T1', 'T2']     , ['T1', 'T2']     , ['T1', 'T2']     , ['T1', 'T2']     , ['T1', 'T2']     ,
SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800'         , 'SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800'         , ['title']     , ['Titles of paintings with width less than 600 pixels or height more than 800 pixels']         , 1     , ['SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800']     , ['The location of the painting titled Mona Lisa is:']         , 'SELECT location FROM paintings WHERE title  =  'Mona Lisa''         , []     , ['The location of the painting titled The Persistence of Memory is:']         , 'SELECT location FROM paintings WHERE title  =  'The
SELECT LOCATION FROM paintings WHERE YEAR  <  1885 UNION SELECT LOCATION FROM paintings WHERE YEAR  >  1930'         , 'SELECT LOCATION FROM paintings WHERE YEAR  <  1885 UNION SELECT LOCATION FROM paintings WHERE YEAR  >  1930'         , ['LOCATION']     , ['New York', 'Los Angeles']     , ['New York', 'Chicago']     , ['New York', 'Houston']     , ['Los Angeles', 'San Francisco']     , ['Los Angeles', 'Pasadena']     , ['Chicago', 'Joliet']     , ['Houston', 'Dallas']     , ['San Francisco', 'San Jose']     , ['Pasadena', 'Anaheim']     , ['Joliet', 'St
SELECT LOCATION FROM Paintings WHERE YEAR  <  1885 UNION SELECT LOCATION FROM Paintings WHERE YEAR  >  1930'         , 'SELECT LOCATION FROM Paintings WHERE YEAR  <  1885 UNION SELECT LOCATION FROM Paintings WHERE YEAR  >  1930'         , ['LOCATION']     , ['New York', 'Los Angeles']     , ['New York', 'Los Angeles']     , ['New York', 'Los Angeles']     , ['New York', 'Los Angeles']     , ['New York', 'Los Angeles']     , ['New York', 'Los Angeles']     , ['New York', 'Los Angeles']     , ['New York', 'Los Angeles']     , ['New York', 'Los Angeles']     , ['New York', 'Los Angeles']     ,
SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000'         , '4. Find the ids of all paintings by either Raphael or Leonardo da Vinci?[SQL] SELECT painterid FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  'Raphael' OR T1.lname  =  'Leonardo da Vinci''         , '5. Find the ids of all paintings by a painter whose last name is either Sanders or Williams?[SQL] SELECT T2.paintingid FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.lname  =  'Sanders' OR
SELECT paintingID FROM paintings WHERE height_mm  >  500 AND width_mm  <  2000'         , '41, 63'         , ['41', '63']         , '4'     , ]     , [ 'SELECT DISTINCT artistid FROM artists'         , '18'         , [18]         , '5'     , ]     , [ 'SELECT DISTINCT painterid FROM paintings'         , '7'         , [7]         , '6'     , ]     , [ 'SELECT DISTINCT sculptorID FROM sculptures'         , '5'         , [5]         , '5'     , ]     , [ 'SELECT COUNT(*) FROM artists'         , '29'         , '29'
SELECT LOCATION FROM paintings WHERE medium  =  'on panel' INTERSECT SELECT LOCATION FROM paintings WHERE medium  =  'on canvas' <MID>     , height_mm INTEGER     , width_mm INTEGER     , medium TEXT     , mediumOn TEXT     , location TEXT     , painterID INTEGER     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES Artists (artistID)     , CHECK (height_mm  >=  0 AND width_mm  >=  0)     , CHECK (year  >=  1000)     , CHECK (title != '')     , CHECK (medium != '')     , CHECK (location != '')     , CHECK (mediumOn != '')
SELECT T2.location FROM paintings AS T1 JOIN SCULPTURES AS T2 ON T1.medium  =  'on panel' AND T2.medium  =  'canvas' WHERE T1.mediumOn  =  'panel' EXCEPT SELECT T2.location FROM paintings AS T1 JOIN SCULPTURES AS T2 ON T1.mediumOn  =  'canvas' AND T2.medium  =  'on canvas' UNION SELECT T2.location FROM paintings AS T1 JOIN SCULPTURES AS T2 ON T1.mediumOn  =  'panel' AND T2.medium  =  'on panel' EXCEPT SELECT T2.location FROM paintings AS T1 JOIN SCULPTURES AS T2 ON T1.mediumOn  =  'canvas' AND T2.medium  =  'canvas' <MID>T1.mediumOn
SELECT LOCATION FROM paintings WHERE YEAR  <  1885 UNION SELECT LOCATION FROM paintings WHERE YEAR  >  1930'         , 'answer': 'The locations are: New York City and Los Angeles'     , 'category': 'Visual Arts'     , 'level': 'Easy'     , 'code': []     , 'version': '1.0'     , 'question': 'Find the locations that have paintings created before 1885 and after 1930?'     , 'correctAnswer': true     , 'more': false     , 'falseAnswer': false     , 'trueAnswer': true     , 'author': 'Aayush'     , 'difficulty': 'Easy'     , 'url': '',     , 'randomize': false     , 'subtasks': {
SELECT LOCATION FROM paintings WHERE YEAR  <  1885 UNION SELECT LOCATION FROM paintings WHERE YEAR  >  1930'         , 'answer': 'New York City'     , 'category': 'Visual Arts'     , 'difficulty': 'Easy'     , 'image': 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/Mona_Lisa%2C_by_Leonardo_da_Vinci.jpg/478px-Mona_Lisa%2C_by_Leonardo_da_Vinci.jpg'     , 'subcategory': 'Paintings'     , 'level': 'Easy'     , 'question': 'Which city has a painting by Leonardo da Vinci and a sculpture by Rodin?'     , 'correct_answer
SELECT avg(width_mm) ,  avg(height_mm) FROM paintings WHERE medium  =  'oil' AND location  =  'gallery 241' <MID>.com/problems/average-of-the-variable/description/>
SELECT avg(width_mm) ,  avg(height_mm) FROM paintings WHERE medium  =  'oil' AND location  =  'gallery 241' <MID>.com/problems/average-of-all-heights-and-widths/description/
SELECT max(height_mm) ,  paintingID FROM Paintings WHERE year  <  1900;'         , '435' : 'SELECT max(height_mm) ,  paintingID FROM Paintings WHERE year  <  1900;'         , '436' : 'SELECT count(*) FROM artists;'         , '437' : 'SELECT count(*) FROM paintings;'         , '438' : 'SELECT count(*) FROM sculptures;'     , }     , '44' : {         , '440' : 'SELECT count(*) FROM artists;'         , '441' : 'SELECT count(*) FROM paintings;' + ' SELECT count(*) FROM sculptures;'     , }     , '45' : {         , '450' : 'SELECT count
SELECT height_mm ,  paintingID FROM paintings WHERE YEAR  <  1900 ORDER BY height_mm DESC LIMIT 1'         , '432', 'SELECT height_mm ,  paintingID FROM paintings WHERE YEAR  <  1900 ORDER BY height_mm DESC LIMIT 1'],
SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR'         , '2016' : 'SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings WHERE YEAR  =  2016 GROUP BY YEAR'         , '2015' : 'SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings WHERE YEAR  =  2015 GROUP BY YEAR'         , '2014' : 'SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings WHERE YEAR  =  2014 GROUP BY YEAR'     , }     , 'Q3' : { 'query' : 'SELECT count(*) FROM artists'         , '
SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR DESC'         , '2015	467x381'         , '2014	492x381'         , '2013	492x381'         , '2012	492x381'         , '2011	492x381'         , '2010	492x381'         , '2009	492x381'         , '2008	492x381'         , '2007	492x381'         , '2006	492x38
SELECT AVG(height_mm) ,  AVG(width_mm) ,  T1.fname ,  T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.fname ,  T1.lname ORDER BY T1.fname ,  T1.lname'         , 'SELECT avg(height_mm) ,  avg(width_mm) ,  T1.fname ,  T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.fname ,  T1.lname ORDER BY T1.fname ,  T1.lname'     , ['SELECT avg(height_mm) ,  avg
SELECT AVG(height_mm) ,  AVG(width_mm) ,  T1.fname ,  T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.fname ,  T1.lname ORDER BY T1.fname ,  T1.lname'         , 'SELECT avg(height_mm) ,  avg(width_mm) ,  T1.fname ,  T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.fname ,  T1.lname ORDER BY T1.fname ,  T1.lname'     , 'SELECT avg(height_mm) ,  avg
SELECT T2.fname ,  count(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID GROUP BY T2.fname HAVING count(*)  >=  2'         , 'SELECT T2.fname ,  count(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID GROUP BY T2.fname HAVING count(*)  >=  2'     , 'SELECT T2.fname ,  count(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID GROUP BY T2.fname HAVING count(*)  >=  2'     , 'SELECT T2.fname ,  count(*) FROM paintings AS T1 JOIN artists AS T2 ON T
SELECT T2.fname ,  COUNT(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID GROUP BY T2.fname HAVING count(*)  >=  2'         , 'SELECT T2.fname ,  COUNT(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID GROUP BY T2.fname HAVING count(*)  >=  2'     , 'SELECT T2.fname ,  COUNT(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID GROUP BY T2.fname HAVING count(*)  >=  2'     , 'SELECT T2.fname ,  COUNT(*) FROM paintings AS T1 JOIN artists AS T2 ON T
SELECT deacyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings GROUP BY painterid HAVING count(*)  <=  3) UNION SELECT deacyear FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING count(*)  <=  3) ORDER BY deacyear DESC'         ,'1957'         ,'SELECT max(deacyear) FROM artists WHERE artistid IN (SELECT painterid FROM paintings GROUP BY painterid HAVING count(*)  <=  3) UNION SELECT max(deacyear) FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING count(*)  <=  3) ORDER BY max(deacyear) DESC LIMIT 1'     ,'1952'         ,'SELECT max(deacyear) FROM artists WHERE artistid IN (SELECT painterid FROM
SELECT T1.lname ,  T1.fname ,  T1.birthyear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.artistid HAVING count(*)  <  4 INTERSECT SELECT T1.lname ,  T1.fname ,  T1.birthyear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.artistid HAVING count(*)  >  4' | python3 -m json.tool
SELECT T1.deathyear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorid GROUP BY T1.artistid ORDER BY count(*) ASC LIMIT 1'         , '1936'         , 'SELECT T1.deathyear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorid GROUP BY T1.artistid ORDER BY count(*) ASC LIMIT 1'     , 'SELECT T1.deathyear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.artistid ORDER BY count(*) DESC LIMIT 1'         , '1945'         , 'SELECT T1.deathyear FROM artists AS T1 JOIN paint
SELECT T1.deathyear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorID GROUP BY T1.firstname ORDER BY count(*) ASC LIMIT 1'         , '1955'     , 'Which location has the most paintings? [SQL] SELECT LOCATION FROM paintings GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1'         , 'T13'     , 'Which artist has the most paintings? [SQL] SELECT T2.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterID GROUP BY T1.firstname ORDER BY COUNT(*) DESC LIMIT 1'         , 'Claude Monet'     , 'Which artist has the most sculptures? [SQL] SELECT T2.
SELECT paintingID ,  height_mm FROM paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1' <MID>     , height_mm INTEGER     , medium TEXT     , mediumOn TEXT     , location TEXT     , painterID INTEGER     , PRIMARY KEY (paintingID)     , FOREIGN KEY (painterID) REFERENCES Artists (artistID)     , UNIQUE KEY title_year_painterID (title ,  year ,  painterID)     , UNIQUE KEY title_year (title ,  year)     , UNIQUE KEY name_year (name ,  year)     , UNIQUE KEY name_year_painterID (name ,  year ,  painterID)     , FULLTEXT KEY name_year_search (
SELECT height_mm ,  paintingID FROM paintings WHERE location LIKE 'gallery%240' ORDER BY width_mm DESC LIMIT 1' <MID>     , sculpteeID INT NOT NULL ,  medium VARCHAR(40) ,  location VARCHAR(300) ,  SCULPTORID INT NOT NULL ,  PRIMARY KEY (sculptureID) ,  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)     , T1 ARTISTS ON sculpteeID  =  ARTISTID WHERE location LIKE 'gallery%240' ORDER BY width_mm DESC LIMIT 1' AS final_answer;     , height_mm FROM paintings WHERE location LIKE 'gallery%240' ORDER BY width_mm DESC LIMIT 1'; SELECT height_mm FROM paintings WHERE location LIKE 'gallery%240'
SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT min(YEAR) FROM paintings WHERE location  =  'gallery 240') UNION SELECT paintingID FROM paintings WHERE location != 'gallery 240' AND YEAR  <  (SELECT min(YEAR) FROM paintings WHERE location != 'gallery 240')'     , ['19', '35', '67', '81', '102', '113', '124', '135', '146', '157', '168', '179', '190', '201', '212', '223', '234', '245', '256', '267', '278', '289', '300', '311',
SELECT paintingID FROM paintings WHERE creation_date  <  (SELECT min(creation_date) FROM paintings WHERE location  =  'gallery 240') UNION SELECT paintingID FROM paintings WHERE creation_date  >  (SELECT max(creation_date) FROM paintings WHERE location  =  'gallery 240')'         , '19' : ['SELECT DISTINCT artistid FROM artists', 'SELECT DISTINCT painterid FROM paintings'],         , '20' : ['SELECT count(*) FROM artists', 'SELECT count(*) FROM paintings']     , '21' : ['SELECT count(*) FROM scultures', 'SELECT count(*) FROM artists']     , '22' : ['SELECT count(*) FROM paintings WHERE medium  =  'oil'', 'SELECT count(*) FROM paintings WHERE medium  =  'acrylic'']     ,
SELECT paintingID FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900) UNION SELECT paintingID FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings) ORDER BY paintingID ASC LIMIT 3 OFFSET 2'         , '465' : 'SELECT DISTINCT artistid FROM artists WHERE lname  =  'Hirshfield' UNION SELECT DISTINCT painterid FROM painters WHERE lname  =  'Hirshfield' UNION SELECT DISTINCT sculptorid FROM sculptors WHERE lname  =  'Hirshfield'',         , '466' : 'SELECT DISTINCT artistid FROM artists WHERE fname  =  'George' UNION SELECT DISTINCT painterid FROM painters WHERE fname  =  'George' UNION
SELECT paintingID FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings WHERE year  >  1900) UNION SELECT paintingID FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings) ORDER BY height_mm DESC LIMIT 3;[NoSQL][] SELECT * FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings WHERE year  >  1900) UNION SELECT paintingID FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings) ORDER BY height_mm DESC LIMIT 3;[Files][] SELECT * FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings WHERE year  >  1900) UNION SELECT paintingID FROM paintings WHERE height_mm  >  (SELECT max(height
SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' GROUP BY T1.artistid ORDER BY count(*) DESC LIMIT 3' <MID>     , T2.year FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' GROUP BY T1.artistid ORDER BY count(*) DESC LIMIT 3' > task4.sql`
SELECT T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' GROUP BY T1.artistid ORDER BY count(*) DESC LIMIT 1' <MID>T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' GROUP BY T1.artistid ORDER BY count(*) DESC LIMIT 1' | python -m json.tool`     , {
SELECT paintingID ,  LOCATION ,  title FROM paintings WHERE medium  =  'oil' ORDER BY YEAR DESC' <MID>     , sculpteeID INT NOT NULL ,  year INT NOT NULL ,  medium TEXT NOT NULL ,  location TEXT NOT NULL ,  sculpteeID INT NOT NULL ,  PRIMARY KEY (sculptureID) ,  FOREIGN KEY (sculpteeID) REFERENCES Artists (artistID) );''')     FROM = '''FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid JOIN sculptures AS T3 ON T1.artistid  =  T3.sculpteeid'''     WHERE = '''WHERE T2.medium  =  'oil' AND T3.medium  =  'stone' ORDER BY
SELECT paintingID ,  LOCATION ,  title FROM Paintings WHERE medium  =  'oil' ORDER BY YEAR ASC NULLS LAST' <MID>     , sculpteeID INT FOREIGN KEY REFERENCES Artists(artistID) ON DELETE CASCADE ON UPDATE CASCADE]'     , ['CREATE TABLE Paintings (paintingID INT AUTO_INCREMENT PRIMARY KEY , title TEXT , YEAR INT , height_mm INT , width_mm INT , medium TEXT , mediumOn TEXT , location TEXT , painterID INT , SCULPTOR1 TEXT)']]     , ['' , '' , 'SELECT DISTINCT SCULPTOR1 FROM Paintings']]     , ['' , '' , 'SELECT DISTINCT SCULPTOR1 FROM Paintings GROUP BY SCULPTOR1 H
SELECT YEAR ,  LOCATION ,  title FROM Paintings WHERE height_mm  >  1000 ORDER BY title ASC NULLS LAST'         , '2014', 'New York', 'The Rockies')]     , [('The Rockies', '2014', 'New York', 'The Rockies')]     , [('The Rockies', '2014', 'New York', 'The Rockies')]     , [('The Rockies', '2014', 'New York', 'The Rockies')]     , [('The Rockies', '2014', 'New York', 'The Rockies')]     , [('The Rockies', '2014', 'New York', 'The Rockies')]     , [('The Rockies', '2014',
SELECT title ,  location ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title ASC NULLS LAST'         , '2014', 'London', 'Monalisa']     , ['The Scream', '1893', 'Oil on canvas', 'Europe', '1895', '1904', '1943', 'Oslo', 'Norway', 'Edvard Munch', '1863', '1943', '1910', '1910', '1893', 'The Scream', 'Edvard Munch', 'Norwegian symbolist painter']     , ['Composition with Blue Background', '1914', 'Oil on canvas', 'Europe', '1914', '1914', '1914
SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid EXCEPT SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistid  =  T2.sculptorid'         , 'SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid EXCEPT SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistid  =  T2.sculptorid'     , 'SELECT T1.lname ,  T1
SELECT fname ,  lname FROM artists WHERE artistid NOT IN (SELECT painterid FROM paintings) AND artistid NOT IN (SELECT sculptorid FROM sculptures) ORDER BY fname ,  lname ASC LIMIT 10'         , 'answer': 'Picasso ,  Matisse'     , 'category': 'visualarts'     , 'difficulty': 2     , 'image': 'https://cdn.discordapp.com/attachments/364414197814567680/572516777247391242/Screenshot_from_2019-05-14_16-07-57.png'     , 'subcategory': 'artists'     , 'level': 'easy'     , 'question': 'Wh
SELECT location FROM paintings WHERE YEAR  <  1885 EXCEPT SELECT location FROM paintings WHERE medium  =  'canvas' <MID>     , sculp.title FROM artists AS arti JOIN scultures AS sculp ON arti.artistid  =  sculp.sculptorid;',     , 'SELECT DISTINCT artistid FROM artists;',     , 'SELECT COUNT (*) FROM artists;',     , 'SELECT COUNT (*) FROM paintings;',     , 'SELECT COUNT (*) FROM scultures;'   , ]   , answers = [       , 'The number of male artists is: 346'     , 'The number of female artists is: 277'     , 'The average age of male artists is: 40.92'     , 'The average age of female artists is: 40
SELECT title FROM paintings WHERE medium != 'Canvas' AND YEAR  <  1885' UNION SELECT title FROM paintings WHERE medium  =  'Canvas' AND YEAR  >  1885' <MID>     , sculpteeID INT NOT NULL , PRIMARY KEY (sculptureID) , FOREIGN KEY (sculpteeID) REFERENCES Artists (artistID) )]     , database_schema = [{}] , prompt = 'Which artist was most represented by scultptures? (Return first one if there is a tie.)' , answers = ['Ruben' , 'Pablo' , 'Leonardo']} , {sql = SELECT T2.lname FROM SCULPTURES AS T1 JOIN ARTISTS AS T2 ON T1.sculpteeid  =  T2.artistid GROUP BY T2.l
SELECT count(*) FROM race'         , 'SELECT count(*) FROM race'         , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM race'     , '
SELECT count(*) FROM race'         , 'SELECT count(*) FROM race'     , 'SELECT count(*) FROM driver'     , 'SELECT count(*) FROM constructor'     , 'SELECT count(*) FROM chassis'     , 'SELECT count(*) FROM engine'     , 'SELECT count(*) FROM entrant'          , 'SELECT count(*) FROM fastest_lap'     , 'SELECT count(*) FROM pole_position'     , 'SELECT count(*) FROM report'     , 'SELECT count(*) FROM winning_driver'     , 'SELECT count(*) FROM winning_team'     , 'SELECT count(*) FROM driver_name'     , 'SELECT count(*) FROM driver_id'     , 'SELECT count(*) FROM age'     , 'SELECT count(*) FROM driver'     , 'SELECT count(*) FROM driver WHERE constructor = 'Williams' AND engine = 'Honda' AND chass
SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC'         , 'SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC'     , 'SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC'     , 'SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC'     , 'SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC'     , 'SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC'     , 'SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC'     , 'SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC'     , '
SELECT T1.Driver_name ,  T2.Team FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.winning_driver = 'True' ORDER BY T2.Team ASC NULLS LAST'     , ['SELECT T1.Driver_name ,  T2.Team FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.winning_driver = 'True' ORDER BY T2.Team ASC NULLS LAST']]
SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous' <MID>     , constructor FROM driver ORDER BY age DESC LIMIT 1;     , constructor FROM driver ORDER BY age ASC LIMIT 1;     , chassis FROM driver ORDER BY age DESC LIMIT 1;     , chassis FROM driver ORDER BY age ASC LIMIT 1;     , engine FROM driver ORDER BY age DESC LIMIT 1;     , engine FROM driver ORDER BY age ASC LIMIT 1;     , entrant FROM driver ORDER BY age DESC LIMIT 1;     , entrant FROM driver ORDER BY age ASC LIMIT 1;     , driver_name FROM driver ORDER BY age DESC LIMIT 1;     , driver_name FROM driver ORDER BY age ASC LIMIT 1;     , driver_id FROM driver ORDER BY age DESC LIMIT 1;     , driver_id FROM driver ORDER BY age ASC LIMIT
SELECT Winning_driver FROM race WHERE pole_position != 'Junior Strous' <MID>     , constructor FROM driver ORDER BY age DESC LIMIT 1;
SELECT Constructor FROM driver ORDER BY Age ASC'         ,'SELECT Constructor FROM driver ORDER BY Age ASC'         ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM driver ORDER BY Age ASC'     ,'SELECT Constructor FROM
SELECT Constructor FROM driver ORDER BY Age ASC'         ,'SELECT DISTINCT Constructor FROM driver'     ,'SELECT COUNT(*) FROM driver'     ,'SELECT count(DISTINCT constructor) FROM driver'      ,'SELECT count(DISTINCT driver_name) FROM driver' ]     FROM = ['SELECT count(DISTINCT driver_name) FROM driver'
SELECT DISTINCT Entrant FROM driver WHERE age  >=  20'         , 'SELECT DISTINCT Entrant FROM driver WHERE age  >=  20'     , 'SELECT COUNT(DISTINCT Entrant) FROM driver WHERE age  >=  20'     , 'SELECT COUNT(DISTINCT Entrant) FROM driver WHERE age  >=  20'      , 'SELECT count(*) FROM driver WHERE age  >=  20'     , 'SELECT count(DISTINCT Entrant) FROM driver WHERE age  >=  20'     , 'SELECT count(DISTINCT constructor) FROM driver WHERE age  >=  20'     , 'SELECT count(DISTINCT engine) FROM driver WHERE age  >=  20' ]     , [ 'SELECT count(*) FROM race'     , 'SELECT count(DISTINCT winning_driver) FROM race
SELECT Entrant FROM driver WHERE age  <  20 GROUP BY Entrant ORDER BY count(*) DESC LIMIT 1'         ,'SELECT Entrant FROM driver WHERE age  >  20 GROUP BY Entrant ORDER BY count(*) DESC LIMIT 1'     ,'SELECT Constructor FROM driver GROUP BY Constructor ORDER BY count(*) DESC LIMIT 1'     ,'SELECT Engine FROM driver GROUP BY Engine ORDER BY count(*) DESC LIMIT 1'     ,'SELECT Chassis FROM driver GROUP BY Chassis ORDER BY count(*) DESC LIMIT 1'     ,'SELECT max(age) FROM driver'     ,'SELECT min(age) FROM driver' ]     ,[ 'SELECT count(*) FROM race'     ,'SELECT count(DISTINCT winning_driver) FROM race'     ,'SELECT count(DISTINCT winning_team) FROM race' ]     ,[
SELECT max(Age) ,  min(Age) FROM driver'         , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'      , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max
SELECT max(Age) ,  min(Age) FROM driver'         , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'      , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max(Age) ,  min(Age) FROM driver'     , 'SELECT max
SELECT count(DISTINCT engine) FROM driver WHERE age  >  30 OR age  <  20'         , '180' : 'SELECT count(DISTINCT constructor) FROM driver'         , '196' : 'SELECT count(DISTINCT chassis) FROM driver'         , '212' : 'SELECT count(DISTINCT entrant) FROM driver'         , '228' : 'SELECT count(DISTINCT driver_name) FROM driver'         , '244' : 'SELECT count(*) FROM race'     , }     , answers = {
SELECT count(DISTINCT engine) FROM driver WHERE age  >  30 OR age  <  20'         , '145' : ['SELECT count(DISTINCT engine) FROM driver WHERE age  >  30 OR age  <  20']     , '146' : ['SELECT count(DISTINCT constructor) FROM driver']         , '147' : ['SELECT count(DISTINCT chassis) FROM driver']         , '148' : ['SELECT count(DISTINCT entrant) FROM driver']         , '149' : ['SELECT count(DISTinct driver_name) FROM driver']     , '150' : ['SELECT count(*) FROM race']     , '151' : ['SELECT count(DISTINCT winning_driver) FROM race']     , '152' : ['SELECT
SELECT driver_name FROM driver ORDER BY driver_name DESC'         , 'SELECT driver_name FROM driver ORDER BY driver_name DESC'     , ['SELECT driver_name FROM driver ORDER BY driver_name DESC']     , ['SELECT driver_name FROM driver ORDER BY driver_name DESC']     , ['SELECT driver_name FROM driver ORDER BY driver_name DESC']               , ['SELECT driver_name FROM driver ORDER BY driver_name DESC']     , ['SELECT driver_name FROM driver ORDER BY driver_name DESC']     , ['SELECT driver_name FROM driver ORDER BY driver_name DESC']     , ['SELECT driver_name FROM driver ORDER BY driver_name DESC']     , ['SELECT driver_name FROM driver ORDER BY driver_name DESC']     , ['SELECT driver_name FROM driver ORDER BY driver_name DESC']     , ['SELECT driver_name FROM driver ORDER BY driver
SELECT driver_name FROM driver ORDER BY driver_name DESC'         , 'driver_name': 'Hamilton', 'constructor': 'Mercedes', 'chassis': 'W10', 'engine': 'V6', 'age': 32, 'entrant': 'GP2 Series'}     , {'sql': 'SELECT driver_name FROM driver ORDER BY driver_name ASC'         , 'driver_name': 'Kimi Raikkonen', 'constructor': 'Ferrari', 'chassis': '458', 'engine': 'V8', 'age': 30, 'entrant': 'GP2 Series'}     , {'sql': 'SELECT driver_name FROM driver ORDER BY driver_name DESC'         , 'driver_name': 'Lewis Hamilton', 'constructor': 'Mercedes', 'chassis': 'W10', 'engine': 'V6',
SELECT T1.Driver_name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'         , 'SELECT T1.Driver_name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     , ['SELECT T1.Driver_name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id']     , ['SELECT T1.Driver_name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id']     , ['SELECT T1.Driver_name ,  T2.
SELECT T1.Driver_name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'         , 'SELECT T1.Driver_name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     , ['SELECT T1.Driver_name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id']     , ['SELECT T1.Driver_name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id']     , ['SELECT T1.Driver_name ,  T2.
SELECT T1.Driver_name ,  count(*) FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id'         , 'SELECT T1.Driver_name ,  count(*) FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id'     , ['SELECT T1.Driver_name ,  count(*) FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id']     , ['SELECT T1.Driver_name ,  count(*) FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id']     , ['
SELECT T1.driver_id ,  count(*) FROM DRIVER AS T1 JOIN RACE AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC'         , 'SELECT T1.driver_id ,  count(*) FROM DRIVER AS T1 JOIN RACE AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC'     , ['SELECT T1.driver_id ,  count(*) FROM DRIVER AS T1 JOIN RACE AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC']     , ['SELECT T1.driver_id ,  count(*) FROM DRIVER AS T1 JOIN RACE AS T2 ON T
SELECT T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1'         , '35'     ,   'SELECT T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1'     ,   '40'     ,   'SELECT max(T1.age) FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id'          ,   'SELECT max(T1.age) FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T
SELECT T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1'         , '35'     ,   'SELECT max(T1.age) FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     ,   'SELECT T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1'     ,   'SELECT max(T1.age) FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     ,   'SELECT T1.age FROM driver
SELECT T1.driver_name ,  T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id HAVING count(*)  >=  2'         , 'SELECT T1.driver_name ,  T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     , 'SELECT T1.driver_name ,  T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     , 'SELECT T1.driver_name ,  T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     , 'SELECT T1.driver_name
SELECT T1.driver_name ,  T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id HAVING count(*)  >=  2'         , 'SELECT T1.driver_name ,  T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     , 'SELECT T1.driver_name ,  T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     , 'SELECT T1.driver_name ,  T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     , 'SELECT T1.driver_name
SELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.age  >=  26'         , 'SELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.age  >=  26'     , ['SELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.age  >=  26']     , ['SELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.age  >=  26']     , ['SELECT T1.
SELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Age  >=  26'         , 'SELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Age  >=  26'     , ['SELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Age  >=  26']     , ['SELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Age  >=  26']     , ['SELECT T1.Race_Name FROM race AS T
SELECT driver_name FROM driver WHERE constructor != 'Bugatti' <MID>     , constructor TEXT     , chassis TEXT     , engine TEXT     , age INT     , PRIMARY KEY (driver_id)     , FOREIGN KEY (driver_id) REFERENCES race(driver_id)     , UNIQUE (driver_name)     , CHECK (age >= 18)     , CHECK (engine IN ('V6', 'V8'))     , CHECK (chassis IN ('Coup&eacute;', 'Sedan'))     , CHECK (constructor IN (' Ferrari ', ' Scuderia Toro Rosso ', ' McLaren '))     , CHECK (driver_name NOT LIKE ' %_% ')     , CHECK (driver_name NOT LIKE ' %.__% ')     , CHECK (driver_name NOT LIKE '
SELECT Driver_name FROM driver EXCEPT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.constructor  =  'Bugatti' <MID>     , constructor text     , chassis text     , engine text     , age int     , primary key (driver_id)     , foreign key (driver_id) references race(driver_id)     , check (age >= 18)     , check (fastest_lap > pole_position)     , unique (report)     , check (winning_driver != 'None' || winning_team != 'None')     , check (race_name != '' || report != '')     , check (pole_position != '' || fastest_lap != '')     , check (TRIM(win
SELECT Constructor ,  COUNT(*) FROM driver GROUP BY Constructor'         , 'SELECT Constructor ,  COUNT(*) FROM driver GROUP BY Constructor'     , 'SELECT count(*) FROM driver'     , 'SELECT count(DISTINCT driver_name) FROM driver'     , 'SELECT count(DISTINCT constructor) FROM driver'     , 'SELECT count(DISTINCT engine) FROM driver' ]     FROM = ['FROM driver' , 'FROM driver' , 'FROM driver' , 'FROM driver' , 'FROM driver']     WHERE = ['WHERE age > 25' , 'WHERE driver_name LIKE %Ferrari%' , 'WHERE constructor != Subaru' , 'WHERE engine != V6' , 'WHERE chassis != Monza']     GROUP BY = ['GROUP BY constructor' , 'GROUP BY driver_name' , 'GROUP BY constructor' , 'GROUP
SELECT Constructor ,  count(*) FROM driver GROUP BY Constructor'         , 'SELECT Constructor ,  count(*) FROM driver GROUP BY Constructor'     , 'SELECT Constructor ,  count(*) FROM driver GROUP BY Constructor'     , 'SELECT Constructor ,  count(*) FROM driver GROUP BY Constructor'     , 'SELECT Constructor ,  count(*) FROM driver GROUP BY Constructor'     , 'SELECT Constructor ,  count(*) FROM driver GROUP BY Constructor'     , 'SELECT Constructor ,  count(*) FROM driver GROUP BY Constructor'     , 'SELECT Constructor ,  count(*) FROM driver GROUP BY Constructor'     , 'SELECT Constructor ,  count(*) FROM driver GROUP BY Constructor'     , 'SELECT Constructor ,  count(*) FROM driver GROUP BY Constructor'     , 'SELECT Constructor ,  count(*) FROM driver GROUP BY Constructor'     , 'SELECT Con
SELECT Engine FROM driver GROUP BY Engine ORDER BY count(*) DESC LIMIT 1]'     , '234': 'SELECT * FROM driver WHERE Engine  =  (SELECT Engine FROM driver GROUP BY Engine ORDER BY count(*) DESC LIMIT 1)',     , '235': 'SELECT * FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Engine  =  (SELECT Engine FROM driver GROUP BY Engine ORDER BY count(*) DESC LIMIT 1))'     , '236': 'SELECT T1.Road ,  T2.Driver_ID FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.Engine  =  (SELECT Engine FROM driver GROUP BY Engine ORDER BY count(*) DESC LIMIT 1)'     , '237': 'SELECT T1.Road ,  T2.Driver_
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1'         , 'Turbo'     , 'What is the oldest driver in the database?[SQL] SELECT max(Age) FROM driver'         , 32     , 'Which team has won the most races?[SQL] SELECT T1.Constructor FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Constructor ORDER BY COUNT(*) DESC LIMIT 1'         , 'Manor'     , 'Who was the youngest driver to win a race?[SQL] SELECT T2.Driver_name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.Age  =  (SELECT min(Age) FROM driver) AND T1.winning_driver
SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2]'         , 'SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2'     , 'SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2'     , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']          , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']          , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']          , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']          , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']          , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']
SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2]'     , 'SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2'     , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']     , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']     , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']     , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']     , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']     , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']     , ['SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2']     , ['SELECT Engine FROM driver GROUP BY Engine HAVING
SELECT Driver_name FROM driver EXCEPT SELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'         , 'SELECT Driver_name FROM driver EXCEPT SELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     , ['SELECT Driver_name FROM driver EXCEPT SELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id']     , ['SELECT Driver_name FROM driver EXCEPT SELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id']     , ['SELECT Driver_name FROM driver EXCEPT SELECT T1
SELECT Driver_name FROM driver EXCEPT SELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'         , 'SELECT Driver_name FROM driver EXCEPT SELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id'     , ['SELECT DISTINCT constructor FROM driver']         , ['SELECT COUNT(*) FROM driver']     , ['SELECT count(DISTINCT constructor) FROM driver']     , ['SELECT count(DISTINCT engine) FROM driver']]
SELECT Constructor FROM driver WHERE age  <  20 INTERSECT SELECT Constructor FROM driver WHERE age  >  30]'         , 'answer': 'Honda'     , 'difficulty': 1     , 'category': 'Basic Select'     , 'active': True     , 'created_by': 'God'     , 'created_on': '2016-07-25T19:42:58.250Z'     , 'solved_by': []     , 'images': []     , 'sounds': []     , 'type': 'MULTIPLE CHOICE'     , 'choices': ['Mercedes', 'Red Bull', 'Honda', 'Ferrari']     , 'solution': 'Mercedes'     , 'course': course     , 'less
SELECT Constructor FROM driver WHERE age  <  20 INTERSECT SELECT Constructor FROM driver WHERE age  >  30'         , 'SELECT Constructor FROM driver WHERE age  <  20 INTERSECT SELECT Constructor FROM driver WHERE age  >  30'     , 'SELECT chassis FROM race WHERE fastest_lap = (SELECT max(fastest_lap) FROM race)']     , ['SELECT count(*) FROM driver WHERE age  >  25 AND constructor != ''Red Bull'' AND chassis != ''Cosworth''']     , ['SELECT count(*) FROM driver WHERE age  >  25 AND constructor != ''Red Bull'' AND chassis != ''Cosworth''']     , ['SELECT count(*) FROM driver WHERE age  >  25 AND constructor != ''Red Bull'' AND chassis != ''Cosworth''']     , ['SELECT count
SELECT Constructor FROM race GROUP BY Constructor HAVING count(*)  >  1]'         , 'answer': 'Red Bull Racing'     , 'difficulty': 2     , 'category': 'Data Base'     , 'active': True     , 'created_by': 'a7medkamel'     , 'created_on': '2016-05-08T14:43:59.237772Z'     , 'question_id': 11     , 'attachment': ''     , 'hint': ''     , 'video_solution': ''     , 'submitted_by': 'a7medkamel'     , 'submitted_on': '2016-05-08T14:45:28.950
SELECT T1.Constructor FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Constructor HAVING count(*)  >  1'         , 'Constructor']]     , [['SELECT DISTINCT T1.constructor FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'True'', 'Constructor']]     , [['SELECT COUNT(DISTINCT T1.constructor) FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'True'', 'COUNT']]     , [['SELECT count(DISTINCT T1.constructor) FROM driver AS T1 JOIN race AS T2
SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'James Hinchcliffe' INTERSECT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'Carl Skerlong' <MID>     , constructor : String     , chassis : String     , engine : String     , age : Int     , primary key (driver_id)     , foreign key (driver_id) references race(driver_id)     , check (age >= 18)     , check (age <= 70)     , check (fastest_lap != '')     , check (report != '')
SELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'James Hinchcliffe' INTERSECT SELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'Carl Skerlong' <MID>     , constructor : string     , chassis : string     , engine : string     , age : int     , driver_id : int     , is_polesitter : boolean     , fastest_lap : float     , report : string     , winning_driver : string     , winning_team : string     , race_name : string     , pole_position : string     , driver
SELECT driver_name FROM driver EXCEPT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'James Hinchcliffe' <MID>     , constructor : String     , chassis : String     , engine : String     , age : Int     , primary key (driver_id)     , foreign key (driver_id) references race(driver_id)     , check (age >= 18)     , check (fastest_lap != '')     , check (report != '')     , check (winning_driver != '')     , check (winning_team != '')     , check (pole_position != '')     , check (race_name != '')     , check (constructor != '')     , check (chass
SELECT driver_name FROM driver EXCEPT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'James Hinchcliffe' <MID>     , constructor     , chassis     , engine     , age     FROM driver;     GROUP BY constructor ORDER BY count(*) DESC LIMIT 1;     LIMIT 1;SELECT constructor FROM driver GROUP BY constructor ORDER BY count(*) DESC LIMIT 1;SELECT constructor FROM driver GROUP BY constructor ORDER BY count(*) DESC LIMIT 1;SELECT constructor FROM driver GROUP BY constructor ORDER BY count(*) DESC LIMIT 1;SELECT constructor FROM driver GROUP BY constructor ORDER BY count(*) DESC LIMIT 1;SELECT constructor FROM driver GROUP BY constructor ORDER BY count(*) DESC LIMIT 1;SELECT constructor FROM driver GROUP BY constructor ORDER BY count(*)
SELECT count(*) FROM languages WHERE id != 0'         , '3'         , ['SELECT count(*) FROM languages WHERE id != 0']         , ['SELECT count(*) FROM languages WHERE id != 0']     , [1]     , 1     , ['SELECT count(*) FROM countries WHERE id != 0']     , ['SELECT count(*) FROM official_languages WHERE country_id != 0']      , ['SELECT count(*) FROM official_languages WHERE language_id != 0']     , ['SELECT count(*) FROM official_languages WHERE language_id != 0']     , ['SELECT count(*) FROM official_languages WHERE country_id != 0']     , ['SELECT count(*) FROM official_languages WHERE country_id != 0']     , ['SELECT count(*) FROM official_languages WHERE language_id != 0']     , ['SELECT count(*)
SELECT count(*) FROM languages WHERE name  =  'English' AND iso639_1  =  'en' AND iso639_2  =  'eng' AND iso639_3  =  'eng' AND is_individual  =  0 AND is_included  =  1 AND is_dead  =  0 AND is_extinct  =  0 AND is_constructed  =  0 AND member_of_group  =  'Indo-European' AND group_index  =  54; SELECT count(*) FROM languages; SELECT count(DISTINCT name) FROM languages; SELECT count(DISTINCT iso639_1) FROM languages; SELECT count(DISTINCT iso639_2) FROM languages; SELECT count(DISTINCT iso639_3) FROM languages; SELECT count(DISTINCT
SELECT name FROM languages ORDER BY name ASC'         , 'SELECT name FROM languages ORDER BY name ASC'         , ['english', 'french', 'spanish']     ,   'SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id'         , ['english', 'french', 'spanish']     ,   'SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id WHERE T2.country_id  =  1'         , ['english']     ,   'SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id WHERE T2.country_id  =  3'         , ['f
SELECT name FROM languages ORDER BY name ASC'         , 'english' : 'SELECT name FROM languages WHERE name  =  'English'',         , 'french' : 'SELECT name FROM languages WHERE name  =  'French'',         , 'spanish' : 'SELECT name FROM languages WHERE name  =  'Spanish'',         , 'german' : 'SELECT name FROM languages WHERE name  =  'German'',         , 'russian' : 'SELECT name FROM languages WHERE name  =  'Russian'',         , 'chinese' : 'SELECT name FROM languages WHERE name  =  'Chinese'',     , }     , 'task3' : {         , 'sql' : ['SELECT country.name FROM countries AS country JOIN official_languages AS lang ON country.id  =  lang.country_id WHERE lang.language
SELECT name FROM languages WHERE name LIKE '%ish%' <MID>     , T1.name AS country_name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name LIKE '%ish%' ORDER BY country_name ASC' > ish_official_languages.sql
SELECT name FROM languages WHERE name LIKE '%ish%' <MID>     , T2.name AS country_name FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.id JOIN languages AS T3 ON T1.language_id  =  T3.id WHERE T3.name LIKE '%ish%' ORDER BY country_name ASC NULLS LAST'
SELECT name FROM countries ORDER BY overall_score DESC'         , 'SELECT name FROM countries ORDER BY overall_score DESC'         , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER
SELECT name FROM countries ORDER BY overall_score DESC NULLS LAST'         , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'         , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT name FROM countries ORDER BY overall_score DESC'     , 'SELECT
SELECT avg(justice_score) FROM countries WHERE justice_score  <  5.5'         , '4.31666666666667' : 'SELECT avg(justice_score) FROM countries WHERE justice_score  >  4.5' , '4.83333333333333' : 'SELECT avg(justice_score) FROM countries WHERE justice_score != 5' }     , 'Q3' : { '2.5' : 'SELECT name FROM languages WHERE id IN ( SELECT language_id FROM official_languages WHERE country_id  =  1 )' , '3.5' : 'SELECT name FROM languages WHERE id IN ( SELECT language_id FROM official_languages WHERE country_id  =  2 )' , '4.5' : 'SELECT name FROM languages WHERE
SELECT avg(justice_score) FROM countries WHERE justice_score  >  0.000000e+00
SELECT max(health_score) , min(health_score) FROM countries WHERE name != 'Norway'  ORDER BY health_score DESC LIMIT 1 OFFSET 0
SELECT max(health_score) , min(health_score) FROM countries WHERE name != 'Norway'  ORDER BY health_score DESC LIMIT 1 OFFSET 0;  SELECT max(health_score) , min(health_score) FROM countries WHERE name != 'Norway'  ORDER BY health_score ASC LIMIT 1 OFFSET 0;  SELECT max(health_score) , min(health_score) FROM countries WHERE name != 'Norway'  ORDER BY health_score DESC LIMIT 1 OFFSET 0;  SELECT max(health_score) , min(health_score) FROM countries WHERE name != 'Norway'  ORDER BY health_score ASC LIMIT 1 OFFSET 0;  SELECT max(health_score) , min(health_score) FROM countries WHERE name != 'Norway'  ORDER
SELECT count(DISTINCT language_id) FROM official_languages'         , '3'         , ['SELECT count(DISTINCT language_id) FROM official_languages']     , [1]     , 0          , 2     , 'SELECT count(*) FROM countries'         , '249'         , ['SELECT count(*) FROM countries']     , [1]     , 0          , 3     , 'SELECT count(*) FROM languages'         , '6'         , ['SELECT count(*) FROM languages']     , [1]     , 0          , 4     , 'SELECT country_id FROM official_languages GROUP BY country_id ORDER BY count(*) DESC LIMIT 1'         , '157'         , ['SELECT country_id FROM official_languages GROUP BY
SELECT count(DISTINCT language_id) FROM official_languages'         , 'answer': 61}     , {'question': 'SELECT count(DISTINCT name) FROM languages'         , 'answer': 61}     , {'question': 'SELECT count(*) FROM countries'         , 'answer': 249}     , {'question': 'SELECT count(*) FROM official_languages'         , 'answer': 1551}     , {'question': 'SELECT count(*) FROM official_languages WHERE country_id  =  170'         , 'answer': 3}     , {'question': 'SELECT count(*) FROM official_languages WHERE country_id  =  7'         , 'answer': 2}     , {'question': 'SELECT count(*) FROM official_languages WHERE country_id  =  167'
SELECT name FROM countries ORDER BY education_score DESC'         , 'SELECT name FROM countries ORDER BY education_score DESC'     , 'SELECT name FROM countries ORDER BY education_score DESC'     , 'SELECT name FROM countries ORDER BY education_score DESC'     , 'SELECT name FROM countries ORDER BY education_score DESC'      , 'SELECT name FROM countries ORDER BY education_score DESC'     , 'SELECT name FROM countries ORDER BY education_score DESC'     , 'SELECT name FROM countries ORDER BY education_score DESC'     , 'SELECT name FROM countries ORDER BY education_score DESC'     , 'SELECT name FROM countries ORDER BY education_score DESC'     , 'SELECT name FROM countries ORDER BY education_score DESC'     , 'SELECT name FROM countries ORDER BY education_score DESC'     , 'SELECT name FROM countries ORDER BY education_score DESC'     , 'SELECT name FROM countries ORDER
SELECT name FROM countries ORDER BY education_score DESC NULLS LAST'         , 'country_names': ['Germany', 'France', 'Spain', 'Italy', 'United Kingdom'], 'task': 'Based on the provided database schema information, What are the names of the countries, ordered descending by education score?'},     , {'query': 'SELECT name FROM countries ORDER BY education_score DESC' , 'answer': ['Germany', 'France', 'Spain', 'Italy', 'United Kingdom'], 'task': 'Based on the provided database schema information, What are the names of the countries, ordered descending by education score?'},     , {'query': 'SELECT name FROM countries ORDER BY education_score DESC' , 'answer': ['Germany', 'France', 'Spain', 'Italy', 'United Kingdom'], 'task': 'Based on the provided database schema information
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1'         , 'name': 'Task', 'type': 'choice', 'validation_type': 'regex', 'validation_pattern': '^CREATE TABLE official_languages .* FOREIGN KEY language_id REFERENCES languages.*(CREATE TABLE countries .* PRIMARY KEY id|CREATE TABLE languages .* PRIMARY KEY id)'}]     , 'type': 'object', 'optional': False}], 'maxItems': 1, 'minItems': 1}     , 'type': 'array'}     , 'type': 'object'}     , 'properties': {'tasks': TASKS}     , 'additionalProperties': False}     , 'type': 'object'}     , 'required': ['tasks']
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1'         , 'country' : 'Germany'         , 'question_type' : 'single_choice'         , 'is_unique' : True     ,   'correct_answer' : [0]         , 'incorrect_answers' : [1 , 2 , 3]     ,   'category' : 'Politics'     ,   'difficulty' : 4.5     ,   'image' : 'https://images.pexels.com/photos/76839/rose-red-flower-rose-bloom-76839.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260'     ,   'audio' : ''     ,
SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id <MID>     , T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  2.5 ORDER BY T1.overall_score DESC NULLS LAST;'
SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  2.5 ORDER BY T1.overall_score DESC NULLS LAST, T1.name ASC;'         , 'SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  2.5 ORDER BY T1.overall_score DESC NULLS LAST, T1.name ASC'     , ['T1.name' ,
SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T1.language_id ORDER BY COUNT(*) DESC LIMIT 3'         , 'SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T1.language_id ORDER BY COUNT(*) DESC LIMIT 3'     , 'SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T1.language_id ORDER BY COUNT(*) DESC LIMIT 3'     , 'SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id
SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T1.language_id ORDER BY COUNT(*) DESC LIMIT 3'         , 'SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T1.language_id ORDER BY COUNT(*) DESC LIMIT 3'     , 'SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T1.language_id ORDER BY COUNT(*) DESC LIMIT 3'     , ['T2.name' ,  'COUNT(*)']]      , [4 ,  'Which country has the highest overall score?
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 1'         , 'answer': 'English'     ,   'difficulty': 3     ,   'category': 'Data Representation'     ,   'subcategory': ''     ,   'active': True     ,   'codes': []     ,   'fixedCode': None     ,   'default_code': None     ,   'type': 'assessment'     ,   'isChanged': False     ,   'template': False     ,   'is_delete': False     ,   'is_add': False     ,   'is_original': True     ,   'filename': 'official_languages'
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 1'         , 'english'     , ['SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 1']     , ['SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 1']     , ['SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id HAVING count(*)  >=  2]'         , 'answer': 'english'     , 'difficulty': 1     , 'category': 'Data Representation'     , 'question': 'Which language is widely used as an official language?'     , 'type': 'single'     , 'tags': 'official languages'     , 'image': 'official_languages.png'     , 'latitude': ''     , 'longitude': ''     , 'author': 'elias'     , 'can_download': False     , 'is_multi_choice': True     , 'choices': ['english', 'french', 'spanish',
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id HAVING count(*)  >=  2'         , 'SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id'     , 'SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id HAVING count(*)  >  1'     , 'SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id HAVING count(*)  =  2'     , 'SELECT
SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  'English' <MID>     , justice_score real NOT NULL DEFAULT 0.000000e+00     , health_score real NOT NULL DEFAULT 0.000000e+00     , education_score real NOT NULL DEFAULT 0.000000e+00     , economics_score real NOT NULL DEFAULT 0.000000e+00     , politics_score real NOT NULL DEFAULT 0.000000e+00
SELECT avg(t1.overall_score) FROM countries AS t1 JOIN official_languages AS t2 ON t1.id  =  t2.country_id JOIN languages AS t3 ON t2.language_id  =  t3.id WHERE t3.name  =  'English' <MID>     , justice_score real NOT NULL DEFAULT 0.5     , health_score real NOT NULL DEFAULT 0.5     , education_score real NOT NULL DEFAULT 0.5     , economics_score real NOT NULL DEFAULT 0.5     , politics_score real NOT NULL DEFAULT 0.5'     , OFFICIAL_LANGUAGES 'language_id integer NOT NULL REFERENCES languages(id) , country_id integer NOT NULL REFERENCES countries(id)'     , LANGUAGES 'id IN
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 3'         , 'answer': 'English	German	Spanish'     , 'difficulty': 2     , 'category': 'Data Representation'     , 'image': 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/ISO_Flags.png/1280px-ISO_Flags.png'     , 'subcategory': 'Country'     , 'minimum_rank': None     , 'maximum_rank': 10     , 'learning_objectives': 'Use SELECT to extract data from a database. Use WHERE and GROUP BY to select and aggregate data. Use ORDER BY to sort data.'
SELECT T1.name FROM Languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 3'         , answers: ['English', 'French', 'Spanish'], correctAnswer: 0},
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id GROUP BY T2.language_id ORDER BY avg(T3.overall_score) DESC'         , 'SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id GROUP BY T2.language_id ORDER BY avg(T3.overall_score) DESC'     , ['SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id GROUP BY T2.language_id ORDER BY avg(T3.overall_score) DESC'         , 'english' : 'English'         , 'french' : 'French'         , 'spanish' : 'Spanish'     , }
SELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T2.country_id ORDER BY count(*) DESC LIMIT 1'         , 'answer': 'Germany'     ,   'difficulty': 3     ,   'category': 'Data Modeling'     ,   'question_type': 'Geography'     ,   'image': '/static/images/countries.png'     ,   'latitude': 51.0     ,   'longitude': 9.7     ,   'author': 'Kenneth Loibl'     ,   'version': '1.0'     ,   'changelog': 'Created dataset'     ,   'depends_on': {'0': 'None'}     ,   'supp
SELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T2.country_id ORDER BY count(*) DESC LIMIT 1'         , 'country_name': 'United Kingdom'     ,   'justice_score': 5     ,   'economics_score': 6     ,   'education_score': 4     ,   'health_score': 3     ,   'politics_score': 4     ,   'overall_score': 2.5     ,   'id': 78     ,   'name': 'United Kingdom'     ,   'languages': ['English']     ,   'country_id': 78     ,   'language_id': 1     ,   'T
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages) <MID>_score FROM countries ORDER BY overall_score DESC LIMIT 3'     , 'SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages)'     , 'SELECT name FROM languages EXCEPT SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages)'     , 'SELECT name FROM countries ORDER BY overall_score ASC LIMIT 3'     , 'SELECT name FROM countries ORDER BY overall_score DESC LIMIT 3'     , 'SELECT name FROM countries ORDER BY justice_score DESC LIMIT 3'     , 'SELECT name FROM countries ORDER BY health_score DESC LIMIT 3'     , 'SELECT name FROM countries ORDER BY education_score DESC LIMIT 3'     , 'SELECT name FROM countries ORDER BY economics_score DESC LIMIT 3'     , 'SELECT name
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages) <MID>_score FROM countries ORDER BY overall_score DESC LIMIT 3'     , 'SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages)'     , 'SELECT name FROM languages EXCEPT SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages)'     , 'SELECT name FROM countries ORDER BY overall_score ASC LIMIT 3'     , 'SELECT name FROM countries ORDER BY overall_score DESC LIMIT 3'     , 'SELECT name FROM countries ORDER BY justice_score ASC LIMIT 3'     , 'SELECT name FROM countries ORDER BY health_score ASC LIMIT 3'     , 'SELECT name FROM countries ORDER BY education_score ASC LIMIT 3'     , 'SELECT name FROM countries ORDER BY economics_score ASC LIMIT 3'     , 'SELECT name
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages) <MID> languages that are used as an official language in at least one country. The query result format is shown below:  SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages) ORDER BY name ASC'     , 'SELECT name FROM languages EXCEPT SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages)'     , 'SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)'     , 'SELECT name FROM languages EXCEPT SELECT name FROM languages'     , 'SELECT name FROM languages EXCEPT (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages))'     , 'SELECT name FROM languages EXCEPT SELECT name FROM languages EXCEPT (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_l
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages) <MID> languages that are used as an official language in some country. [SQL] SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages) UNION SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages) ORDER BY name ASC'     , 'SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)'     , 'SELECT name FROM languages EXCEPT SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages)'     , 'SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages) ORDER BY name ASC'     , 'SELECT name FROM languages EXCEPT SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages) ORDER BY name ASC'     ,
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  >  95 INTERSECT SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  <  90'         , 'SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  >  9
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  >  95 INTERSECT SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  <  90'         , 'SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  >  9
SELECT country ,  town_city FROM addresses WHERE county_state_province != 'NULL' AND zip_postcode != '0' ORDER BY country ASC ,  town_city ASC <MID>_categories AS T1 JOIN users AS T2 ON T1.age_category_code  =  T2.age_category_code JOIN Ref_user_categories AS T3 ON T2.user_category_code  =  T3.user_category_code JOIN Addresses AS T4 ON T2.user_address_id  =  T4.address_id WHERE T3.user_category_description  =  'Buyer' UNION SELECT DISTINCT T4.country FROM addresses AS T4 JOIN Ref_age_categories AS T1 JOIN users AS T2 ON T1.age_category_code  =  T2.age_category_code JOIN Ref_user_categories AS T3 ON T2.
SELECT T1.country ,  T1.town_city FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 10' , 'SELECT T1.country ,  T1.town_city FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 10' ] , [ 'SELECT T1.country ,  T1.town_city FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 10' ] , [ 'SELECT T1.country ,  T1.
SELECT T1.county_state_province FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id GROUP BY T1.county_state_province ORDER BY count(*) DESC LIMIT 1; SELECT T1.county_state_province FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T1.county_state_province  =  (SELECT T1.county_state_province FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id GROUP BY T1.county_state_province ORDER BY count(*) DESC LIMIT 1) ORDER BY count(*) ASC; SELECT T1.county_state_province FROM addresses AS T1 JOIN properties AS T
SELECT T1.county_state_province FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id GROUP BY T1.county_state_province ORDER BY T1.county_state_province ASC'         ,'SELECT T1.county_state_province FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id GROUP BY T1.county_state_province ORDER BY T1.county_state_province ASC'     ,'SELECT DISTINCT county_state_province FROM addresses'     ,'SELECT DISTINCT county_state_province FROM addresses GROUP BY county_state_province ORDER BY county_state_province ASC'      ,'SELECT DISTINCT room_type_code FROM Ref
SELECT feature_description FROM FEATURES WHERE feature_name  =  'rooftop' <MID>_category_description FROM Ref_Age_Categories WHERE age_category_code  =  T1.age_category_code) AS age_category_description , (SELECT user_category_description FROM Ref_User_Categories WHERE user_category_code  =  T1.user_category_code) AS user_category_description FROM Users AS T1 JOIN Addresses AS T2 ON T1.user_address_id  =  T2.address_id WHERE T1.login_name  =  'johnny44@gmail.com' AND T1.password  =  '1234' AND T1.is_buyer  =  '1' AND T1.is_seller  =  '1' ORDER BY T1.date_registered DESC
SELECT feature_description FROM FEATURES WHERE feature_name  =  'rooftop' <MID>_category_description FROM Ref_Age_Categories WHERE age_category_code  =  T1.age_category_code) AS user_age_category , (SELECT user_category_description FROM Ref_User_Categories WHERE user_category_code  =  T1.user_category_code) AS user_category FROM USERS AS T1 JOIN Addresses AS T2 ON T1.user_address_id  =  T2.address_id WHERE login_name  =  'johnny44@gmail.com' AND password  =  '1234' AND is_buyer  =  '1' AND is_seller  =  '1' UNION SELECT T3.property_name ,  T3.date_on_market ,  T3.
SELECT T1.feature_name ,  T1.feature_description FROM FEATURES AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ,  T1.feature_description ORDER BY count(*) DESC LIMIT 1; <MID>_category_code` VARCHAR(15) NOT NULL,
SELECT T1.feature_name ,  T1.feature_description FROM FEATURES AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T2.feature_id ORDER BY count(*) DESC LIMIT 1' , 'task4': 'SELECT T1.feature_name ,  T1.feature_description FROM FEATURES AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id WHERE T2.feature_value  =  (SELECT max(T2.feature_value) FROM Property_Features AS T2 JOIN Features AS T1 ON T1.feature_id  =  T2.feature_id)', 'task5': 'SELECT T1.feature_name ,  T1.feature_description FROM FEATURES AS
SELECT min(room_size) FROM Rooms WHERE room_type_code  =  'Single Room' UNION SELECT min(room_size) FROM Rooms WHERE room_type_code  =  'Double Room' UNION SELECT min(room_size) FROM Rooms WHERE room_type_code  =  'Suite' UNION SELECT min(room_size) FROM Rooms WHERE room_type_code  =  'Studio' UNION SELECT min(room_size) FROM Rooms WHERE room_type_code  =  'Triple Room' UNION SELECT min(room_size) FROM Rooms WHERE room_type_code  =  'Quadruple Room' UNION SELECT min(room_size) FROM Rooms WHERE room_type_code  =  'Five Room' UNION SELECT min(room_size) FROM Rooms WHERE room_type_code  =  'Six Room' UNION SELECT min(
SELECT min(room_count) FROM ROOMS WHERE room_count  >  0' , 'SELECT min(room_count) FROM ROOMS' ] , [ 'SELECT max(room_count) FROM ROOMS' ] , [ 'SELECT count(*) FROM ROOMS' ] , [ 'SELECT count(DISTINCT property_id) FROM ROOMS' ] , [ 'SELECT count(DISTINCT feature_id) FROM Property_Features' ] , [ 'SELECT count(DISTINCT photo_id) FROM Property_Photos' ] , [ 'SELECT count(DISTINCT user_id) FROM Users' ] , [ 'SELECT count(DISTINCT property_id) FROM Properties' ] ]
SELECT count(*) FROM Properties WHERE parking_lots  =  '1' OR garage_yn  =  '1' AND price_min != -1 AND price_max != -1 UNION SELECT count(*) FROM Properties WHERE price_min == -1 OR price_max  =  -1 AND price_min != -1 AND price_max != -1' , ['SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1 AND price_min != -1 AND price_max != -1 UNION SELECT count(*) FROM Properties WHERE price_min == -1 OR price_max  =  -1 AND price_min != -1 AND price_max != -1']]
SELECT count(*) FROM Properties WHERE parking_lots  =  '1' OR garage_yn  =  '1' GROUP BY property_type_code HAVING count(*)  =  1 UNION SELECT count(*) FROM Properties WHERE parking_lots  =  '1' OR garage_yn  =  '1' GROUP BY property_type_code HAVING count(*)  =  2 UNION SELECT count(*) FROM Properties WHERE parking_lots  =  '1' OR garage_yn  =  '1' GROUP BY property_type_code HAVING count(*)  =  3 UNION SELECT count(*) FROM Properties WHERE parking_lots  =  '1' OR garage_yn  =  '1' GROUP BY property_type_code HAVING count(*)  =  4 UNION SELECT count(*) FROM Properties WHERE parking_lots  =  '1' OR garage
SELECT age_category_code FROM USERS WHERE user_category_code  =  'Buyer' AND middle_name LIKE '%Mother%' <MID>_category_code FROM USERS WHERE user_category_code  =  'Buyer' AND middle_name LIKE '%Mother%' UNION SELECT age_category_code FROM USERS WHERE user_category_code  =  'Seller' AND middle_name LIKE '%Mother%'') AS T1 JOIN Ref_Age_Categories AS T2 ON T1.age_category_code  =  T2.age_category_code GROUP BY T2.age_category_description HAVING COUNT(*)  >  500'     ,'SELECT T2.age_category_description FROM (SELECT age_category_code FROM USERS WHERE user_category_code  =  'Buyer' AND middle_name LIKE '%Mother%' UNION SELECT age_
SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%' <MID>_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%' UNION SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Father%' UNION SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Daughter%' UNION SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Son%' UNION SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Wife%' UNION SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Husband%' UNION SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Daughter-
SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1' , 'SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1' ] , [ 'SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1' , 'SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_
SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1'         ,'answer': 'Jill'}]     ,'task4': [{'question': 'Return the names of all the rooms in Property 1234567890.', 'sql': 'SELECT T2.room_type_code ,  T2.room_number ,  T2.room_size FROM Properties AS T1 JOIN Rooms AS T2 ON T1.property_id  =  T2.property_id WHERE T1.property_id  =  1234567890'}]     ,'task5': [{'question': 'Return the names of all the features that apply to Property
SELECT avg(room_count) FROM Rooms WHERE room_type_code  =  'Garden' IF room_count  =  0 THEN NULL ELSE room_count END FROM ROOMS GROUP BY room_type_code HAVING room_type_code  =  'Garden' <MID>_category_description FROM Ref_Age_Categories ORDER BY age_category_code ASC',
SELECT avg(T2.room_count) FROM Property_Features AS T1 JOIN Rooms AS T2 ON T1.property_id  =  T2.property_id WHERE T1.feature_id  =  1 GROUP BY T1.property_id ORDER BY count(*) DESC LIMIT 1 OFFSET 0; SELECT avg(T2.room_count) FROM Property_Features AS T1 JOIN Rooms AS T2 ON T1.property_id  =  T2.property_id WHERE T1.feature_id  =  1 GROUP BY T1.property_id ORDER BY count(*) DESC LIMIT 1 OFFSET 1; SELECT avg(T2.room_count) FROM Property_Features AS T1 JOIN Rooms AS T2 ON T1.property_id  =  T2.property_id WHERE T1.feature_id  =  1
SELECT DISTINCT T1.town_city FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.parking_lots LIKE '%swimming pool%' OR T2.parking_lots LIKE '%hot tub%' OR T2.parking_lots LIKE '%spa%' OR T2.parking_lots LIKE '%sauna%' OR T2.parking_lots LIKE '%jacuzzi%' OR T2.parking_lots LIKE '%whirlpool%' OR T2.parking_lots LIKE '%water slide%' OR T2.parking_lots LIKE '%kids pool%' OR T2.parking_lots LIKE '%playground%' OR T2.parking_lots LIKE '%amusement park%' OR T2.parking_lots LIKE '%water feature%' OR T
SELECT T1.town_city FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id JOIN Property_Features AS T3 ON T2.property_id  =  T3.property_id JOIN Features AS T4 ON T3.feature_id  =  T4.feature_id WHERE T4.feature_name  =  'Swimming Pool' GROUP BY T1.town_city HAVING count(*)  >  0 UNION SELECT 'All Cities' FROM DUAL'     , ['SELECT T1.town_city FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id JOIN Property_Features AS T3 ON T2.property_id  =  T3.property_id JOIN Features AS T4 ON T3.feature
SELECT property_id ,  vendor_requested_price FROM PROPERTIES ORDER BY vendor_requested_price ASC LIMIT 1; SELECT property_id ,  price_min FROM PROPERTIES ORDER BY price_min ASC LIMIT 1; SELECT property_id ,  price_max FROM PROPERTIES ORDER BY price_max DESC LIMIT 1; SELECT property_id ,  price_min FROM PROPERTIES ORDER BY price_min ASC LIMIT 1; SELECT property_id ,  price_max FROM PROPERTIES ORDER BY price_max DESC LIMIT 1; SELECT property_id ,  price_min FROM PROPERTIES ORDER BY price_min ASC LIMIT 1; SELECT property_id ,  price_max FROM PROPERTIES ORDER BY price_max DESC LIMIT 1; SELECT property_id ,  price_min FROM PROPERTIES ORDER BY price_min ASC LIMIT 1; SELECT property
SELECT property_id ,  vendor_requested_price FROM PROPERTIES ORDER BY vendor_requested_price ASC LIMIT 1' , 'SELECT property_id ,  vendor_requested_price FROM PROPERTIES ORDER BY vendor_requested_price ASC LIMIT 1' ] , [ 'SELECT count(*) FROM properties' , 'SELECT count(*) FROM properties' ] , [ 'SELECT count(*) FROM users' , 'SELECT count(*) FROM users' ] , [ 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' ] , [ 'SELECT count(*) FROM features' , 'SELECT count(*) FROM features' ] , [ 'SELECT count(*) FROM property_features' , 'SELECT count(*) FROM property_features' ] , [ 'SELECT count(*) FROM property_photos' , 'SELECT count(*) FROM property_photos' ] , [ 'SELECT count(*) FROM rooms' , '
SELECT avg(room_count) FROM properties WHERE room_count != 'null' AND room_count != '' AND room_count != 0;  SELECT count(*) FROM ROOMS;  SELECT count(*) FROM properties;  SELECT count(*) FROM Ref_age_categories;  SELECT count(*) FROM Ref_property_types;  SELECT count(*) FROM Ref_room_types;  SELECT count(*) FROM Ref_user_categories;  SELECT count(*) FROM addresses;  SELECT count(*) FROM features;  SELECT count(*) FROM users;  SELECT count(*) FROM property_features;  SELECT count(*) FROM property_photos;  SELECT count(*) FROM user_property_history;  SELECT count(*) FROM user_searches;  SELECT count(*) FROM rooms;  SELECT count(*) FROM properties;  SELECT count(*) FROM Ref_age_categories;  SELECT count(*) FROM Ref_property_types;  SELECT count(*) FROM Ref_room_types;
SELECT avg(room_count) FROM Properties WHERE room_count != 'null' AND room_count != '' AND room_count != 0 GROUP BY property_type_code HAVING count(*) > 10000 UNION SELECT avg(room_count) FROM Properties WHERE room_count != 'null' AND room_count != '' AND room_count != 0 GROUP BY property_type_code HAVING count(*) <= 10000; SELECT avg(room_count) FROM Properties WHERE room_count != 'null' AND room_count != '' AND room_count != 0; SELECT avg(room_count) FROM Properties WHERE room_count != 'null' AND room_count != '' AND room_count != 0 GROUP BY property_type_code HAVING count(*) > 10000 UNION SELECT avg(room_count) FROM Properties WHERE room_count !=
SELECT count(DISTINCT room_size) FROM Rooms WHERE room_size IS NOT NULL GROUP BY room_size ORDER BY count(*) DESC LIMIT 1 OFFSET 0' , '4']]
SELECT count(DISTINCT room_size) FROM Rooms WHERE room_type_code  =  'Master Bedroom' AND property_id IN ( SELECT property_id FROM Properties WHERE date_off_market  =  '0000-00-00 00:00:00' ) ORDER BY room_size DESC LIMIT 1 OFFSET 0;[/SQL] SELECT count(DISTINCT room_size) FROM Rooms WHERE room_type_code  =  'Guest Room' AND property_id IN ( SELECT property_id FROM Properties WHERE date_off_market  =  '0000-00-00 00:00:00' ) ORDER BY room_size DESC LIMIT 1 OFFSET 0;[/SQL] SELECT count(DISTINCT room_size) FROM Rooms WHERE room_type_code  =
SELECT T1.login_name ,  T1.first_name ,  T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T2.search_seq  >=  2; SELECT T2.search_string FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T2.search_seq  >=  2;' , 'SELECT T2.search_string FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T2.search_seq  >=  2;' ] , [ 'SELECT T2.search_string FROM Users AS T1 JOIN User_Searches AS T2 ON T
SELECT user_id ,  search_seq FROM User_Searches GROUP BY user_id HAVING count(*)  >=  2 ORDER BY search_seq DESC LIMIT 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT max(search_datetime) FROM User_Searches WHERE search_string IS NOT NULL' , 'SELECT max(search_datetime) FROM User_Searches WHERE search_string IS NOT NULL' ] , [ 'SELECT count(*) FROM properties' , 'SELECT count(*) FROM properties' ] , [ 'SELECT count(*) FROM users' , 'SELECT count(*) FROM users' ] , [ 'SELECT count(*) FROM addresses' , 'SELECT count(*) FROM addresses' ] , [ 'SELECT count(*) FROM features' , 'SELECT count(*) FROM features' ] , [ 'SELECT count(*) FROM property_features' , 'SELECT count(*) FROM property_features' ] , [ 'SELECT count(*) FROM property_photos' , 'SELECT count(*) FROM property_photos' ] , [ 'SELECT count(*) FROM rooms' , 'SELECT count(*) FROM rooms' ] , [ 'SELECT count(*) FROM user_property_history
SELECT max(search_datetime) FROM User_Searches <MID>_category_description FROM Ref_Age_Categories WHERE age_category_code  =  T1.age_category_code UNION SELECT user_category_description FROM Ref_User_Categories WHERE user_category_code  =  T1.user_category_code) AS demographic_info FROM Users AS T1 JOIN Addresses AS T2 ON T1.user_address_id  =  T2.address_id WHERE login_name  =  'demographic' GROUP BY login_name HAVING count(*)  >=  2) AS T2 ON T1.login_name  =  T2.login_name ORDER BY T1.date_registered DESC LIMIT 1; SELECT * FROM Properties WHERE property_id  =  (SELECT property_id FROM User_Property_History WHERE datestamp  =  (SELECT max(datestamp
SELECT T1.search_datetime ,  T1.search_string FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id ORDER BY T1.search_string DESC'         , 'SELECT T1.search_datetime ,  T1.search_string FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id ORDER BY T1.search_string DESC'     , ['SELECT T1.search_datetime ,  T1.search_string FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id ORDER BY T1.search_string DESC']     , ['SELECT T1.search_datetime ,  T1.search_string FROM User_Searches AS T1 JOIN Users AS
SELECT search_string ,  search_datetime FROM User_Searches ORDER BY search_string DESC'     ,   'SELECT search_string ,  search_datetime FROM User_Searches ORDER BY search_string DESC'     ,   ['SELECT search_string ,  search_datetime FROM User_Searches ORDER BY search_string DESC']     ,   ['SELECT search_string ,  search_datetime FROM User_Searches ORDER BY search_string DESC']     ,   ['SELECT search_string ,  search_datetime FROM User_Searches ORDER BY search_string DESC']     ,   ['SELECT search_string ,  search_datetime FROM User_Searches ORDER BY search_string DESC']     ,   ['SELECT search_string ,  search_datetime FROM User_Searches ORDER BY search_string DESC']     ,   ['SELECT search_string ,  search_datetime FROM User
SELECT T1.zip_postcode FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE property_id NOT IN ( SELECT T3.property_id FROM properties AS T3 JOIN users AS T4 ON T3.owner_user_id  =  T4.user_id GROUP BY T4.user_id HAVING count(*)  <=  2 ) <MID>_category_code` VARCHAR(15) NOT NULL,
SELECT T1.zip_postcode FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.property_id NOT IN ( SELECT T3.property_id FROM properties AS T3 JOIN users AS T4 ON T3.owner_user_id  =  T4.user_id GROUP BY T4.user_id HAVING count(*)  <=  2 )'         ,'SELECT T1.zip_postcode FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.property_id NOT IN ( SELECT T3.property_id FROM properties AS T3 JOIN users AS T4 ON T3.owner_user_id  =  T4.user_id GROUP BY T4.user_id HAVING count(*)  <=
SELECT T1.user_category_code ,  T1.user_id FROM Ref_User_Categories AS T1 JOIN User_Searches AS T2 ON T1.user_category_code  =  T2.user_id GROUP BY T1.user_category_code HAVING count(*)  =  1' , 'SELECT T1.user_category_code ,  T1.user_id FROM Ref_User_Categories AS T1 JOIN User_Searches AS T2 ON T1.user_category_code  =  T2.user_id GROUP BY T1.user_category_code HAVING count(*)  =  1' ] , [ 'SELECT T1.user_category_code ,  T1.user_id FROM Ref_User_Categories AS T1 JOIN User_Searches AS T2 ON T1.user_category_code  =
SELECT T1.user_id ,  T2.user_category_code FROM Users AS T1 JOIN Ref_User_Categories AS T2 ON T1.age_category_code  =  T2.age_category_code JOIN User_Searches AS T3 ON T1.user_id  =  T3.user_id GROUP BY T1.user_id HAVING count(*)  =  1' , 'SELECT T1.user_id ,  T2.user_category_code FROM Users AS T1 JOIN Ref_User_Categories AS T2 ON T1.age_category_code  =  T2.age_category_code JOIN User_Searches AS T3 ON T1.user_id  =  T3.user_id GROUP BY T1.user_id HAVING count(*)  =  1' ] , [ 'SELECT T3.
SELECT t2.age_category_description FROM Users AS t1 JOIN Ref_Age_Categories AS t2 ON t1.age_category_code  =  t2.age_category_code JOIN User_Searches AS t3 ON t1.user_id  =  t3.user_id ORDER BY t3.search_datetime LIMIT 1' , 'SELECT t2.age_category_description FROM Users AS t1 JOIN Ref_Age_Categories AS t2 ON t1.age_category_code  =  t2.age_category_code JOIN User_Searches AS t3 ON t1.user_id  =  t3.user_id ORDER BY t3.search_datetime LIMIT 1' ] , [ 'SELECT count(*) FROM Properties WHERE date_off_market  =  '9999-12-31' AND vendor_requested_
SELECT t3.age_category_code FROM users AS t1 JOIN User_Searches AS t2 ON t1.user_id  =  t2.user_id JOIN Ref_Age_Categories AS t3 ON t1.age_category_code  =  t3.age_category_code ORDER BY t2.search_datetime LIMIT 1'         ,'SELECT t3.age_category_code FROM users AS t1 JOIN User_Searches AS t2 ON t1.user_id  =  t2.user_id JOIN Ref_Age_Categories AS t3 ON t1.age_category_code  =  t3.age_category_code ORDER BY t2.search_datetime LIMIT 1'     ,'SELECT t3.age_category_code FROM users AS t1 JOIN User_Searches AS t2 ON t1.user_id  =
SELECT T1.login_name FROM USERS AS T1 JOIN ADDRESSES AS T2 ON T1.user_address_id  =  T2.address_id WHERE T1.age_category_code  =  'Senior' ORDER BY T1.first_name ASC;[]]'     ,     ,     ,                ,     ,     ,                ,     ,     ,                ,     ,     ,                ,     ,     ,                ,     ,     ,                ,     ,     ,                ,     ,     ,                ,     ,     ,                ,     ,     ,
SELECT T1.login_name FROM Users AS T1 JOIN Ref_Age_Categories AS T2 ON T1.age_category_code  =  T2.age_category_code WHERE T2.age_category_description  =  'Senior Citizen' ORDER BY T1.first_name ASC;[]] SELECT T1.login_name FROM USERS AS T1 JOIN Ref_Age_Categories AS T2 ON T1.age_category_code  =  T2.age_category_code WHERE T2.age_category_description  =  'Senior Citizen' ORDER BY T1.first_name ASC;[]] SELECT T1.login_name FROM USERS AS T1 JOIN Ref_Age_Categories AS T2 ON T1.age_category_code  =  T2.age_category_code WHERE T2.age_category_description
SELECT count(*) FROM users AS T1 JOIN user_searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1' , 'SELECT count(*) FROM users AS T1 JOIN user_searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1' ] , [ 'SELECT count(*) FROM users AS T1 JOIN user_searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_seller  =  1' , 'SELECT count(*) FROM users AS T1 JOIN user_searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_seller  =  1' ] , [ 'SELECT count(*) FROM user
SELECT count(*) FROM users AS T1 JOIN user_searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;[/SQL] SELECT count(*) FROM user_searches WHERE search_string LIKE '%buyer%' ;[/TASK] SELECT count(*) FROM user_searches WHERE search_string LIKE '%seller%' ;[/TASK] SELECT count(*) FROM user_searches WHERE search_string LIKE '%rooms%' ;[/TASK] SELECT count(*) FROM user_searches WHERE search_string LIKE '%property%' ;[/TASK] SELECT count(*) FROM user_searches WHERE search_string LIKE '%features%' ;[/TASK] SELECT count(*) FROM user_searches WHERE search_string LIKE '%photo%' ;[/TASK] SELECT count(*) FROM user_searches WHERE search_
SELECT date_registered FROM Users WHERE login_name  =  'ratione' <MID>_id` ) REFERENCES `Addresses`(`address_id` )
SELECT date_registered FROM USERS WHERE login_name  =  'ratione' <MID>_category_code` VARCHAR(15) NOT NULL,
SELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE is_seller  =  1 UNION SELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE is_buyer  =  1 EXCEPT SELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE is_seller  =  1 AND vendor_requested_price  >  150000 UNION SELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE is_buyer  =  1 AND vendor_requested_price  >  150000 UNION SELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE is_seller  =  1 AND vendor_requested_price
SELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE is_seller  =  1 UNION SELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE is_buyer  =  1 EXCEPT SELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE user_category_code  =  'Administrator' UNION SELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE user_category_code  =  'Guest' UNION SELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE user_category_code  =  'Unregistered' UNION SELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE user
SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T2.town_city FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.age_category_code  =  'Senior Citizen' GROUP BY T2.property_address_id HAVING count(*)  >  100 ORDER BY sum(T1.line_1_number_building) DESC LIMIT 10; <MID>_category_code FROM Users GROUP BY user_category_code ORDER BY count(*) DESC LIMIT 1;',
SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.age_category_code  =  60 GROUP BY T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city HAVING count(*)  >  100' , 'SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.age_category_code  =  60 GROUP BY T1.
SELECT count(*) FROM Property_Features GROUP BY property_id HAVING count(*)  >=  2' , 'SELECT count(*) FROM Property_Features GROUP BY property_id HAVING count(*)  >=  2' ] , [ 'SELECT count(*) FROM Properties WHERE date_off_market  =  '9999-12-31' AND vendor_requested_price  >  1000' , 'SELECT count(*) FROM Properties WHERE date_off_market  =  '9999-12-31' AND vendor_requested_price  >  1000' ] , [ 'SELECT count(*) FROM Properties WHERE date_off_market  =  '9999-12-31' AND price_min  <  1000' , 'SELECT count(*) FROM Properties WHERE date_off_market  =  '99
SELECT count(*) FROM Property_Features GROUP BY property_id HAVING count(*)  >=  2'         ,'SELECT count(*) FROM Property_Features GROUP BY property_id HAVING count(*)  >=  2'     ,'SELECT count(*) FROM Properties WHERE property_type_code  =  'Buyer''         ,'SELECT count(*) FROM Properties WHERE property_type_code  =  'Buyer'')
SELECT T2.photo_filename ,  COUNT(*) FROM properties AS T1 JOIN property_photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id ORDER BY COUNT(*) DESC LIMIT 10' , 'SELECT T2.photo_filename ,  COUNT(*) FROM properties AS T1 JOIN property_photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id ORDER BY COUNT(*) DESC LIMIT 10' ] , [ 'SELECT T1.property_id ,  SUM(T2.photo_filename) FROM properties AS T1 JOIN property_photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id' , 'SELECT T2.photo_filename ,  COUNT(*) FROM properties AS T1 JOIN property
SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id ORDER BY count(*) DESC LIMIT 100;'         , 'SELECT T1.property_id ,  T1.photo_title FROM Property_Photos AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY count(*) DESC LIMIT 100;'     , 'SELECT T1.property_id ,  T1.photo_title FROM Property_Photos AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id WHERE T2.property_name LIKE '%Florida%' ORDER BY count(*) DESC LIMIT 100;'     , 'SELECT T1.property_id ,  T1.photo_title FROM Property_Photos AS T1 JOIN Properties AS T2 ON T1.property
SELECT T1.user_id ,  count(*) FROM users AS T1 JOIN property_photos AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 10' , 'answer': 'SELECT T1.user_id ,  count(*) FROM users AS T1 JOIN property_photos AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 10'}]
SELECT T1.user_id ,  COUNT(*) FROM users AS T1 JOIN property_photos AS T2 ON T1.user_id  =  T2.property_id GROUP BY T1.user_id HAVING COUNT(*)  >  0 ORDER BY COUNT(*) DESC LIMIT 10' , 'SELECT T1.user_id ,  COUNT(*) FROM users AS T1 JOIN property_photos AS T2 ON T1.user_id  =  T2.property_id GROUP BY T1.user_id' ] , [ 'SELECT T1.user_id ,  COUNT(*) FROM users AS T1 JOIN property_photos AS T2 ON T1.user_id  =  T2.property_id GROUP BY T1.user_id ORDER BY COUNT(*) DESC LIMIT 10' ] , [ 'SELECT T1.user_id ,  COUNT(*) FROM users
SELECT sum(vendor_requested_price) FROM users AS T1 JOIN properties AS T2 ON T1.user_id  =  T2.owner_user_id WHERE T1.user_category_code  =  'Single Mother' OR T1.user_category_code  =  'Student' <MID>_category_code FROM users GROUP BY age_category_code ORDER BY count(*) DESC LIMIT 1;',
SELECT max(vendor_requested_price) FROM users AS T1 JOIN properties AS T2 ON T1.user_id  =  T2.owner_user_id WHERE T1.age_category_code  =  'Single Mother' OR T1.user_category_code  =  'Student' <MID>_category_code FROM users GROUP BY age_category_code ORDER BY count(*) DESC LIMIT 1;',
SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY T1.datestamp ASC' , 'SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY T1.datestamp ASC' ] , [ 'SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY T1.datestamp DESC' , 'SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1
SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY T1.datestamp ASC;[]]'     ,   'answer': 'SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY T1.datestamp ASC;'     ,   'choices': [],     ,   'correct': True ,     ,   'difficulty': 'Hard' ,     ,   'image': '/static/images/task4.png' ,     ,   'meta_info': 'None' ,     ,   'subtasks': []     ,   'subtask_index':
SELECT t2.property_type_description ,  t1.property_type_code FROM properties AS t1 JOIN ref_property_types AS t2 ON t1.property_type_code  =  t2.property_type_code GROUP BY t1.property_type_code ORDER BY count(*) DESC LIMIT 1 <MID>_category_code FROM users GROUP BY age_category_code ORDER BY count(*) DESC LIMIT 1'     , 'SELECT user_category_description FROM ref_user_categories GROUP BY user_category_code ORDER BY count(*) DESC LIMIT 1'     , 'SELECT room_type_description FROM ref_room_types GROUP BY room_type_code ORDER BY count(*) DESC LIMIT 1'     , 'SELECT property_type_description FROM ref_property_types GROUP BY property_type_code ORDER BY count(*) DESC LIMIT 1'     , 'SELECT photo_description FROM property
SELECT t2.property_type_description FROM properties AS t1 JOIN ref_property_types AS t2 ON t1.property_type_code  =  t2.property_type_code GROUP BY t1.property_type_code ORDER BY count(*) DESC LIMIT 1' , 'SELECT t2.property_type_description FROM properties AS t1 JOIN ref_property_types AS t2 ON t1.property_type_code  =  t2.property_type_code GROUP BY t1.property_type_code ORDER BY count(*) DESC LIMIT 1' ] , [ 'SELECT t2.property_type_description FROM properties AS t1 JOIN ref_property_types AS t2 ON t1.property_type_code  =  t2.property_type_code GROUP BY t1.property_type_code ORDER BY count(*) DESC LIMIT 1' ] , [ 'SELECT
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60' <MID>_category_code FROM Ref_User_Categories WHERE user_category_code  =  'Buyer' UNION SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_code  =  '45-64' UNION SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_code  =  'Under 30' UNION SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_code  =  '35-44' UNION SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60' UNION SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_code  =  'Seller' UNION SELECT
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60' <MID>_category_code FROM Users WHERE user_category_code  =  'Buyer' GROUP BY age_category_code ORDER BY count(*) DESC LIMIT 1'     ,'SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  (SELECT age_category_code FROM Users WHERE user_category_code  =  'Buyer' GROUP BY age_category_code ORDER BY count(*) DESC LIMIT 1)'     ,'SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  (SELECT age_category_code FROM Users WHERE user_category_code  =  'Seller' GROUP BY age_category_code ORDER BY count(*) DESC LIMIT 1)'     ,'SELECT age_category
SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size ORDER BY count(*) DESC LIMIT 1; SELECT sum(count(*)) FROM Rooms; SELECT room_size FROM ROOMS GROUP BY room_size ORDER BY count(*) DESC LIMIT 1; SELECT count(*) FROM ROOMS; SELECT count(*) FROM ROOMS WHERE room_size  =  4; SELECT count(*) FROM ROOMS WHERE room_size  =  6; SELECT count(*) FROM ROOMS WHERE room_size  =  8; SELECT count(*) FROM ROOMS WHERE room_size  =  10; SELECT count(*) FROM ROOMS WHERE room_size  =  12; SELECT count(*) FROM ROOMS WHERE room_size  =  14; SELECT count(*) FROM ROOMS WHERE room_size  =  16; SELECT count(*) FROM ROOMS WHERE room_size  =  18; SELECT count
SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size ORDER BY count(*) DESC LIMIT 10;' , 'SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size ORDER BY count(*) DESC LIMIT 10;' , ['SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size ORDER BY count(*) DESC LIMIT 10;'] , ['SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size ORDER BY count(*) DESC LIMIT 10;'] , ['SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size ORDER BY count(*) DESC LIMIT 10;'] , ['SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size ORDER BY count(*) DESC LIMIT 10;'] , ['SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size ORDER BY count(*)
SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie' AND T2.last_name  =  'Harrison' AND T2.is_buyer  =  'Y' AND T2.is_seller  =  'Y' AND T2.age_category_code  =  'Adult' AND T2.user_category_code  =  'PotentialBuyer' AND T2.login_name  =  'robharr45' AND T2.password  =  'password' AND T2.date_registered  =  '2018-07-15 10:46:59' AND T2.vendor_requested_price  =  12
SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie' <MID>_category_code` VARCHAR(15) NOT NULL,
SELECT T2.first_name ,  T2.middle_name ,  T2.last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.age_category_code  =  (SELECT age_category_code FROM ADDRESSES AS T3 JOIN Properties AS T4 ON T3.address_id  =  T4.property_address_id WHERE T3.line_1_number_building  =  T1.property_address_id) AND T1.property_name  =  (SELECT property_name FROM ADDRESSES AS T3 JOIN Properties AS T4 ON T3.address_id  =  T4.property_address_id WHERE T3.line_1_number_building  =  T1.property_address_id) AND T1.property_description
SELECT T3.first_name ,  T3.last_name FROM Properties AS T1 JOIN user_property_history AS T2 ON T1.property_id  =  T2.property_id JOIN Users AS T3 ON T2.user_id  =  T3.user_id WHERE T3.age_category_code  =  'Adult' AND T1.owner_user_id  =  T2.user_id; SELECT T3.first_name ,  T3.last_name FROM Properties AS T1 JOIN user_property_history AS T2 ON T1.property_id  =  T2.property_id JOIN Users AS T3 ON T2.user_id  =  T3.user_id WHERE T3.age_category_code  =  'Adult' AND T1.owner_user_id  =  T2.user_
SELECT T1.search_string FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id WHERE T2.user_category_code  =  'Buyer' EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id'     ,   'SELECT T1.search_string FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id WHERE T2.user_category_code  =  'Seller' EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id'     ,   '
SELECT search_string FROM user_searches WHERE user_id NOT IN (SELECT user_id FROM user_property_history) ORDER BY search_datetime ASC'         ,'SELECT search_string FROM user_searches WHERE user_id NOT IN (SELECT user_id FROM user_property_history) ORDER BY search_datetime ASC'         ,'SELECT search_string FROM user_searches WHERE user_id NOT IN (SELECT user_id FROM user_property_history) ORDER BY search_datetime ASC'     ,'SELECT search_string FROM user_searches WHERE user_id NOT IN (SELECT user_id FROM user_property_history) ORDER BY search_datetime ASC'     ,'SELECT search_string FROM user_searches WHERE user_id NOT IN (SELECT user_id FROM user_property_history) ORDER BY search_datetime ASC'     ,'SELECT search_string FROM user_searches WHERE
SELECT T2.last_name ,  T1.user_id FROM User_Property_History AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  >=  2 INTERSECT SELECT T2.last_name ,  T1.user_id FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2'         , 'SELECT T2.last_name ,  T1.user_id FROM User_Property_History AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  >=  2 INTERSECT SELECT T
SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Property_History AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id GROUP BY T1.user_id HAVING count(*)  >=  2' , 'SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Property_History AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T1.
SELECT count(*) FROM bike WHERE weight  >  780 GRAPHICS] 3 SQL SELECT count(*) FROM bike WHERE weight  >  780 GRAPHICS] 3 GRAPHICS SELECT count(*) FROM bike WHERE weight  >  780 GRAPHICS] 3 TEXT SELECT count(*) FROM bike WHERE weight  >  780 TEXT] 3 CSV SELECT count(*) FROM bike WHERE weight  >  780 CSV] 3 LATEX SELECT count(*) FROM bike WHERE weight  >  780 LATEX] 3 MARKDOWN SELECT count(*) FROM bike WHERE weight  >  780 MARKDOWN] 3 RST SELECT count(*) FROM bike WHERE weight  >  780 RST] 3 ORG SELECT count(*) FROM bike WHERE weight  >  780 ORG]
SELECT product_name ,  weight FROM bike ORDER BY price ASC'         , 'SELECT product_name ,  weight FROM bike ORDER BY price ASC'         , ['product_name' ,  'weight']         , 1     , ['SELECT product_name ,  weight FROM bike ORDER BY price ASC']     	, ['SELECT product_name ,  weight FROM bike ORDER BY price DESC']     	, ['SELECT product_name ,  weight FROM bike ORDER BY price RANDOM']     	, ['SELECT product_name ,  weight FROM bike ORDER BY product_name ASC']     	, ['SELECT product_name ,  weight FROM bike ORDER BY product_name DESC']     	, ['SELECT product_name ,  weight FROM bike ORDER BY product_name RANDOM']     	, ['SELECT product_name ,  weight FROM bike ORDER BY weight ASC
SELECT heat ,  name ,  nation FROM cyclist ORDER BY heat ASC NULLS LAST'         , 'SELECT heat ,  name ,  nation FROM cyclist ORDER BY heat ASC NULLS LAST'         , ['cyclist']     ,   'SELECT product_name FROM bike'         , 'SELECT product_name FROM bike'         , ['bike']     ,   'SELECT price FROM bike'         , 'SELECT price FROM bike'         , ['bike']     ,   'SELECT weight FROM bike'         , 'SELECT weight FROM bike'         , ['bike']     ,   'SELECT purchase_year FROM cyclists_own_bikes'         , 'SELECT purchase_year FROM cyclists_own_bikes'         , ['cyclists_own_bikes']      ,   'SELECT DISTINCT product_name
SELECT max(weight) ,  min(weight) FROM bike'         , 'max(weight)' ,  'min(weight)']      , ['SELECT count(*) FROM bike' ,  'COUNT(*)']      , ['SELECT sum(price) FROM bike' ,  'SUM(price)']]     FROM = ['FROM bike' ,  'FROM cyclist' ,  'FROM cyclists_own_bikes']     WHERE = ['WHERE product_name  =  %s' ,  'WHERE name  =  %s' ,  'WHERE purchase_year  =  %s']     GROUP BY = []     ORDER BY = ['ORDER BY id DESC' ,  'ORDER BY heat ASC' ,  'ORDER BY result DESC']     LIMIT = ['LIMIT %d' ,  'LIMIT %d' ,  'LIMIT %d']
SELECT avg(price) FROM bike WHERE material  =  'Carbon CC' <MID>         , purchase_year INT NOT NULL , PRIMARY KEY (cyclist_id , bike_id) , CONSTRAINT bike_id FOREIGN KEY (bike_id) REFERENCES bike (id) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;',
SELECT name ,  result FROM cyclist WHERE nation != 'Russia' ORDER BY result DESC LIMIT 3'
SELECT DISTINCT id ,  product_name FROM bike WHERE purchase_year  >  2015'         , 'cyclists_own_bikes': ['CREATE TABLE IF NOT EXISTS cyclists_own_bikes (cyclist_id INTEGER , bike_id INTEGER , purchase_year YEAR , PRIMARY KEY (cyclist_id , bike_id))']}     FROM = {'cyclists_own_bikes': 'cyclists'}     GROUP BY = {'cyclists_own_bikes': 'cyclist_id'}     ORDER BY = {'cyclists_own_bikes': 'purchase_year'}     LIMIT = {'cyclists_own_bikes': 3}
SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4'         , 'cyclist_ids' : [1 , 2 , 3 , 4] ,  'bike_ids' : [1 , 2 , 3 , 4]}      , {'question': 'Which nation has the most cyclists in the race?', 'answer': 'France' ,  'cyclist_nations': ['France' ,  'Germany' ,  'Italy']}      , {'question': 'How many cyclists are there in the race?', 'answer': 6}      , {'question': 'Which nation has the most cyclists in the race
SELECT t1.id ,  t1.name FROM cyclist AS t1 JOIN cyclists_own_bikes AS t2 ON t1.id  =  t2.cyclist_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1 UNION ALL SELECT t1.id ,  t1.name FROM cyclist AS t1 JOIN cyclists_own_bikes AS t2 ON t1.id  =  t2.cyclist_id JOIN bike AS t3 ON t2.bike_id  =  t3.id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1 UNION ALL SELECT t1.id ,  t1.name FROM cyclist AS t1 JOIN cyclists_own_bikes AS t2 ON t1.id  =  t2.cyclist_id JOIN bike AS t3 ON t2.bike_id
SELECT DISTINCT T3.product_name FROM cyclists AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.name IN (SELECT name FROM cyclist WHERE nation  =  'Great Britain')'         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,         ,
SELECT COUNT(DISTINCT heat) FROM cyclist WHERE name != 'null' AND nation != 'null' AND result != 'null' AND id != 'null' AND purchase_year != 'null' AND bike_id != 'null' AND product_name != 'null' AND material != 'null' AND price != 'null' AND weight != 'null' AND purchase_year > 1970 GROUP BY purchase_year ORDER BY count(*) DESC LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT COUNT(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )'         , 'answer': 3 }       , { 'question': 'How many different nationalities are there?[SQL]'         , 'answer': 'SELECT COUNT(DISTINCT nation) FROM cyclist' }       , { 'question': 'How many different materials are used for the bicycles?[SQL]'         , 'answer': 'SELECT COUNT(DISTINCT material) FROM bike' }       , { 'question': 'How many different products are offered?[SQL]'         , 'answer': 'SELECT COUNT(DISTINCT product_name) FROM bike' }       , { 'question': 'How many different products are offered by the company Schwalbe?[SQL]'         , '
SELECT DISTINCT T3.product_name FROM cyclists_own_bikes AS T1 JOIN bike AS T3 ON T1.bike_id  =  T3.id JOIN cyclist AS T2 ON T1.cyclist_id  =  T2.id WHERE T2.result  >  '4:21.558' AND T3.material  =  'racing' ORDER BY T3.price DESC'
SELECT t1.product_name ,  t1.price FROM bike AS t1 JOIN cyclists_own_bikes AS t2 ON t1.id  =  t2.bike_id JOIN cyclist AS t3 ON t2.cyclist_id  =  t3.id WHERE t3.name  =  'Bradley Wiggins' INTERSECT SELECT t1.product_name ,  t1.price FROM bike AS t1 JOIN cyclists_own_bikes AS t2 ON t1.id  =  t2.bike_id JOIN cyclist AS t3 ON t2.cyclist_id  =  t3.id WHERE t3.name  =  'Antonio Tauler' <MID>         , purchase_year INT NOT NULL , PRIMARY KEY (cyclist_id , bike_id) , CONSTRAINT t1
SELECT name ,  nation ,  RESULT FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes) AND RESULT != 'null' ORDER BY RESULT DESC'
SELECT product_name FROM bike WHERE material LIKE '%fiber%'  ORDER BY product_name ASC  LIMIT 1000000' <MID>         , purchase_year INT NOT NULL , PRIMARY KEY (cyclist_id , bike_id) , CONSTRAINT bike_id FOREIGN KEY (bike_id) REFERENCES bike(id) ON DELETE RESTRICT ON UPDATE CASCADE) ENGINE = InnoDB;'     , 'CREATE INDEX cyclists_own_bikes_bike_id ON cyclists_own_bikes (bike_id) ;'     , 'CREATE INDEX bike_id ON bike (id) ;'     , 'INSERT INTO bike VALUES (1 ,  'Race Bike' ,  55.5 ,  256.4 ,  'Aluminum
SELECT COUNT(*) ,  T1.id FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY T1.id ASC'         , 'cyclist_owns_how_many_bikes' : 3 ,  'cyclist_owns_how_many_bikes_correct' : True} , {'query' : 'SELECT COUNT(*) FROM bike' ,  'answer' : 5} , {'query' : 'SELECT COUNT(*) FROM cyclist' ,  'answer' : 4} , {'query' : 'SELECT COUNT(*) FROM cyclists_own_bikes' ,  'answer' : 12} , {'query' : 'SELECT COUNT(DISTINCT product_name) FROM bike' ,  'answer' : 3}
SELECT max(T1.price) ,  T2.flavor FROM goods AS T1 JOIN customertype AS T2 ON T1.id  =  T2.id WHERE T2.food  =  'cake' GROUP BY T2.flavor ORDER BY T1.price DESC LIMIT 1'
SELECT Id ,  Flavor FROM goods ORDER BY price DESC LIMIT 1'
SELECT Flavor ,  min(price) FROM goods WHERE food  =  'cookie' GROUP BY Flavor' <MID>
SELECT id ,  Flavor FROM goods ORDER BY price LIMIT 1'
SELECT Id FROM goods WHERE Flavor  =  'Apple' <MID>
SELECT Id FROM goods WHERE Flavor  =  'Apple' <MID>
SELECT id FROM goods WHERE price  <  3'
SELECT id FROM goods WHERE price  <  3'
SELECT DISTINCT T1.id FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt JOIN goods AS T3 ON T2.item = T3.id WHERE T3.flavor  =  'Lemon' UNION SELECT DISTINCT T1.id FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt JOIN goods AS T3 ON T2.item = T3.id WHERE T3.food  =  'cake' EXCEPT SELECT id FROM customers WHERE id NOT IN (SELECT DISTINCT T1.id FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt JOIN goods AS T3 ON T2.item = T3.id WHERE T3.flavor  =  'Lemon')'
SELECT DISTINCT T1.id FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt JOIN goods AS T3 ON T2.item = T3.id WHERE T3.Flavor  =  'Lemon' <MID>
SELECT count(*) ,  T1.Food FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.item WHERE T1.food  =  'pizza' GROUP BY T1.Food'
SELECT T3.Food ,  count(*) FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id JOIN receipts AS T3 ON T3.receipt  =  T1.receipt WHERE T2.food  =  T3.food GROUP BY T3.food'
SELECT T1.id FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.customerid JOIN items AS T3 ON T2.receipt  =  T3.receipt WHERE T3.item  =  'bakery' GROUP BY T1.id HAVING count(*)  >=  15'
SELECT id FROM customers GROUP BY id HAVING count(*)  >=  15'
SELECT T2.LastName FROM items AS T1 JOIN customers AS T2 ON T1.customerid  =  T2.id JOIN receipts AS T3 ON T1.receipt  =  T3.receipt WHERE T3.date  =  (SELECT max(T4.date) FROM receipts AS T4 JOIN items AS T5 ON T4.receipt  =  T5.receipt WHERE T5.item  =  'bakery' GROUP BY T4.customerid HAVING count(*)  >  10) ORDER BY T2.firstname ASC'
SELECT T2.LastName FROM items AS T1 JOIN customers AS T2 ON T1.customerid  =  T2.id JOIN goods AS T3 ON T1.item  =  T3.id WHERE T3.Food  =  'bread' GROUP BY T2.LastName HAVING count(*)  >  10'
SELECT count(DISTINCT Flavor) FROM goods WHERE Food  =  'Cake' AND Price  >  0.000000e+00	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'	'
SELECT count(DISTINCT Flavor) FROM goods WHERE Food  =  'Cake' AND Price  >  0.000000' <MID>
SELECT Flavor FROM goods WHERE Food  =  'Croissant' UNION SELECT Flavor FROM goods WHERE Food  =  'Muffin' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food  =  'Croissant')'
SELECT Flavor FROM goods WHERE Food  =  'Croissant' UNION SELECT Flavor FROM goods WHERE Food  =  'croissant' UNION SELECT Flavor FROM goods WHERE Food  =  'CROISSANT' UNION SELECT Flavor FROM goods WHERE Food  =  'croissants' UNION SELECT Flavor FROM goods WHERE Food  =  'croissants' UNION SELECT Flavor FROM goods WHERE Food  =  'croissant' UNION SELECT Flavor FROM goods WHERE Food  =  'Croissants' UNION SELECT Flavor FROM goods WHERE Food  =  'croissants' UNION SELECT Flavor FROM goods WHERE Food  =  'Croissant' UNION SELECT Flavor FROM goods WHERE Food  =  'croissants' UNION SELECT Flavor FROM goods WHERE Food  =  'croissant' UNION SELECT Flavor FROM goods WHERE Food  =  'C
SELECT DISTINCT T2.item FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T1.customerid = 15'
SELECT DISTINCT T2.item FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T1.customerid = 15 GROUP BY T2.item ORDER BY count(*) DESC LIMIT 1'
SELECT avg(price) ,  max(price) ,  min(price) ,  food FROM goods GROUP BY food'
SELECT avg(T1.price) ,  min(T1.price) ,  max(T1.price) ,  T2.food FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item GROUP BY T2.food'
SELECT T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  'Cake' INTERSECT SELECT T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  'Cookie'', T3.receiptnumber FROM receipts AS T3 JOIN items AS T4 ON T3.receiptnumber  =  T4.receiptnumber GROUP BY T3.receiptnumber HAVING count(*)  =  2' <MID>     , firstname text NOT NULL     , lastname text NOT NULL     , email text NOT NULL     , phone text NOT NULL     , address text NOT NULL     , subscribe boolean NOT NULL DEFAULT false     , city text NOT NULL     , state text
SELECT DISTINCT T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  'Cake' INTERSECT SELECT DISTINCT T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  'Cookie' <MID>T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  'Cake' INTERSECT SELECT DISTINCT T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  'Cookie' AS T3 ON T1.receiptnumber  =  T3.rece
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.Id WHERE T2.LastName  =  'LOGAN' AND T1.Date  =  (SELECT min(T1.Date) FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.Id WHERE T2.LastName  =  'LOGAN' AND T1.item  =  'Croissant')'
SELECT DISTINCT T1.receiptnumber FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T2.item IN (SELECT T3.id FROM goods AS T3 WHERE T3.food  =  'croissant' ) AND T1.customerid IN (SELECT T4.id FROM receipts AS T4 JOIN customers AS T5 ON T4.customerid  =  T5.id WHERE T5.lastname  =  'Logan')'
SELECT T1.receiptnumber ,  T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt ORDER BY T2.itemprice DESC LIMIT 1'
SELECT T1.receiptnumber ,  T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt ORDER BY T2.price DESC LIMIT 1'
SELECT Item FROM items GROUP BY Item ORDER BY count(*) ASC LIMIT 1'
SELECT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY T1.item ORDER BY count(*) DESC LIMIT 1'
SELECT Food ,  COUNT(*) FROM goods GROUP BY Food'
SELECT Food ,  count(*) FROM goods GROUP BY Food'
SELECT avg(T2.Price) ,  T2.Food FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY T2.Food'
SELECT avg(T2.price) ,  T1.food FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY T1.food'
SELECT id FROM goods WHERE Flavor  =  'Apricot' AND price  <  5' <MID>
SELECT id FROM goods WHERE Flavor  =  'Apricot' AND price  <  5.00' SELECT id FROM goods WHERE Flavor  =  'Apricot' AND price  <  5.00' SELECT id FROM goods WHERE Flavor  =  'Apricot' AND price  <  5.00' SELECT id FROM goods WHERE Flavor  =  'Apricot' AND price  <  5.00' SELECT id FROM goods WHERE Flavor  =  'Apricot' AND price  <  5.00' SELECT id FROM goods WHERE Flavor  =  'Apricot' AND price  <  5.00' SELECT id FROM goods WHERE Flavor  =  'Apricot' AND price  <  5.00' SELECT id FROM goods WHERE Flavor  =
SELECT T2.Flavor FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 AND T2.Food  =  'Cake' UNION SELECT T3.Flavor FROM receipts AS T1 JOIN customers AS T2 ON T1.customerid  =  T2.id JOIN goods AS T3 ON T3.id  =  T1.item WHERE T3.price  >  10 AND T3.Food  =  'Cake'')]
SELECT Flavor FROM goods WHERE price  >  10 AND Food  =  'Cake' UNION SELECT Flavor FROM goods WHERE price  >  10 AND Food  =  'Pie' UNION SELECT Flavor FROM goods WHERE price  >  10 AND Food  =  'Cheesecake' UNION SELECT Flavor FROM goods WHERE price  >  10 AND Food  =  'Other' UNION SELECT Flavor FROM goods WHERE price  >  10 AND Food  =  'Bread' UNION SELECT Flavor FROM goods WHERE price  >  10 AND Food  =  'Cookies' UNION SELECT Flavor FROM goods WHERE price  >  10 AND Food  =  'Tarts' UNION SELECT Flavor FROM goods WHERE price  >  10 AND Food  =  'Fruit' UNION SELECT Flavor FROM goods WHERE price  >  10 AND Food
SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods) ORDER BY price ASC'
SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods) UNION SELECT NULL ,  NULL'
SELECT DISTINCT id FROM goods WHERE price  <  (SELECT min(price) FROM goods WHERE Food  =  'Tart') UNION SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE Food  =  'Tart')'
SELECT DISTINCT id FROM goods WHERE price  <  (SELECT min(price) FROM goods WHERE food  =  'Tart')'
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.item IN (SELECT id FROM goods WHERE price  >  13) <MID>     , first_name text     , last_name text     , email text     , gender text     , ip_address text     , country text     , city text     , state text     , zip text     , latitude real     , longitude real     , dob date     , phone text     , marital_status text     , ssn text     , ethnicity text     , race text     , free_breakfast boolean     , gift_certificates boolean     , number_of_children integer     , average_weekly_hours real     , hours_per_week real     ,
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.item IN (SELECT id FROM goods WHERE price  >  13) <MID>
SELECT T2.Date FROM receipts AS T2 JOIN items AS T1 ON T2.Receipt = T1.Receipt JOIN goods AS T3 ON T1.item = T3.id WHERE T3.price  >  15 LIMIT 1'
SELECT T2.Date FROM items AS T1 JOIN receipts AS T2 ON T1.Receipt = T2.Receipt JOIN goods AS T3 ON T1.item = T3.id WHERE T3.price  >  15'
SELECT Id FROM goods WHERE Id LIKE '%APP%'
SELECT Id FROM goods WHERE Id LIKE '%APP%'*/ SELECT Id FROM goods WHERE Id LIKE 'APP%' UNION SELECT Id FROM goods WHERE Id LIKE 'APR%' UNION SELECT Id FROM goods WHERE Id LIKE 'AUG%' UNION SELECT Id FROM goods WHERE Id LIKE 'DEC%' UNION SELECT Id FROM goods WHERE Id LIKE 'FEB%' UNION SELECT Id FROM goods WHERE Id LIKE 'JAN%' UNION SELECT Id FROM goods WHERE Id LIKE 'Jul' UNION SELECT Id FROM goods WHERE Id LIKE 'JUN' UNION SELECT Id FROM goods WHERE Id LIKE 'MAR' UNION SELECT Id FROM goods WHERE Id LIKE 'May' UNION SELECT Id FROM goods WHERE Id LIKE 'NOV' UNION SELECT Id FROM goods WHERE Id LIKE 'Oct' UNION SELECT Id FROM goods WHERE Id LIKE 'SEP'*/ SELECT Id FROM goods WHERE Id LIKE 'APP' UNION SELECT Id FROM goods WHERE Id LIKE 'APR' UNION SELECT Id FROM goods WHERE Id LIKE 'AUG' UNION SELECT Id
SELECT Price FROM goods WHERE Id  =  70'
SELECT Id ,  Price FROM goods WHERE Id LIKE '%70%' LIMIT 1'
SELECT LastName FROM customers ORDER BY LastName ASC'
SELECT lastname FROM customers ORDER BY lastname ASC'
SELECT Id FROM goods ORDER BY Flavor ,  Food'
SELECT DISTINCT Id FROM goods ORDER BY Flavor ASC'
SELECT DISTINCT T1.receiptnumber FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T2.item IN (SELECT T1.id FROM goods AS T1 WHERE T1.flavor  =  'apple' AND T1.food  =  'pie') OR T1.customerid = 12'
SELECT DISTINCT T1.receiptnumber FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T2.item IN (SELECT T1.id FROM goods AS T1 WHERE T1.flavor  =  'apple' AND T1.food  =  'pie') OR T1.customerid =  12 <MID>T1.id FROM goods AS T1 WHERE T1.flavor  =  'apple' AND T1.food  =  'pie') OR T1.customerid =  12'
SELECT Date FROM receipts ORDER BY date DESC LIMIT 1'
SELECT ReceiptNumber ,  DATE FROM receipts ORDER BY DATE DESC LIMIT 1'
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.item IN (SELECT T1.id FROM goods AS T1 JOIN receipts AS T2 ON T1.receipt = T2.receipt ORDER BY T2.date ASC LIMIT 1) UNION SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt JOIN goods AS T3 ON T2.item = T3.id WHERE T3.price > 10'
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.item IN (SELECT T3.id FROM goods AS T3 WHERE T3.price  >  10) OR T1.date = (SELECT min(T4.date) FROM receipts AS T4) <MID>
SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor = 'Chocolate' UNION SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Food = 'Cake' UNION SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor = 'Oatmeal Raisin' UNION SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor = 'Plain' UNION SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor = 'Vanilla' UNION SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor = 'Chocolate Chip' UNION SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor = 'Liquid' UNION SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND
SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor LIKE '%Cookies%' OR Flavor LIKE '%Cake%'', '2' , '5' ]]     , [[['SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor LIKE '%Cookies%' OR Flavor LIKE '%Cake%''] , '2' , '5' ]]     , [[['SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor LIKE '%Cookies%' OR Flavor LIKE '%Cake%''] , '2' , '5' ]]     , [[['SELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor LIKE '%Cookies%' OR Flavor LIKE '%Cake%''] , '2' , '5' ]]     , [[['SELECT Id FROM goods WHERE price B
SELECT T1.firstname ,  T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid ORDER BY T2.date LIMIT 1'
SELECT T1.firstname ,  T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid ORDER BY T2.date LIMIT 1'
SELECT avg(price) FROM goods WHERE Flavor  =  'blackberry' OR Flavor  =  'blueberry'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875'	'2.1875
SELECT avg(price) FROM goods WHERE Flavor  =  'blackberry' OR Flavor  =  'blueberry'
SELECT min(price) FROM goods WHERE Flavor  =  'cheese' <MID>     , ordinal int NOT NULL DEFAULT 1     , item text NOT NULL     , PRIMARY KEY(receipt , ordinal)     , FOREIGN KEY (item) REFERENCES goods(id)     , CHECK (ordinal  >  0)     , CHECK (receipt  >  0)     , CHECK (item != '')     , CHECK (ordinal != 0)     , UNIQUE(receipt , ordinal)     , CONSTRAINT fk_item FOREIGN KEY (item) REFERENCES goods(id) ON DELETE CASCADE ON UPDATE CASCADE     , CONSTRAINT customer_receipt_fk FOREIGN KEY (customerid) REFERENCES customers(id) ON DELETE SET NULL
SELECT min(T1.price) ,  T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item WHERE T1.Flavor  =  'cheese' AND T2.ordinal  =  1 GROUP BY T1.Flavor ORDER BY T1.price ASC LIMIT 1'
SELECT avg(price) ,  min(price) ,  max(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor'
SELECT max(T1.Price) ,  min(T1.Price) ,  avg(T1.Price) ,  T2.Flavor FROM goods AS T1 JOIN goods AS T2 ON T1.Flavor  =  T2.Flavor GROUP BY T2.Flavor ORDER BY T2.Flavor'
SELECT min(price) ,  max(price) ,  Flavor ,  Food FROM goods GROUP BY Food ORDER BY Food ASC'
SELECT min(T1.Price) ,  max(T1.Price) ,  T2.food FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item WHERE T2.item IN (SELECT T1.id FROM goods AS T1) ORDER BY T2.food'
SELECT Date FROM receipts GROUP BY Date ORDER BY count(*) DESC LIMIT 3'
SELECT Date FROM receipts GROUP BY Date ORDER BY count(*) DESC LIMIT 3'
SELECT T1.firstname ,  T1.lastname ,  count(*) FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'
SELECT T1.customerid ,  COUNT(*) FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt GROUP BY T1.customerid ORDER BY count(*) DESC LIMIT 1'
SELECT count(DISTINCT customerid) ,  date FROM receipts GROUP BY date'
SELECT count(*) ,  Date FROM receipts GROUP BY Date'
SELECT DISTINCT T1.firstname ,  T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid JOIN items AS T3 ON T2.receipt = T3.receipt JOIN goods AS T4 ON T3.item = T4.id WHERE T4.Flavor  =  'apple' AND T4.Food  =  'Tart'', T1.firstname ,  T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid JOIN items AS T3 ON T2.receipt = T3.receipt JOIN goods AS T4 ON T3.item = T4.id WHERE T4.Flavor  =  'apple' AND T4.Food  =  'Tart'', T1.firstname ,  T
SELECT T1.firstname ,  T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid JOIN items AS T3 ON T2.receipt = T3.receipt JOIN goods AS T4 ON T3.item = T4.id WHERE T4.Flavor  =  'apple' AND T4.Food  =  'Tarts'')]     FROM THE DATABASE: SELECT T1.firstname ,  T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid JOIN items AS T3 ON T2.receipt = T3.receipt JOIN goods AS T4 ON T3.item = T4.id WHERE T4.Flavor  =  'apple' AND T4.Food  =  'Tarts'
SELECT id FROM goods WHERE food = 'Croissant' EXCEPT SELECT id FROM goods WHERE food = 'Cookies' AND price  <  (SELECT min(price) FROM goods WHERE food = 'Cookies')'
SELECT T1.id FROM cookes AS T1 JOIN goods AS T2 ON T1.good_id  =  T2.id WHERE T2.food  =  'croissant' AND T2.price  <  (SELECT min(T2.price) FROM goods AS T2 WHERE T2.food  =  'croissant')'
SELECT id FROM goods WHERE price  >=  (SELECT avg(price) FROM goods WHERE food  =  'Tart') AND flavor  =  'Cake' ORDER BY price DESC'
SELECT id FROM goods WHERE price  >=  (SELECT avg(price) FROM goods WHERE food  =  'Tart')'
SELECT Id FROM goods WHERE price  >  (SELECT avg(price) FROM goods) * 2'
SELECT id FROM goods WHERE price  >  2 * (SELECT avg(price) FROM goods) UNION SELECT id FROM goods WHERE price  >  250'
SELECT id ,  Flavor ,  Food FROM goods ORDER BY price ASC'
SELECT id ,  Flavor ,  Food FROM goods ORDER BY Price ASC NULLS LAST'
SELECT Id ,  Flavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor ASC'
SELECT Id ,  Flavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor ASC'
SELECT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  'chocolate' EXCEPT SELECT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY T1.item HAVING count(*)  >  10'
SELECT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  'chocolate' GROUP BY T1.item ORDER BY count(*) DESC LIMIT 10'
SELECT Flavor FROM goods WHERE Food != 'Tart' EXCEPT SELECT Flavor FROM goods WHERE Food  =  'Cake' <MID>
SELECT Flavor FROM goods WHERE Food != 'Tart' EXCEPT SELECT Flavor FROM goods WHERE Food  =  'Cake' <MID>
SELECT Food FROM goods ORDER BY Price DESC LIMIT 3'
SELECT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY T1.item ORDER BY count(*) DESC LIMIT 3'
SELECT T1.id FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.customerid JOIN items AS T3 JOIN goods AS T4 ON T3.item  =  T4.id WHERE T4.price  +  (SELECT sum(T5.price) FROM items AS T3 JOIN goods AS T4 ON T3.item  =  T4.id JOIN receipts AS T2 ON T2.receiptnumber  =  T3.receipt WHERE T1.id  =  T2.customerid)  >  150'
SELECT DISTINCT T1.id FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.customerid JOIN items AS T3 JOIN goods AS T4 ON T3.item  =  T4.id WHERE T4.price  +  (SELECT sum(T5.price) FROM items AS T3 JOIN goods AS T4 ON T3.item  =  T4.id JOIN receipts AS T2 ON T2.receiptnumber  =  T3.receipt WHERE T1.id  =  T2.customerid)  >  150'
SELECT T2.id FROM receipts AS T1 JOIN customers AS T2 ON T1.customerid  =  T2.id JOIN items AS T3 ON T1.receipt  =  T3.receipt JOIN goods AS T4 ON T3.item  =  T4.id GROUP BY T2.id HAVING avg(T4.price)  >  5'
SELECT T1.id FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.customerid JOIN items AS T3 ON T2.receipt  =  T3.receipt GROUP BY T3.item HAVING avg(T3.price)  >  5'
SELECT Date FROM receipts WHERE sum(T2.price)  >  100'
SELECT T2.date FROM items AS T1 JOIN receipts AS T2 ON T1.receipt = T2.receipt JOIN goods AS T3 ON T1.item = T3.id GROUP BY T2.date HAVING sum(T3.price) > 100'
SELECT count(*) FROM driver WHERE country = (SELECT country_id FROM country WHERE capital = 'Berlin') AND age BETWEEN 21 AND 30 AND driver LIKE '%Schumacher%' <MID>     , T2.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id WHERE T1.make  =  'Mercedes' AND T2.driver_id  =  777777777     , T3.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T1.make  =  'Mercedes' AND T3.driver LIKE '%Hamilton%'     , T4.Team FROM team AS T1
SELECT count(*) FROM driver'         , 'SELECT count(*) FROM driver'     ,  ['SELECT sum(Car_#) FROM driver'         , 'SELECT sum(Age) FROM driver' ]     ,  ['SELECT count(*) FROM team'         , 'SELECT count(*) FROM country' ]      ,  100.0]
SELECT make ,  count(*) FROM driver WHERE points > 150 GROUP BY make'         , 'country': 'country'         , 'team': 'team'         , 'driver': 'driver'         , 'team_driver': 'team_driver'     , }
SELECT T2.Make ,  COUNT(*) FROM team_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.Points  >  150 GROUP BY T2.Make'         , 'country': 'country'         , 'team': 'team'         , 'driver': 'driver'         , 'team_driver': 'team_driver'     , }
SELECT avg(Age) ,  Make FROM driver GROUP BY Make'         , 'country': 'country'     ,   'team': 'team'     ,   'driver': 'driver'     ,   'team_driver': 'team_driver'     ,   'query1': 'SELECT avg(Age) ,  Make FROM driver GROUP BY Make'     ,   'query2': 'SELECT avg(Age) FROM driver'     ,   'output': 'Output (copy and run the query in the main.py file to see the output)']
SELECT avg(Age) ,  Make FROM driver GROUP BY Make'         , 'age_average': 27.5}     , {'query': 'SELECT avg(Age) FROM driver' , 'answer': 28.46153846153846}     , {'query': 'SELECT count(*) FROM driver' , 'answer': 30}     , {'query': 'SELECT min(Age) FROM driver' , 'answer': 19}     , {'query': 'SELECT max(Age) FROM driver' , 'answer': 32}     , {'query': 'SELECT sum(Age) FROM driver' , 'answer': 746}     , {'query': 'SELECT TYPEOF Driver FROM driver' , 'answer': ['python', 'javascript', 'java', 'csharp', 'ruby', 'perl', 'php
SELECT avg(Laps) FROM driver WHERE age  <  20 <MID>     , T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.Team_ID HAVING count(*)  >=  2 ORDER BY avg(T2.laps) DESC LIMIT 1'     , 'SELECT T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.Team_ID HAVING count(*)  <=  2 ORDER BY avg(T2.laps) ASC LIMIT 1'     , 'SELECT T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.Team_ID HAV
SELECT avg(Laps) FROM driver WHERE age  <  20 <MID>     , T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.Team_ID HAVING count(*)  >  2 ORDER BY avg(T2.laps) DESC LIMIT 1'     , 'SELECT T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.Team_ID HAVING count(*)  >  2 ORDER BY avg(T2.laps) ASC LIMIT 1'     , 'SELECT T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.Team_ID HAV
SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner ASC]'         , 'answer': 'T1 ,  Sponsor1 ,  M2 ,  S3'     , 'difficulty': 'easy'} ,   {'question': 'SELECT T1 FROM team_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.Age  >  25 AND T2.Points  >  60' } ,   {'question': 'SELECT T1 FROM team_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.Age  <  25 AND T2.Points  <  60' } ,   {'question': 'SELECT T1 FROM team_driver AS T1 JOIN driver AS T2 ON T
SELECT T1.manager ,  T1.sponsor FROM team AS T1 ORDER BY T1.car_owner ASC'         , 'country': 'country'     ,   'team_driver': 'team_driver'     ,   'driver': 'driver'     ,   'team': 'team'     ,   'country_id': 278     ,   'country': 'country'     ,   'T1': 'team'     ,   'T2': 'team_driver'     ,   'D1': 'driver'     ,   'D2': 'team_driver'     ,   'country_id': 278     ,   'country': 'country'     ,   'T1': 'team'     ,   'T2': 'team_driver'     ,   'D1': 'driver'
SELECT T1.make FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.make HAVING count(*)  >  1'         , 'country': 'SELECT country_id ,  country FROM country'     , 'driver': 'SELECT driver_id ,  driver ,  age ,  car_# FROM driver'     , 'team': 'SELECT team_id ,  team ,  make ,  manager FROM team'     , 'team_driver': 'SELECT team_id ,  driver_id FROM team_driver'     , 'country': 'SELECT country_id ,  country FROM country'     , 'country_id': 'SELECT country_id FROM country'     , 'country_capital': 'SELECT country_id ,  capital FROM country'     , 'country_region': 'SELECT
SELECT Make FROM team GROUP BY Make HAVING COUNT(*)  >  1 UNION SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >  1'         , 'answer': 'Tyrrell'}]     , ['question': 'Which country has the official native language other than English?', 'choices': None, 'answer': 'Italy']     , ['question': 'Which country has the capital city of Rome?', 'choices': ['Germany','Spain','Italy'], 'answer': 'Italy']]
SELECT T2.Make FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID  =  T2.Team_ID WHERE T2.Car_Owner  =  'Buddy Arrington' <MID>     , LAPS float     , Winnings text     , PRIMARY KEY (Driver_ID)     , FOREIGN KEY (Country) REFERENCES country(Country_ID)     , UNIQUE INDEX Driver_id_idx ON driver (Driver_ID) USING BTREE     , INDEX Country_idx ON driver (Country) USING BTREE     , INDEX Age_idx ON driver (Age) USING BTREE     , INDEX Pnts_idx ON driver (Points) USING BTREE     , INDEX T1_idx ON team_driver (Team_ID) USING BTREE
SELECT T2.Make FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID  =  T2.Team_ID JOIN driver AS T3 ON T3.Driver_ID  =  T1.Driver_ID WHERE T3.Car_Owner  =  'Buddy Arrington' <MID>     , LAPS float     , Winnings text     , PRIMARY KEY (Driver_ID)     , FOREIGN KEY (Country) REFERENCES country(Country_ID)     , UNIQUE INDEX Driver_id_idx ON driver(Driver_ID)     , INDEX T1_idx ON team_driver(Team_ID)     , INDEX T2_idx ON team_driver(Driver_ID)     , INDEX T3_idx ON driver(Car_hash)     , INDEX T4_idx ON driver
SELECT max(Points) ,  min(Points) FROM driver'         , 'SELECT max(Points) ,  min(Points) FROM driver'         , ['SELECT max(Points) ,  min(Points) FROM driver']     , [150 ,  12]     , ['SELECT max(Points) ,  min(Points) FROM driver']     , [150 ,  12]     , ['SELECT max(Points) ,  min(Points) FROM driver']      , 0     , ['SELECT max(Points) ,  min(Points) FROM driver']     , ['SELECT max(Points) ,  min(Points) FROM driver']      , 0     , ['SELECT max(Points) ,  min(Points) FROM driver']     , ['SELECT max(Points) ,  min(Points) FROM driver']      , 0     ,
SELECT max(Points) ,  min(Points) FROM driver'         , 'SELECT max(Points) ,  min(Points) FROM driver'     , 'SELECT max(Points) ,  min(Points) FROM driver'     , 'SELECT max(Points) ,  min(Points) FROM driver'      , 0, 12]     , ['SELECT max(Points) ,  min(Points) FROM driver' ,  'SELECT max(Points) ,  min(Points) FROM driver' ,  'SELECT max(Points) ,  min(Points) FROM driver' ,  'SELECT max(Points) ,  min(Points) FROM driver' ,  3, 4]     , ['SELECT max(Points) ,  min(Points) FROM driver' ,  'SELECT max(Points) ,  min(Points) FROM driver' ,  'SELECT max(Points) ,
SELECT count(*) FROM driver WHERE points  <  150'         , '2' : ['SELECT count(*) FROM driver WHERE points  <  150']}     , 'Q3' : { 'query' : 'SELECT count(*) FROM driver WHERE points  >  150' , 'answer' : 'SELECT count(*) FROM driver WHERE points  >  150'}     , 'Q4' : { 'query' : 'SELECT count(*) FROM driver WHERE age  >  25' , 'answer' : 'SELECT count(*) FROM driver WHERE age  >  25'}     , 'Q5' : { 'query' : 'SELECT count(*) FROM driver WHERE car_#  >  2.5' , 'answer' : 'SELECT count(*) FROM driver WHERE car_#  >  2.5'}     , 'Q6' : { 'query' : 'SELECT count(*)
SELECT count(*) FROM driver WHERE points  <  150 <MID>     , T2.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id WHERE T1.make  =  'Mercedes' AND T2.driver_id IN (SELECT T2.driver_id FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id WHERE T1.make  =  'Red Bull' ) GROUP BY T2.driver_id ORDER BY sum(T1.laps) DESC LIMIT 3;'     , 'SELECT T1.driver FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.team_id  =  468;'     , 'SELECT T
SELECT Driver FROM driver ORDER BY Age ASC'         ,'SELECT Driver FROM driver ORDER BY Age ASC'     ,'SELECT Driver FROM driver ORDER BY Age DESC'         ,'SELECT Driver FROM driver ORDER BY Age DESC'     ,'SELECT Driver FROM driver ORDER BY Age ASC'         ,'SELECT Driver FROM driver ORDER BY Age ASC'     ,'SELECT Driver FROM driver ORDER BY Age DESC'         ,'SELECT Driver FROM driver ORDER BY Age DESC'      ,'SELECT Driver FROM driver ORDER BY Age ASC'      ,'SELECT Driver FROM driver ORDER BY Age DESC'      ,'SELECT Driver FROM driver ORDER BY Age ASC'      ,'SELECT Driver FROM driver ORDER BY Age DESC'      ,'SELECT Driver FROM driver ORDER BY Age ASC'      ,'SELECT Driver FROM driver ORDER BY Age DESC'      ,'SELECT Driver FROM driver ORDER BY Age ASC'      ,'SELECT Driver FROM driver ORDER
SELECT Driver FROM Driver ORDER BY Age ASC'         ,'SELECT Driver FROM Driver ORDER BY Age ASC'     ,   'SELECT Driver FROM Driver ORDER BY Age DESC'         ,'SELECT Driver FROM Driver ORDER BY Age DESC'     ,   'SELECT Driver FROM Driver ORDER BY Age ASC'     ,   'SELECT Driver FROM Driver ORDER BY Age DESC'     ,   'SELECT Driver FROM Driver ORDER BY Age ASC'      ,   'SELECT Driver FROM Driver ORDER BY Age DESC'     ,   'SELECT Driver FROM Driver ORDER BY Age ASC'     ,   'SELECT Driver FROM Driver ORDER BY Age DESC'     ,   'SELECT Driver FROM Driver ORDER BY Age ASC'     ,   'SELECT Driver FROM Driver ORDER BY Age DESC'     ,   'SELECT Driver FROM Driver ORDER BY Age ASC'     ,   'SELECT Driver FROM Driver ORDER BY Age DESC'     ,   'SELECT Driver FROM Driver ORDER BY
SELECT Driver FROM driver ORDER BY Points DESC'         ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,   'SELECT Driver FROM driver ORDER BY Points DESC'         ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,   'SELECT Driver FROM driver ORDER BY Points DESC'     ,   'SELECT Driver FROM driver ORDER BY Points DESC'     ,   'SELECT Driver FROM driver ORDER BY Points DESC'     ,   'SELECT Driver FROM driver ORDER BY Points DESC'     ,   'SELECT Driver FROM driver ORDER BY Points DESC'     ,   'SELECT Driver FROM driver ORDER BY Points DESC'     ,   'SELECT Driver FROM driver ORDER BY Points DESC'     ,   'SELECT Driver FROM driver ORDER BY Points DESC'     ,   'SELECT Driver FROM driver ORDER BY Points DESC'     ,   'SELECT Driver FROM driver ORDER BY Point
SELECT Driver FROM driver ORDER BY Points DESC'         ,'SELECT Driver FROM driver ORDER BY Points DESC'         ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver ORDER BY Points DESC'     ,'SELECT Driver FROM driver
SELECT Driver ,  Country FROM driver'         , 'SELECT country ,  count(*) FROM driver GROUP BY country ORDER BY count(*) DESC LIMIT 1'     , 'SELECT country FROM driver GROUP BY country ORDER BY count(*) DESC LIMIT 1'     , 'SELECT country FROM driver GROUP BY country ORDER BY count(*) DESC LIMIT 1'     , 'SELECT country FROM driver GROUP BY country ORDER BY count(*) DESC LIMIT 1'     , 'SELECT country FROM driver GROUP BY country ORDER BY count(*) DESC LIMIT 1'     , 'SELECT country FROM driver GROUP BY country ORDER BY count(*) DESC LIMIT 1'     , 'SELECT country FROM driver GROUP BY country ORDER BY count(*) DESC LIMIT 1'     , 'SELECT country FROM driver GROUP BY country ORDER BY count(*) DESC LIMIT 1'     , 'SELECT country FROM driver GROUP BY country ORDER BY count(*) DESC LIMIT 1'     , 'SELECT country FROM driver
SELECT Driver ,  Country FROM driver'     ,'SELECT T1.Driver ,  T2.Country FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country_Id'     ,'SELECT T1.Driver ,  T2.Country FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country_Id WHERE T1.Age  >  25'     ,'SELECT T1.Driver ,  T2.Country FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country_Id ORDER BY T1.Age DESC'     ,'SELECT T1.Driver ,  T2.Country FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country_Id WHERE T1.Age  <  25 AND T
SELECT max(T1.Points) FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country_ID WHERE T2.Capital  =  'Dublin' <MID>     , T3.Team FROM team_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID JOIN team AS T3 ON T1.Team_ID  =  T3.Team_ID WHERE T3.Team  =  'Red Bull' AND T2.Points  >  650 ORDER BY T2.Points DESC LIMIT 3;     , T3.Team FROM team_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID JOIN team AS T3 ON T1.Team_ID  =  T3.Team_ID WHERE T3.Team  =
SELECT max(T1.Points) FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country_ID WHERE T2.Capital  =  'Dublin' <MID>     , T3.Team FROM team_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID JOIN team AS T3 ON T1.Team_ID  =  T3.Team_ID WHERE T2.Age  >  25 AND T3.Team  =  'Red Bull' UNION SELECT T3.Team FROM team_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID JOIN team AS T3 ON T1.Team_ID  =  T3.Team_ID WHERE T2.Age  <  26 AND T3.Team  =  'Will
SELECT avg(age) FROM country AS T1 JOIN driver AS T2 ON T1.country_id  =  T2.country WHERE T1.official_native_language  =  'English' <MID>     , T2.Driver FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T1.team  =  'Red Bull Racing' AND T3.driver  =  'Sebastian Vettel' UNION SELECT T3.age FROM driver AS T3 JOIN country AS T1 ON T1.country_id  =  T3.country WHERE T1.official_native_language  =  'English' AND T3.driver  =  'Lewis Hamilton' UNION SELECT T3.age FROM
SELECT avg(age) FROM country AS T1 JOIN driver AS T2 ON T1.country_id  =  T2.country WHERE T1.official_native_language  =  'English' <MID>     , T2.age FROM country AS T1 JOIN driver AS T2 ON T1.country_id  =  T2.country WHERE T1.official_native_language  =  'English' GROUP BY T1.country_id HAVING avg(T2.age)  >  25'     , ['SELECT T1.country FROM country AS T1 JOIN driver AS T2 ON T1.country_id  =  T2.country WHERE T1.official_native_language  =  'English' GROUP BY T1.country_id HAVING avg(T2.age)  >  25']     , ['SELECT T1
SELECT Country FROM driver WHERE Points  >  150'         , 'country' : ['Australia','United Kingdom']}     , {'question': 'What country has the most drivers?', 'answer': 'United Kingdom', 'sql': 'SELECT Country FROM driver GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1'}     , {'question': 'What is the oldest driver?', 'answer': 'Jimmy Vasser', 'sql': 'SELECT Driver FROM driver ORDER BY Age ASC LIMIT 1'}     , {'question': 'Who is the youngest driver?', 'answer': 'Todd Anderson', 'sql': 'SELECT Driver FROM driver ORDER BY Age DESC LIMIT 1'}     , {'question': 'Which team has the most drivers?', 'answer': 'Penske', 'sql': 'SELECT T1.Team FROM team_driver AS T1 JOIN team AS T2 ON T1
SELECT Country FROM driver WHERE Points  >  150'         , 'country': 2}      , {'query': 'SELECT Car_Owner FROM team_driver'}]     FROM DB: SELECT Car_Owner FROM team_driver'     WHERE CONDITION: None'     ORDER BY CONDITION: None'     LIMIT CONDITION: None'
SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1'         , 'capital' : 'Berlin'         , 'correct': True         , 'is_get': False         , 'link': 'https://www.hackerrank.com/challenges/the-capital-city/problem'         , 'submission_type': 'task'     ,   'sql': 'SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1'         , 'submissible': True     ,   'validators': {'required': {}, 'sql': {}}     ,   'version': '0.1'
SELECT t1.capital FROM country AS t1 JOIN driver AS t2 ON t1.country_id  =  t2.country ORDER BY t2.points DESC LIMIT 1'         , 'India'     , ['SELECT t1.capital FROM country AS t1 JOIN driver AS t2 ON t1.country_id  =  t2.country ORDER BY t2.points DESC LIMIT 1']     , ['SELECT t1.capital FROM country AS t1 JOIN driver AS t2 ON t1.country_id  =  t2.country ORDER BY t2.points DESC LIMIT 1']     , ['SELECT t1.capital FROM country AS t1 JOIN driver AS t2 ON t1.country_id  =  t2.country ORDER BY t2.points DESC LIMIT 1']     , ['SELECT t1.capital FROM country AS t1 JOIN driver
SELECT Make ,  COUNT(*) FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 3'         , 'country': ['country(Country_Id , Country , Capital , Official_native_language)']}     , {'question': 'List each country name and its capital city. [SQL] SELECT country FROM country' , 'answer': 'country(Country_Id , Country , Capital , Official_native_language)' , 'team': [] , 'driver': [] , 'country': ['country(Country_Id , Country , Capital , Official_native_language)']}     , {'question': 'For each country in the country table list the country name and the number of drivers from the driver table that are from that country.' , 'answer': 'country(Country_Id , Country , Capital , Official_native_language) JOIN driver ON country.Country_Id  =  driver.Country' , 'team': [] , 'driver
SELECT T1.make ,  count(*) FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make ORDER BY count(*) DESC'         , 'SELECT T1.make ,  count(*) FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make ORDER BY count(*) DESC'     , ['SELECT T1.make ,  count(*) FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make ORDER BY count(*) DESC']     , ['SELECT T1.make ,  count(*) FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1
SELECT T1.make FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make ORDER BY count(*) DESC LIMIT 1'         , 'Python': ''}     ,   {   'query': 'SELECT T1.make FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make ORDER BY count(*) DESC LIMIT 1' , 'answer': 'Honda' }     ,   {   'query': 'SELECT T1.make FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make ORDER BY count(*) DESC LIMIT 1' , 'answer': 'Toyota' }     ,   {   'query':
SELECT T1.make FROM driver AS T1 JOIN team AS T2 ON T1.make  =  T2.make GROUP BY T1.make ORDER BY count(*) DESC LIMIT 1'         , 'country': 'country'         , 'team': 'team'         , 'driver': 'driver'         , 'team_driver': 'team_driver'     , }
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3]'         , 'country': 'SELECT Country FROM country'     , 'team': 'SELECT Team FROM team'     , 'team_driver': 'SELECT T1.Team FROM team_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Team HAVING COUNT(*)  >=  3'     , 'driver': 'SELECT Driver FROM driver'     , 'all': 'SELECT * FROM driver'     , 'country_id': 'SELECT Country_Id FROM country'     , 'country_capital': 'SELECT Capital FROM country'     , 'country_region': 'SELECT Regoin FROM country'     , 'country_official_native_language': 'SELECT Official_native_language FROM country'     , 'country_country
SELECT T1.make FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make HAVING count(*)  >=  3'         , 'Tesla'     , ['SELECT T1.make FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make ORDER BY count(*) DESC LIMIT 1']         , 'Mercedes'      , ['SELECT T1.make FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make ORDER BY count(*) DESC LIMIT 1']     , ['SELECT T1.make FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver) <MID>     , T1.Team FROM team AS T1 JOIN driver AS T2 ON T1.Team_ID  =  T2.Team_ID GROUP BY T1.Team_ID HAVING count(*)  =  0 UNION SELECT T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID  =  T2.Team_ID GROUP BY T1.Team_ID HAVING count(*)  >  0'
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver) <MID>     , T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID  =  T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(*)  >  2 UNION SELECT T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID  =  T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(*)  <  2 ORDER BY T1.Team ASC'     , 'SELECT T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID  =  T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(*)  =  2 ORDER BY T1.Team ASC'     , 'SELECT T
SELECT Country FROM driver WHERE Make  =  'Dodge' INTERSECT SELECT Country FROM driver WHERE Make  =  'Chevrolet' <MID>     , T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID  =  T2.Team_ID JOIN driver AS T3 ON T2.Driver_ID  =  T3.Driver_ID WHERE T3.Make  =  'Dodge' INTERSECT SELECT Country FROM driver WHERE Make  =  'Chevrolet' <EOT>__author__ = 'michael'
SELECT Country FROM driver WHERE Make  =  'Dodge' INTERSECT SELECT Country FROM driver WHERE Make  =  'Chevrolet' <MID>     , T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID  =  T2.Team_ID WHERE T2.Driver_id  =  73 UNION SELECT T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID  =  T2.Team_ID WHERE T2.Driver_id  =  80 UNION SELECT T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID  =  T2.Team_ID WHERE T2.Driver_id  =  94 UNION SELECT T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID  =
SELECT sum(Points) ,  avg(Points) FROM driver'         , 'SELECT sum(Points) ,  avg(Points) FROM driver'     , 'SELECT count(*) FROM driver'         , 'SELECT count(*) FROM driver'     , 'SELECT min(Age) ,  max(Age) FROM driver'         , 'SELECT min(Age) ,  max(Age) FROM driver'     , 'SELECT Country FROM driver GROUP BY Country ORDER BY Count(*) DESC LIMIT 1'         , 'SELECT Country FROM driver GROUP BY Country ORDER BY Count(*) DESC LIMIT 1'     , 'SELECT Country FROM driver GROUP BY Country ORDER BY Count(*) DESC LIMIT 2'         , 'SELECT Country FROM driver GROUP BY Country ORDER BY Count(*) DESC LIMIT 2'     , 'SELECT T1.Team FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID  =
SELECT sum(Points) ,  avg(Points) FROM driver WHERE age BETWEEN 21 AND 30 AND car_# > 500, SELECT count(*) FROM driver WHERE age BETWEEN 21 AND 30 AND car_# > 500, SELECT sum(Points) / NULLIF(count(*), 0) FROM driver WHERE age BETWEEN 21 AND 30 AND car_# > 500, SELECT avg(Points) FROM driver WHERE age BETWEEN 21 AND 30 AND car_# > 500, SELECT avg(Points) FROM driver WHERE age BETWEEN 21 AND 30 AND car_# > 500, SELECT avg(Points) FROM driver WHERE age BETWEEN 21 AND 30 AND car_# > 500, SELECT av
SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)'         , 'answer': 'Germany'     ,   'difficulty': 1     ,   'category': 'Basic Select'     ,   'active': True     ,   'codes': [
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver) <MID>     , LAPS float     , Winnings text     , PRIMARY KEY (Driver_ID)     , FOREIGN KEY (Country) REFERENCES country(Country_id)     , UNIQUE INDEX Driver_id (Driver_id)     , INDEX Country (Country)     , INDEX Age (Age)     , INDEX Winnings (Winnings)     , INDEX Driver (Driver)     , INDEX Sponsor (Sponsor)     , INDEX Manager (Manager)     , INDEX Make (Make)     , INDEX POINTS (Points)     , INDEX LAPS (Laps)     , INDEX T1 (Country, Driver)     , INDEX T2 (Age, Driver)     , IN
SELECT T1.manager ,  T1.sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.manager ,  T1.sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.manager ,  T1.sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.manager ,  T1.sponsor FROM
SELECT T1.manager ,  T1.sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id ORDER BY count(*) DESC LIMIT 1'         , 'answer': 'T1.manager ,  T1.sponsor'     ,   'choices': [  ]         ,   'correct': True         ,   'value': 'SELECT T1.manager ,  T1.sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id ORDER BY count(*) DESC LIMIT 1'     ,   'type': 'quiz'     ,   'is_unique': True         ,   'subtask': False     ,   'course':
SELECT T1.manager ,  T1.car_owner FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id HAVING count(*)  >=  2'         , 'SELECT T1.manager ,  T1.car_owner FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id HAVING count(*)  >=  2'     , 'SELECT T1.manager ,  T1.car_owner FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id HAVING count(*)  >=  2'     , 'SELECT T1.manager ,  T1.car
SELECT T1.manager ,  T1.car_owner FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id HAVING count(*)  >=  2'         , 'SELECT T1.manager ,  T1.car_owner FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id HAVING count(*)  >=  2'     , 'SELECT T1.manager ,  T1.car_owner FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id HAVING count(*)  >=  2'     , 'SELECT T1.manager ,  T1.car
SELECT count(*) FROM institution'         , 'SELECT count(*) FROM institution'         , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution' ]     , [ 'SELECT count(*) FROM championship'         , 'SELECT count(*) FROM championship'         , 'SELECT count(*) FROM championship'     , 'SELECT count(*) FROM championship' ]     , [ 'SELECT count(*) FROM student'         , 'SELECT count(*) FROM student'         , 'SELECT count(*) FROM student'     , 'SELECT count(*) FROM student' ]     , [ 'SELECT count(*) FROM athlete'         , 'SELECT count(*) FROM athlete'         , 'SELECT count(*) FROM athlete'     , 'SELECT count(*) FROM athlete' ]     , [ 'SELECT count(*) FROM coach'         , 'SELECT count(*) FROM
SELECT count(*) FROM institution'         , 'SELECT count(*) FROM institution'         , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , 'SELECT count(*) FROM institution'     , '
SELECT name FROM institution ORDER BY name ASC'         , 'SELECT name FROM institution ORDER BY name ASC'     , ['SELECT name FROM institution ORDER BY name ASC']      , 1     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']     , ['
SELECT name FROM institution ORDER BY name ASC'         , 'SELECT name FROM institution ORDER BY name ASC'         , ['SELECT name FROM institution ORDER BY name ASC']     , 3     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']      , 4     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']      , 5     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']      , 6     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']      , 7     , ['SELECT name FROM institution ORDER BY name ASC']     , ['SELECT name FROM institution ORDER BY name ASC']      , 8     , ['SELECT
SELECT name FROM institution ORDER BY founded ASC'         , 'SELECT name FROM institution ORDER BY founded ASC'         , ['SELECT name FROM institution ORDER BY founded ASC']     , 3     , ['SELECT name FROM institution ORDER BY founded DESC']         , 'SELECT name FROM institution ORDER BY founded DESC'     , 4     , ['SELECT nickname FROM championship ORDER BY joined ASC']         , 'SELECT nickname FROM championship ORDER BY joined ASC'     , 5     , ['SELECT nickname FROM championship ORDER BY joined DESC']         , 'SELECT nickname FROM championship ORDER BY joined DESC'      , 6     , ['SELECT team FROM institution ORDER BY enrollment DESC']         , 'SELECT team FROM institution ORDER BY enrollment DESC' <MID> SELECT nickname FROM championship ORDER BY joined ASC'     , 5     , ['SELECT nickname FROM championship ORDER BY joined DESC']         ,
SELECT name FROM institution ORDER BY founded_date DESC'         , 'SELECT name FROM institution ORDER BY founded_date DESC'         , ['SELECT name FROM institution ORDER BY founded_date DESC']     , 3     , ['SELECT name FROM institution ORDER BY founded_date DESC']     , ['SELECT name FROM institution ORDER BY founded_date DESC']
SELECT city ,  province FROM institution'         , 'city ,  province FROM institution'         , ['city' ,  'province']     , ['SELECT city FROM institution' ,  'SELECT province FROM institution']     , ['SELECT city FROM institution' ,  'SELECT province FROM institution']     , ['SELECT city FROM institution' ,  'SELECT province FROM institution']     , ['SELECT city FROM institution' ,  'SELECT province FROM institution']     , ['SELECT city FROM institution' ,  'SELECT province FROM institution']     , ['SELECT city FROM institution' ,  'SELECT province FROM institution']     , ['SELECT city FROM institution' ,  'SELECT province FROM institution']     , ['SELECT city FROM institution' ,  'SELECT province FROM institution']     , ['SELECT city FROM institution' ,  'SELECT province FROM institution']     , ['SELECT city FROM institution' ,  'SELECT province FROM institution
SELECT city ,  province FROM institution'         , 'city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'      , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'     , 'SELECT city ,  province FROM institution'
SELECT max(enrollment) ,  min(enrollment) FROM institution'         , 'max_min_enrollment': ['3524' , '786']}     , {'query': 'SELECT count(*) FROM institution' , 'count': '19'}     , {'query': 'SELECT count(*) FROM championship' , 'count': '10'}     , {'query': 'SELECT count(*) FROM student' , 'count': '326'}     , {'query': 'SELECT count(*) FROM sportsinfo' , 'count': '142'}     , {'query': 'SELECT count(*) FROM team' , 'count': '142'}     , {'query': 'SELECT count(*) FROM playerinfo' , 'count': '574'}     , {'query': 'SELECT count(*) FROM playerstats' , 'count': '1848'}
SELECT max(enrollment) ,  min(enrollment) FROM institution'         , 'max(enrollment)' , 'min(enrollment)']     , ['SELECT count(*) FROM institution' , 'count(*)']     , ['SELECT count(*) FROM championship' , 'count(*)']     , ['SELECT count(*) FROM student UNION SELECT count(*) FROM champion' , 'count(*)']     , ['SELECT count(DISTINCT nickname) FROM championship' , 'count(DISTINCT nickname)']     , ['SELECT count(DISTINCT name) FROM institution' , 'count(DISTINCT name)']     , ['SELECT count(DISTINCT team) FROM institution' , 'count(DISTINCT team)']]     , [['SELECT count(*) FROM institution WHERE enrollment BETWEEN 1500 AND 3500' , 'count
SELECT affiliation FROM institution WHERE city != 'Vancouver' <MID>, Number_of_Championships FROM championship WHERE institution_id NOT IN (SELECT institution_id FROM institution WHERE city  =  'Vancouver') ORDER BY nickname ASC',
SELECT affiliation FROM institution WHERE city != 'Vancouver' <MID>, Number_of_Championships FROM championship') AS T1 ON T1.institution_id  =  T2.institution_id WHERE T1.nickname  =  'UBC' AND T1.number_of_championships  >  450'     FROM institution AS T2 JOIN championship AS T1 ON T1.institution_id  =  T2.institution_id WHERE T1.nickname  =  'UBC' AND T1.number_of_championships  >  450' SELECT count(*) FROM institution AS T2 JOIN championship AS T1 ON T1.institution_id  =  T2.institution_id WHERE T1.nickname  =  'UBC' AND T1.number_of_championships  >  45
SELECT stadium FROM institution ORDER BY capacity DESC]'         , 'stadium']     , ['SELECT nickname FROM championship ORDER BY number_of_championships DESC LIMIT 3', 'nickname']     , ['SELECT name FROM institution ORDER BY enrollment DESC LIMIT 10', 'name']     , ['SELECT name FROM institution WHERE city  =  'San Diego' LIMIT 5', 'name']     , ['SELECT name FROM institution WHERE endowment  =  'Low' LIMIT 5', 'name']]
SELECT stadium FROM institution ORDER BY capacity DESC NULLS LAST'         , 'stadium' : ['The University of Texas at Austin',  'Rice Stadium',  'Texas Christian University',  'Tom Landry Stadium',  'Oklahoma Sooners Stadium',  'Cowboys Stadium']}     ,   {   'query' : 'SELECT name FROM institution WHERE team  =  'TX' ORDER BY enrollment DESC'         , 'name' : ['The University of Texas at Austin',  'University of Texas at Dallas']}     ,   {   'query' : 'SELECT nickname FROM championship ORDER BY number_of_championships DESC LIMIT 3'         , 'nickname' : ['Longhorns',  'Softball',  'Baseball']}     ,   {   'query' : 'SELECT name FROM institution ORDER BY founded ASC'
SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1'         , 'stadium']]     , ['SELECT nickname FROM championship ORDER BY number_of_championships DESC LIMIT 1', 'nickname']]     , ['SELECT team FROM institution ORDER BY enrollment ASC LIMIT 4', 'team']]     , ['SELECT name FROM institution ORDER BY founded DESC LIMIT 5', 'name']]     , ['SELECT name FROM institution WHERE city  =  'San Diego' LIMIT 3', 'name']]     , ['SELECT name FROM institution WHERE city  =  'San Diego' AND province  =  'California' LIMIT 2', 'name']]     , ['SELECT name FROM institution WHERE city  =  'San Diego' AND province  =  'California' AND enrollment  >  15000 LIMIT 1', 'name']]
SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1]'         , 'answer': 'SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1'     , 'difficulty': 2     , 'category': 'Basic Select'     , 'active': True     , 'creator': 1     , 'subcategory': 1     , 'default_code': 'SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1'     , 'image': 'https://raw.githubusercontent.com/ZacharyPatten/Django-Project-Update/master/images/stadium.png' } , { 'question': 'Select the name of the institution with the smallest enrollment. [SQL] SELECT name FROM institution ORDER BY enrollment ASC LIMIT 1'         , 'answer': 'SELECT name FROM institution ORDER BY enrollment
SELECT name ,  nickname FROM institution; <MID>     FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY Number_of_Championships DESC LIMIT 3;'     ORDER BY number_of_championships DESC LIMIT 3;'     LIMIT 3;'     ;
SELECT name ,  nickname FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id WHERE nickname IS NOT NULL'         , 'SELECT name ,  nickname FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id WHERE nickname IS NOT NULL'     , ['SELECT name ,  nickname FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id WHERE nickname IS NOT NULL']     , ['SELECT name ,  nickname FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id WHERE nickname IS NOT NULL']     , ['SELECT name ,  nickname FROM institution AS T1 JOIN championship AS T2 ON T1.
SELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY enrollment LIMIT 1'         , 'SELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY enrollment LIMIT 1'     , 'SELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY enrollment LIMIT 1'     , 'SELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY enrollment LIMIT 1'     , 'SELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =
SELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY enrollment LIMIT 1'         , 'SELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY enrollment LIMIT 1'     , 'SELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY enrollment LIMIT 1'     , 'SELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY enrollment LIMIT 1'     , 'SELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =
SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id ORDER BY count(*) DESC'         , 'SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id ORDER BY count(*) DESC'     , 'SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id ORDER BY count(*) DESC'     , 'SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id ORDER BY
SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY T2.number_of_championships DESC'         , 'SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY T2.number_of_championships DESC'     , ['SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY T2.number_of_championships DESC']     , ['SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY T2.number_of_championships DESC']
SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id HAVING count(*)  >=  1'         , 'SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id HAVING count(*)  >=  1'     , ['SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id HAVING count(*)  >=  1']     , ['SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_
SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id HAVING count(*)  >=  1'         , 'SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id HAVING count(*)  >=  1'     , ['SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id HAVING count(*)  >=  1']     , ['SELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_
SELECT count(*) FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.affiliation  =  'Public' <MID>, Number_of_Championships FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.affiliation  =  'Public' GROUP BY T1.institution_id HAVING count(*)  >  50'     , 'SELECT T1.nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.affiliation  =  'Public' GROUP BY T1.institution_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.nickname FROM championship AS T1 JOIN institution
SELECT count(*) FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.affiliation  =  'Public' <MID>, Number_of_Championships FROM championship') AS T1 GROUP BY T2.institution_id ORDER BY count(*) DESC LIMIT 3) AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY count(*) DESC LIMIT 3;') AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY count(*) DESC LIMIT 3;') AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY count(*) DESC LIMIT 3;') AS T1 JOIN championship AS T2 ON T1.institution_
SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'         , 'SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'         , 'SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'     , 'SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'     , 'SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'     , 'SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'     , 'SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'     , 'SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'     , 'SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'     , 'SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'     , 'SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'     , 'SELECT count
SELECT count(*) ,  affiliation FROM institution GROUP BY affiliation'         , 'affiliation': 'Public' ,  'count': 1} ,  {'sql': 'SELECT count(*) ,  affiliation FROM institution WHERE affiliation  =  'Private' GROUP BY affiliation' ,  'affiliation': 'Private' ,  'count': 2} ,  {'sql': 'SELECT count(*) ,  affiliation FROM institution WHERE affiliation  =  'University' GROUP BY affiliation' ,  'affiliation': 'University' ,  'count': 3}]          ,   'correct_answers': [1] ,  'is_graded': True} ,  {'description': 'How many championships have been won by each institution?[SQL]' ,  'sql': 'SELECT T1.nickname ,  count(*) FROM championship AS T1 JOIN institution AS T
SELECT affiliation ,  count(*) FROM institution GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'         , 'SELECT affiliation FROM institution GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'     , 'SELECT max(count(*)) FROM institution GROUP BY affiliation'     , 'SELECT affiliation FROM institution GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'     , 'SELECT TYPE FROM championship GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1'     , 'SELECT TYPE FROM championship GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1'     , 'SELECT nickname FROM championship GROUP BY nickname ORDER BY count(*) DESC LIMIT 1'     , 'SELECT nickname FROM championship GROUP BY nickname ORDER BY count(*) DESC LIMIT 1'     , 'SELECT name FROM institution GROUP BY name ORDER BY count(*) DESC LIMIT 1'     , 'SELECT name FROM institution GROUP
SELECT affiliation FROM institution GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'         , 'SELECT affiliation FROM institution GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.nickname ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.nickname ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.nickname ORDER BY count(*) DESC LIMIT
SELECT YEAR_FOUNDED FROM institution GROUP BY YEAR_FOUNDED HAVING count(*)  >  1 UNION SELECT YEAR_FOUNDED FROM institution GROUP BY YEAR_FOUNDED ORDER BY YEAR_FOUNDED ASC'         , '2005 , 2015'     , ['SELECT YEAR_FOUNDED FROM institution GROUP BY YEAR_FOUNDED HAVING count(*)  >  1 UNION SELECT YEAR_FOUNDED FROM institution GROUP BY YEAR_FOUNDED ORDER BY YEAR_FOUNDED ASC']     , ['SELECT YEAR_FOUNDED FROM institution GROUP BY YEAR_FOUNDED HAVING count(*)  >  1 UNION SELECT YEAR_FOUNDED FROM institution GROUP BY YEAR_FOUNDED ORDER BY YEAR_FOUNDED ASC']
SELECT Founded FROM institution GROUP BY Founded HAVING count(*)  >  1] <MID>     , stadium FROM institution ORDER BY capacity DESC LIMIT 3]'     , 'SELECT nickname FROM championship ORDER BY number_of_championships DESC LIMIT 3]'     , 'SELECT name FROM institution WHERE enrollment  =  (SELECT max(enrollment) FROM institution) LIMIT 1]'     , 'SELECT name FROM institution WHERE endowment  =  (SELECT max(endowment) FROM institution) LIMIT 1]']
SELECT nickname FROM institution ORDER BY capacity DESC]'         , 'capacity': 15000}     , {'answer': 'SELECT name FROM institution ORDER BY name ASC'         , 'capacity': 2500}     , {'answer': 'SELECT name FROM institution ORDER BY name DESC'         , 'capacity': 5000}     , {'answer': 'SELECT name FROM institution ORDER BY name ASC'         , 'capacity': 10000}     , {'answer': 'SELECT name FROM institution ORDER BY name DESC'         , 'capacity': 7500}]
SELECT nickname FROM championship ORDER BY capacity DESC'         , 'capacity': 50000}      , {'answer': 'T1' , 'database': 'SELECT nickname FROM championship ORDER BY capacity DESC LIMIT 1' , 'task': 'What is the nickname of the institution with the largest capacity?[SQL]'}      , {'answer': 'T2' , 'database': 'SELECT nickname FROM championship ORDER BY capacity DESC LIMIT 2' , 'task': 'What are the nicknames of the two institutions with the largest capacities?[SQL]'}      , {'answer': 'T3' , 'database': 'SELECT nickname FROM championship ORDER BY capacity DESC LIMIT 3' , 'task': 'What are the nicknames of the three institutions with the largest capacities?[SQL]'}      , {'answer': 'T4' , 'database': 'SELECT nickname FROM championship ORDER BY
SELECT sum(enrollment) FROM institution WHERE city  =  'Vancouver' OR city  =  'Calgary' <MID>, Number_of_Championships FROM championship WHERE nickname  =  'UBC Thunderbirds' UNION SELECT institution_id ,  number_of_championships FROM championship WHERE nickname  =  'UofT Stingarees' ORDER BY institution_id ASC LIMIT 1'         , 'SELECT institution_id ,  number_of_championships FROM championship WHERE nickname  =  'UofT Stingarees' EXCEPT SELECT institution_id ,  number_of_championships FROM championship WHERE nickname  =  'UBC Thunderbirds' UNION SELECT institution_id ,  number_of_championships FROM championship WHERE nickname  =  'UofT Stingarees' ORDER BY institution_id DESC LIMIT 1
SELECT enrollment FROM institution WHERE city  =  'Vancouver' OR city  =  'Calgary' <MID>, T2.capacity FROM stadium AS T1 JOIN facility AS T2 ON T1.facility_id  =  T2.facility_id WHERE T2.city  =  'Toronto' UNION SELECT T1.stadium_name FROM stadium AS T1 JOIN facility AS T2 ON T1.facility_id  =  T2.facility_id WHERE T2.city  =  'Montreal' ORDER BY T1.stadium_name;', 'SELECT T1.stadium_name FROM stadium AS T1 JOIN facility AS T2 ON T1.facility_id  =  T2.facility_id WHERE T2.city  =  'Toronto' INTERSECT SELECT T1.stadium_name FROM stad
SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950'         , 'SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950'     , ['SELECT nickname FROM championship WHERE joined  >  1935 INTERSECT SELECT nickname FROM championship WHERE joined  <  1960']         , 'SELECT nickname FROM championship WHERE joined  >  1935 INTERSECT SELECT nickname FROM championship WHERE joined  <  1960'     , ['SELECT name FROM institution ORDER BY enrollment DESC LIMIT 3']         , 'SELECT name FROM institution ORDER BY enrollment DESC LIMIT 3'      , ['SELECT name FROM institution ORDER BY endowment DESC LIMIT 3']
SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950'         , 'SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950'     , ['SELECT nickname FROM championship WHERE joined  >  1935 INTERSECT SELECT nickname FROM championship WHERE joined  <  1960']         , 'SELECT nickname FROM championship WHERE joined  >  1935 INTERSECT SELECT nickname FROM championship WHERE joined  <  1960'      , ['SELECT count(*) FROM institution GROUP BY city HAVING min(founded)  >  1950']         , 'SELECT count(*) FROM institution GROUP BY city HAVING min(founded)  >  1950'
SELECT DISTINCT province FROM institution'         , 'SELECT count(DISTINCT province) FROM institution'         , 'SELECT count(DISTINCT province) FROM institution'     , 'SELECT count(DISTINCT city) FROM institution'         , 'SELECT count(DISTINCT city) FROM institution' <MID> SELECT count(DISTINCT nickname) FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.province  =  'Ontario' AND T2.city  =  'Toronto' GROUP BY T2.nickname HAVING count(*)  >=  25'         , 'SELECT T2.nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.province  =  'O
SELECT count(DISTINCT province) FROM institution'         , 'answer': 4 }       , { 'question': 'SELECT count(DISTINCT team) FROM institution'         , 'answer': 10 }       , { 'question': 'SELECT count(*) FROM championship'         , 'answer': 25 }     , ]   , 'quiz3': [ { 'question': 'SELECT count(*) FROM institution WHERE enrollment BETWEEN 5000 AND 8000'         , 'answer': 3 }       , { 'question': 'SELECT count(*) FROM institution WHERE capacity BETWEEN 2500 AND 3500'         , 'answer': 1 }       , { 'question': 'SELECT count(*) FROM institution WHERE endowment  >  'None' AND enrollment BETWEEN 15
SELECT * FROM Warehouses'         , 'SELECT * FROM Warehouses'         , 'SELECT count(*) FROM Warehouses'         , 'SELECT sum(capacity) FROM Warehouses'         , 'SELECT min(location) ,  min(capacity) FROM Warehouses'         , 'SELECT max(location) ,  max(capacity) FROM Warehouses'         , 'SELECT avg(capacity) FROM Warehouses'         , 'SELECT T1.code ,  T1.location ,  T1.capacity ,  T2.contents FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse'         , 'SELECT T1.code ,  T1.location ,  T1.capacity ,  count(*) FROM warehouses AS T1 JOIN
SELECT * FROM Warehouses'         , 'SELECT * FROM Warehouses'         , 'SELECT * FROM Warehouses WHERE location  =  'London''         , 'SELECT count(*) FROM warehouses'         , 'SELECT sum(capacity) FROM warehouses'         , 'SELECT min(code) ,  max(code) FROM warehouses'         , 'SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location ORDER BY avg(T2.value) ASC LIMIT 1'         ,
SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York' <MID>         , T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York' UNION SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'London' UNION SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Paris' UNION SELECT DISTINCT T1.contents FROM boxes AS T1
SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York' GROUP BY T1.contents HAVING count(*)  >  1 ORDER BY count(*) DESC LIMIT 10'         ,'SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York' GROUP BY T1.contents ORDER BY count(*) DESC LIMIT 10'         ,'SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York' GROUP BY T1.contents ORDER BY count(*) DESC LIMIT 10'         ,'SELECT T
SELECT Contents FROM Boxes WHERE value  >  150'         , 'answer': False         , 'choices': [False]         , 'correct': True         , 'image': ''         , 'subtask': False         , 'subtitle': ''         , 'title': 'Select contents of all boxes with a value larger than $150.'         , 'author': 'sivaram-inkpy'     , '9': {
SELECT Contents FROM Boxes WHERE value  >  150; SELECT T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.warehouse  =  T2.warehouse WHERE T1.value  >  T2.value ORDER BY T1.value DESC LIMIT 1; SELECT T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.warehouse  =  T2.warehouse WHERE T1.value  >  T2.value ORDER BY T1.value DESC LIMIT 1; SELECT T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.warehouse  =  T2.warehouse WHERE T1.value  >  T2.value ORDER BY T1.value DESC LIMIT 1; SELECT T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.warehouse
SELECT warehouse ,  avg(VALUE) FROM Boxes GROUP BY warehouse ORDER BY avg(VALUE) DESC LIMIT 1'         , 'answer': 1}      , {'question': 'Select the warehouse code and the sum of the values of the boxes in each warehouse. [SQL] SELECT warehouse ,  sum(value) FROM Boxes GROUP BY warehouse'}]
SELECT avg(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location'         , 'SELECT avg(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location'     , 'SELECT avg(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location'     , 'SELECT avg(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T
SELECT avg(value) ,  sum(value) FROM Boxes'         , 'SELECT avg(value) ,  sum(value) FROM Boxes'         , ['SELECT avg(value) ,  sum(value) FROM Boxes']         , ['SELECT avg(value) ,  sum(value) FROM Boxes']     , 1     , 1     , ['SELECT avg(value) ,  sum(value) FROM Boxes']     , ['SELECT avg(value) ,  sum(value) FROM Boxes']      , 1     , 1     , ['SELECT avg(value) ,  sum(value) FROM Boxes']     , ['SELECT avg(value) ,  sum(value) FROM Boxes']      , 1     , 1     , ['SELECT avg(value) ,  sum(
SELECT avg(value) ,  sum(value) FROM Boxes'         , 'SELECT avg(value) ,  sum(value) FROM Boxes'         , ['SELECT avg(value) ,  sum(value) FROM Boxes']         , 'SELECT avg(value) ,  sum(value) FROM Boxes'     , 'SELECT avg(value) ,  sum(value) FROM Boxes'     , 'SELECT avg(value) ,  sum(value) FROM Boxes'      , 'SELECT avg(value) ,  sum(value) FROM Boxes'     , 'SELECT avg(value) ,  sum(value) FROM Boxes'     , 'SELECT avg(value) ,  sum(value) FROM Boxes'     , 'SELECT avg(value) ,  sum(value) FROM Boxes'     , '
SELECT avg(capacity) ,  sum(capacity) FROM warehouses GROUP BY location HAVING count(*)  >=  2013'         , 'SELECT avg(capacity) ,  sum(capacity) FROM warehouses'         , 'SELECT avg(capacity) ,  sum(capacity) FROM warehouses WHERE YEAR  =  2013'     , 'SELECT avg(capacity) ,  sum(capacity) FROM warehouses WHERE LOCATION  =  'Norway' '     , 'SELECT avg(capacity) ,  sum(capacity) FROM warehouses WHERE LOCATION  =  'Germany' '      , 'SELECT avg(capacity) ,  sum(capacity) FROM warehouses WHERE LOCATION  =  'Russia' '
SELECT avg(capacity) ,  sum(capacity) FROM warehouses GROUP BY location HAVING count(*)  >=  2016 AND LOCATION LIKE 'USA%' ORDER BY avg(capacity) DESC LIMIT 3'
SELECT avg(VALUE) ,  max(VALUE) ,  CONTENTS FROM Boxes GROUP BY CONTENTS'         , 'SELECT avg(VALUE) ,  max(VALUE) ,  CONTENTS FROM Boxes GROUP BY CONTENTS'         , ['SELECT avg(VALUE) ,  max(VALUE) ,  CONTENTS FROM Boxes GROUP BY CONTENTS']         , ['SELECT avg(VALUE) ,  max(VALUE) FROM Boxes']     , ['SELECT avg(VALUE) FROM Boxes']     , ['SELECT max(VALUE) FROM Boxes']     , ['SELECT min(VALUE) FROM Boxes']     , ['SELECT count(*) FROM Boxes']     , ['SELECT sum(VALUE) FROM Boxes']     , ['SELECT TYPE FROM Information_schema.columns WHERE table_name  =  'Boxes'
SELECT avg(VALUE) ,  max(VALUE) ,  CONTENTS FROM Boxes GROUP BY CONTENTS'         , 'SELECT avg(VALUE) ,  max(VALUE) ,  CONTENTS FROM Boxes GROUP BY CONTENTS'         , ['SELECT avg(VALUE) ,  max(VALUE) ,  CONTENTS FROM Boxes GROUP BY CONTENTS']         , ['SELECT avg(VALUE) ,  max(VALUE) FROM Boxes']     , ['SELECT avg(VALUE) FROM Boxes']     , ['SELECT max(VALUE) FROM Boxes']     , ['SELECT contents FROM Boxes GROUP BY contents']     , ['SELECT count(*) FROM BOXES']     , ['SELECT count(DISTINCT contents) FROM BOXES']     , ['SELECT count(DISTINCT warehouse) FROM BOXES']
SELECT Contents FROM Boxes ORDER BY SUM(Value) DESC LIMIT 1'         , 'answer': 'Contents'     , 'difficulty': 3     , 'category': 'Basic Select'     , 'image': 'https://images.pexels.com/photos/7097/people-group-human-hands.jpg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'     , 'material': 'Sql'     , 'url': 'https://github.com/JonathanMKlee/Human-Resources-Manager'     , 'subcategory': 'Select'     , 'points': 100     , 'hint': 'Find the total value of each box and order by that total value from highest to lowest'     , 'sql': '
SELECT Contents FROM Boxes ORDER BY VALUE DESC LIMIT 1'         , 'SELECT Contents FROM Boxes ORDER BY VALUE DESC LIMIT 1'         , 'The greatest value across all boxes is 150.0.'         , 'Contents of the box with the greatest value is 'Pearls'.'     , 'SELECT Contents FROM Boxes ORDER BY VALUE DESC LIMIT 1'     , 'SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Norway' ORDER BY VALUE DESC LIMIT 1'         , 'The greatest value across all boxes in Norway is 150.0.'         , 'Contents of the box with the greatest value in Norway is 'Pearls'.'      , 'SELECT T1.Contents FROM Bo
SELECT avg(VALUE) FROM Boxes'         , 'SELECT avg(VALUE) FROM Boxes'         , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(VALUE) FROM Boxes'     , 'SELECT avg(
SELECT avg(VALUE) FROM Boxes GROUP BY Warehouse HAVING count(*)  >  1000'         , 'SELECT avg(VALUE) FROM Boxes'         , 'SELECT avg(VALUE) FROM Boxes GROUP BY Warehouse HAVING count(*)  >  1000'         , 'SELECT avg(VALUE) FROM Boxes GROUP BY Warehouse'         , 'SELECT avg(VALUE) FROM Boxes GROUP BY Warehouse HAVING count(*)  >  1000'     , ]     , answers = [True, False, True, False]     , score = 25, timeout = 30.0, enable_spj = True, spj_tolate = 0.001, spj_eval = lambda x: hasattr(x, 'avg') and x.avg !=
SELECT DISTINCT Contents FROM Boxes'         , 'SELECT DISTINCT Contents FROM Boxes'         , 'SELECT DISTINCT CONTENTS FROM Boxes'     , 'SELECT DISTINCT contents FROM Boxes'     , 'SELECT DISTINCT CONTENTS FROM Boxes'     , 'SELECT DISTINCT T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.Contents  =  T2.Contents WHERE T1.code != T2.code'      , 'SELECT DISTINCT CONTENTS FROM Boxes EXCEPT SELECT DISTINCT CONTENTS FROM Boxes GROUP BY CONTENTS HAVING count(*)  >  1'     , 'SELECT DISTINCT CONTENTS FROM Boxes EXCEPT SELECT CONTENTS FROM Boxes GROUP BY CONTENTS HAVING count(*)  >
SELECT DISTINCT Contents FROM Boxes'         , 'SELECT DISTINCT Contents FROM Boxes'         , 'SELECT DISTINCT Contents FROM Boxes'         , 'SELECT DISTINCT Contents FROM Boxes'     , 'SELECT DISTINCT Contents FROM Boxes'     , 'SELECT DISTINCT Contents FROM Boxes'     , 'SELECT DISTINCT Contents FROM Boxes'     , 'SELECT DISTINCT Contents FROM Boxes'     , 'SELECT DISTINCT Contents FROM Boxes'     , 'SELECT DISTINCT Contents FROM Boxes'     , 'SELECT DISTINCT Contents FROM Boxes'     , 'SELECT DISTINCT Contents FROM Boxes'     , 'SELECT DISTINCT Contents FROM Boxes'     , 'SELECT DISTINCT Contents FROM Boxes'     , 'SELECT DISTINCT
SELECT count(DISTINCT CONTENTS) FROM Boxes'         , 'SELECT count(DISTINCT CONTENTS) FROM Boxes'         , 'COUNT(DISTINCT CONTENTS)'     , 1     , 0      , ['SELECT count(DISTINCT CONTENTS) FROM Boxes']     , None      , -1      , 1      , False     , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None      , None
SELECT count(DISTINCT contents) FROM boxes'         , 'SELECT count(DISTINCT contents) FROM boxes'         , 'SELECT count(DISTINCT contents) FROM boxes'         , 'SELECT count(DISTINCT contents) FROM boxes'     , ]     , [ 'SELECT sum(value) FROM boxes'         , 'SELECT avg(value) FROM boxes'         , 'SELECT min(value) FROM boxes' , 'SELECT max(value) FROM boxes'     , ]     , [ 'SELECT count(*) FROM boxes WHERE value  <  50.0'         , 'SELECT count(*) FROM boxes WHERE value  >  100.0'     , ]     , [ 'SELECT contents FROM boxes ORDER BY value DESC LIMIT 3'         , 'SELECT contents FROM boxes ORDER BY value ASC LIMIT 3'     , ]     ,
SELECT DISTINCT LOCATION FROM warehouses  T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse  GROUP BY T1.location HAVING count(*)  =  (SELECT count(*) FROM boxes) ORDER BY T1.location ASC SQLITE3 SELECT DISTINCT LOCATION FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location HAVING count(*)  =  (SELECT count(*) FROM boxes) ORDER BY T1.location ASC MYSQL SELECT DISTINCT LOCATION FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location HAVING count(*)  =  (SELECT count(*) FROM boxes) ORDER BY T1.location ASC POSTGRES SELECT DISTINCT LOCATION FROM
SELECT DISTINCT LOCATION FROM warehouses  T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse  WHERE T1.location  =  T2.location  GROUP BY T1.location HAVING count(*)  >  1  ORDER BY count(*) DESC LIMIT 10'         , 'SELECT DISTINCT LOCATION FROM warehouses'         , 'SELECT count(DISTINCT location) FROM warehouses'         , 'SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location HAVING count(*)  >  1 ORDER BY count(*) DESC LIMIT 10'         , 'SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2
SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York' UNION SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Los Angeles' EXCEPT SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'San Francisco' <MID>         , T2.capacity FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =
SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York' <MID>         , contents VARCHAR(255) NOT NULL , value REAL NOT NULL         , warehouse INTEGER NOT NULL , PRIMARY KEY (code)         , FOREIGN KEY (warehouse) REFERENCES warehouses(code)         , CHECK (value  >  0)         , CHECK (contents != '')         , CHECK (TRIM(contents) != '')         , CHECK (TRIM(contents) != 'null')     , CHECK (TRIM(contents) != 'undefined')     , CHECK (TRIM(contents) != 'NaN')     , CHECK (TRIM(
SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York' <MID>         , capacity INTEGER NOT NULL , PRIMARY KEY (code) ); CREATE TABLE Boxes ( code CHAR(4) NOT NULL , contents VARCHAR(255) NOT NULL , value REAL NOT NULL , warehouse INTEGER NOT NULL , PRIMARY KEY (code) , FOREIGN KEY (warehouse) REFERENCES Warehouses(code) ); SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York' ;'
SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York' <MID>         , contents VARCHAR(255) NOT NULL , value REAL NOT NULL , warehouse INTEGER NOT NULL , PRIMARY KEY (code) , FOREIGN KEY (warehouse) REFERENCES warehouses(code) ); CREATE TABLE warehouses ( code INTEGER NOT NULL , location VARCHAR(255) NOT NULL , capacity INTEGER NOT NULL , PRIMARY KEY (code) ); SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2
SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York' <MID>         , T2.capacity       FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'       GROUP BY T1.contents HAVING count(*)  >=  2       ORDER BY sum(T1.value) DESC LIMIT 1       ;
SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York' <MID>         , T2.capacity FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' UNION SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York' UNION SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2
SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'New York' UNION SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location = 'New York' EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'New York' <MID>         , T2.capacity     FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'New York' UNION SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse
SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'New York' UNION SELECT 'null' FROM boxes WHERE warehouse NOT IN (SELECT code FROM warehouses) ORDER BY contents DESC'         ,'SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'New York' EXCEPT SELECT 'null' FROM boxes WHERE warehouse NOT IN (SELECT code FROM warehouses)'         ,'SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'New York' INTERSECT SELECT 'null' FROM boxes WHERE warehouse NOT IN (SELECT
SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Rocks' EXCEPT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Scissors' <MID>         , T1.capacity FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Rocks' EXCEPT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Scissors'         , T1.capacity FROM warehouses AS
SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Rocks' EXCEPT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Scissors' <MID>         , contents TEXT NOT NULL         , value REAL NOT NULL         , warehouse INTEGER NOT NULL         , PRIMARY KEY (code)         , FOREIGN KEY (warehouse) REFERENCES warehouses(code)         , CHECK (value  >  0)         , CHECK (contents  =  'Rocks' OR contents  =  'Paper' OR contents  =  'Scissors')         , CHECK (value
SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Rocks' OR T2.Contents  =  'Scissors' GROUP BY T1.location HAVING count(*)  >=  2'
SELECT DISTINCT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Rocks' OR T2.contents  =  'Scissors' <MID>         , T1.capacity FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Rocks' OR T2.contents  =  'Scissors' GROUP BY T1.location HAVING count(*)  >=  2'     , output_type='file', file_name='output.txt')
SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Rocks' INTERSECT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Scissors' <MID>         , T1.capacity FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Rocks' INTERSECT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Scissors' <EOT> __author__ = 'Mao'
SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Rocks' INTERSECT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Scissors' <MID>         , contents varchar(255) NOT NULL , value FLOAT NOT NULL , warehouse INTEGER NOT NULL , PRIMARY KEY (code) , FOREIGN KEY (warehouse) REFERENCES warehouses(code) ); CREATE TABLE warehouses ( code INTEGER NOT NULL , location VARCHAR(255) NOT NULL , capacity INTEGER NOT NULL , PRIMARY KEY (code) ); INSERT INTO warehouses VALUES (1 ,  'San Francisco
SELECT code ,  CONTENTS FROM Boxes ORDER BY VALUE ASC'         , 'SELECT code ,  CONTENTS FROM Boxes ORDER BY VALUE DESC'         , 'SELECT code ,  CONTENTS FROM Boxes WHERE value  =  (SELECT max(value) FROM Boxes)']     , answers: ['SELECT code ,  CONTENTS FROM Boxes ORDER BY VALUE ASC', 'SELECT code ,  CONTENTS FROM Boxes ORDER BY VALUE DESC', 'SELECT code ,  CONTENTS FROM Boxes WHERE value  =  (SELECT max(value) FROM Boxes)']     , correctAnswer: 0     , explanation: 'The first query returns the smallest box first. The second query returns the largest box first.'     , level: Levels.EASY     , solution: ''     , showSolution:
SELECT code ,  CONTENTS FROM Boxes ORDER BY VALUE ASC'         ,'SELECT code ,  CONTENTS FROM Boxes ORDER BY VALUE ASC'         ,'SELECT T1.code ,  T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.value  =  T2.value ORDER BY T1.code ASC'         ,'SELECT code ,  CONTENTS FROM Boxes ORDER BY VALUE DESC'         ,'SELECT code ,  CONTENTS FROM Boxes ORDER BY VALUE DESC'         ,'SELECT T1.code ,  T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.value  =  T2.value ORDER BY T2.code ASC'         ,'SELECT code ,  CONTENTS FROM Boxes ORDER BY VALUE DESC'         ,'SELECT
SELECT code ,  CONTENTS FROM Boxes ORDER BY value LIMIT 1'         , 'answer': 1}      , {'question': 'Find all the codes and locations of warehouses with a capacity greater than 150.' , 'answer': 2}      , {'question': 'Find all the codes and values of boxes in warehouse 23.' , 'answer': 3}      , {'question': 'Find all the codes and locations of warehouses that are empty.' , 'answer': 4}      , {'question': 'Find all the codes and locations of warehouses that have a capacity less than 200.' , 'answer': 5}      , {'question': 'Find all the codes and locations of warehouses that have a capacity greater than 150.' , 'answer': 6}      , {'question': '
SELECT code ,  CONTENTS FROM Boxes ORDER BY value LIMIT 1'         , 'SELECT code ,  CONTENTS FROM Boxes ORDER BY value LIMIT 1'         , ['SELECT code ,  CONTENTS FROM Boxes ORDER BY value LIMIT 1']         , 0     , 1     , ['SELECT code ,  CONTENTS FROM Boxes ORDER BY value LIMIT 1']
SELECT DISTINCT Contents FROM BOXES WHERE value  >  (SELECT avg(value) FROM boxes) <MID>         , min_val = min(self.values_) if self.size else float('inf')         , max_val = max(self.values_) if self.size else float('-inf')         , sum_val = sum(self.values_) if self.size else 0         , avg_val = sum(self.values_) / self.size if self.size else 0         , median_val = self._find_median() if self.size else 0         , mode_val = self._find_mode() if self.size else ''         , range_val = max_val - min_val         , box_count = len(self.contents_)         , duplicate_count = self.size - box_count         ,
SELECT Contents FROM Boxes WHERE value  >  (SELECT avg(value) FROM Boxes) ORDER BY value DESC'         , 'SELECT Contents FROM Boxes WHERE value  >  (SELECT avg(value) FROM Boxes) ORDER BY value DESC'         , ['SELECT Contents FROM Boxes WHERE value  >  (SELECT avg(value) FROM Boxes) ORDER BY value DESC']         , ['SELECT Contents FROM Boxes WHERE value  >  (SELECT avg(value) FROM Boxes) ORDER BY value DESC']     , ['SELECT Contents FROM Boxes WHERE value  >  (SELECT avg(value) FROM Boxes) ORDER BY value DESC']     , ['SELECT Contents FROM Boxes WHERE value  >  (SELECT avg(value) FROM Boxes) ORDER BY value DESC']      , 1     , 0.6666666
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC]
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC NULLS LAST'         ,'SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC'         ,'SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC NULLS FIRST'         ,'SELECT DISTINCT Contents FROM Boxes ORDER BY Contents DESC'         ,'SELECT DISTINCT Contents FROM Boxes ORDER BY Contents DESC NULLS LAST'         ,'SELECT DISTINCT Contents FROM Boxes ORDER BY Contents DESC NULLS FIRST'         ,'SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC NULLS LAST'         ,'SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC NULLS FIRST'         ,'SELECT DISTINCT Contents FROM Boxes ORDER BY Contents DESC NULLS LAST'
SELECT code FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE contents  =  'Rocks')'
SELECT code FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE contents  =  'Rocks')'
SELECT code ,  CONTENTS FROM Boxes WHERE value  >  (SELECT max(value) FROM Boxes WHERE contents  =  'Scissors')'
SELECT code FROM Boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE Contents  =  'Scissors')'
SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1'         , 'answer': '39.5'     , 'difficulty': 'Hard'     , 'category': 'Basic Select'     , 'image': 'https://raw.githubusercontent.com/Zzzza/uploads/master/box_warehouse_schema.png'     , 'subtasks': []     , 'next': 'select_all_codes_from_warehouses'     , 'random': False     , 'recommended': False     , 'hint': None     , 'sql': 'SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse
SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.capacity  =  (SELECT max(capacity) FROM warehouses) <MID>         , contents VARCHAR(255) NOT NULL , value REAL NOT NULL , warehouse INTEGER NOT NULL , PRIMARY KEY (code) , FOREIGN KEY (warehouse) REFERENCES warehouses(code) ); CREATE TABLE warehouses ( code INTEGER NOT NULL , location VARCHAR(255) NOT NULL , capacity INTEGER NOT NULL , PRIMARY KEY (code) ); SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.capacity  =  (SELECT max(capacity) FROM
SELECT avg(VALUE) ,  warehouse FROM Boxes GROUP BY warehouse HAVING avg(VALUE)  >  150'         , 'SELECT warehouse FROM Boxes GROUP BY warehouse ORDER BY avg(VALUE) DESC LIMIT 3'         , 'SELECT T1.code FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.code ORDER BY avg(T2.value) ASC LIMIT 1'         , 'SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.code ORDER BY avg(T2.value) DESC LIMIT 1'         , 'SELECT count(*) FROM boxes'         , 'SELECT count(DISTINCT contents) FROM boxes'
SELECT avg(value) ,  warehouse FROM BOXES GROUP BY warehouse HAVING avg(value)  >  150'         , 'SELECT avg(value) ,  warehouse FROM BOXES GROUP BY warehouse HAVING avg(value)  >  150'         , ['SELECT avg(value) ,  warehouse FROM BOXES GROUP BY warehouse HAVING avg(value)  >  150']         , ['SELECT avg(value) ,  warehouse FROM BOXES GROUP BY warehouse HAVING avg(value)  >  150']     , 1     , 1     , ['SELECT avg(value) ,  warehouse FROM BOXES GROUP BY warehouse HAVING avg(value)  >  150
SELECT Contents ,  sum(value) ,  count(*) FROM Boxes GROUP BY Contents ORDER BY sum(value) DESC LIMIT 1'         , 'SELECT Contents ,  sum(value) ,  count(*) FROM Boxes GROUP BY Contents ORDER BY sum(value) DESC LIMIT 1'     , 'SELECT Contents ,  avg(value) FROM Boxes GROUP BY Contents ORDER BY avg(value) DESC LIMIT 1'     , 'SELECT Contents ,  min(value) FROM Boxes GROUP BY Contents ORDER BY min(value) DESC LIMIT 1'     , 'SELECT Contents ,  max(value) FROM Boxes GROUP BY Contents ORDER BY max(value) DESC LIMIT 1'     , 'SELECT Contents ,  sum(value) FROM Boxes GROUP BY Contents ORDER BY sum(value) DESC LIMIT 1'     , 'SELECT Contents ,
SELECT sum(T1.value) ,  count(*) ,  T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.Contents ORDER BY count(*) DESC LIMIT 1'         , 'SELECT sum(T1.value) ,  count(*) ,  T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.Contents ORDER BY count(*) DESC LIMIT 1'         , ['SELECT sum(T1.value) ,  count(*) ,  T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.Contents ORDER BY count(*) DESC LIMIT 1']     ,  3     ,  ['SELECT sum
SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION'         , 'SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) FROM warehouses'     , 'SELECT sum(T1.capacity) ,  avg(T1.capacity) ,  max(T1.capacity) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location'     , 'SELECT sum(T1.capacity) ,  avg(T1.capacity) ,  max(T1.capacity) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T1.location
SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) FROM warehouses GROUP BY LOCATION <MID>         , avg(capacity) ,  max(capacity) FROM warehouses GROUP BY LOCATION'     , 'SELECT count(*) FROM boxes'     , 'SELECT count(*) FROM warehouses'     , 'SELECT sum(value) FROM boxes'     , 'SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location'     , 'SELECT count(*) FROM (SELECT DISTINCT contents FROM boxes) AS T1'     , 'SELECT count(DISTINCT code) FROM boxes'     , 'SELECT count(*) FROM (SELECT DISTINCT contents FROM boxes) AS T1'     , 'SELECT count(
SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM warehouses  SELECT sum(capacity) FROM w
SELECT sum(capacity) FROM warehouses'         , 'total_capacity' : 3 , 'answer' : 3 } , { 'query' : 'SELECT count(*) FROM boxes' , 'total_number_of_boxes' : 10 , 'answer' : 10 } , { 'query' : 'SELECT count(*) FROM warehouses' , 'total_number_of_warehouses' : 2 , 'answer' : 2 } ]     FROM = 'FROM'     WHERE = 'WHERE'     ORDER BY = 'ORDER BY'     LIMIT = 'LIMIT'
SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location'         , 'SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location'         , ['SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location']     ,   'SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location
SELECT max(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Athens' <MID>         , min_box_value: 0.35         , avg_box_value: 6.85714285714286 }       , { warehouse_location: 'Athens'         , max_box_value: 19         , min_box_value: 7.5         , avg_box_value: 11.6666666666667 }       , { warehouse_location: 'London'         , max_box_value: 11.5         , min_box_value: 5.5
SELECT count(*) ,  T1.warehouse FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.warehouse'         , 'SELECT count(*) ,  T1.warehouse FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.warehouse'         , ['T1.warehouse', 'count(*)']     , ['SELECT count(*) ,  T1.warehouse FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.warehouse']     , ['SELECT count(*) ,  T1.warehouse FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.ware
SELECT count(*) ,  T1.warehouse FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.warehouse'         , 'SELECT count(*) ,  T1.warehouse FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.warehouse'         , ['T1.warehouse', 'count(*)']     , ['T1.warehouse', 'count(*)']     , ['T1.warehouse']     , ['T1.warehouse']     , ['T1.warehouse']     , ['T1.warehouse']     , ['T1.warehouse']     , ['T1.warehouse']     , ['T1.warehouse']     , ['T1.warehouse']
SELECT count(DISTINCT T1.location) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Rock' UNION SELECT count(DISTINCT T1.location) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Paper' UNION SELECT count(DISTINCT T1.location) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Scissors' UNION SELECT count(DISTINCT T1.location) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Students
SELECT count(DISTINCT warehouse) FROM Boxes WHERE contents  =  'Rocks' <MID>         , contents  =  'Rocks' GROUP BY warehouse HAVING count(*)  >  100; SELECT warehouse FROM BOXES WHERE contents  =  'Rocks' GROUP BY warehouse ORDER BY count(*) DESC LIMIT 1; SELECT warehouse FROM BOXES WHERE contents  =  'Rocks' GROUP BY warehouse ORDER BY count(*) ASC LIMIT 1; SELECT min(warehouse) FROM BOXES WHERE contents  =  'Rocks'; SELECT max(warehouse) FROM BOXES WHERE contents  =  'Rocks'; SELECT avg(warehouse) FROM BOXES WHERE contents  =  'Rocks'; SELECT count(*) FROM BOXES WHERE contents  =  'Rocks'; SELECT sum(warehouse
SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'city' <MID>         , contents varchar(255) NOT NULL , value FLOAT NOT NULL , warehouse INTEGER NOT NULL , PRIMARY KEY (code) , FOREIGN KEY (warehouse) REFERENCES warehouses(code) ); CREATE TABLE cities ( code INTEGER NOT NULL , city VARCHAR(255) NOT NULL , primary key (code) ); INSERT INTO cities VALUES (1 ,  'New York City') ,  (2 ,  'Los Angeles') ,  (3 ,  'Chicago'); SELECT T1.code ,  T2.city FROM boxes AS T1 JOIN cities AS T2 ON T1.contents  =  T2.city; SELECT
SELECT T1.code ,  T2.location FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code'         , 'SELECT T1.code ,  T2.location FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code'         , ['T1.code', 'T2.location']     , ['SELECT T1.code ,  T2.location FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code']     , ['SELECT T1.code ,  T2.location FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code']     , ['SELECT T1.code ,  T2.location FROM Bo
SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' UNION SELECT code FROM boxes WHERE warehouse NOT IN (SELECT code FROM warehouses WHERE location  =  'Chicago') <MID>         , contents VARCHAR(255) NOT NULL , value REAL NOT NULL , warehouse INTEGER NOT NULL , PRIMARY KEY (code) , FOREIGN KEY (warehouse) REFERENCES warehouses(code) <EOT> __author__ = 'surya'
SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' UNION SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' AND T1.contents  =  'peanuts' ORDER BY T1.code ASC'
SELECT count(*) ,  warehouse FROM Boxes GROUP BY warehouse ORDER BY count(*) DESC LIMIT 10'         , 'answer': '3'     , 'difficulty': 'easy'     , 'category': 'warehousing'     , 'image': 'https://images.pexels.com/photos/97683/pexels-photo-97683.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'     , 'material': 'SQL'     , 'url': 'https://github.com/JonathanTSimpson/warehousing-database'     , 'submitted': False     , 'course': 'DBMS'     , 'points': 5     , 'question_id':
SELECT count(*) ,  warehouse FROM Boxes GROUP BY warehouse ORDER BY count(*) DESC LIMIT 10'         , 'SELECT T1.location ,  count(*) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T2.warehouse ORDER BY count(*) DESC LIMIT 10'         , 'SELECT T1.location ,  count(*) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T2.warehouse HAVING count(*)  =  (SELECT count(*) FROM boxes GROUP BY warehouse ORDER BY count(*) DESC LIMIT 1)')     , ('SELECT value FROM boxes WHERE contents  =  'gold' UNION SELECT value FROM boxes WHERE contents  =  'diamond'')         , ('SELECT sum(
SELECT count(*) ,  T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location'         , 'SELECT count(*) ,  T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location'         , ['SELECT count(*) ,  T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location']         , ['SELECT count(*) ,  T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location']     ,  ['SELECT count(*) ,  T1.location FROM warehouses AS
SELECT count(DISTINCT T1.Contents) ,  T1.warehouse FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.warehouse'         , 'SELECT count(DISTINCT T1.Contents) ,  T1.warehouse FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.warehouse'         , ['SELECT count(DISTINCT T1.Contents) ,  T1.warehouse FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.warehouse']]     , [['SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =
SELECT code FROM warehouses WHERE capacity  >  (SELECT count(*) FROM boxes WHERE warehouse  =  code) <MID>         , contents VARCHAR(255) NOT NULL , value REAL NOT NULL , warehouse INTEGER NOT NULL , PRIMARY KEY (code) , FOREIGN KEY (warehouse) REFERENCES warehouses(code) ); CREATE TABLE warehouses ( code INTEGER NOT NULL , location VARCHAR(255) NOT NULL , capacity INTEGER NOT NULL , PRIMARY KEY (code) ); SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.warehouse HAVING count(*)  >  T2.capacity; SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T
SELECT code FROM boxes GROUP BY warehouse HAVING count(*)  >  (SELECT capacity FROM warehouses WHERE code  =  warehouse) <MID>         , contents VARCHAR(255) NOT NULL , value REAL NOT NULL , warehouse INTEGER NOT NULL , PRIMARY KEY (code) , FOREIGN KEY (warehouse) REFERENCES warehouses(code) ); CREATE TABLE warehouses ( code INTEGER NOT NULL , location VARCHAR(255) NOT NULL , capacity INTEGER NOT NULL , PRIMARY KEY (code) ); SELECT T2.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity; SELECT T2.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.
SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago' GROUP BY T1.warehouse HAVING count(*)  =  1'         , 'SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago' GROUP BY T1.warehouse HAVING count(*)  =  1'         , ['SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'']         , ['SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2
SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago' GROUP BY T2.location HAVING count(*)  >=  2'         ,'Total Value of Boxes in Any Location But Chicago: $398.25'         ,'Total Value of Boxes in Any Location But Chicago: $398.25'         ,'Total Value of Boxes in Any Location But Chicago: $398.25'         ,'Total Value of Boxes in Any Location But Chicago: $398.25'         ,'Total Value of Boxes in Any Location But Chicago: $398.25'         ,'Total Value of Boxes in Any Location But Chicago: $398.25'
SELECT University_Name ,  city ,  state FROM university ORDER BY University_Name ASC'         , ['SELECT University_Name ,  city ,  state FROM university ORDER BY University_Name ASC']]     , [u'SELECT DISTINCT city FROM university', ['SELECT DISTINCT city FROM university']]     , [u'SELECT DISTINCT state FROM university', ['SELECT DISTINCT state FROM university']]     , [u'SELECT count(*) FROM university', ['SELECT count(*) FROM university']]     , [u'SELECT sum(Enrollment) FROM university', ['SELECT sum(Enrollment) FROM university']]     , [u'SELECT avg(Enrollment) FROM university', ['SELECT avg(Enrollment) FROM university']]     , [u'SELECT university_name FROM university WHERE city  =  'Berkeley'', ['SELECT university_name FROM university WHERE city
SELECT University_Name ,  City ,  State FROM university ORDER BY University_Name ASC'         , ['SELECT University_Name ,  City ,  State FROM university ORDER BY University_Name ASC']]     , [u'What are the names of all the majors? (List them in alphabetical order)', 'SELECT Major_Name FROM major ORDER BY Major_Name ASC']     , [u'Which major has the highest average total point? (Return the major name)', 'SELECT T2.Major_Name FROM overall_ranking AS T1 JOIN major AS T2 ON T1.Major_ID  =  T2.Major_ID ORDER BY Total DESC LIMIT 1']     , [u'Which university has the lowest overall reputation point? (Return the university name)', 'SELECT T1.University_Name FROM overall_ranking AS T1 JOIN university AS T
SELECT count(*) FROM university WHERE city  =  'Illinois' OR city  =  'Ohio' <MID>ity_ID`, `Reputation_point`, `Research_point`, `Citation_point`, `Total` FROM overall_ranking ORDER BY Total DESC LIMIT 10' | python3 -m json.tool     , ['[10, University of California Los Angeles, 554', '20, Harvard University, 443', '30, MIT, 429', '40, Stanford University, 423', '50, Yale University, 324', '60, University of Chicago, 223', '70, Duke University, 223', '80, Pennsylvania State University, 223', '90, University of Texas at Austin, 223', '100, University of
SELECT count(*) FROM university WHERE city  =  'Illinois' OR city  =  'Ohio' <MID>ity_ID`, `Reputation_point`, `Research_point`, `Citation_point`, `Total` FROM overall_ranking ORDER BY Total DESC LIMIT 10' | python3 -m json.tool     , ['[10, University_ID, Reputation_point ,  Research_point ,  Citation_point ,  Total]']     , SELECT rank ,  university_id ,  reputation_point ,  research_point ,  citation_point ,  total FROM overall_ranking ORDER BY total DESC LIMIT 10 | python3 -m json.tool     , ['[rank ,  university_id ,  reputation_point ,  research_point ,  citation_point ,  total]']     , SELECT DISTINCT university_id FROM major_ranking
SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM university WHERE affiliation  =  'Private' AND city != 'New York' AND home_conference != 'Conference' AND team_name != 'No Team' AND university_name NOT LIKE '%Test%' GROUP BY city HAVING count(*)  >=  250,350;' <MID>ity_ID`) REFERENCES `university`(`University_ID`) ON DELETE CASCADE ON UPDATE CASCADE,   FROM major AS T1 JOIN major_ranking AS T2 ON T1.major_id  =  T2.major_id WHERE T1.major_name  =  'Computer Science' GROUP BY T2.university_id ORDER BY sum(T2.reputation_point) DESC LIMIT 1;'
SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM university WHERE city  =  'New York' AND state  =  'NY'  GROUP BY state HAVING count(*)  >=  250; <MID>ity_ID) AS c1 FROM university WHERE city  =  'New York' AND state  =  'NY' GROUP BY state HAVING count(*)  >=  250;') AS T1 JOIN overall_ranking AS T2 ON T1.university_id  =  T2.university_id JOIN major_ranking AS T3 ON T2.university_id  =  T3.university_id AND T2.rank  =  T3.rank ORDER BY T2.total DESC LIMIT 1;') AS T4 JOIN major AS T5 ON T5.major_id  =
SELECT team_name FROM university WHERE enrollment  >  (SELECT avg(enrollment) FROM university) UNION SELECT team_name FROM university WHERE enrollment  <  (SELECT avg(enrollment) FROM university) ORDER BY team_name ASC'         , 'SELECT team_name FROM university WHERE enrollment  >  (SELECT avg(enrollment) FROM university)'     , 'SELECT team_name FROM university WHERE enrollment  <  (SELECT avg(enrollment) FROM university) ORDER BY team_name DESC'     , 'SELECT team_name FROM university WHERE enrollment  =  (SELECT avg(enrollment) FROM university) ORDER BY team_name ASC'     , 'SELECT team_name FROM university WHERE enrollment  !=  (SELECT avg(enrollment) FROM university) ORDER BY team_name ASC'     , 'SELECT
SELECT team_name FROM university WHERE enrollment  >  (SELECT avg(enrollment) FROM university)  '     ,'SELECT team_name FROM university WHERE enrollment  >  (SELECT avg(enrollment) FROM university) '     ,'SELECT team_name FROM university WHERE enrollment  >  (SELECT avg(enrollment) FROM university) '     ,'SELECT team_name FROM university WHERE enrollment  >  (SELECT avg(enrollment) FROM university) '     ,'SELECT team_name FROM university WHERE enrollment  >  (SELECT avg(enrollment) FROM university) '     ,'SELECT team_name FROM university WHERE enrollment  >  (SELECT avg(enrollment) FROM university) '     ,'SELECT team_name FROM university WHERE enrollment  >
SELECT DISTINCT home_conference FROM university WHERE team_name  =  'Yes' <EOT> <MID>ity_ID`, `Reputation_point`, `Research_point`, `Citation_point`, `Total` FROM overall_ranking ORDER BY Total DESC LIMIT 10;',
SELECT DISTINCT home_conference FROM university  ' , 'SELECT DISTINCT home_conference FROM university '] , ['SELECT count(DISTINCT home_conference) FROM university '] , ['SELECT count(DISTINCT home_conference) FROM university ']]
SELECT count(*) ,  home_conference FROM university GROUP BY home_conference'     , 'SELECT count(*) ,  home_conference FROM university GROUP BY home_conference'     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_con
SELECT count(*) ,  home_conference FROM university GROUP BY home_conference'     , 'SELECT count(*) ,  home_conference FROM university GROUP BY home_conference'     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_conference']     , ['SELECT count(*) ,  home_conference FROM university GROUP BY home_con
SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1'         , 'CA'     , ['SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1']     , ['SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1']     , ['SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1']     , ['SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1']     , ['SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1']     , ['SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1']     , ['SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1']     , ['SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1']     , ['SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT
SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1'         , 'CA'     , ['SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1']     , ['SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT
SELECT home_conference FROM university WHERE enrollment  >  2000 GROUP BY home_conference HAVING avg(enrollment) > (SELECT avg(enrollment) FROM university)  '         ,'SELECT home_conference FROM university WHERE enrollment  >  2000 GROUP BY home_conference HAVING avg(enrollment) > (SELECT avg(enrollment) FROM university) '         ,'SELECT home_conference FROM university WHERE enrollment  >  2000 GROUP BY home_conference HAVING avg(enrollment) > (SELECT avg(enrollment) FROM university) '     ,'SELECT home_conference FROM university WHERE enrollment  >  2000 GROUP BY home_conference HAVING avg(enrollment) > (SELECT avg(enrollment
SELECT Home_Conference FROM university WHERE enrollment  >  2000 GROUP BY Home_Conference HAVING avg(enrollment)  >  2000'         , 'SELECT Home_Conference FROM university WHERE enrollment  >  2000 GROUP BY Home_Conference HAVING avg(enrollment)  >  2000'     , ['SELECT Home_Conference FROM university WHERE enrollment  >  2000 GROUP BY Home_Conference HAVING avg(enrollment)  >  2000']     , ['SELECT Home_Conference FROM university WHERE enrollment  >  2000 GROUP BY Home_Conference HAVING avg(enrollment)  >  2000']      , 1     , ['SELECT Home_Conference FROM university WHERE enrollment
SELECT home_conference FROM university GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1'         , 'CONFERENCE_A'     , ['SELECT home_conference FROM university GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1']     , ['SELECT count(*) FROM university WHERE home_conference  =  'CONFERENCE_A'']     , ['SELECT count(*) FROM university WHERE home_conference  =  'CONFERENCE_B'']     , ['SELECT count(*) FROM university WHERE home_conference  =  'CONFERENCE_C'']     , ['SELECT count(*) FROM university WHERE home_conference  =  'CONFERENCE_D'']     , ['SELECT count(*) FROM university WHERE home_conference  =  'CONFERENCE_E'
SELECT home_conference FROM university GROUP BY home_conference ORDER BY sum(enrollment) ASC LIMIT 1'         , 'SELECT home_conference FROM university GROUP BY home_conference ORDER BY count(*) DESC LIMIT 1'     , 'SELECT home_conference FROM university GROUP BY home_conference ORDER BY avg(enrollment) DESC LIMIT 1'     , 'SELECT home_conference FROM university GROUP BY home_conference ORDER BY min(enrollment) DESC LIMIT 1'     , 'SELECT home_conference FROM university GROUP BY home_conference ORDER BY max(enrollment) ASC LIMIT 1'     , 'SELECT home_conference FROM university GROUP BY home_conference ORDER BY count(*) DESC LIMIT 1'     , 'SELECT home_conference FROM university GROUP BY home_conference ORDER BY count(*) ASC LIMIT 1'     , 'SELECT
SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC'         , 'SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC'     , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']      , 1     , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']     , 1     , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']      , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']     , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']      , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']     , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major
SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC'         , 'SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC'     , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']      , 1     , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']      , 1     , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']      , 1     , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']      , 1     , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']      , 1     , ['SELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC']      ,
SELECT T2.Major_Name ,  T1.rank FROM major_ranking AS T1 JOIN major AS T2 ON T1.Major_ID  =  T2.Major_ID WHERE university_name  =  'Augustana College' ORDER BY rank'     , ['SELECT T2.Major_Name ,  T1.rank FROM major_ranking AS T1 JOIN major AS T2 ON T1.Major_ID  =  T2.Major_ID WHERE university_name  =  'Augustana College' ORDER BY rank']]
SELECT t3.rank ,  t2.Major_Name FROM major AS t1 JOIN major_ranking AS t2 ON t1.Major_ID  =  t2.Major_ID JOIN university AS t3 ON t2.University_ID  =  t3.University_ID WHERE t3.University_name  =  'Augustana College' ORDER BY t2.Rank ASC'
SELECT t3.city ,  t3.state FROM overall_ranking AS t1 JOIN major_ranking AS t2 ON t1.university_id  =  t2.university_id JOIN university AS t3 ON t1.university_id  =  t3.university_id WHERE t2.major_id  =  (SELECT major_id FROM major WHERE major_name  =  'Accounting') ORDER BY t1.total DESC LIMIT 1; <MID>ity_ID`) REFERENCES `university`(`University_ID`)     FROM major_ranking AS T1 JOIN major AS T2 ON T1.major_id  =  T2.major_id JOIN university AS T3 ON T1.university_id  =  T3.university_id WHERE T2.major_name  =  'Accounting' ORDER BY T1.
SELECT t3.city ,  t3.state FROM major AS t1 JOIN major_ranking AS t2 ON t1.major_id  =  t2.major_id JOIN university AS t3 ON t2.university_id  =  t3.university_id WHERE t1.major_name  =  'Accounting' ORDER BY t2.rank LIMIT 1' <MID>ity_ID IN ( SELECT university_id FROM overall_ranking ) AND t3.University_ID IN ( SELECT university_id FROM major_ranking ) AND t4.University_ID IN ( SELECT university_id FROM major_ranking ) GROUP BY t4.University_ID ORDER BY avg(total) DESC LIMIT 1'     , 'SELECT t5.University_Name FROM major_ranking AS t1 JOIN overall_ranking AS t2 ON t1.university_id
SELECT t3.University_Name FROM major_ranking AS T1 JOIN major AS T2 ON T1.Major_ID  =  T2.Major_ID JOIN university AS T3 ON T3.University_ID  =  T1.University_ID WHERE T1.rank  =  1 GROUP BY T3.University_Name ORDER BY count(*) DESC LIMIT 1'         , 'SELECT t3.University_Name FROM major_ranking AS T1 JOIN major AS T2 ON T1.Major_ID  =  T2.Major_ID JOIN university AS T3 ON T3.University_ID  =  T1.University_ID WHERE T1.rank  =  1 GROUP BY T3.University_Name ORDER BY count(*) DESC LIMIT 1'     , ['SELECT t3.University_Name FROM major
SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID GROUP BY t1.University_ID ORDER BY count(*) DESC LIMIT 1'         , 'SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID GROUP BY t1.University_ID ORDER BY count(*) DESC LIMIT 1'     , 'SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID GROUP BY t1.University_ID ORDER BY count(*) DESC LIMIT 1'     , 'SELECT t1.University_Name FROM university AS t1 JOIN major_ran
SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID WHERE t2.rank  =  1 UNION SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking)')]
SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID WHERE t2.rank  =  1 GROUP BY t2.University_ID HAVING COUNT(*)  =  MAJOR_NAMES(SELECT DISTINCT Major_Name FROM major)'         , 'SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID WHERE t2.rank  =  1 GROUP BY t2.University_ID HAVING COUNT(*)  =  MAJOR_NAMES(SELECT DISTINCT Major_Name FROM major)'     , ['SELECT DISTINCT Major_Name FROM major']     , ['SELECT COUNT(*) FROM major']      , ['SELECT COUNT(*)
SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID JOIN major AS t3 ON t2.Major_ID  =  t3.Major_ID WHERE t3.Major_Name  =  'Accounting' INTERSECT SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID JOIN major AS t3 ON t2.Major_ID  =  t3.Major_ID WHERE t3.Major_Name  =  'Urban Education' <MID>ity_ID`, `Reputation_point`, `Research_point`, `Citation_point`, `Total` FROM overall_ranking ORDER BY Total
SELECT T1.University_Name FROM university AS T1 JOIN major AS T2 ON T1.University_ID  =  T2.University_ID WHERE T2.Major_Name  =  'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 JOIN major AS T2 ON T1.University_ID  =  T2.University_ID WHERE T2.Major_Name  =  'Urban Education' <MID>ity_ID`, `Reputation_point`, `Research_point`, `Citation_point`, `Total` FROM overall_ranking ORDER BY Total DESC LIMIT 100'     ,'SELECT T1.University_Name FROM university AS T1 JOIN major AS T2 ON T1.University_ID  =  T2.University_ID GROUP BY T1.University_Name
SELECT u.University_Name ,  o.Total FROM university AS u JOIN overall_ranking AS o ON u.University_ID  =  o.University_ID WHERE u.State  =  'Wisconsin' ORDER BY o.Total DESC NULLS LAST, u.University_Name ASC, o.Total DESC NULLS LAST, University_Name ASC, Total DESC NULLS LAST, Rank ASC, Total DESC NULLS LAST, Rank ASC, Total DESC NULLS LAST, Rank ASC, Total DESC NULLS LAST, Rank ASC, Total DESC NULLS LAST, Rank ASC, Total DESC NULLS LAST, Rank ASC, Total DESC NULLS LAST, Rank ASC, Total DESC NULLS LAST, Rank ASC, Total DESC NULLS LAST, Rank ASC, Total DESC NULLS LAST, Rank ASC, Total DESC NULLS LAST, Rank ASC, Total DESC NULLS LAST
SELECT University_Name ,  Rank FROM university WHERE city  =  'Madison' AND state  =  'WI' ORDER BY Rank ASC NULLS LAST' <MID>ity_ID`) REFERENCES `university`(`University_ID`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`) ON DELETE CASCADE ON UPDATE CASCADE'     , 'CREATE INDEX major_ranking_rank_index ON major_ranking(rank)']
SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY Research_point DESC LIMIT 1'         , 'University of Texas at Austin'         , 'SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY Research_point DESC LIMIT 1'     , 'SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY Total DESC LIMIT 1'         , 'University of Texas at Austin'         , 'SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2
SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Research_point DESC LIMIT 1'         , 'SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Research_point DESC LIMIT 1'         , 1     ,   'SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Research_point DESC LIMIT 1'         ,  ['SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON
SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Reputation_point ASC'         , 'SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Reputation_point ASC'     , ['SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Reputation_point DESC']         , 'SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_
SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Reputation_point ASC NULLS LAST'         , 'SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Reputation_point ASC NULLS LAST'         , ['SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Reputation_point ASC NULLS LAST']     ,   ['SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.
SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID WHERE t2.Major_name  =  'Accounting' AND rank  >=  3 ORDER BY rank LIMIT 1' <MID>ity_ID`) REFERENCES `university`(`University_ID`)     , FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)     , PRIMARY KEY (`Rank`, `Major_ID`, `University_ID`)     , UNIQUE KEY `rank_uni_maj` (`Rank`, `University_ID`, `Major_ID`)     , UNIQUE KEY `uni_maj` (`University_ID`, `Major_ID`)     ,
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID  =  T2.University_ID WHERE T2.Major_ID  =  (SELECT Major_ID FROM major WHERE Major_Name  =  'Accounting') ORDER BY T2.Total DESC LIMIT 3'
SELECT sum(enrollment) FROM university AS T1 JOIN overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE rank  <=  5'         , 'SELECT sum(enrollment) FROM university AS T1 JOIN overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE rank  <=  5'         , ['SELECT sum(enrollment) FROM university AS T1 JOIN overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE rank  <=  5']     , [43765]     , 0           ,  3      , 'SELECT count(*) FROM major'         , 'SELECT count(*) FROM major'         , ['SELECT count(*) FROM major']     , [8
SELECT sum(Enrollment) FROM university WHERE university_id IN (SELECT university_id FROM overall_ranking WHERE rank  <=  5) <MID>ity_ID`, `Major_ID`, `Rank`, `University_ID`, `Major_ID` FROM major_ranking WHERE Rank  <=  5 GROUP BY Major_ID ORDER BY sum(Enrollment) DESC LIMIT 1'     , 'SELECT T1.major_name FROM major AS T1 JOIN major_ranking AS T2 ON T1.major_id  =  T2.major_id WHERE T2.rank  <=  5'     , 'SELECT T3.university_name FROM university AS T3 JOIN overall_ranking AS T4 ON T3.university_id  =  T4.university_id WHERE T4.rank  <=  5'     , 'SELECT sum(En
SELECT t1.University_Name ,  t2.Citation_point FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID WHERE t2.Reputation_point  >=  (SELECT min(Reputation_point) FROM overall_ranking) ORDER BY t2.Citation_point DESC LIMIT 3'         , 'SELECT t1.University_Name ,  t2.Citation_point FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID WHERE t2.Reputation_point  >=  (SELECT min(Reputation_point) FROM overall_ranking) ORDER BY t2.Citation_point DESC LIMIT 3'     , ['SELECT t1.University_Name ,  t2.Citation_
SELECT T1.University_Name ,  T1.Citation_point FROM overall_ranking AS T1 JOIN university AS T2 ON T1.University_ID  =  T2.University_ID ORDER BY Reputation_point DESC LIMIT 3'         , 'SELECT T1.University_Name ,  T1.Citation_point FROM overall_ranking AS T1 JOIN university AS T2 ON T1.University_ID  =  T2.University_ID ORDER BY Reputation_point DESC LIMIT 3'     , ['SELECT T1.University_Name ,  T1.Citation_point FROM overall_ranking AS T1 JOIN university AS T2 ON T1.University_ID  =  T2.University_ID ORDER BY Reputation_point DESC LIMIT 3']     , ['SELECT T1.University_Name ,  T
SELECT DISTINCT STATE FROM university WHERE enrollment  <  3000 GROUP BY STATE HAVING count(*)  >  2'         , 'SELECT DISTINCT STATE FROM university WHERE enrollment  <  3000 GROUP BY STATE HAVING count(*)  >  2'         , ['New York', 'California']     , ['SELECT DISTINCT STATE FROM university WHERE enrollment  <  3000 GROUP BY STATE HAVING count(*)  >  2 EXCEPT SELECT DISTINCT STATE FROM university WHERE enrollment  <  3000 GROUP BY STATE HAVING count(*)  =  2']     , ['SELECT DISTINCT STATE FROM university WHERE enrollment  <  3000 GROUP BY STATE HAVING count(*)  =  2']          , ['SELECT DIST
SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2'         , 'SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2'     , ['SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2']      , 1     , ['SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2']     , ['SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2']      , 1     , ['SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2']
SELECT Title FROM Movies WHERE Rating IS NULL'         , 'rating': False}      , {'answer': 'SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T2.Rating  =  'Violent'', 'question': 'Find the names of movie theaters that show violent movies. The query result format is: (theater name ,  movie title)', 'rating': True}      , {'answer': 'SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T2.Rating  =  'R'', 'question': 'Find the names of movie theaters that show Romantic movies. The query result format is: (theater name ,  movie title)', 'rating': True}
SELECT title FROM movies WHERE rating IS NULL'         , 'rating': False}      , {'answer': 'SELECT name FROM MovieTheaters WHERE movie NOT IN (SELECT code FROM movies)', 'question': 'What are the names of movie theaters that are not showing any movies? [SQL]', 'rating': False}      , {'answer': 'SELECT max(code) FROM MovieTheaters', 'question': 'What is the highest code in the MovieTheaters table? [SQL]', 'rating': False}      , {'answer': 'SELECT min(code) FROM MovieTheaters', 'question': 'What is the lowest code in the MovieTheaters table? [SQL]', 'rating': False}      , {'answer': 'SELECT count(*) FROM MovieTheaters', 'question': 'How many movie theaters are there? [SQL]', 'rating': False}      , {'answer': 'SELECT
SELECT title FROM movies WHERE rating  =  'G' <MID>.movietheaters AS T1 ON T1.movie  =  T2.code WHERE T1.name  =  'CineArts' AND T2.rating  =  'G' UNION SELECT T2.title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T1.name  =  'CineFamily' AND T2.rating  =  'PG' UNION SELECT T2.title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T1.name  =  'CineSoft' AND T2.rating  =  'R' UNION SELECT T2.title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code
SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T2.Rating  =  'G' AND T2.Title != 'null' ORDER BY T1.Name ASC' <MID>T1.Movie  =  T2.Code WHERE T2.Rating  =  'PG' AND T2.Title != 'null' ORDER BY T1.Name ASC' > task4.sql
SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T1.Name  =  'Odeon' <MID>         , rating VARCHAR(255)        , PRIMARY KEY (code)     , CONSTRAINT MovieTheaters_Movie_fk FOREIGN KEY (movie) REFERENCES Movies(code) ON DELETE CASCADE ON UPDATE CASCADE      , CONSTRAINT MovieTheaters_Name_uq UNIQUE (name)      , CONSTRAINT MovieTheaters_Name_chk CHECK (name != 'Odeon')      , CONSTRAINT MovieTheaters_Name_len_chk CHECK (char_length(name) > 2)      , CONSTRAINT MovieTheaters_Name_len_chk
SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T1.Name  =  'Odeon' <MID>T1.Movie  =  T2.Code WHERE T1.Name  =  'Odeon' AND T2.Rating  =  'PG' ORDER BY T2.Title'
SELECT T2.Name ,  T1.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T1.Code'         , 'SELECT T2.Title ,  T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T1.Code'     , 'SELECT T2.Title ,  T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T1.Code WHERE T1.Name  =  'Movie Theater XYZ'')     , ('SELECT DISTINCT title FROM Movies')     , ('SELECT DISTINCT name FROM MovieTheaters')     , ('SELECT count(*) FROM MovieTheaters'))
SELECT T2.Name ,  T1.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code'         , 'SELECT T2.Title ,  T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code'     , 'SELECT T2.Title ,  T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T1.Name  =  'Movie Theater XYZ''     , 'SELECT T2.Title ,  T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T1.Name  =  'Movie Theater XYZ' AND T2.Rating  =  'PG
SELECT count(*) FROM Movies WHERE Rating  =  'G' <MID>. The movie theater has one or more movies associated with it. A movie can be shown at multiple movie theaters. Design this database using primary keys, foreign keys and other necessary constraints. Then write a report in LaTeX that provides an overview of the database schema. Also include a screen shot of the database diagram. Submit both the LaTeX file and the screen shot as part of your submission. You may name the screen shot as DB_Schema.png. Do not use any online tool to draw the database diagram. Draw it by hand. Use a single A4 sheet. You are allowed to leave some space at the bottom for writing comments. Write the comments in bold font. Mark all primary keys, foreign keys and constraints. Number lines. You may also include notes in the form of comments. Write the report in a single document following the template given below. You may include an appendix if
SELECT count(*) FROM Movies WHERE Rating  =  'G' <MID> SELECT count(*) FROM Movies WHERE Rating  =  'PG' UNION SELECT count(*) FROM Movies WHERE Rating  =  'NC-17' UNION SELECT count(*) FROM Movies WHERE Rating  =  'R' UNION SELECT count(*) FROM Movies WHERE Rating  =  'TV-MA' UNION SELECT count(*) FROM Movies WHERE Rating  =  'TV-14' UNION SELECT count(*) FROM Movies WHERE Rating  =  'TV-PG' UNION SELECT count(*) FROM Movies WHERE Rating  =  'Unrated' UNION SELECT count(*) FROM Movies WHERE Rating  =  'G' UNION SELECT count(*) FROM Movies WHERE Rating  =  'PG-13' UNION SELECT count(*) FROM Movies WHERE Rating  =  'TV-12' UNION SELECT count(*) FROM Movies
SELECT count(DISTINCT T1.title) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie' , '3' ]]
SELECT count(*) FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T2.rating  =  'PG' <MID> SELECT count(*) FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T2.rating  =  'PG' AND T1.name LIKE '%AMC%' AND T1.name LIKE '%Roxie%' AND T1.name LIKE '%Movies%' AND T1.name LIKE '%Theater%' AND T1.name NOT LIKE '%Mini%' AND T1.name NOT LIKE '%Drive-in%' AND T1.name NOT LIKE '%Outdoor%' AND T1.name NOT LIKE '%Picnic%' AND T1.name NOT LIKE '%Festivals%' AND T1.name NOT LIKE '%Food%' AND T1.name NOT LIKE '%
SELECT count(DISTINCT T1.title) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie' , '3' ]]
SELECT COUNT (DISTINCT title) FROM Movies' , '3' , 'How many movie theaters are there in the database?[SQL] SELECT count(*) FROM MovieTheaters' , '4' , 'How many different movie ratings are there in the database?[SQL] SELECT count(DISTINCT rating) FROM Movies' , '2' , 'How many sessions for each movie theater are there?[SQL] SELECT count(*) ,  T1.name FROM MovieTheaters AS T1 JOIN Session AS T2 ON T1.code  =  T2.movietheater GROUP BY T1.name' , '2' , 'How many total sessions are there?[SQL] SELECT count(*) FROM Session' , '12' ]
SELECT count(DISTINCT name) FROM MovieTheaters'
SELECT count(*) FROM MovieTheaters'
SELECT T1.Rating FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie WHERE T1.Title LIKE '%Citizen%' <MID>         , T1.Rating FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie WHERE T1.Title LIKE '%Citizen%' <EOT> __author__ = 'michael'
SELECT T1.Rating FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie WHERE TITLE LIKE '%Citizen%' <MID> SELECT min(YEAR) FROM MovieTheaters; SELECT max(YEAR) FROM MovieTheaters; SELECT count(*) FROM MovieTheaters; SELECT avg(YEAR) FROM MovieTheaters; SELECT T1.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1; SELECT T1.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code GROUP BY T1.name ORDER BY count(*) ASC LIMIT 1; SELECT T1.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =
SELECT T2.name FROM MovieTheaters AS T1 JOIN THEATERS AS T2 ON T1.Name  =  T2.code WHERE T1.movie IN (SELECT code FROM Movies WHERE rating  =  'G' OR rating  =  'PG') <MID>         , name VARCHAR(255) NOT NULL , movie INTEGER ,  FOREIGN KEY (movie) REFERENCES Movies(code) <EOT> __author__ = 'michael'
SELECT T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie WHERE T1.Rating  =  'G' OR T1.Rating  =  'PG' <MID>     FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Code  =  T2.Code WHERE T2.Rating  =  'PG' UNION SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Code  =  T2.Code WHERE T2.Rating  =  'G' ORDER BY T2.Title ASC;'     WHERE THE FIRST QUERY RETURNS THE NAMES OF THE MOVIE THEATERS THAT ARE PLAYING G OR PG RATED MOVIES AND THE SECOND QUERY RETUR
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie WHERE T2.Name  =  'Odeon' OR T2.Name  =  'Imperial' <MID>         , rating VARCHAR(255)      , PRIMARY KEY (code)     , UNIQUE KEY Title (title)      , KEY Rating (rating)      , FULLTEXT KEY FT_Title (title)      , FULLTEXT KEY FT_Rating (rating)  ) CREATE TABLE MovieTheaters ( code INTEGER PRIMARY KEY , name VARCHAR(255) NOT NULL , movie INTEGER , FOREIGN KEY (movie) REFERENCES Movies(code) ) SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code
SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T1.Movie WHERE T1.Name  =  'Odeon' OR T1.Name  =  'Imperial' <MID> SELECT count(*) FROM MovieTheaters; SELECT max(code) FROM MovieTheaters; SELECT min(code) FROM MovieTheaters; SELECT avg(code) FROM MovieTheaters; SELECT count(*) FROM Movies; SELECT max(code) FROM Movies; SELECT min(code) FROM Movies; SELECT avg(code) FROM Movies; SELECT count(*) FROM Movies; SELECT max(code) FROM Movies; SELECT min(code) FROM Movies; SELECT avg(code) FROM Movies; SELECT count(*) FROM Movies; SELECT max(code) FROM Movies; SELECT min(code) FROM Movies; SELECT avg(code) FROM Movies
SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial' <MID>         , T2.name AS Theater_Name FROM MovieTheaters AS T1 JOIN MovieTheaters AS T2 ON T1.Movie  =  T2.Movie WHERE T1.name  =  'Odeon' INTERSECT SELECT T1.title FROM MovieTheaters AS T1 JOIN MovieTheaters AS T2 ON T1.Movie  =  T2.Movie WHERE T1.name  =  'Imperial' <EOT> __author__ = 'michael'
SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial' <MID>         , T2.name AS Theater_Name FROM MovieTheaters AS T1 JOIN MovieTheaters AS T2 ON T1.Movie  =  T2.Movie WHERE T1.name  =  'Odeon' INTERSECT SELECT T1.title FROM MovieTheaters AS T1 JOIN MovieTheaters AS T2 ON T1.Movie  =  T2.Movie WHERE T1.name  =  'Imperial' <EOT> __author__ = 'michael'
SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T1.Name != 'Odeon' <MID>T1.Movie  =  T2.Code WHERE T1.Name != 'Odeon' AND T1.Name != 'Vivendi' AND T1.Name != 'Eko' AND T1.Name != 'Megaron' AND T1.Name != 'Paradiso' AND T1.Name != 'Roxy' AND T1.Name != 'Videocom' AND T1.Name != 'Cinema' AND T1.Name != 'Sun' AND T1.Name != 'New' AND T1.Name != 'Kinepolis' AND T1.Name != 'Metro' AND T1.Name != 'Plex' AND T1.Name != 'IMAX'
SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.Name  =  'Odeon' <MID>T1.code  =  T2.movie WHERE T2.Name  =  'Odeon' AND T1.rating  >  3'
SELECT title FROM Movies ORDER BY title ASC]'         , 'answer': [['Titanic', 'WALL-E', 'Avatar']]         , 'difficulty': 1         , 'category': 'Basic Select'         , 'active': True         , 'created_by': 'admin'         , 'created_on': '2016-07-28T04:42:39.237Z'         , 'question_type': 'MULTIPLE_CHOICE'         , 'instructions': 'null'         , 'submitted_by': 'admin'         , 'submitted_on': '2016-07-28T04:42:39.237Z' }     , { 'challenge_id': 11
SELECT title FROM movies ORDER BY title ASC' , 'SELECT title FROM movies ORDER BY title DESC' ] , answers: ['SELECT title FROM movies ORDER BY title ASC' , 'SELECT title FROM movies ORDER BY title DESC' ] } , { question: 'What are the names of theater in alphabetical order? [SQL] SELECT name FROM movietheaters ORDER BY name ASC' , answers: ['SELECT name FROM movietheaters ORDER BY name ASC' , 'SELECT name FROM movietheaters ORDER BY name DESC' ] } , { question: 'Which theater is located in New York? [SQL] SELECT name FROM movietheaters WHERE city  =  'New York' ' , answers: ['SELECT name FROM movietheaters WHERE city  =  'New York' '] } , { question: 'Which theater is located in Los Angeles? [SQL] SELECT name FROM movietheaters WHERE city  =  'Los Angeles
SELECT title FROM movies ORDER BY T rating'         , 'SELECT title FROM movies ORDER BY T rating'         , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM movies ORDER BY T rating'     , 'SELECT title FROM mov
SELECT title FROM movies ORDER BY rating DESC' , 'SELECT title FROM movies ORDER BY rating ASC' ] , answers: ['Gone With The Wind', 'Casablanca', 'IT', 'Notting Hill', 'The Shawshank Redemption', 'The Godfather', '12 Angry Men', 'The Dark Knight', 'Pulp Fiction', 'Schindler''s List'] } , { question: 'What are the names of theater in MovieTheaters table that show the movie Casablanca?' , correct_answer: 'MovieTheaters.Name WHERE MovieTheaters.Movie  =  (SELECT T1.code FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Title  =  T2.Movie WHERE T1.title  =  'Casablanca')' , wrong_answers: [ 'MovieTheaters.Name WHERE MovieTheaters.
SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1'         , 'Python': ''}     , 3: {'SQL': 'SELECT max(T1.Rating) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie' , 'Python': ''}     , 4: {'SQL': 'SELECT max(T1.Rating) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie WHERE T2.Name  =  'Central' GROUP BY T2.Name HAVING count(*)  =  (SELECT count(*) FROM MovieTheaters WHERE name  =  'Central')' , 'Python': ''}
SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1'         , 'Theater with most movies:  CineArts'         , 'SELECT count(*) FROM MovieTheaters'         , 18         , 'SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1'         , 'Theater with most movies:  CineArts'         , 'SELECT count(*) FROM MovieTheaters'         , 18         , 'SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code GROUP BY
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1'         , 'Python': ''}     , 3: {'SQL': 'SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1', 'Python': ''}     , 4: {'SQL': 'SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1'}     , 5: {'SQL': 'SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie GROUP BY T1.Title ORDER BY COUNT(*) DESC LIMIT 1'         , 'Rating' : 'The rating given to the film by the audience'         , 'Director' : 'The director of the film'         , 'Year' : 'The year in which the film was released'         , 'Genre' : 'The genre to which the film belongs' }     , 'TASK_3' : { 'Query' : 'SELECT title FROM movies WHERE YEAR  =  2015 AND Rating  =  'PG' UNION SELECT title FROM movies WHERE YEAR  =  2015 AND Rating  =  'NC-17' UNION SELECT title FROM movies WHERE YEAR  =  2015
SELECT count(*) ,  Rating FROM Movies GROUP BY Rating'         , 'SELECT count(*) ,  Rating FROM Movies GROUP BY Rating'         , ['count', 'Rating']     , ['Number of movies in each rating.']     , ['Number of movies in each rating.']     , ['Number of movies in each rating.']     , ['Number of movies in each rating.']     , ['Number of movies in each rating.']     , ['Number of movies in each rating.']     , ['Number of movies in each rating.']     , ['Number of movies in each rating.']     , ['Number of movies in each rating.']     , ['Number of movies in each rating.']     , ['Number of movies in each rating.']     , ['Number of movies in each rating.']
SELECT count(*) ,  Rating FROM Movies GROUP BY Rating'         , 'SELECT count(*) ,  Rating FROM Movies GROUP BY Rating'         , ['count', 'Rating']         , 10     , ['SELECT count(*) ,  Rating FROM Movies GROUP BY Rating']     , ['SELECT count(*) ,  Rating FROM Movies GROUP BY Rating']     , ['SELECT count(*) ,  Rating FROM Movies GROUP BY Rating']          , ['SELECT count(*) ,  Rating FROM Movies GROUP BY Rating']     , ['SELECT count(*) ,  Rating FROM Movies GROUP BY Rating']     , ['SELECT count(*) ,  Rating FROM Movies GROUP BY Rating']     , ['SELECT count(*) ,  Rating FROM Movies GROUP BY Rating']     , ['SELECT count(*) ,  Rating FROM Movies GROUP
SELECT count(*) FROM Movies WHERE Rating != 'null' <MID>. The task is to find the number of movies whose rating is not null. Write a query to return the count. Also write a query to return all the titles of the movies whose rating is not null. | SQL | Easy |
SELECT count(*) FROM Movies WHERE Rating != 'null' <MID> SELECT count(*) FROM MovieTheaters;][Python] SELECT count(*) FROM MovieTheaters;][Java] SELECT count(*) FROM MovieTheaters;][C++] SELECT count(*) FROM MovieTheaters;][.Net] SELECT count(*) FROM MovieTheaters;][PHP] SELECT count(*) FROM MovieTheaters;][Ruby] SELECT count(*) FROM MovieTheaters;][Haskell] SELECT count(*) FROM MovieTheaters;][JavaScript] SELECT count(*) FROM MovieTheaters;][Android] SELECT count(*) FROM MovieTheaters;][iOS] SELECT count(*) FROM MovieTheaters;][Flutter] SELECT count(*) FROM MovieTheaters;][React Native] SELECT count(*) FROM MovieTheaters;][Node.js] SELECT count(*) FROM MovieTheaters;][Go] SELECT count(*) FROM MovieTheaters;][Dart] SELECT count(*) FROM MovieTheaters;][R
SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code'         , 'SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code GROUP BY T1.Name HAVING COUNT(*)  >=  1'         , 'SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 3'         , 'SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1'         , 'SELECT max(T1.Rating) FROM Movies AS T1'
SELECT T2.name FROM MovieTheaters AS T1 JOIN Theaters AS T2 ON T1.Name  =  T2.code WHERE T1.movie != 'null' <MID> SELECT name FROM THEATERS WHERE code IN (SELECT Theater FROM MovieTheaters) ORDER BY name ASC;'
SELECT name FROM MovieTheaters WHERE code NOT IN (SELECT movie FROM MovieTheaters) ORDER BY name ASC; SELECT name FROM MovieTheaters EXCEPT SELECT T2.name FROM MovieTheaters AS T1 JOIN MovieTheaters AS T2 ON T1.movie  =  T2.movie ORDER BY name ASC; SELECT name FROM MovieTheaters MINUS SELECT T2.name FROM MovieTheaters AS T1 JOIN MovieTheaters AS T2 ON T1.movie  =  T2.movie ORDER BY name ASC; SELECT name FROM MovieTheaters EXCEPT SELECT T2.name FROM MovieTheaters AS T1 JOIN MovieTheaters AS T2 ON T1.movie  =  T2.movie ORDER BY name ASC; SELECT name FROM MovieTheaters INTERSECT SELECT T2.name FROM MovieTheaters AS T1 JOIN MovieTheaters AS T2 ON T1.movie  =  T2.movie ORDER
SELECT name FROM movietheaters WHERE code NOT IN (SELECT movie FROM movietheaters) ORDER BY name ASC; SELECT name FROM movietheaters EXCEPT SELECT T2.name FROM movietheaters AS T1 JOIN movietheaters AS T2 ON T1.movie  =  T2.code GROUP BY T1.code HAVING count(*)  >  1 ORDER BY name ASC; SELECT name FROM movietheaters EXCEPT SELECT T2.name FROM movietheaters AS T1 JOIN movietheaters AS T2 ON T1.movie  =  T2.code GROUP BY T1.code HAVING count(*)  >  1 ORDER BY name ASC; SELECT name FROM movietheaters EXCEPT SELECT T2.name FROM movietheaters AS T1 JOIN movietheaters AS T2 ON T1.movie  =  T2.code GROUP BY T1.code HAVING count(*)  >  1 ORDER BY
SELECT T2.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T2.rating  =  'G' <MID>         , name VARCHAR(255) NOT NULL  # The name of the movie theater.          , movie INTEGER  # The movie currently playing at the movie theater.          , FOREIGN KEY (movie) REFERENCES Movies(code)  # Ensures that the movie currently playing at the movie theater is valid.          , PRIMARY KEY(code)  # Each record in the table must have a unique code.          , UNIQUE(name)  # Each movie theater must have a unique name.          , CHECK(rating IN ('G','PG','R'))  # The rating must be one of the following values: G , PG , or R
SELECT T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie WHERE T1.Rating  =  'G' <MID>         , name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.code  =  T2.code WHERE T2.rating  =  'G' ORDER BY T1.name ASC'     , 'SELECT T2.name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G' ORDER BY T2.name ASC'     , 'SELECT T2.name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G' ORDER BY T2.name ASC'     ,
SELECT Title FROM Movies WHERE Rating  =  'PG' UNION SELECT Title FROM Movies WHERE Rating  =  'NC-17' <MID>. The movie theater has one or more movies associated with it. A movie is shown at a particular movie theater for only one session. Design this relationship in the database schema. Note that the session information is not part of the movie theater entity. Also note that a single movie can be shown at multiple movie theaters. Design this relationship in the database schema.**_  **_Design a relationship that represents the fact that a movie is shown at a particular movie theater for a particular session._**  **_Note that this relationship is reflexive because a movie can be shown at the same movie theater for different sessions._**_  **_Also note that this relationship is transitive because if movie A is shown at movie theater B for session 1 and movie B is shown at
SELECT title FROM movies WHERE rating  =  'R' UNION SELECT title FROM movies WHERE rating  =  'PG' UNION SELECT title FROM movies WHERE rating  =  'G' UNION SELECT title FROM movies WHERE rating  =  'NC-17' UNION SELECT title FROM movies WHERE rating  =  'PG-13' UNION SELECT title FROM movies WHERE rating  =  'PG-14' UNION SELECT title FROM movies WHERE rating  =  'Unrated' UNION SELECT title FROM movies WHERE rating  =  'TV-MA' UNION SELECT title FROM movies WHERE rating  =  'TV-14' UNION SELECT title FROM movies WHERE rating  =  'TV-G' UNION SELECT title FROM movies WHERE rating  =  'TV-Y' UNION SELECT title FROM movies WHERE rating  =  'TV-Y7' UNION SELECT title FROM movies WHERE rating  =
SELECT DISTINCT Rating FROM Movies'         , 'SELECT count(*) FROM Movies'         , 'SELECT count(*) FROM MovieTheaters'         , 'SELECT max(Rating) FROM Movies'         , 'SELECT min(Rating) FROM Movies'         , 'SELECT avg(Rating) FROM Movies'         , 'SELECT TITLE FROM Movies WHERE Rating  =  'Good'']     FROM DB_FILENAME SELECT DISTINCT Rating FROM Movies'         ;
SELECT DISTINCT Rating FROM Movies ORDER BY Rating DESC' , 'SELECT count(*) FROM Movies GROUP BY Rating' ]} , {'question': 'How many movie theaters are there?', 'answer': [3]}]
SELECT * FROM Movies WHERE Rating IS NULL <MID>.movie_theater AS T1 ON T1.movie  =  T2.code WHERE T2.name  =  'New York Movie Theater' AND T2.rating  >  4; SELECT T2.title FROM Movies AS T2 JOIN MovieTheaters AS T1 ON T1.movie  =  T2.code WHERE T1.name  =  'New York Movie Theater' AND T2.rating  >  4; SELECT T2.title FROM Movies AS T2 JOIN MovieTheaters AS T1 ON T1.movie  =  T2.code WHERE T1.name  =  'New York Movie Theater' AND T2.rating  >  4; SELECT T2.title FROM Movies AS T2 JOIN MovieTheaters AS T1 ON T1.movie  =  T2.code WHERE T1.name  =
SELECT title FROM movies WHERE rating IS NULL <MID> SELECT name FROM movie_theaters WHERE code  =  (SELECT movie FROM MovieTheaters WHERE name  =  'CineArts') AND T1.title != T2.title;'
SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters) <MID>.code = MovieTheaters.movie'         , T1.title AS 'Title not showing' FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code != T2.movie'     , SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code = T2.movie'     , SELECT T1.title FROM movies AS T1 EXCEPT SELECT T2.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code = T2.movie'     , SELECT T1.title FROM movies AS T1 EXCEPT SELECT T2.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code = T2.movie'     , SELECT T1.title FROM movies AS
SELECT Title FROM Movies EXCEPT SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T1.movie IS NOT NULL'         , 'SELECT Title FROM Movies EXCEPT SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T1.movie IS NOT NULL'     , 'SELECT Title FROM Movies EXCEPT SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T1.movie IS NOT NULL'     , 'SELECT Title FROM Movies EXCEPT SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T1.movie IS NOT NULL'
SELECT T1.name FROM employee AS T1 JOIN package AS T2 ON T1.employeeid = T2.recipient ORDER BY T2.weight DESC LIMIT 1'     , 'Client A' : 'SELECT T1.name FROM employee AS T1 JOIN package AS T2 ON T1.employeeid = T2.sender ORDER BY T2.weight DESC LIMIT 1'     , 'Manager of the planet Earth' : 'SELECT T1.Name FROM Employee AS T1 JOIN has_clearance AS T2 ON T1.employeeID  =  T2.planet WHERE T2.level  =  50'     , 'DBA' : 'SELECT name FROM employee WHERE position  =  'DBA'}'
SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient ORDER BY T2.Weight DESC LIMIT 1'     , 'Client Name: ' + str(db.query('SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient ORDER BY T2.Weight DESC LIMIT 1')[0][0])     , 'What is the date of the latest shipment made? [SQL] SELECT max(Date) FROM Shipment'     , db.query('SELECT max(Date) FROM Shipment')[0][0].strftime('%Y-%m-%d')     , 'How many employees does the organization have? [SQL] SELECT count(*) FROM Employee'     , str(db.query('SELECT count(*) FROM Employee')[0][0])     ,
SELECT sum(T1.Weight) FROM package AS T1 JOIN sender AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  'Leo Wong' <MID>     , level INTEGER NOT NULL , primary key(employee , planet) )'''     , '''CREATE TABLE shipment ( shipmentid INTEGER PRIMARY KEY , date DATE , manager INTEGER NOT NULL , planet INTEGER NOT NULL , FOREIGN KEY (manager) REFERENCES employee(employeeid) , FOREIGN KEY (planet) REFERENCES planet(planetid) )'''     , '''CREATE TABLE package ( shipment INTEGER NOT NULL , packagenumber INTEGER NOT NULL , contents VARCHAR(255) NOT NULL , weight REAL NOT NULL , sender INTEGER NOT NULL , recipient INTEGER NOT NULL , PRIMARY KEY(
SELECT sum(T1.Weight) FROM package AS T1 JOIN sender AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name  =  'Leo Wong' <MID>     , level INTEGER NOT NULL , primary key(employee , planet) )'''     , '''CREATE TABLE shipment ( shipmentid INTEGER PRIMARY KEY , date DATE , manager INTEGER NOT NULL , planet INTEGER NOT NULL , FOREIGN KEY (manager) REFERENCES employee(employeeid) , FOREIGN KEY (planet) REFERENCES planet(planetid) )'''     , '''CREATE TABLE package ( shipment INTEGER NOT NULL , packagenumber INTEGER NOT NULL , contents VARCHAR(255) NOT NULL , weight REAL NOT NULL , sender INTEGER NOT NULL , recipient INTEGER NOT NULL , PRIMARY KEY(shipment
SELECT POSITION FROM Employee WHERE Name  =  'Amy Wong' <MID>     , T1.date , T3.name FROM shipment AS T1 JOIN has_clearance AS T2 ON T1.shipmentid  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.planet WHERE T3.name  =  'Earth' AND T1.date  >  '2017-04-21' ORDER BY T1.date DESC LIMIT 3'     , ['Client A', 'Client B', 'Client C']]     , ['SELECT T2.accountnumber FROM package AS T1 JOIN sender AS T2 ON T1.sender  =  T2.accountnumber' , [1234567890, 123456789, 1234
SELECT POSITION FROM Employee WHERE Name  =  'Amy Wong' <MID>     , T1.date , T3.name FROM shipment AS T1 JOIN has_clearance AS T2 ON T1.shipmentid  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.planet WHERE T3.name  =  'Earth' AND T1.date  >  '2017-04-22' ORDER BY T1.date DESC LIMIT 3'     , ['Client', 'Sender', 'Recipient']]     , ['SELECT T2.accountnumber FROM package AS T1 JOIN client AS T2 ON T1.sender  =  T2.accountnumber UNION SELECT T2.accountnumber FROM package AS T1 JOIN client AS T2 ON T1.recipient  =  T2.account
SELECT Salary ,  POSITION FROM Employee WHERE Name  =  'Turanga Leela' <MID>     , T1.date ,  T3.name FROM shipment AS T1 JOIN has_clearance AS T2 ON T1.shipmentid  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.planetid WHERE T3.name  =  'Earth' AND T1.date  >  '2016-12-25 17:49:58' ORDER BY T1.date DESC LIMIT 50;'     , 'SELECT T1.date ,  T3.name FROM shipment AS T1 JOIN has_clearance AS T2 ON T1.shipmentid  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.
SELECT Salary ,  POSITION FROM Employee WHERE Name  =  'Turanga Leela' <MID>     , T1.date ,  T3.name FROM shipment AS T1 JOIN has_clearance AS T2 ON T1.shipmentid  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.planetid WHERE T3.name  =  'Earth' AND T1.date  >  '2016-12-25 17:46:51' UNION SELECT T1.date ,  T3.name FROM shipment AS T1 JOIN has_clearance AS T2 ON T1.shipmentid  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.planetid WHERE T3.name  =  'Mars' AND
SELECT avg(Salary) FROM Employee WHERE POSITION  =  'Intern' <MID>     , T1.date AS ShipDate FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planet_id JOIN has_clearance AS T3 ON T2.planet_id  =  T3.planet JOIN employee AS T4 ON T4.employee_id  =  T3.manager WHERE T2.coordinates  >  100 AND T1.date  =  (SELECT max(T1.date) FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planet_id) GROUP BY T1.shipmentid ORDER BY sum(T2.coordinates) DESC LIMIT 10;'     , 'SELECT count(*) FROM employee;'     , 'SELECT name
SELECT avg(salary) FROM Employee WHERE POSITION  =  'Intern' GROUP BY POSITION HAVING COUNT(*)  >  100' <MID>     , level  :  'manager'   , manager:  null   , planet:  null   , has_clearance:  null   , package:  null   , sender:  null   , recipient:  null   , contents:  null   , weight:  null   , date:  null   , shipmentid:  null   , } , { shipmentid:  3   , date:  '2016-07-04'   , package:  1   , contents:  'Package #1'   , weight:  15   , sender:  1   , recipient:  2   , }
SELECT level FROM Has_clearance WHERE planet  =  1'     , 'Physician' : 'SELECT level FROM Has_clearance WHERE planet  =  1 AND EMPLOYEE  =  3'     , 'Manager' : 'SELECT level FROM Has_clearance WHERE planet  =  1 AND EMPLOYEE  =  2' }
SELECT level FROM has_clearance AS T1 JOIN employee AS T2 ON T1.employee  =  T2.EmployeeID WHERE T2.position  =  'Physician' UNION SELECT level FROM has_clearance AS T1 JOIN employee AS T2 ON T1.employee  =  T2.EmployeeID WHERE T2.position  =  'Administrator' UNION SELECT level FROM has_clearance AS T1 JOIN employee AS T2 ON T1.employee  =  T2.EmployeeID WHERE T2.position  =  'Clerk' UNION SELECT level FROM has_clearance AS T1 JOIN employee AS T2 ON T1.employee  =  T2.EmployeeID WHERE T2.position  =  'Cook' UNION SELECT level FROM has_clearance AS T1 JOIN employee AS T2 ON T1.employee  =  T2.EmployeeID WHERE T2.position  =
SELECT T1.PackageNumber FROM Package AS T1 JOIN Sender AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  'Leo Wong' <MID>     , level INTEGER NOT NULL , primary key(employee , planet) ) ENGINE = InnoDB; CREATE TABLE shipment ( shipmentid INTEGER PRIMARY KEY , date DATE , manager INTEGER NOT NULL , planet INTEGER NOT NULL , FOREIGN KEY (manager) REFERENCES employee(employeeid) , FOREIGN KEY (planet) REFERENCES planet(planetid) ) ENGINE = InnoDB; CREATE TABLE client ( accountnumber INTEGER PRIMARY KEY , name VARCHAR(255) NOT NULL ) ENGINE = InnoDB; CREATE TABLE package ( shipment INTEGER NOT NULL , packagenumber INTEGER NOT NULL , contents
SELECT count(*) FROM package AS T1 JOIN client AS T2 ON T1.sender = T2.AccountNumber WHERE T2.Name  =  'Leo Wong' <MID>     , level INTEGER NOT NULL , primary key(employee , planet) ) SELECT * FROM CLEARANCE_TABLE;',     , 'INSERT INTO has_clearance VALUES (1 , 1 , 50);',     , 'SELECT count(*) FROM package WHERE Sender  =  1;'   , ]
SELECT T1.PackageNumber FROM package AS T1 JOIN shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN employee AS T3 ON T2.manager  =  T3.EmployeeID WHERE T3.Name  =  'Leo Wong' AND T1.Contents  =  'Received' UNION SELECT T1.PackageNumber FROM package AS T1 JOIN shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN employee AS T3 ON T2.manager  =  T3.EmployeeID WHERE T3.Name  =  'Leo Wong' AND T1.Contents  =  'Not Received' ORDER BY T1.PackageNumber ASC'     , ['SELECT T1.PackageNumber FROM package AS T1 JOIN shipment AS T2 ON T1.Shipment  =  T2.Sh
SELECT T1.PackageNumber FROM Package AS T1 JOIN SHIPMENT AS T2 ON T1.Shipment  =  T2.Shipment JOIN Employee AS T3 ON T2.manager  =  T3.EmployeeID WHERE T3.Name  =  'Leo Wong' AND T3.Position  =  'Manager' UNION SELECT T1.PackageNumber FROM Package AS T1 JOIN SHIPMENT AS T2 ON T1.Shipment  =  T2.Shipment JOIN Employee AS T3 ON T2.manager  =  T3.EmployeeID WHERE T3.Name  =  'Leo Wong' AND T3.Position  =  'Subordinate' UNION SELECT T1.PackageNumber FROM Package AS T1 JOIN SHIPMENT AS T2 ON T1.Shipment  =  T2.Shipment JOIN Client AS T3 ON T2.
SELECT T1.Contents FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN Employee AS T3 ON T2.Manager  =  T3.EmployeeID WHERE T3.Name  =  'Leo Wong' UNION SELECT T1.Contents FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN Client AS T3 ON T2.Sender  =  T3.AccountNumber WHERE T3.Name  =  'Leo Wong' UNION SELECT T1.Contents FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN Client AS T3 ON T2.Recipient  =  T3.AccountNumber WHERE T3.Name  =  'Leo Wong' <MID>
SELECT T1.PackageNumber FROM Package AS T1 JOIN SHIPMENT AS T2 ON T1.Shipment  =  T2.Shipment JOIN Client AS T3 ON T2.Sender  =  T3.AccountNumber WHERE T3.Name  =  'Leo Wong' UNION SELECT T1.PackageNumber FROM Package AS T1 JOIN SHIPMENT AS T2 ON T1.Shipment  =  T2.Shipment JOIN Client AS T3 ON T2.Recipient  =  T3.AccountNumber WHERE T3.Name  =  'Leo Wong'')]
SELECT count(*) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN client AS T3 ON T3.AccountNumber  =  T2.manager WHERE T2.Date  =  2009-04-16 AND T3.Name  =  'Ogden Wernstrom' AND T1.recipient  =  T3.AccountNumber'     , ['SELECT count(*) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN client AS T3 ON T3.AccountNumber  =  T2.manager WHERE T2.Date  =  2009-04-16 AND T3.Name  =  'Leo Wong' AND T1.sender  =  T3.AccountNumber'']]
SELECT count(*) FROM package AS T1 JOIN client AS T2 ON T1.sender = T2.AccountNumber JOIN client AS T3 ON T1.recipient = T3.AccountNumber WHERE T2.Name = 'Ogden Wernstrom' AND T3.Name = 'Leo Wong' GROUP BY T1.shipment ORDER BY count(*) DESC LIMIT 1'     , ['SELECT count(*) FROM package AS T1 JOIN client AS T2 ON T1.sender = T2.AccountNumber JOIN client AS T3 ON T1.recipient = T3.AccountNumber WHERE T2.Name = 'Ogden Wernstrom' AND T3.Name = 'Leo Wong' GROUP BY T1.shipment ORDER BY count(*) DESC LIMIT 1']]
SELECT T1.Contents FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN Client AS T3 ON T2.Sender  =  T3.AccountNumber WHERE T3.Name  =  'John Zoidfarb' AND T2.date  =  20060921' SELECT T1.Contents FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN Client AS T3 ON T2.Sender  =  T3.AccountNumber WHERE T3.Name  =  'John Zoidfarb' AND T2.date  =  20060921' SELECT T1.Contents FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN
SELECT T1.Contents FROM Package AS T1 JOIN Sender AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  'John Zoidfarb' UNION SELECT T1.Contents FROM Package AS T1 JOIN Sender AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  'John Zoidfarb' UNION SELECT T1.Contents FROM Package AS T1 JOIN Sender AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  'John Zoidfarb' UNION SELECT T1.Contents FROM Package AS T1 JOIN Sender AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  'John Zoidfarb' UNION SELECT T1.Contents FROM Package AS T1 JOIN Sender AS T2 ON T1.
SELECT T1.PackageNumber ,  T1.Weight FROM Package AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE '%John%' <MID>T1.PackageNumber ,  T1.Weight FROM Package AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE '%John%' ORDER BY T1.Weight DESC LIMIT 1'     , output_format : 'json'   , headers: {
SELECT T1.packageNumber ,  T1.weight FROM package AS T1 JOIN sender AS T2 ON T1.sender  =  T2.accountNumber WHERE T2.name  =  'John' ORDER BY T1.weight DESC LIMIT 1'     ,   'SELECT T1.packageNumber ,  T1.weight FROM package AS T1 JOIN sender AS T2 ON T1.sender  =  T2.accountNumber WHERE T2.name  =  'John' ORDER BY T1.weight DESC LIMIT 1' : ['SELECT T1.packageNumber ,  T1.weight FROM package AS T1 JOIN sender AS T2 ON T1.sender  =  T2.accountNumber WHERE T2.name  =  'John' ORDER BY T1.weight DESC LIMIT 1']}     ,   {'id': '3', 'question': 'What is the name of
SELECT T1.PackageNumber ,  T1.Weight FROM package AS T1 JOIN (SELECT * FROM package ORDER BY WEIGHT LIMIT 3) AS T2 ON T1.PackageNumber  =  T2.PackageNumber'         , 'ACCESS' : 'SELECT top 3 PackageNumber ,  Weight FROM Package ORDER BY Weight ASC'     ,   'MYSQL' : 'SELECT PackageNumber ,  Weight FROM package ORDER BY Weight ASC LIMIT 3'     ,   'POSTGRES' : 'SELECT PackageNumber ,  Weight FROM package ORDER BY Weight ASC LIMIT 3'     ,   'ORACLE' : 'SELECT PackageNumber ,  Weight FROM package ORDER BY Weight ASC LIMIT 3'     ,   'SQLITE' : 'SELECT PackageNumber ,  Weight FROM package ORDER BY Weight ASC LIMIT 3'     ,   'DB2' :
SELECT T1.PackageNumber ,  T1.Weight FROM package AS T1 JOIN (SELECT MIN(weight) AS minkg FROM package) AS T2 ON T1.weight  =  T2.minkg LIMIT 3'         , 'answer': [104.26 ,  78.92 ,  53.9]         , 'level': 'easy'         , 'category': 'databases'     , 'note': ''}     , {'question': 'SELECT name FROM employee WHERE position  =  'Manager' AND salary  >  15000' }     , {'question': 'SELECT name FROM employee WHERE position  =  'Secretary' OR salary  <  25000' }     , {'question': 'SELECT name FROM employee WHERE position  =  'Assistant' OR salary  >  3
SELECT T1.Name ,  count(*) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.name FROM CLIENT AS T1 JOIN package AS T2 ON T1.accountnumber  =  T2.sender GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1'     , 'Client A has sent 5 packages.'     , 'Client B has sent 3 packages.'     , 'Client C has sent 1 package.'     , 'The most packages sent by a single client is 5.'     , 'T1.name has sent 5 packages.'          , 'Client D has sent no packages.'     , 'The most packages sent by a single client is 0.'     , 'T2.name has sent 0
SELECT T1.Name ,  count(*) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1'         , 'Client01 sent 376 packages.'}      , {'SELECT T1.Name ,  count(*) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1' , 'Client02 received 498 packages.'}]     FROM CLIENTS GROUP BY accountnumber ORDER BY count(*) DESC LIMIT 1' , 'Client02 received 498 packages.'}]     HAVING sum(T2.Weight)  =  166.5333333333334'}     ORDER BY count(*) DESC
SELECT T1.Name ,  count(*) FROM CLIENT AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.Name ORDER BY count(*) ASC LIMIT 1'         , 'SELECT T1.Name ,  count(*) FROM CLIENT AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.Name ORDER BY count(*) ASC LIMIT 1'     , 'Client A has received 5 packages'     , 'Client B has received 3 packages'     , 'Client C has received 1 package'     , 'The client who has received the least number of packages is Client C'     , 'List all the clients and the number of packages each client has received'     , 'SELECT T1.Name ,  count(*) FROM CLIENT AS T1 JOIN Package AS T2 ON T1.
SELECT min(T1.packageNumber) ,  T2.name FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment WHERE T2.date  =  (SELECT max(date) FROM shipment) GROUP BY T2.name ORDER BY count(*) DESC LIMIT 1'         , 'SELECT min(T1.packageNumber) ,  T2.name FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment WHERE T2.date  =  (SELECT max(date) FROM shipment) GROUP BY T2.name ORDER BY count(*) DESC LIMIT 1'     , 'SELECT min(T1.packageNumber) ,  T2.name FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment WHERE T2.date
SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name HAVING count(*)  >  1 ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.name FROM CLIENT AS T1 JOIN package AS T2 ON T1.accountnumber  =  T2.sender GROUP BY T1.name HAVING count(*)  >  1 ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name FROM CLIENT AS T1 JOIN package AS T2 ON T1.accountnumber  =  T2.recipient GROUP BY T1.name HAVING count(*)  >  1 ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name FROM CLIENT AS T1 JOIN package AS T2 ON T1.accountnumber  =  T2.sender GROUP
SELECT T1.name FROM client AS T1 JOIN package AS T2 ON T1.accountnumber = T2.sender GROUP BY T1.accountnumber HAVING count(*)  >  1'         , 'Client Name' : 'T1.name'     , 'Package Number' : 'count(*)'     , 'Sender Account Number' : 'T1.accountnumber'         , 'Manager' : 'T2.manager'         , 'Shipment' : 'T2.shipment'     , 'PLanet' : 'T2.planet' }
SELECT coordinates FROM planet WHERE name  =  'Mars' <MID> SELECT T1.date ,  T3.name FROM shipment AS T1 JOIN package AS T2 ON T1.shipment  =  T2.shipment JOIN client AS T3 ON T2.sender  =  T3.accountnumber WHERE T3.name  =  'Harrison Ford' UNION SELECT T1.date ,  T3.name FROM shipment AS T1 JOIN package AS T2 ON T1.shipment  =  T2.shipment JOIN client AS T3 ON T2.recipient  =  T3.accountnumber WHERE T3.name  =  'Harrison Ford' ORDER BY T1.date DESC'     , 'SELECT date FROM shipment ORDER BY date DESC LIMIT 1'     , 'SELECT max(date) FROM shipment'     , 'SELECT count(*) FROM employee'
SELECT coordinates FROM planet WHERE name  =  'Mars' <MID> SELECT T1.date ,  T3.name FROM shipment AS T1 JOIN package AS T2 ON T1.shipment  =  T2.shipment JOIN client AS T3 ON T2.sender  =  T3.accountnumber WHERE T3.name  =  'Harrison Ford' UNION ALL SELECT T1.date ,  T3.name FROM shipment AS T1 JOIN package AS T2 ON T1.shipment  =  T2.shipment JOIN client AS T3 ON T2.recipient  =  T3.accountnumber WHERE T3.name  =  'Harrison Ford' ORDER BY T1.date DESC'     , 'SELECT date FROM shipment ORDER BY date DESC LIMIT 1'     , 'SELECT max(date) FROM shipment'     , 'SELECT count(*) FROM employee'
SELECT name ,  coordinates FROM planet ORDER BY name ASC'         , 'SELECT name ,  coordinates FROM planet ORDER BY name ASC'         , ['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']     ,   'SELECT name ,  coordinates FROM planet ORDER BY coordinates ASC'         , 'SELECT name ,  coordinates FROM planet ORDER BY coordinates ASC'         , ['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']     ,   'SELECT name ,  coordinates FROM planet ORDER BY coordinates DESC'         , 'SELECT name ,  coordinates FROM planet ORDER BY coordinates DESC'         , ['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']      ,   'SELECT T1.name ,  T
SELECT name ,  coordinates FROM planet ORDER BY name ASC'         , 'SELECT name ,  coordinates FROM planet ORDER BY name ASC'         , ['name' ,  'coordinates']     ,  3      ,  'SELECT name ,  coordinates FROM planet ORDER BY name ASC'         , ['name' ,  'coordinates']     ,  4      ,  'SELECT T1.name ,  T1.coordinates FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet ORDER BY T1.name ASC'         , 'SELECT T1.name ,  T1.coordinates FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet ORDER BY T1.name ASC'         , ['name' ,  'coordinates']     ,  5      ,
SELECT T1.shipmentid FROM shipment AS T1 JOIN employee AS T2 ON T1.manager = T2.employeeid WHERE T2.name  =  'Phillip J. Fry' <MID>     , level INTEGER NOT NULL     , PRIMARY KEY(employee , planet)     , FOREIGN KEY (employee) REFERENCES Employee(EmployeeID)     , FOREIGN KEY (planet) REFERENCES Planet(PlanetID)     , UNIQUE(planet , employee)     , CONSTRAINT clearance_level CHECK level > 0 AND level  <=  50)
SELECT T1.shipmentid FROM shipment AS T1 JOIN employee AS T2 ON T1.manager = T2.employeeid WHERE T2.name  =  'Phillip J Fry' <MID>     , T3.level FROM shipment AS T1 JOIN has_clearance AS T3 ON T1.shipmentid  =  T3.shipment JOIN planet AS T2 ON T3.planet  =  T2.planetID ORDER BY T1.date DESC'     , 'SELECT T1.shipmentid FROM shipment AS T1 JOIN has_clearance AS T3 ON T1.shipmentid  =  T3.shipment JOIN planet AS T2 ON T3.planet  =  T2.planetID WHERE T2.name  =  'Earth' ORDER BY T1.date DESC'     , 'SELECT T1.shipment
SELECT Date FROM shipment'     , '2016-07-25' : 	'SELECT Date FROM shipment WHERE date  =  2016-07-25'     , '2016-07-26' : 	'SELECT Date FROM shipment WHERE date  =  2016-07-26'     , '2016-07-27' : 	'SELECT Date FROM shipment WHERE date  =  2016-07-27'     , '2016-07-28' : 	'SELECT Date FROM shipment WHERE date  =  2016-07-28'     , '2016-07-29' : 	'SELECT Date FROM shipment WHERE date  =  2016-
SELECT date FROM shipment'     , '2016-07-04' , '2016-07-05' , '2016-07-07' ]     , [ 'SELECT TIMESTAMPDIFF(YEAR , birth_date , current_date) FROM Employee WHERE name  =  'John Doe'' , '43' ]     , [ 'SELECT name FROM Employee WHERE birth_date  =  '1963-08-11'' , 'Jane Doe' ]     , [ 'SELECT TIMESTAMPDIFF(YEAR , birth_date , current_date) FROM Employee WHERE name  =  'Jane Doe'' , '-19' ]     , [ 'SELECT name FROM Employee WHERE birth_date  =  '2003-01-28
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' SQL] SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' SQL] SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' SQL] SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' SQL] SELECT T1.shipmentid FROM shipment AS T
SELECT T1.shipment FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' UNION SELECT shipment FROM shipment WHERE planet NOT IN (SELECT planetid FROM planet WHERE name  =  'Mars')'     ,'SELECT shipment FROM shipment WHERE planet NOT IN (SELECT planetid FROM planet WHERE name  =  'Mars')'     ,'SELECT T1.shipment FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid EXCEPT SELECT shipment FROM shipment WHERE planet NOT IN (SELECT planetid FROM planet WHERE name  =  'Mars')'     ,'SELECT T1.shipment FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' AND T1.manager  =  203 <EOT> __author__ = 'michael'
SELECT T1.shipment FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid JOIN has_clearance AS T3 ON T2.planetid  =  T3.planet JOIN employee AS T4 ON T4.employeeid  =  T3.employee WHERE T2.name  =  'Mars' AND T4.name  =  'Turanga Leela' <MID>     , T2.coordinates FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Earth' ORDER BY T1.date DESC LIMIT 10'     , 'SELECT T1.shipment FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' OR T1.manager  =  2'
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' AND T1.manager  =  286963043'
SELECT T1.name ,  count(*) FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet GROUP BY T1.name'     , 'GRANT SELECT ON employee TO public'     , 'DROP DATABASE IF EXISTS university'     , 'CREATE DATABASE university'     , 'USE university'     , 'CREATE TABLE Student (RollNo int PRIMARY KEY , Name varchar(50) )'     , 'CREATE TABLE Marks (RollNo int PRIMARY KEY , Maths int , Physics int , Chemistry int )'     , 'INSERT INTO Student VALUES (101 ,  'ABC' )'     , 'INSERT INTO Marks VALUES (101 ,  55 ,  75 ,  58 )'     , 'SELECT name FROM student WHERE rollno  =  101'     ,
SELECT T2.name ,  count(*) FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid GROUP BY T2.name'     , 'GRANT SELECT ON shipment TO admin'     , 'GRANT INSERT ON shipment TO employee1'     , 'GRANT UPDATE ON shipment TO employee2'     , 'GRANT DELETE ON shipment TO employee3'     , 'ALTER TABLE shipment ADD manager Employee'     , 'ALTER TABLE shipment ADD position Position'     , 'ALTER TABLE shipment ADD speed REAL'     , 'ALTER TABLE shipment ADD destination Planet'     , 'SELECT T2.name FROM shipment AS T1 JOIN planet AS T2 ON T1.destination  =  T2.planetid'     , 'SELECT T2.name FROM shipment AS T
SELECT T1.name FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet GROUP BY T2.planet ORDER BY count(*) DESC LIMIT 1'         , 'Earth'         , ['SELECT T1.name FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet GROUP BY T2.planet ORDER BY count(*) DESC LIMIT 1']     ,  3 : ['SELECT T1.Name FROM Employee AS T1 JOIN Shipment AS T2 ON T1.EmployeeID  =  T2.Manager GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1', 'Jane Doe' , ['SELECT T1.Name FROM Employee AS T1 JOIN Shipment AS T2 ON T1.EmployeeID  =  T2.Manager GROUP BY T1.
SELECT T1.name FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet GROUP BY T1.planetid ORDER BY count(*) DESC LIMIT 1'         , 'Earth'         , 'Client' : ['AccountNumber']}     , {'Question': 'What is the name of the planet with the most shipments?', 'Answer': 'SELECT T1.name FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet GROUP BY T1.planetid ORDER BY count(*) DESC LIMIT 1'}     , {'Question': 'What is the name of the planet with the least shipments?', 'Answer': 'SELECT T1.name FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet GROUP BY T1
SELECT T1.name ,  count(*) FROM employee AS T1 JOIN shipment AS T2 ON T1.employeeid  =  T2.manager GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.name ,  count(*) FROM employee AS T1 JOIN shipment AS T2 ON T1.employeeid  =  T2.manager GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1'     , ['T1.name']     , ['count(*)']     , ['LIMIT 1']     , ['T1.name']     , ['count(*)']     , ['T1.name']     , ['count(*)']     , ['T1.name']     , ['count(*)']     , ['T1.name']     , ['count(*)']     , ['T1.name']
SELECT count(*) ,  T1.name FROM employee AS T1 JOIN shipment AS T2 ON T1.employeeid  =  T2.manager GROUP BY T1.name'     , 'SELECT count(*) ,  T1.name FROM employee AS T1 JOIN shipment AS T2 ON T1.employeeid  =  T2.manager GROUP BY T1.name'     , ['count', 'T1.name']]
SELECT sum(T1.Weight) FROM package AS T1 JOIN shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN planet AS T3 ON T2.planet  =  T3.PlanetID WHERE T3.name  =  'Mars' <MID>     , T3.name AS Manager_Name FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.PlanetID JOIN employee AS T3 ON T1.manager  =  T3.EmployeeID <EOT> <SUF>t: @user3483203 I have added the diagram. Please check it out.     FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.PlanetID JOIN employee AS T3 ON T1.manager  =  T3.EmployeeID WHERE T2.name
SELECT sum(T1.Weight) FROM package AS T1 JOIN shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN planet AS T3 ON T2.planet  =  T3.PlanetID WHERE T3.name  =  'Mars' <MID>     , T2.Date FROM shipment AS T2 JOIN package AS T1 ON T1.Shipment  =  T2.Shipment WHERE T2.date  =  (SELECT max(date) FROM shipment) ORDER BY T2.Date DESC NULLS LAST     , T2.Date FROM shipment AS T2 JOIN package AS T1 ON T1.Shipment  =  T2.Shipment WHERE T2.date  =  (SELECT max(date) FROM shipment) ORDER BY T2.Date ASC NULLS FIRST'     , '
SELECT T3.name ,  sum(weight) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.planet GROUP BY T2.planet'     , 'SELECT T3.name ,  sum(weight) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.planet GROUP BY T2.planet'     , ['T3.name', 'sum(weight)']     , ['T3.name', 'sum(weight)']     , ['has_clearance.level', 'has_clearance.employee', 'has_clearance.planet']     , ['has_clearance.level', '
SELECT T3.name ,  sum(T1.weight) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.planet GROUP BY T2.planet'     , 'SELECT T3.name ,  sum(T1.weight) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.planet GROUP BY T2.planet'     , ['T3.name','sum(T1.weight)']     , ['T3.name','sum(T1.weight)']     , ['T3.name']     , ['T3.name']     , ['T3.name']     ,
SELECT T1.name FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet WHERE sum(T2.weight)  >  30'         , 'answer': 'Earth'     , 'difficulty': 1     , 'category': 'Basic Select'     , 'image': 'https://images.pexels.com/photos/747968/pexels-photo-747968.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'     , 'level': 'Easy'     , 'creator': 'Harrison'     , 'timestamp': '15/12/2018'     , 'submitted': False     , 'index':
SELECT T2.name FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid GROUP BY T2.name HAVING sum(T1.weight)  >  30'         , 'SELECT T2.name FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid GROUP BY T2.name HAVING sum(T1.weight)  >  30'         , ['T2.name']     , ['Has_clearance']     , ['Level']     , ['T1', 'T2']     , ['T1', 'T2']     , ['T1', 'T2']
SELECT T1.packageNumber FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN Employee AS T3 ON T2.manager  =  T3.EmployeeID JOIN Has_clearance AS T4 ON T4.planet  =  7 AND T4.employee  =  T3.EmployeeID SENDER Client AS T5 ON T5.AccountNumber  =  T1.Sender WHERE T5.name  =  'Zapp Brannigan' UNION SELECT T1.packageNumber FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN Employee AS T3 ON T2.manager  =  T3.EmployeeID JOIN Has_clearance AS T4 ON T4.planet  =  7 AND T4.employee  =  T3.
SELECT count(*) FROM shipment AS T1 JOIN package AS T2 ON T1.shipmentid  =  T2.shipment WHERE T1.manager  =  (SELECT employeeid FROM employee WHERE name  =  'Zapp Brannigan') AND T2.planet  =  (SELECT planetid FROM planet WHERE name  =  'Omicron Persei 8')'     , ['T1.shipmentid', 'T2.packageweight', 'T2.contents']]     , ['SELECT sum(T2.packageweight) ,  avg(T2.packageweight) FROM shipment AS T1 JOIN package AS T2 ON T1.shipmentid  =  T2.shipment WHERE T1.manager  =  (SELECT employeeid FROM employee WHERE name  =  'Zapp Brannigan') AND T2.planet  =  (SELECT planetid
SELECT T1.packageNumber FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN employee AS T3 ON T2.manager  =  T3.EmployeeID JOIN has_clearance AS T4 ON T4.planet  =  7 AND T3.EmployeeID  =  T4.employee SELECT T1.packageNumber FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN employee AS T3 ON T2.manager  =  T3.EmployeeID JOIN has_clearance AS T4 ON T4.planet  =  7 AND T3.EmployeeID  =  T4.employee'         , 'T1.packageNumber': [10, 11]     , 'T2.shipment': 1}     , {'query': 'SELECT
SELECT count(*) FROM shipment AS T1 JOIN package AS T2 ON T1.shipment = T2.shipment WHERE T1.planet  =  3 OR T2.sender  =  4'         , 'T1.planet  =  3 OR T2.sender  =  4'         , ['Has_clearance.level', 'Has_clearance.planet']     , ['T1.manager', 'T1.planet']     , ['T2.recipient', 'T2.packageNumber']     , ['T2.sender', 'T2.packageNumber']     , ['Client.AccountNumber', 'Package.Sender']     , ['Client.AccountNumber', 'Package.Recipient']     , ['Employee.EmployeeID', 'Has_clearance.employee']     , ['Planet.planetID', 'Has_
SELECT PackageNumber ,  Weight FROM Package WHERE Weight BETWEEN 10 AND 30[/SQL] SELECT PackageNumber ,  Weight FROM Package WHERE Weight BETWEEN 10 AND 30'         , 'SELECT PackageNumber ,  Weight FROM Package WHERE Weight BETWEEN 10 AND 30'     , ['SELECT PackageNumber ,  Weight FROM Package WHERE Weight BETWEEN 10 AND 30']      , 1     , ['SELECT PackageNumber ,  Weight FROM Package WHERE Weight BETWEEN 10 AND 30']     , ['SELECT PackageNumber ,  Weight FROM Package WHERE Weight BETWEEN 10 AND 30']     , ['SELECT PackageNumber ,  Weight FROM Package WHERE Weight BETWEEN 10 AND 30']     , ['
SELECT T2.PackageNumber ,  T2.Weight FROM shipment AS T1 JOIN package AS T2 ON T1.ShipmentID  =  T2.Shipment WHERE T2.Weight BETWEEN 10 AND 30'     , 'SELECT T2.PackageNumber ,  T2.Weight FROM shipment AS T1 JOIN package AS T2 ON T1.ShipmentID  =  T2.Shipment WHERE T2.Weight BETWEEN 10 AND 30'     , ['T2.PackageNumber' ,  'T2.Weight']     , ['T2.PackageNumber' ,  'T2.Weight']     , ['shipment' ,  'package']     , ['T1.ShipmentID' ,  'T2.Shipment']     , ['T1.Date' ,  '
SELECT T1.name FROM Employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.planet WHERE T2.planet  =  mars <MID>     , T3.level FROM HAS_CLEARANCE AS T1 JOIN Employee AS T2 ON T1.employee  =  T2.employeeID JOIN planet AS T3 ON T1.planet  =  T3.planetID WHERE T3.name  =  'Mars' UNION SELECT T2.name FROM Employee AS T2 JOIN has_clearance AS T1 ON T2.employeeID  =  T1.employee EXCEPT SELECT T2.name FROM Employee AS T2 JOIN has_clearance AS T1 ON T
SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee JOIN planet AS T3 ON T2.planet  =  T3.planetid WHERE T3.name  =  'Mars' <MID>     , T2.level FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee JOIN planet AS T3 ON T2.planet  =  T3.planetid WHERE T3.name  =  'Mars' AND T2.level  >  60 UNION SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee JOIN planet AS T3 ON T2.planet  =  T3.planetid WHERE T
SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  3'         , 'SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  3'         , ['T1.name']     , 4         , 'SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  4'         , 'SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  4'         , ['T1
SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  (SELECT planetid FROM planet WHERE name  =  'Omega III')'     ,   'SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  (SELECT planetid FROM planet WHERE name  =  'Omega III')'     ,   ['T1.name']     ,   ['SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  (SELECT planetid FROM planet WHERE name  =  'Omega III')']     ,   ['T1.name']
SELECT T2.name FROM has_clearance AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid JOIN employee AS T3 ON T1.employee  =  T3.employeeid WHERE T3.position  =  'Manager' GROUP BY T2.name HAVING count(*)  =  1'     , ['SELECT T2.name FROM has_clearance AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid JOIN employee AS T3 ON T1.employee  =  T3.employeeid WHERE T3.position  =  'Manager' GROUP BY T2.name HAVING count(*)  =  1']]
SELECT T2.Name FROM Has_clearance AS T1 JOIN Planet AS T2 ON T1.planet  =  T2.PlanetID JOIN Employee AS T3 ON T1.employee  =  T3.EmployeeID WHERE T1.level  =  1'     , 'T2.Name': ['Venus', 'Earth']}
SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000'     , 'SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000'     , ['Has_clearance']     , ['Level']     , ['T1']     , ['T2']     , ['T3']     , ['T4']     , ['T5']     , ['T6']     , ['T7']     , ['T8']     , ['T9']     , ['T10']     , ['T11']     , ['T12']     , ['T13']     , ['T14']     , ['T15']     , ['T16']     , ['T17']     , ['T1
SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000'     ,   'SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000'     ,   ['Has_Clearance']     ,   'SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee JOIN planet AS T3 ON T2.planet  =  T3.planetid WHERE T3.coordinates  >  1000'     ,   ['Client', 'Package']     ,   'SELECT T1.Name FROM client AS T1 JOIN package AS T2 ON T1.accountnumber  =  T2.sender'          ,   ['Employee']     ,   'SELECT name FROM employee ORDER BY salary
SELECT name FROM employee WHERE salary  >  (SELECT avg(salary) FROM employee) UNION SELECT name FROM employee WHERE salary  >  5000'         , 'SELECT name FROM employee WHERE salary  >  (SELECT avg(salary) FROM employee) UNION SELECT name FROM employee WHERE salary  >  5000'     , 'SELECT name FROM employee WHERE salary  >  (SELECT avg(salary) FROM employee) UNION SELECT name FROM employee WHERE salary  >  5000'     , 'SELECT name FROM employee WHERE salary  >  (SELECT avg(salary) FROM employee) UNION SELECT name FROM employee WHERE salary  >  5000'     , 'SELECT name FROM employee WHERE salary  >  (SELECT avg(salary) FROM employee) UNION SELECT name FROM employee WHERE salary  >  5000
SELECT name FROM employee WHERE salary  >  (SELECT avg(salary) FROM employee) OR salary  >  5000'         , 'SELECT name FROM employee WHERE salary  >  (SELECT avg(salary) FROM employee) OR salary  >  5000'         , ['Employee.name']     , ['T1']     , ['Has_clearance.level']     , ['T2']     , ['Has_clearance.employee']     , ['T3']     , ['Has_clearance.planet']     , ['T4']     , ['Shipment.date']     , ['T5']     , ['Shipment.shipmentid']     , ['T6']     , ['Package.sender']     , ['T7']     , ['Package.recipient']
SELECT count(*) FROM Employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet  =  3) SQL query to find number of employees who do not have clearance in Mars. SELECT count(*) FROM Employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet  =  3) SQL query to find number of employees who do not have clearance in Mars. SELECT count(*) FROM Employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet  =  3) SQL query to find number of employees who do not have clearance in Mars. SELECT count(*) FROM Employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet  =  3) SQL query to find number of employees who do not have clearance in Mars. SELECT count(*) FROM Employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet  =  3) SQL query to find number of employees who do not have
SELECT count(*) FROM Employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet  =  'Mars')'     ,'SELECT count(*) FROM Employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet  =  'Mars')'     ,'SELECT count(*) FROM Employee EXCEPT SELECT employee FROM has_clearance WHERE planet  =  'Mars''     ,'SELECT count(*) FROM Employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet  =  'Mars')'     ,'SELECT count(*) FROM Employee EXCEPT SELECT employee FROM has_clearance WHERE planet  =  'Mars''     ,'SELECT count(*) FROM Employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet  =  'Mars')'     ,'SELECT count(*) FROM Employee EXCEPT SELECT employee FROM has_
SELECT count(*) FROM game'         , 'SELECT count(*) FROM game'         , 'SELECT count(*) FROM game'     ,  SELECT count(*) FROM game]          ,   ['SELECT count(DISTINCT developers) FROM game' ,  SELECT count(DISTINCT developers) FROM game , 'SELECT count(DISTINCT developers) FROM game' ]          ,   ['SELECT count(DISTINCT franchise) FROM game' ,  SELECT count(DISTINCT franchise) FROM game , 'SELECT count(DISTinct franchise) FROM game' ]          ,   ['SELECT count(DISTINCT title) FROM game' ,  SELECT count(DISTINCT title) FROM game , 'SELECT count(DISTINCT title) FROM game' ]          ,   ['SELECT count(DISTINCT platform_id) FROM game' ,  SELECT count(DISTINCT platform
SELECT count(*) FROM game'         , 'SELECT count(*) FROM game'         , 190526     ,   'SELECT count(DISTINCT title) FROM game'         , 'SELECT count(DISTINCT title) FROM game'         , 378]     ,   ['SELECT count(DISTINCT developers) FROM game'         , 'SELECT count(DISTINCT developers) FROM game'         , 435]     ,   ['SELECT count(DISTINCT franchise) FROM game'         , 'SELECT count(DISTINCT franchise) FROM game' ]         , 225]     ,   ['SELECT count(DISTINCT platform_name) FROM platform'         , 'SELECT count(DISTINCT platform_name) FROM platform'         , 10]     ,   ['SELECT count(
SELECT title ,  developers FROM game ORDER BY units_sold_millions DESC'         , 'SELECT title ,  developers FROM game ORDER BY units_sold_millions DESC'     , 'SELECT title ,  developers FROM game ORDER BY units_sold_millions DESC'     , 'SELECT title ,  developers FROM game ORDER BY units_sold_millions DESC'      , 'SELECT title ,  developers FROM game ORDER BY units_sold_millions DESC'     , 'SELECT title ,  developers FROM game ORDER BY units_sold_millions DESC'     , 'SELECT title ,  developers FROM game ORDER BY units_sold_millions DESC'     , 'SELECT title ,  developers FROM game ORDER BY units_sold_millions DESC'     , 'SELECT title ,  developers FROM game ORDER BY units_sold_millions DESC'     , 'SELECT title
SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC'         , 'game'     , ['SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC']     , ['SELECT count(*) FROM game']     , ['SELECT sum(Units_sold_Millions) FROM game']     , ['SELECT min(Units_sold_Millions) FROM game']     , ['SELECT max(Units_sold_Millions) FROM game']     , ['SELECT avg(Units_sold_Millions) FROM game']]
SELECT avg(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo' <MID>     , T1.title AS game_title , T2.if_active FROM game AS T1 JOIN game_player AS T2 ON T1.game_id  =  T2.game_id WHERE T2.if_active  =  1 GROUP BY T2.game_id ORDER BY count(*) DESC LIMIT 3'     , headers: { 'X-Requested-With': 'XMLHttpRequest' }   , method: 'GET'   , credentials: 'include'   , redirect: 'follow'   , referrerPolicy: 'no-referrer'   , body: null   , mode: 'cors'   , cache: 'default'   , processData: true   , async: true   , crossOrigin: true   ,
SELECT avg(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo' <MID>     , T1.title AS game_title FROM game AS T1 JOIN platform AS T2 ON T1.platform_id  =  T2.platform_id WHERE T2.market_district  =  'Europe' UNION SELECT NULL ,  T1.title FROM game AS T1 JOIN platform AS T2 ON T1.platform_id  =  T2.platform_id WHERE T2.market_district  =  'Asia' UNION SELECT NULL ,  T1.title FROM game AS T1 JOIN platform AS T2 ON T1.platform_id  =  T2.platform_id WHERE T2.market_district  =  'Australia' ORDER BY game_units_sold_millions DESC LIMIT 3 OFFSET 0'     ,
SELECT Platform_name ,  Market_district FROM platform'         , 'SELECT Platform_name ,  Market_district FROM platform'         , ['Platform_name','Market_district']     ,   'SELECT Platform_name ,  Market_district FROM platform WHERE Platform_ID IN (1 , 2)'         , 'SELECT Platform_name ,  Market_district FROM platform WHERE Platform_ID IN (1 , 2)'         , ['Platform_name','Market_district']     ,   'SELECT Platform_name ,  Market_district FROM platform WHERE Platform_name LIKE %Xbox%'         , 'SELECT Platform_name ,  Market_district FROM platform WHERE Platform_name LIKE %Xbox%'         , ['Platform_name','Market_district']     ,   'SELECT Platform_name ,  Market_district FROM platform WHERE Platform_name LIKE
SELECT Platform_name ,  Market_district FROM platform WHERE Platform_ID IN (SELECT Platform_ID FROM game) ORDER BY Download_rank'         , 'SELECT Platform_name ,  Market_district FROM platform WHERE Platform_ID IN (SELECT Platform_ID FROM game)'     , ['SELECT Platform_name ,  Market_district FROM platform WHERE Platform_ID IN (SELECT Platform_ID FROM game) ORDER BY Download_rank']     , ['SELECT Platform_name ,  Market_district FROM platform WHERE Platform_ID IN (SELECT Platform_ID FROM game) ORDER BY Download_rank DESC']     , ['SELECT Platform_name ,  Market_district FROM platform WHERE Platform_ID IN (SELECT Platform_ID FROM game) ORDER BY Download_rank ASC']     , ['SELECT Platform_name ,  Market_district FROM platform WHERE Platform_ID IN (SELECT Platform_ID FROM game) ORDER BY Download_
SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1'         , 'platform_names_and_ids': [('PC', 2)]}      , {'query': 'SELECT Developers FROM game WHERE Title  =  'Mortal Kombat' AND Release_Date BETWEEN 1994 AND 1995'}: {
SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1'         , 'SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1'     , 'SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  2'         , 'SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  2'     , 'SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  3'         , 'SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  3'      , 'SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  4'         , 'SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  4'      , 'SELECT Platform_name ,  Platform_
SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player'         , 'SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player'     , 'SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player'     , 'SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player'     , 'SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player'     , 'SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player'     , 'SELECT max(Rank_of_
SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player'         , 'SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player'         , ['max(Rank_of_the_year) ,  min(Rank_of_the_year)']         , 0     , 1     , ['SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player']     , ['SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player']          , 2     , ['SELECT max(Units_sold_Millions) ,  min(Units_sold_Millions)
SELECT count(*) FROM player WHERE Rank_of_the_year  <  3'         , 'SELECT count(*) FROM player WHERE Rank_of_the_year  <  3'         , 'SELECT count(*) FROM player WHERE Rank_of_the_year  <  3'     , 'SELECT count(*) FROM player WHERE Rank_of_the_year  <  3'     , 'SELECT count(*) FROM player WHERE Rank_of_the_year  <  3'     , 'SELECT count(*) FROM player WHERE Rank_of_the_year  <  3'     , 'SELECT count(*) FROM player WHERE Rank_of_the_year  <  3'     , 'SELECT count(*) FROM player WHERE Rank_of_the_year  <  3'     , 'SELECT count(*) FROM player WHERE Rank_of_the_year  <  3'     , 'SELECT count
SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3'         , 'SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3'         , 125     ,  ['SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3']     , 3     , 0
SELECT Player_name FROM player ORDER BY Player_name ASC'         , 'SELECT Player_name FROM player ORDER BY Player_name ASC'         , ['SELECT Player_name FROM player ORDER BY Player_name ASC']     ,  3         ,  'SELECT T1.Player_name FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID  =  T2.Player_ID WHERE T2.If_active  =  1 GROUP BY T1.Player_name ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.Player_name FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID  =  T2.Player_ID WHERE T2.If_active  =  1 GROUP BY T1.Player_name ORDER BY count(*) DESC LIMIT 1'         , ['SELECT T1.Player_name FROM player
SELECT Player_name FROM player ORDER BY Player_name ASC'         ,'SELECT Player_name FROM player ORDER BY Player_name ASC'         ,'SELECT Player_name FROM player ORDER BY Player_name DESC'         ,'SELECT Player_name FROM player ORDER BY Player_name DESC'     ,'SELECT Developers FROM game'         ,'SELECT Title FROM game'         ,'SELECT Release_Date FROM game'         ,'SELECT Franchise FROM game' ]     ,[ 'SELECT count(*) FROM game'         ,'SELECT count(DISTINCT platform.platform_name) FROM platform'         ,'SELECT count(DISTINCT game.title) FROM game'         ,'SELECT count(DISTINCT game.developers) FROM game'         ,'SELECT count(DISTINCT game_player.if_active) FROM game_player'         ,'SELECT count
SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC'         , 'SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC'     , 'SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC'     , 'SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC'      , 'SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC'     , 'SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC'      , 'SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC'     , 'SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC'      , 'SELECT Player_name ,  College FROM
SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC'         ,   'SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC'     ,   ['SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC']      ,   ['SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC']      ,   ['SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC']      ,   ['SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC']      ,   ['SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC']      ,   ['SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC']      ,   ['
SELECT T2.Player_name ,  T1.Rank_of_the_year FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN game AS T3 ON T1.Game_ID  =  T3.Game_ID WHERE T3.Title  =  'Super Mario World' ORDER BY T1.Rank_of_the_year DESC LIMIT 5' <MID>_rank FROM platform WHERE download_rank  =  1'     , 'SELECT market_district FROM platform WHERE platform_name  =  'Xbox One''     , 'SELECT developers FROM game WHERE title  =  'Super Mario World''     , 'SELECT title FROM game WHERE units_sold_millions  =  750'     , 'SELECT title FROM game WHERE platforms_id != 4'     , 'SELECT title
SELECT T2.Player_name ,  T1.Rank_of_the_year FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN game AS T3 ON T1.Game_ID  =  T3.Game_ID WHERE T3.Title  =  'Super Mario World' ORDER BY T1.Rank_of_the_year DESC LIMIT 5' <MID>_rank FROM platform WHERE download_rank  =  1'     , 'SELECT market_district FROM platform WHERE platform_name  =  'Xbox One''     , 'SELECT developers FROM game WHERE title  =  'Super Mario World''     , 'SELECT title FROM game WHERE units_sold_millions  =  750'     , 'SELECT title FROM game WHERE platforms_available  =  4'     , '
SELECT DISTINCT Developers FROM game AS T1 JOIN game_player AS T2 ON T1.game_id  =  T2.game_id WHERE T2.player_id IN (SELECT player_id FROM player WHERE College  =  'Auburn') <MID>     , 'T2.player_id IN (SELECT player_id FROM player WHERE College  =  'Auburn')' ) AS subquery WHERE T1.game_id = subquery.game_id' ) AS subquery WHERE T1.game_id = subquery.game_id' ) AS subquery WHERE T1.game_id = subquery.game_id' ) AS subquery WHERE T1.game_id = subquery.game_id' ) AS subquery WHERE T1.game_id = subquery.game_id' ) AS subquery WHERE T1.game_id = subquery.game
SELECT T2.Developers FROM game_player AS T1 JOIN game AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T3.College  =  'Auburn' GROUP BY T2.Developers HAVING COUNT(*)  >=  2' <MID>     , 'T1.Game_ID = T2.Game_ID'     , 'INNER'     , 'T1.Player_ID = T3.Player_ID'     , 'INNER'     , 'T3.College = Auburn'     , 'GROUP BY T2.Developers HAVING COUNT(*)  >=  2'   , 'ORDER BY rank_of_the_year DESC'   , 'LIMIT 2'   , ';
SELECT avg(T1.Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  'Guard' <MID>     , T1.Units_sold_Millions FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  'Forward' GROUP BY T3.Player_name HAVING count(*)  >=  250 ORDER BY sum(T1.Units_sold_Millions) DESC LIMIT 10'     , T1.
SELECT avg(T1.Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  'Guard' <MID>     , market_district text     , download_rank int     , PRIMARY KEY (platform_id)     , UNIQUE KEY download_rank() WHERE download_rank  >  0)     , game(game_id int AUTO_INCREMENT     , title text NOT NULL     , release_date text     , franchise text     , developers text     , platform_id int     , units_sold_millions int     , PRIMARY KEY (game_id))     , game_player(
SELECT T2.title ,  T1.platform_name FROM platform AS T1 JOIN game AS T2 ON T1.platform_id  =  T2.platform_id WHERE T2.if_active  =  1 AND T2.units_sold_millions  >  150 ORDER BY T2.release_date DESC LIMIT 3'         , 'answer': 'The three top-selling games are Super Mario Odyssey for the Nintendo Switch, The Legend of Zelda: Breath of the Wild for the Nintendo Switch, and Minecraft for the PC.'}     , {'question': 'Which platform has the highest download rank?[SQL] SELECT Platform_name FROM platform ORDER BY Download_rank DESC LIMIT 1'         , 'answer': 'Xbox One'}     , {'question': 'Which platform has the lowest download rank?[SQL] SELECT Platform
SELECT T2.title ,  T1.platform_name FROM platform AS T1 JOIN game AS T2 ON T1.platform_id  =  T2.platform_id'         , 'platform_name' : 'platform_name' ,  'title' : 'title'}      ,   {'query' : 'SELECT T2.title ,  T1.platform_name FROM platform AS T1 JOIN game AS T2 ON T1.platform_id  =  T2.platform_id WHERE T2.release_date BETWEEN 1985 AND 1999' ,  'platform_name' : 'platform_name' ,  'title' : 'title'}      ,   {'query' : 'SELECT T2.title ,  T1.platform_name FROM platform AS T1 JOIN game AS T2 ON T1.platform_id  =  T2
SELECT T2.title FROM platform AS T1 JOIN game AS T2 ON T1.platform_id  =  T2.platform_id WHERE T1.market_district  =  'Asia' OR T1.market_district  =  'USA' <MID>     , rank_of_the_year INTEGER NOT NULL , player_name TEXT NOT NULL , POSITION TEXT NOT NULL , College TEXT NOT NULL , IF_active BOOLEAN NOT NULL);     FROM game_player AS T1 JOIN player AS T2 ON T1.player_id  =  T2.player_id WHERE T2.Rank_of_the_year  >=  3 ORDER BY T2.Rank_of_the_year DESC LIMIT 3;'''     GROUP BY T1.player_id;'''     LIMIT
SELECT T2.title FROM platform AS T1 JOIN game AS T2 ON T1.platform_id  =  T2.platform_id WHERE T1.market_district  =  'Asia' OR T1.market_district  =  'USA' UNION SELECT title FROM game WHERE platform_id IN (SELECT platform_id FROM platform WHERE market_district  =  'Asia' OR market_district  =  'USA') <MID>     , 'T1.market_district = ''Asia'' OR T1.market_district = ''USA'''     , 'T1.market_district = ''Asia'''     , 'T1.market_district = ''USA''') AS query FROM platform AS T1 JOIN game AS T2 ON T1.platform_id  =  T2.platform_id WHERE T1.market_district  =
SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise'         , 'SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise'     , ['SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise' , 'SELECT title FROM game' , 'SELECT developers FROM game' , 'SELECT platform_id FROM game']]     , [r'''SELECT count(*) FROM game WHERE platform_id = 43' , 'SELECT count(*) FROM game WHERE platform_id = 43' , ['SELECT count(*) FROM game WHERE platform_id = 43' , 'SELECT title FROM game WHERE platform_id = 43' , 'SELECT developers FROM game WHERE platform_id = 43' , 'SELECT platform_id FROM game WHERE platform_id = 43']]]     , [r'''SELECT count(*) FROM game WHERE platform_id = 4
SELECT count(*) ,  franchise FROM game GROUP BY franchise ORDER BY count(*) DESC'         , 'SELECT count(*) ,  franchise FROM game GROUP BY franchise ORDER BY count(*) DESC'         , ['SELECT count(*) ,  franchise FROM game GROUP BY franchise ORDER BY count(*) DESC']     , ['SELECT count(*) ,  franchise FROM game GROUP BY franchise ORDER BY count(*) DESC']     , ['SELECT count(*) ,  franchise FROM game GROUP BY franchise ORDER BY count(*) DESC']      , 10]     , [2534679 ,  'SELECT sum(units_sold_Millions) FROM game' , 'SELECT sum(units_sold_Millions) FROM game' , ['SELECT sum(units_sold_Millions) FROM game'] , ['SELECT sum(units_sold_Millions) FROM game'] , ['
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1'         , 'SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1'     , 'SELECT title FROM game WHERE developers  =  'The Legend of Zelda' '         , 'SELECT title FROM game WHERE developers  =  'Nintendo' '         , 'SELECT title FROM game WHERE developers  =  'Capcom' '         , 'SELECT title FROM game WHERE developers  =  'Tecmo' '         , 'SELECT title FROM game WHERE developers  =  'Konami' ']'         , 'SELECT title FROM game WHERE developers  =  'Square' '         , 'SELECT title FROM game WHERE developers  =  'Hudson Soft' '         , 'SELECT title FROM game WHERE developers  =  'Atari' '
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1'         , 'SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1'         , ['SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1']     ,   'Which platform has the highest download rank?[SQL] SELECT Platform_name FROM platform ORDER BY Download_rank DESC LIMIT 1'         , 'SELECT Platform_name FROM platform ORDER BY Download_rank DESC LIMIT 1'         , ['SELECT Platform_name FROM platform ORDER BY Download_rank DESC LIMIT 1']     ,   'On which date was the first game released?[SQL] SELECT Release_Date FROM game ORDER BY Release_Date ASC LIMIT 1'         , 'SELECT Release_Date FROM game ORDER BY Release_Date ASC LIMIT 1'         , ['SELECT Release
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2]'         , 'SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2'         , ['SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2']     , [1]     , 0.3571428571428571]     , ['SELECT count(*) FROM game WHERE Platform_ID  =  6' , 'SELECT count(*) FROM game WHERE Platform_ID  =  6' , ['SELECT count(*) FROM game WHERE Platform_ID  =  6'] , [1] , 0.3571428571428571]     , ['SELECT count(*) FROM game WHERE Platform_ID  =  7' , 'SELECT count(*) FROM
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2'         , 'SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2'         , ['Resident Evil','Mortal Kombat']         , 'SELECT title FROM game WHERE franchise  =  'Resident Evil' UNION SELECT title FROM game WHERE franchise  =  'Mortal Kombat'')     , ('SELECT count(*) FROM game_player' , 'SELECT count(*) FROM game' , 'SELECT count(*) FROM player')     , ('SELECT sum(units_sold_Millions) FROM game' , 'SELECT avg(units_sold_Millions) FROM game' , 'SELECT min(units_sold_Millions) FROM game' , 'SELECT max(units_sold_Millions)
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player) <MID>_rank FROM platform ORDER BY download_rank ASC LIMIT 3'     ,'SELECT platform_name FROM platform ORDER BY download_rank DESC LIMIT 3'     ,'SELECT title FROM game ORDER BY release_date ASC LIMIT 3'     ,'SELECT title FROM game ORDER BY release_date DESC LIMIT 3'     ,'SELECT title FROM game ORDER BY units_sold_millions ASC LIMIT 3'     ,'SELECT title FROM game ORDER BY units_sold_millions DESC LIMIT 3' ]
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player) <MID>_ID IN (SELECT Platform_ID FROM game)', con=conn)     FROM platform WHERE market_district  =  'Europe'
SELECT T1.title FROM game AS T1 JOIN game_player AS T2 ON T1.game_id  =  T2.game_id JOIN player AS T3 ON T2.player_id  =  T3.player_id JOIN game_player AS T4 ON T4.game_id  =  T1.game_id JOIN player AS T5 ON T4.player_id  =  T5.player_id WHERE T3.College  =  'Oklahoma' AND T5.College  =  'Auburn' <MID>     , market_district text     , download_rank int     , PRIMARY KEY (platform_id)     , UNIQUE KEY download_rank() WHERE download_rank  >  0)     , game(game_id int AUTO_INCREMENT     , title text NOT NULL     , release_date
SELECT T2.title FROM game_player AS T1 JOIN game AS T2 ON T1.game_id  =  T2.game_id JOIN player AS T3 ON T1.player_id  =  T3.player_id WHERE T3.College  =  'Oklahoma' OR T3.College  =  'Auburn' <MID>     , download_rank INT NOT NULL DEFAULT 0 CHECK (download_rank >= 0)     , market_district TEXT     , platform_name TEXT UNIQUE     , created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP     , updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP     , PRIMARY KEY (platform_id)     , UNIQUE (platform_name)     , CHECK (market_district != '')
SELECT DISTINCT Franchise FROM game'         , 'SELECT DISTINCT franchise FROM game'         , 'SELECT DISTINCT franchise FROM game'     , 'SELECT count(DISTINCT franchise) FROM game'     , 'SELECT count(DISTINCT franchise) FROM game'     , 'SELECT count(DISTINCT franchise) FROM game'     , 'SELECT count(DISTINCT franchise) FROM game'     , 'SELECT count(DISTINCT franchise) FROM game'     , 'SELECT count(DISTINCT franchise) FROM game'     , 'SELECT count(DISTINCT franchise) FROM game'     , 'SELECT count(DISTINCT franchise) FROM game'     , 'SELECT count(DISTINCT franchise) FROM game'     , 'SELECT count(DISTINCT franchise) FROM game'     , '
SELECT DISTINCT Franchise FROM game'         , 'SELECT DISTINCT Franchise FROM game'         , ['Resident Evil','Mortal Kombat','Super Mario Bros.']     ,   'What are the 3 highest grossing games? [SQL] SELECT title FROM game ORDER BY units_sold_millions DESC LIMIT 3'         , 'SELECT title FROM game ORDER BY units_sold_millions DESC LIMIT 3'         ,   ['Mortal Kombat','Resident Evil','Super Smash Bros.']     ,   'Which platform has the highest download rank? [SQL] SELECT platform_name FROM platform ORDER BY download_rank DESC LIMIT 1'         , 'SELECT platform_name FROM platform ORDER BY download_rank DESC LIMIT 1'         ,   ['Nintendo Switch']     ,   'Which platform has the
SELECT title FROM game WHERE game_id NOT IN (SELECT game_id FROM game_player AS T1 JOIN player AS T2 ON T1.player_id  =  T2.player_id WHERE T2.Position  =  'Guard') <MID>     , 'SELECT title FROM game WHERE game_id NOT IN (SELECT game_id FROM game_player AS T1 JOIN player AS T2 ON T1.player_id  =  T2.player_id WHERE T2.Position  =  'Guard')'     , 'SELECT T1.title FROM game AS T1 JOIN game_player AS T2 ON T1.game_id  =  T2.game_id WHERE T2.if_active  =  0'     , 'SELECT title FROM game WHERE game_id NOT IN (SELECT game_id FROM game_player AS T1 JOIN player AS T2 ON T1.
SELECT title FROM game EXCEPT SELECT T1.title FROM game AS T1 JOIN game_player AS T2 ON T1.game_id  =  T2.game_id JOIN player AS T3 ON T2.player_id  =  T3.player_id WHERE T3.Position  =  'Guard' <MID>     , 'game_player'     , 'player'     , 'game'     , 'platform'     , 'franchise'     , 'developer'     , 'publisher'     , 'genre' ]
SELECT name FROM press ORDER BY year_profits_billion DESC'         , '2018-03-19T04:57:56.950066Z' ,  None , 'HW2_Q3' , 1]      ,   [ 2 ,  'SELECT title FROM book WHERE author_id = (SELECT author_id FROM author WHERE name  =  'John Smith')' , 'SELECT title FROM book WHERE author_id = (SELECT author_id FROM author WHERE name  =  'John Smith')' , 'TITLE OF THE BOOK BY THAT AUTHOR' , 'SELECT title FROM book WHERE author_id = (SELECT author_id FROM author WHERE name  =  'John Smith')' , '2018-03-19T04:57:56.950066
SELECT name FROM press ORDER BY year_profits_billion DESC'         , '2018' :  ['SELECT name FROM press WHERE YEAR  =  2018']}     , 'Q3' : { 'query' : 'SELECT count(*) FROM book' , 'answer' : '4'}     , 'Q4' : { 'query' : 'SELECT count(DISTINCT title) FROM book' , 'answer' : '2'}     , 'Q5' : { 'query' : 'SELECT count(DISTINCT author_id) FROM book' , 'answer' : '2'}     , 'Q6' : { 'query' : 'SELECT count(DISTINCT press_id) FROM book' , 'answer' : '2'}     , 'Q7' : { 'query' : 'SELECT count(DISTINCT
SELECT name FROM press WHERE year_profits_billion  >  15 OR month_profits_billion  >  10 CONNECT BY LEVEL  -  1 LIMIT 1'         , 'SELECT name FROM press WHERE year_profits_billion  >  15 OR month_profits_billion  >  10'     , 'SELECT title FROM book WHERE sale_amount  =  'Luxurious' CONNECT BY LEVEL  -  1 LIMIT 1'         , 'SELECT title FROM book WHERE sale_amount  =  'Luxurious'')     , ('SELECT author_id FROM book GROUP BY author_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT author_id FROM book GROUP BY author_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT title FROM book WHERE
SELECT name FROM press WHERE year_profits_billion  >  15 OR month_profits_billion  >  1000000000.00 LIMIT 1'         , 'SELECT name FROM press WHERE year_profits_billion  >  15 OR month_profits_billion  >  1000000000.00 LIMIT 1'     , 'SELECT name FROM press WHERE year_profits_billion  >  15 OR month_profits_billion  >  1000000000.00 LIMIT 1'     , 'SELECT name FROM press WHERE year_profits_billion  >  15 OR month_profits_billion  >  1000000000.00 LIMIT 1'
SELECT avg(month_profits_billion) ,  max(month_profits_billion) FROM press GROUP BY YEAR_Profits_billion ORDER BY YEAR_Profits_billion DESC LIMIT 1'         , 'answer': '7.5625 ,  8.0'     , 'category': 'Data Management'     , 'difficulty': 'Hard'     , 'image': 'https://images.pexels.com/photos/34986/pexels-photo.jpg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260'     , 'subcategory': 'Database'     , 'level': 'Medium'     , 'question': 'SELECT avg(month_profits_bill
SELECT max(YEAR_Profits_billion) ,  avg(YEAR_Profits_billion) FROM press GROUP BY name <MID>.com/problems/average-yearly-profit/description/
SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1'         , 'SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1'     ,   'SELECT name FROM press ORDER BY year_profits_billion DESC LIMIT 1'         , 'SELECT name FROM press ORDER BY year_profits_billion DESC LIMIT 1'      ,   'SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1'     ,   'SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1'     ,   'SELECT name FROM press ORDER BY year_profits_billion DESC LIMIT 1'     ,   'SELECT name FROM press ORDER BY year_profits_billion DESC LIMIT 1'     ,   'SELECT name FROM press ORDER BY month_profits
SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1'         , '2002 : The Martian'         , '2015 : Old Man''s War'     , '2008 : The Fifth Season'         , '2013 : A Game of Thrones'         , '2017 : The Name of the Wind'     , '2016 : The Diary of a Wimpy Kid: The Long Haul'         , '2014 : And Then We Came To The End'         , '2011 : The Moon Is a Harsh Mistress'         , '2010 : The Informant!'         , '2018 : The Upside of Unrequited'         , '2007 : The Companions of Dr
SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1 UNION SELECT name FROM press ORDER BY month_profits_billion ASC LIMIT 1]
SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1 UNION SELECT name FROM press ORDER BY month_profits_billion ASC LIMIT 1'         , 'SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1 INTERSECT SELECT name FROM press ORDER BY month_profits_billion ASC LIMIT 1'     , 'SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1 MINUS SELECT name FROM press ORDER BY month_profits_billion ASC LIMIT 1'     , 'SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1 EXCEPT SELECT name FROM press ORDER BY month_profits_billion ASC LIMIT 1'     , 'SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1 UNION SELECT name FROM press ORDER
SELECT count(*) FROM author WHERE age  <  30'         , '2' : ['SELECT count(*) FROM author WHERE age  <  30']}     , {'1' : 'SELECT count(*) FROM book' , '2' : 'SELECT count(DISTINCT title) FROM book'}     , {'1' : 'SELECT count(DISTINCT press_id) FROM book' , '2' : 'SELECT count(DISTINCT press_id) FROM book'}     , {'1' : 'SELECT count(DISTINCT author_id) FROM book' , '2' : 'SELECT count(DISTINCT author_id) FROM book'}     , {'1' : 'SELECT sum(sale_amount) FROM book' , '2' : 'SELECT sum(sale_amount) FROM book'}     , {'1' : 'SELECT avg(sale_amount) FROM
SELECT count(*) FROM author WHERE age  <  30'         , '2' : 'SELECT count(*) FROM author WHERE age  <  30'     , '3' : 'SELECT count(*) FROM author WHERE age  <  30'     , '4' : 'SELECT count(*) FROM author WHERE age  <  30'     , '5' : 'SELECT count(*) FROM author WHERE age  <  30'     , '6' : 'SELECT count(*) FROM author WHERE age  <  30'     , '7' : 'SELECT count(*) FROM author WHERE age  <  30'     , '8' : 'SELECT count(*) FROM author WHERE age  <  30'     , '9' : 'SELECT count(*) FROM author WHERE age  <  30'     , '10' : 'SELECT count(*) FROM author WHERE age  <
SELECT avg(age) ,  gender FROM author GROUP BY gender <MID>.com/problems/average-age-of-authors/description/
SELECT Gender ,  AVG(Age) FROM author GROUP BY Gender'         , 'gender	avg(age)'         , ['M	29.5', 'F	31.5']     , ['SELECT count(*) FROM book' , 10]     , ['SELECT count(DISTINCT title) FROM book' , 3]     , ['SELECT count(DISTINCT press_id) FROM book' , 4]     , ['SELECT count(DISTINCT author_id) FROM book' , 10]     , ['SELECT count(*) FROM author' , 10]     , ['SELECT count(*) FROM press' , 4]     , ['SELECT count(DISTINCT title) FROM press' , 1]     , ['SELECT count(DISTINCT press_id) FROM press' , 4]     , ['SELECT count(
SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'         , 'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'     , 'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'     , 'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'      ,  'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'     , 'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'     , 'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'     , 'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'     ,
SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'         , 'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'     , 'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'     , 'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender'      , SQLSTATE ['22018']]     , ['SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender' , 'count(*)' , 'Gender' , 'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender' , 'COUNT(*)' , 'GROUP BY Gender' , 'SELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY G
SELECT Title FROM book ORDER BY Release_date DESC'         , 'SELECT Title FROM book ORDER BY Release_date DESC'     , ['SELECT Title FROM book ORDER BY Release_date DESC']     , ['SELECT Title FROM book ORDER BY Release_date DESC']
SELECT Title FROM book ORDER BY Release_date DESC'         , 'SELECT Title FROM book ORDER BY Release_date DESC'     ,   'SELECT Title FROM book ORDER BY Release_date DESC'     ,   'SELECT Title FROM book ORDER BY Release_date DESC'          ,   ['SELECT Title FROM book ORDER BY Release_date DESC LIMIT 2' ,  'SELECT Title FROM book ORDER BY Release_date DESC LIMIT 2' ,  'SELECT Title FROM book ORDER BY Release_date DESC LIMIT 2']          ,   ['SELECT Title FROM book ORDER BY Release_date DESC OFFSET 2' ,  'SELECT Title FROM book ORDER BY Release_date DESC OFFSET 2' ,  'SELECT Title FROM book ORDER BY Release_date DESC OFFSET 2']          ,   ['SELECT Title FROM book ORDER BY Release_date DESC LIMIT 5' ,
SELECT Book_Series ,  COUNT(*) FROM book GROUP BY Book_Series'         , 'Number of books in Each Series'     , [{'author': 4 , 'press': 2}]          , ['SELECT count(*) FROM book' , 'Total Number of Books']     , [{'author': 4 , 'press': 2 , 'book': 10}]     , ['SELECT SUM(sale_amount) FROM book' , 'Total Sales Amount']     , [{'author': 4 , 'press': 2 , 'book': 10}]     , ['SELECT AVG(sale_amount) FROM book' , 'Average Sales Amount']     , [{'author': 4 , 'press': 2 , 'book': 5}]     , ['SELECT MIN(sale_amount) FROM book' , 'Minimum Sales Amount']
SELECT Book_Series ,  COUNT(*) FROM book GROUP BY Book_Series ORDER BY COUNT(*) DESC'         , 'SELECT Book_Series ,  COUNT(*) FROM book GROUP BY Book_Series ORDER BY COUNT(*) DESC'     , 'SELECT Book_Series ,  COUNT(*) FROM book GROUP BY Book_Series ORDER BY COUNT(*) DESC'     , 'SELECT Book_Series ,  COUNT(*) FROM book GROUP BY Book_Series ORDER BY COUNT(*) DESC'      ,  3     ,  1     ,  2     ,  0      ,  4     ,  5      ,  6      ,  7      ,  8      ,  9      ,  10      ,  11      ,  12      ,  13      ,  14      ,  15      ,  16      ,  17      ,  18
SELECT T1.title ,  T1.release_date FROM book AS T1 JOIN (SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5) AS T2 ON T1.title  =  T2.title AND T1.release_date  =  T2.release_date'         , 'author': 'SELECT name FROM author'     , 'press': 'SELECT name FROM press'     , 'book': 'SELECT T1.title ,  T1.release_date FROM book AS T1 JOIN (SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5) AS T2 ON T1.title  =  T2.title AND T1.release_date  =  T2.release_date'     , 'task1': 'SELECT T1.title ,  T1.release_date FROM book AS T1 JOIN
SELECT T1.title ,  T1.release_date FROM book AS T1 JOIN (SELECT title ,  release_date ,  sum(sale_amount) AS total_sales FROM book GROUP BY title ,  release_date ORDER BY total_sales DESC LIMIT 5) AS T2 ON T1.title  =  T2.title AND T1.release_date  =  T2.release_date'         ,   'total_sales': 4380.6 }      ,   {   'query': 'SELECT count(*) FROM author' }      ,   {   'query': 'SELECT count(*) FROM press' }      ,   {   'query': 'SELECT count(*) FROM book' }     ,   {   'query': 'SELECT count(DISTINCT press_id) FROM book' }      ,   {   'query': 'SELECT count(
SELECT T1.book_series FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T1.sale_amount  >  1000 INTERSECT SELECT T1.book_series FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T1.sale_amount  <  500 <MID>     , release_date DATE NOT NULL);'     , 'INSERT INTO author VALUES (101 ,  'John' , 'White' ,  42 ,  'Male');'     , 'INSERT INTO author VALUES (102 ,  'Peter' , 'Green' ,  32 ,  'MALE');'     , 'INSERT INTO press VALUES (201 ,  'ABC Press' ,  4 ,  10
SELECT T1.book_series FROM book AS T1 JOIN book AS T2 ON T1.book_series = T2.book_series WHERE T1.sale_amount - 1000 > 0 AND T2.sale_amount - 500 < 0'         , 'SELECT T1.book_series FROM book AS T1 JOIN book AS T2 ON T1.book_series = T2.book_series WHERE T1.sale_amount - 1000 > 0 AND T2.sale_amount - 500 < 0'     , 'SELECT T1.book_series FROM book AS T1 JOIN book AS T2 ON T1.book_series = T2.book_series WHERE T1.sale_amount - 1000 > 0 AND T2.sale_amount - 500 <
SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT' <MID>     , release_date DATE NOT NULL DEFAULT CURRENT_DATE)''')     FROM DB_FILE PATH ('books.db') INSERT INTO book VALUES (5 ,  'Python Unleashed' ,  'Python' ,  3 ,  '2018-03-17')     GROUP BY press_id HAVING sum(sale_amount)  >  150000 UNION SELECT t1.name FROM author AS
SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id WHERE T2.book_series  =  'MM' INTERSECT SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id WHERE T2.book_series  =  'LT' <MID>     , release_date DATE NOT NULL DEFAULT CURRENT_DATE)''')     FROM book AS T1 JOIN author AS T2 ON T1.author_id  =  T2.author_id WHERE T1.sale_amount  >  250 AND T2.age  >  35 GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1     GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1
SELECT Name ,  Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book) <MID>.com/problems/find-the-name-and-age-of-the-authors-who-do-not-have-any-book-in-the-record/1
SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book) <MID>     , T2.name AS press_name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =  T2.author_id JOIN press AS T3 ON T1.press_id  =  T3.press_id WHERE T1.sale_amount  >  150;'     , 'SELECT T2.name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =  T2.author_id WHERE T1.sale_amount  >  150;'     , 'SELECT T2.name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =  T2.author_id WHERE T1.sale_amount  >  150 GROUP BY T2.name H
SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  1'         , 'SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  1'     , 'SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  1'     , 'SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAV
SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.name HAVING count(*)  >  1'         , 'SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.name HAVING count(*)  >  1'     , 'SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.name HAVING count(*)  >  1'     , 'SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.name HAVING count(*)  >  1'
SELECT T1.title ,  T2.name ,  T3.name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =  T2.author_id JOIN press AS T3 ON T1.press_id  =  T3.press_id ORDER BY T1.sale_amount DESC LIMIT 3'         , 'SELECT T1.title ,  T2.name ,  T3.name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =  T2.author_id JOIN press AS T3 ON T1.press_id  =  T3.press_id ORDER BY T1.sale_amount DESC LIMIT 3'     , 'SELECT T1.title ,  T2.name ,  T3.name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =
SELECT T1.title ,  T2.name ,  T3.name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =  T2.author_id JOIN press AS T3 ON T1.press_id  =  T3.press_id ORDER BY T1.sale_amount DESC LIMIT 3'         , 'SELECT T1.title ,  T2.name ,  T3.name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =  T2.author_id JOIN press AS T3 ON T1.press_id  =  T3.press_id ORDER BY T1.sale_amount DESC LIMIT 3'     , 'SELECT T1.title ,  T2.name ,  T3.name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =
SELECT T2.name ,  sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id GROUP BY T1.press_id'         , 'SELECT T2.name ,  sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id GROUP BY T1.press_id'     , 'SELECT T2.name ,  sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id GROUP BY T1.press_id'     , 'SELECT T2.name ,  sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press
SELECT T2.name ,  sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id GROUP BY T1.press_id'         , 'SELECT T2.name ,  sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id GROUP BY T1.press_id'     , 'SELECT T2.name ,  sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id GROUP BY T1.press_id'     , 'SELECT T2.name ,  sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press
SELECT count(*) ,  T2.name FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T1.sale_amount  >  1000 GROUP BY T2.name <MID>     , release_date DATE NOT NULL);'     , 'INSERT INTO author VALUES (101 ,  'John' ,  48 ,  'Male');'     , 'INSERT INTO author VALUES (102 ,  'Amanda' ,  38 ,  'Female');']     , ['SELECT count(*) ,  T2.name FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T1.sale_amount  >  1000 GROUP BY T2.name;']     , ['SELECT count(*) ,
SELECT T2.name ,  count(*) FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T1.sale_amount  >  1000 GROUP BY T2.press_id <MID>     , release_date DATE NOT NULL);'     , 'INSERT INTO author VALUES (1 ,  'a1' ,  20 ,  'Male');'     , 'INSERT INTO press VALUES (1 ,  'p1' ,  15.2 ,  2017);'     , 'INSERT INTO book VALUES (1 ,  'b1' ,  'bs1' ,  1 ,  1 ,  '2017-11-16');'     , 'INSERT INTO book VALUES (2 ,  'b2' ,  'bs2' ,  1 ,  1 ,
SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id WHERE T2.sale_amount  =  (SELECT max(sale_amount) FROM book) LIMIT 1'         , 'T1.name' : 'Stephen King', 'T2.sale_amount' : '28000000', 'T2.title' : 'It'}     , {'query' : 'SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id ORDER BY T2.sale_amount DESC LIMIT 1'          , 'answer' : 'SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id ORDER BY T2.
SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id ORDER BY T2.sale_amount DESC LIMIT 1'         , 'T1.name': 'Stephen King', 'T2.sale_amount': '14'}     , {'query': 'SELECT count(*) FROM book'}: {count: 9}     , {'query': 'SELECT sum(sale_amount) FROM book'}: {sum: 108}     , {'query': 'SELECT avg(sale_amount) FROM book'}: {avg: 11.777777777777776}     , {'query': 'SELECT min(sale_amount) FROM book'}: {min: 3}     , {'query': 'SELECT max(sale
SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1'         , 'task3': 'SELECT avg(age) FROM author'     ,   'task4': 'SELECT count(*) FROM book'     ,   'task5': 'SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1'     ,   'task6': 'SELECT count(*) FROM book'     ,   'task7': 'SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_
SELECT name ,  Gender FROM author ORDER BY sale_amount DESC LIMIT 1'         , 'T1' : ['SELECT T1.name ,  T1.gender FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY sum(T2.sale_amount) DESC LIMIT 1']     ,   'Q3' : 'SELECT avg(YEAR_PROFITS_billion) FROM press'         , 'T3' : ['SELECT avg(YEAR_PROFITs_billion) FROM press']     ,   'Q4' : 'SELECT count(*) FROM book'         , 'T4' : ['SELECT count(*) FROM book']          ,   'Q5' : 'SELECT title FROM book WHERE sale_amount  =
SELECT name FROM author WHERE author_id NOT IN (SELECT T1.author_id FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T2.name  =  'Accor') <MID>     , release_date DATE NOT NULL);'     , 'INSERT INTO author VALUES (101 ,  'Albert Einstein' ,  76 ,  'Male');'     , 'INSERT INTO author VALUES (102 ,  'Isaac Newton' ,  65 ,  'Male');']     , ['SELECT name FROM author WHERE author_id NOT IN (SELECT T1.author_id FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T2.name  =  'Accor')']     , ['SELECT name
SELECT name FROM author EXCEPT (SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor') <MID>     , release_date DATE NOT NULL DEFAULT CURRENT_DATE)'''.format(book_title=book_title, author_id=author_id, press_id=press_id, sale_amount=sale_amount)     , con=conn)
SELECT t1.name ,  sum(t3.year_profits_billion) FROM press AS t1 JOIN book AS t2 ON t1.press_id  =  t2.press_id JOIN sales AS t3 ON t2.book_id  =  t3.book_id GROUP BY t1.press_id HAVING count(*)  >  2'         , 'SELECT t1.name ,  sum(t3.year_profits_billion) FROM press AS t1 JOIN book AS t2 ON t1.press_id  =  t2.press_id JOIN sales AS t3 ON t2.book_id  =  t3.book_id GROUP BY t1.press_id'     , 'SELECT t1.name ,  sum(t3.year_profits_billion) FROM press AS t1 JOIN book AS
SELECT t2.name ,  t2.year_profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2'         , 'SELECT t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2'     , 'SELECT t2.name ,  t2.year_profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2'     , 'SELECT t2.name FROM book AS t1 JOIN press AS t2
SELECT count(*) FROM Authors GROUP BY author_name HAVING count(*)  >  1 UNION SELECT count(*) FROM Authors GROUP BY author_name HAVING count(*)  =  1 UNION SELECT count(*) FROM Authors GROUP BY author_name HAVING count(*)  <  2'         , 'SELECT count(*) FROM Authors'         , 'SELECT count(*) FROM Documents'         , 'SELECT count(*) FROM Business_Processes'     , ]     , [ 'SELECT count(*) FROM Ref_Staff_Roles'         , 'SELECT count(*) FROM Process_Outcomes'         , 'SELECT count(*) FROM Process_Status'         , 'SELECT count(*) FROM Staff_in_Processes'     , ]     , [ 'SELECT count(*) FROM Staff'     , ]     , [ 'SELECT count(*) FROM Staff_in_Processes'     ,
SELECT author_name FROM Authors'         , 'SELECT author_name FROM Authors'         , ['SELECT author_name FROM Authors']         , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']      , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']     , ['SELECT author_name FROM Authors']
SELECT author_name ,  other_details FROM Authors' , 'SELECT document_name ,  document_description FROM Documents' , 'SELECT process_name FROM Business_Processes' , 'SELECT process_outcome_description FROM Process_Outcomes' , 'SELECT process_status_description FROM Process_Status' ]
SELECT other_details FROM Authors WHERE author_name  =  'Addison Denesik' <MID>_id INTEGER NOT NULL , date_from DATETIME , date_to DATETIME , other_details VARCHAR(255) , PRIMARY KEY (document_id , process_id , staff_id) ) CREATE TABLE Staff_in_Processes AS SELECT document_id ,  process_id ,  staff_id ,  date_from ,  date_to ,  other_details FROM Documents_Processes JOIN Business_Processes ON Documents_Processes.process_id = Business_Processes.process_id JOIN Staff ON Documents_Processes.staff_id = Staff.staff_id WHERE Business_Processes.process_name = 'Doctor' AND Staff.staff_details LIKE '%female%' EXPLAIN SELECT document_id ,  process_id ,
SELECT count(*) FROM Documents'         , 'SELECT count(*) FROM Documents'         , 'SELECT count(*) FROM Business_Processes'         , 'SELECT count(*) FROM Staff_in_Processes'     , 'SELECT count(*) FROM Ref_Staff_Roles'     , 'SELECT count(*) FROM Process_Status'     , 'SELECT count(*) FROM Process_Outcomes'     , 'SELECT count(*) FROM Authors'          , 'SHOW TABLES'     , 'SELECT count(*) FROM documents'     , 'SELECT count(*) FROM business_processes'     , 'SELECT count(*) FROM staff_in_processes'     , 'SELECT count(*) FROM ref_staff_roles'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_outcomes'     , 'SELECT count(*) FROM authors'
SELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name WHERE T2.document_id  =  4'         , 'T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name WHERE T2.document_id  =  4'         , ['T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name WHERE T2.document_id  =  4']     , [4]     , 'SELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name WHERE T2.document_id
SELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name WHERE T2.document_name  =  'Travel to Brazil' GROUP BY T1.author_name ORDER BY count(*) DESC LIMIT 1'
SELECT count(*) FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE T2.author_name  =  'Era Kerluke' GROUP BY T2.author_name HAVING count(*)  =  1' <MID>_id INTEGER NOT NULL,
SELECT document_name ,  document_description FROM Documents'         , 'SELECT author_name FROM Authors'     , 'SELECT process_name FROM Business_Processes'     , 'SELECT process_outcome_description FROM Process_Outcomes'     , 'SELECT process_status_description FROM Process_Status'     , 'SELECT staff_role_code FROM Ref_Staff_Roles'     , 'SELECT date_from ,  date_to FROM Staff_in_Processes'     , 'SELECT process_id FROM Documents_Processes'     , 'SELECT T1.document_name ,  T1.document_description FROM Documents AS T1 JOIN Documents_Processes AS T2 ON T1.document_id  =  T2.document_id'     , 'SELECT T2.process_name FROM Business_Processes AS T1 JOIN Documents_
SELECT document_id ,  document_name FROM Documents WHERE author_name  =  'Bianka Cummings' <MID>_id INTEGER NOT NULL,
SELECT T1.author_name ,  T1.other_details FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name WHERE T2.document_name  =  'Travel to China' <MID>_id INTEGER NOT NULL,
SELECT T1.author_name ,  COUNT(*) FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name GROUP BY T1.author_name ORDER BY COUNT(*) DESC'         , 'SELECT T1.author_name ,  COUNT(*) FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name GROUP BY T1.author_name ORDER BY COUNT(*) DESC'     , ['SELECT T1.author_name ,  COUNT(*) FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name GROUP BY T1.author_name ORDER BY COUNT(*) DESC']]     , [r'''SELECT T1.author_name ,  COUNT(*) FROM Authors AS T1 JOIN Documents AS T2 ON T
SELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name GROUP BY T1.author_name ORDER BY count(*) DESC LIMIT 1 <MID>_id INTEGER NOT NULL,
SELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name GROUP BY T1.author_name HAVING count(*)  >=  2'         , 'Documents with more than one author': 'SELECT document_name FROM Documents WHERE author_name IN (SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >  1)'     , 'Authors with more than one document': 'SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >  1'     , 'Documents with an author also having another document': 'SELECT T1.document_name FROM Documents AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name WHERE T1.document_name != T2.document_name'
SELECT count(*) FROM Business_Processes' , '4' , 'Business_Processes' , 4],
SELECT next_process_id ,  process_name ,  process_description FROM Business_Processes WHERE process_id  =  9 SQLITE_OK' , document_id ,  process_id FROM Documents_Processes WHERE process_id  =  9 UNION SELECT null ,  null ,  null FROMDocuments_Processes WHERE process_id  =  null UNION SELECT null ,  null ,  null FROM Staff_in_Processes WHERE process_id  =  null UNION SELECT null ,  null ,  null FROM Business_Processes WHERE process_id  =  null SQLITE_OK' , process_id FROM Business_Processes WHERE process_id  =  9 UNION SELECT null ,  null FROMDocuments_Processes WHERE process_id  =  null UNION SELECT null ,  null FROM Staff_in_Processes WHERE process_id  =  null SQLITE_OK' , process_id FROM
SELECT process_name FROM Business_Processes WHERE process_id = ( SELECT next_process_id FROM Business_Processes WHERE process_id = 9 )'         , 'Business_Processes', 'next_process_id')     , ('What are all the roles that a staff member can have at any given time?[SQL]SELECT staff_role_code FROM Ref_Staff_Roles'         , 'Ref_Staff_Roles', None)     , ('Which business process has to be completed before processing a document?[SQL]SELECT process_id FROM Business_Processes WHERE process_name =  ( SELECT process_name FROM Business_Processes WHERE process_is_initiating = 1 )'         , 'Business_Processes', 'process_id')     , ('Which business processes can be concurrently executed to process a document?[SQL]SELECT process
SELECT count(*) FROM process_outcomes'         , 'SELECT count(*) FROM process_outcomes'         , 'SHOW PROCESS OUTCOMES'         , ['SELECT count(*) FROM process_outcomes']     , [None, None, 'SELECT count(*) FROM process_outcomes']     , ['SELECT count(*) FROM process_outcomes']     , ['SELECT count(*) FROM process_outcomes']      , ['SELECT count(*) FROM process_outcomes']     , ['SELECT count(*) FROM process_outcomes']     , ['SELECT count(*) FROM process_outcomes']     , ['SELECT count(*) FROM process_outcomes']     , ['SELECT count(*) FROM process_outcomes']     , ['SELECT count(*) FROM process_outcomes']     , ['SELECT count(*) FROM process_outcomes']     , ['SELECT count(*) FROM process_outcomes']     , ['
SELECT process_outcome_code ,  process_outcome_description FROM Process_Outcomes'         , 'SELECT process_outcome_code ,  process_outcome_description FROM Process_Outcomes'     , ['SELECT process_outcome_code ,  process_outcome_description FROM Process_Outcomes']]     , [r'''SELECT process_outcome_code ,  process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'Rejected' ''', 'SELECT process_outcome_code ,  process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'Rejected' ']     , ['SELECT process_outcome_code ,  process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'Rejected' ']]     , [r'''SELECT process_out
SELECT process_outcome_description FROM PROCESS_OUTCOMES WHERE process_outcome_code  =  'working' <MID>_id INTEGER NOT NULL , date_from DATETIME , date_to DATETIME , other_details VARCHAR(255) , PRIMARY KEY (document_id , process_id , staff_id) ) CREATE TABLE Ref_Staff_Roles ( staff_role_code CHAR(15) NOT NULL , staff_role_description VARCHAR(255) NOT NULL , PRIMARY KEY (staff_role_code) ) CREATE TABLE Process_Outcomes ( process_outcome_code CHAR(15) NOT NULL , process_outcome_description VARCHAR(255) NOT NULL , PRIMARY KEY (process_outcome_code) ) CREATE TABLE Process_Status ( process_status_code CHAR(15) NOT NULL , process_status_description VARCHAR(25
SELECT count(*) FROM process_status'         , 'SELECT count(*) FROM process_status'         , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'     , 'SELECT count(*) FROM process_status'
SELECT process_status_code ,  process_status_description FROM Process_Status'         , 'SELECT process_outcome_code ,  process_outcome_description FROM Process_Outcomes'     , 'SELECT staff_role_code ,  ref_staff_roles.staff_role_description FROM Ref_Staff_Roles AS ref_staff_roles'     , 'SELECT date_from ,  date_to FROM staff_in_processes WHERE document_id = 4 AND process_id = 1'     , 'SELECT T1.process_name FROM business_processes AS T1 JOIN documents_processes AS T2 ON T1.process_id  =  T2.process_id WHERE T2.document_id  =  4'     , 'SELECT T1.process_name FROM business_processes AS T1 JOIN documents_processes
SELECT process_status_description FROM Process_Status WHERE process_status_code  =  'ct' UNION SELECT process_status_description FROM Ref_Staff_Roles WHERE staff_role_code  =  'ct' UNION SELECT process_status_description FROM Staff_in_Processes WHERE process_status_code  =  'ct' UNION SELECT process_status_description FROM Business_Processes WHERE process_status_code  =  'ct' UNION SELECT process_status_description FROM Documents_Processes WHERE process_status_code  =  'ct' UNION SELECT process_status_description FROM Authors WHERE process_status_code  =  'ct' UNION SELECT process_status_description FROM Documents WHERE process_status_code  =  'ct' UNION SELECT process_status_description FROM Process_Outcomes WHERE process_status_code  =  'ct' UNION SELECT process_status_description FROM
SELECT count(*) FROM Staff GROUP BY staff_details HAVING count(*)  =  1'         , 'count(*)' : 3}     , {'question': 'Which role has the most staff?', 'answer': 'Ref_Staff_Roles.staff_role_description' , 'document': ['SELECT Ref_Staff_Roles.staff_role_description FROM Ref_Staff_Roles JOIN Staff_in_Processes ON Ref_Staff_Roles.staff_role_code = Staff_in_Processes.staff_role_code GROUP BY Ref_Staff_Roles.staff_role_description ORDER BY count(*) DESC LIMIT 1' ] }     , {'question': 'Which role has the least staff?', 'answer': 'Ref_Staff_Roles.staff_role_description' , 'document': ['SELECT Ref_
SELECT staff_id ,  staff_details FROM Staff'         , 'SELECT staff_id ,  staff_details FROM Staff'     , 'SELECT staff_id ,  staff_details FROM Staff'     , 'SELECT staff_id ,  staff_details FROM Staff'     , 'SELECT staff_id ,  staff_details FROM Staff'     , 'SELECT staff_id ,  staff_details FROM Staff'      , 'SELECT staff_id ,  staff_details FROM Staff'     , 'SELECT staff_id ,  staff_details FROM Staff'     , 'SELECT staff_id ,  staff_details FROM Staff'     , 'SELECT staff_id ,  staff_details FROM Staff'     , 'SELECT staff_id ,  staff_details FROM Staff'     , 'SELECT staff_id ,  staff_details FROM Staff'     , 'SELECT staff_id ,  staff_
SELECT * FROM Staff WHERE staff_id = 100'         , 'SELECT * FROM Staff WHERE staff_id = 100'         , ['Staff ID', 'Staff Details']         , ['100', 'Referee']     , ['SELECT * FROM Ref_Staff_Roles WHERE staff_role_code  =  'REF']]     , ['SELECT * FROM Process_Outcomes WHERE process_outcome_code  =  'APPROVED'']     , ['SELECT * FROM Process_Status WHERE process_status_code  =  'INITIATED'']     , ['SELECT * FROM Authors WHERE author_name  =  'Author1'']     , ['SELECT * FROM Documents WHERE document_name  =  'Document1'']     , ['SELECT * FROM Business_Processes WHERE process_name  =  'Process
SELECT count(*) FROM Ref_Staff_Roles'         , 'count(*)' : 3}     , {'question': 'How many processes are defined in the business process diagram?', 'answer': 'Business_Processes' , 'count(*)' : 7}     , {'question': 'How many documents are defined in the document flow diagram?', 'answer': 'Documents' , 'count(*)' : 4}     , {'question': 'How many outcomes are defined for any document to pass through a business process?', 'answer': 'Documents_Processes' , 'count(*)' : 28}     , {'question': 'How many statuses are defined for any document to pass through a business process?', 'answer': 'Documents_Processes' , 'count(*)' : 28}     , {'question': 'How many roles are defined for staff to play in any business
SELECT staff_role_code ,  staff_role_description FROM Ref_Staff_Roles'         , 'SELECT staff_role_code ,  staff_role_description FROM Ref_Staff_Roles'     , ['SELECT staff_role_code ,  staff_role_description FROM Ref_Staff_Roles']      , 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code  =  'HR' <MID>_id INTEGER NOT NULL,
SELECT count(*) FROM Documents_Processes AS T1 JOIN Business_Processes AS T2 ON T1.process_id  =  T2.process_id WHERE T2.process_name  =  'Send to QA' GROUP BY T2.process_name HAVING count(*)  >  100' SELECT count(*) FROM Documents_Processes AS T1 JOIN Business_Processes AS T2 ON T1.process_id  =  T2.process_id WHERE T2.process_name  =  'Send to QA' GROUP BY T2.process_name HAVING count(*)  <  100' SELECT count(*) FROM Documents_Processes AS T1 JOIN Business_Processes AS T2 ON T1.process_id  =  T2.process_id WHERE T2.process_name  =  'Send to QA' GROUP BY T2
SELECT process_id FROM Documents_Processes WHERE document_id  =  123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123
SELECT document_id FROM Documents_Processes WHERE process_id IS NULL'         ,'document_id': 3}     ,{'answer': 'SELECT document_id FROM Documents_Processes GROUP BY document_id HAVING min(process_id)  =  null' ,'document_id': 4}     ,{'answer': 'SELECT document_id FROM Documents_Processes EXCEPT SELECT document_id FROM Documents_Processes GROUP BY document_id HAVING min(process_id) !=  null' ,'document_id': 5}     ,{'answer': 'SELECT document_id FROM Documents_Processes WHERE process_id  =  (SELECT min(process_id) FROM Documents_Processes) GROUP BY document_id HAVING count(*)  >  1' ,'document_id': 6}     ,{'answer': '
SELECT process_id FROM Business_Processes WHERE process_id NOT IN ( SELECT process_id FROM Documents_Processes )'         ,'task': 'List all process ids with no document.'}     ,{'answer': 'SELECT process_id FROM Business_Processes WHERE process_id NOT IN ( SELECT process_id FROM Documents_Processes )'          ,'task': 'List all process ids with no document.'}     ,{'answer': 'SELECT process_id FROM Business_Processes EXCEPT SELECT process_id FROM Documents_Processes'          ,'task': 'List all process ids with no document.'}     ,{'answer': 'SELECT process_id FROM Business_Processes WHERE process_id NOT IN ( SELECT process_id FROM Documents_Processes )'          ,'task': 'List all process ids with no document.'}     ,{'answer': 'SELECT
SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_Outcomes AS T2 ON T1.process_outcome_code = T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code = T3.process_status_code WHERE document_id  =  0'         , 'Ref_Staff_Roles': ['STAFF_ROLE_CODE VARCHAR(15) PRIMARY KEY , STAFF_ROLE_DESCRIPTION VARCHAR(255)']}     , {'authors': ['AUTHOR_NAME VARCHAR(255) PRIMARY KEY']}     , {'business_processes': ['PROCESS_ID INTEGER PRIMARY KEY , PROCESS_NAME VARCHAR(255) NOT NULL , PROCESS
SELECT T2.process_name FROM Documents_Processes AS T1 JOIN Business_Processes AS T2 ON T1.process_id  =  T2.process_id JOIN Documents AS T3 ON T1.document_id  =  T3.document_id WHERE T3.document_name  =  'Travel to Brazil' AND T2.process_description LIKE '%travel%to%Brazil%' AND T2.process_description NOT LIKE '%travel%to%India%' AND T2.process_description NOT LIKE '%travel%to%USA%' AND T2.process_description NOT LIKE '%travel%to%Canada%' AND T2.process_description NOT LIKE '%travel%to%Mexico%' AND T2.process_description NOT LIKE '%travel%to%Australia%' AND T2.process_description NOT LIKE '%travel%to
SELECT T2.process_id ,  count(*) FROM Documents_processes AS T1 JOIN Business_processes AS T2 ON T1.process_id  =  T2.process_id GROUP BY T2.process_id'         , 'SELECT T2.process_id ,  count(*) FROM Documents_processes AS T1 JOIN Business_processes AS T2 ON T1.process_id  =  T2.process_id GROUP BY T2.process_id'     , ['SELECT T2.process_id ,  count(*) FROM Documents_processes AS T1 JOIN Business_processes AS T2 ON T1.process_id  =  T2.process_id GROUP BY T2.process_id' ]     , ['SELECT T2.process_id ,  count(*) FROM Documents_processes AS T1 JOIN Business_processes AS T2
SELECT count(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9'         , 'count' : 3} , {'question': 'How many processes does a document with id 0 have? [SQL] SELECT count(*) FROM Documents_Processes WHERE document_id  =  0' , 'answer': 'count' : 4} , {'question': 'How many documents are there in total? [SQL] SELECT count(*) FROM Documents' , 'answer': 'count' : 3} , {'question': 'How many processes are there in total? [SQL] SELECT count(*) FROM Business_Processes' , 'answer': 'count' : 7}]     , 'task2': [{'question': 'Which role has the most staff members for document id 0 and process id 9? [SQL] SELECT Ref_Staff_Roles.staff
SELECT T1.staff_id ,  count(*) FROM Staff_in_Processes AS T1 JOIN Documents_Processes AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.staff_id ORDER BY count(*) DESC LIMIT 10'         , 'task': 'Show all staff ids and the number of document processes for each staff.'}      , {'answer': 'SELECT T1.staff_id ,  count(*) FROM Staff_in_Processes AS T1 JOIN Documents_Processes AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.staff_id ORDER BY count(*) DESC LIMIT 10'         , 'task': 'Show all staff ids and the number of document processes for each staff.'}]     , {'answer': 'SELECT T1.staff_id ,
SELECT T1.staff_role_code ,  count(*) FROM Staff_in_Processes AS T1 JOIN Business_Processes AS T2 ON T1.process_id  =  T2.process_id GROUP BY T1.staff_role_code ORDER BY count(*) DESC LIMIT 10'         , 'task': 'Show all staff role codes and the number of document processes for each role.'}      , {'answer': 'SELECT T1.staff_role_code ,  count(*) FROM Staff_in_Processes AS T1 JOIN Business_Processes AS T2 ON T1.process_id  =  T2.process_id GROUP BY T1.staff_role_code ORDER BY count(*) DESC LIMIT 10'         , 'task': 'Show all staff role codes and the number of document processes for each role.'}]     , {'answer': 'SELECT
SELECT count(DISTINCT staff_role_code) FROM staff_in_processes WHERE staff_id = 3 <MID>_id = t3.document_id AND t1.process_id  =  t3.process_id GROUP BY t1.process_id HAVING sum(t3.process_outcome_code  =  'Fail')  >  0 UNION SELECT t1.process_id FROM business_processes AS t1 JOIN documents_processes AS t3 ON t1.process_id  =  t3.process_id GROUP BY t1.process_id HAVING sum(t3.process_outcome_code  =  'Pass')  >  0) AS t4 ON t4.process_id  =  t1.process_id GROUP BY t1.process_id ORDER BY count(*) DESC LIMIT 1'     ,'SELECT t
SELECT count(*) FROM Agencies'         , 'SELECT count(*) FROM Agencies'         , '3'         , ['SELECT count(*) FROM Agencies']     ,   'How many staff are there in total? [SQL] SELECT sum(staff_count) FROM Staff'         , 'SELECT sum(staff_count) FROM Staff'         , '6'         , ['SELECT sum(staff_count) FROM Staff']     ,   'How many clients are there in total? [SQL] SELECT count(*) FROM Clients'         , 'SELECT count(*) FROM Clients'         , '4'         , ['SELECT count(*) FROM Clients']     ,   'How many invoices are there in total? [SQL] SELECT count(*) FROM Invoices'         , 'SELECT count(*) FROM Invoices'         , '4'
SELECT count(*) FROM Agencies'         , 'SELECT count(*) FROM Agencies'         , 'SELECT count(*) FROM Agencies'     , 'SELECT count(*) FROM Clients'         , 'SELECT count(*) FROM Invoices'         , 'SELECT count(*) FROM Meetings'         , 'SELECT count(*) FROM Payments'         , 'SELECT count(*) FROM Staff_in_Meetings'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff' ]     , [ 'SELECT count(*) FROM Staff' ]     , [ 'SELECT count(*) FROM Staff' ]     , [ 'SELECT count(*) FROM Staff' ]     , [ 'SELECT count(*) FROM Staff' ]     , [ 'SELECT count(*) FROM Staff' ]     , [ 'SELECT count(*) FROM Staff' ]     , [ 'SELECT count(*) FROM Staff'
SELECT agency_id ,  agency_details FROM Agencies'         , 'SELECT agency_id ,  agency_details FROM Agencies'         , ['SELECT agency_id ,  agency_details FROM Agencies']     ,   'SELECT staff_id ,  staff_details FROM Staff'         , 'SELECT staff_id ,  staff_details FROM Staff'     ,   'SELECT client_id ,  sic_code ,  client_details FROM Clients'         , 'SELECT client_id ,  sic_code ,  client_details FROM Clients'     ,   'SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices'         , 'SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices'     ,   'SELECT meeting_id ,
SELECT agency_id ,  agency_details FROM Agencies'         , 'SELECT agency_id ,  agency_details FROM Agencies'         , ['agency_id' ,  'agency_details']     ,   'SELECT staff_id ,  staff_details FROM Staff'         , 'SELECT staff_id ,  staff_details FROM Staff'     ,   'SELECT client_id ,  sic_code ,  client_details FROM Clients'         , 'SELECT client_id ,  sic_code ,  client_details FROM Clients'     ,   'SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices'         , 'SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices'     ,   'SELECT meeting_id ,  purpose_of
SELECT count(*) FROM Clients'         , 'SELECT count(*) FROM Clients'         , 'SELECT count(*) FROM Clients'     , 'SELECT count(*) FROM Meetings'         , 'SELECT count(*) FROM Payments'         , 'SELECT count(*) FROM Staff_in_Meetings'     , 'SELECT count(*) FROM Invoices'         , 'SELECT count(*) FROM Staff'         , 'SELECT count(*) FROM Agencies'     , 'SELECT count(*) FROM Staff' ]     , [ 'SELECT count(*) FROM Clients'         , 'SELECT count(*) FROM Meetings'         , 'SELECT count(*) FROM Payments'         , 'SELECT count(*) FROM Staff_in_Meetings'         , 'SELECT count(*) FROM Invoices'         , 'SELECT count(*) FROM Staff'         , 'SELECT count(*) FROM A
SELECT count(*) FROM Clients WHERE agency_id = 123456789	'	'SELECT count(*) FROM Clients'	'SELECT count(*) FROM CLIENTS'	'SELECT count(*) FROM Clients WHERE agency_id = 123456789'	'SELECT count(*) FROM Clients WHERE agency_id = 123456789 AND sic_code LIKE '%Government%''	'SELECT count(*) FROM Clients WHERE agency_id = 123456789 AND client_details LIKE '%Motor%''	'SELECT count(*) FROM Clients WHERE agency_id = 123456789 AND client_details LIKE '%Government%''	'SELECT count(*) FROM Clients WHERE agency_id = 12345
SELECT client_id ,  client_details FROM Clients WHERE agency_id  =  123456789'         , 'SELECT client_id ,  client_details FROM Clients WHERE agency_id  =  123456789'         , ['SELECT client_id ,  client_details FROM Clients WHERE agency_id  =  123456789']     , ['SELECT client_id ,  client_details FROM Clients WHERE agency_id  =  123456789']     , ['SELECT client_id ,  client_details FROM Clients WHERE agency_id  =  123456789']     , ['SELECT client_id ,  client_details FROM Clients WHERE agency_id  =  1234
SELECT client_id ,  client_details FROM Clients WHERE agency_id  =  103 GROUP BY client_id ORDER BY count(*) DESC LIMIT 10'         , 'SELECT client_id ,  client_details FROM Clients WHERE agency_id  =  103 GROUP BY client_id ORDER BY count(*) DESC LIMIT 10'         , ['SELECT client_id ,  client_details FROM Clients WHERE agency_id  =  103 GROUP BY client_id ORDER BY count(*) DESC LIMIT 10']     , ['SELECT client_id ,  client_details FROM Clients WHERE agency_id  =  103 GROUP BY client_id ORDER BY count(*) DESC LIMIT 10']     , ['SELECT client_id ,  client_details FROM Clients WHERE agency_id  =  103 GROUP BY client_
SELECT T1.agency_id ,  count(*) FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id'         , 'SELECT T1.agency_id ,  count(*) FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id'     , 'SELECT T1.agency_id ,  count(*) FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id'     , 'SELECT T1.agency_id ,  count(*) FROM Agencies AS T1 JOIN Clients AS T2
SELECT T1.agency_id ,  count(*) FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1'         , 'answer': 'SELECT T1.agency_id ,  count(*) FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1'     , 'difficulty': 'Hard'     , 'group_by': []     , 'image': 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Oracle_logo_%28clip_art%29.svg/220px
SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1'         , 'answer': 1}       , {'question': 'What is the name of the meeting type that occurs most frequently? [SQL] SELECT meeting_type FROM Meetings GROUP BY meeting_type ORDER BY COUNT(*) DESC LIMIT 1'         , 'answer': 1}       , {'question': 'Which client has the longest purpose of meeting? [SQL] SELECT purpose_of_meeting FROM Clients WHERE LENGTH(purpose_of_meeting)  =  (SELECT MAX(LENGTH(purpose_of_meeting)) FROM Clients) LIMIT 1
SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1'         , 'answer': 1}       , {'question': 'Return the name of the meeting type for every meeting of the specified client.'         , 'answer': 2}       , {'question': 'For each staff member, return the start date and time of the first meeting they attended.'         , 'answer': 3}       , {'question': 'Return the names of all the meeting types that were held.'         , 'answer': 4}       , {'question': 'Return the names of all the meeting types that were held.'         , 'answer': 5}     ,
SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2'         , 'SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_
SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2'         , 'SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_
SELECT T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id WHERE T2.client_details  =  'Mac' <MID>_id` INTEGER NOT NULL,
SELECT T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id WHERE T2.client_details LIKE '%Mac%' <MID>_id` ) REFERENCES `Clients`(`client_id` )
SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id'     , 'SELECT T1.client_id ,  T1.sic_code ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id'     , 'SELECT T1.client_id ,  T1.sic_code ,  T1.client_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id'     , 'SELECT T1.client_id ,  T1.sic_code ,  T1.client_details FROM
SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id'     , 'SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id'     , ['T1.client_details','T2.agency_details']     , ['Client Details','Agency Details']     , ['T1.client_details','T2.agency_details']     , ['Client Details','Agency Details']     , ['T1.client_details','T2.agency_details']     , ['Client Details','Agency Details']     , ['T1.client
SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code'         , 'SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code'         , ['SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code']     , 'SELECT client_details FROM Clients WHERE agency_id  =  1'         , 'SELECT client_details FROM Clients WHERE agency_id  =  1'         , ['SELECT client_details FROM Clients WHERE agency_id  =  1']     , 'SELECT TIMESTAMPDIFF(MINUTE ,  start_date_time ,  end_date_time) FROM Meetings WHERE meeting_type  =  'Private' AND purpose_of_meeting  =  'Discuss terms of a new account' AND billable_yn  =  'Y
SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code'         , 'SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code'         , ['SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code']     , 'SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code'         , ['SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code']]
SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  'Bad' UNION SELECT staff_id ,  staff_details FROM Staff WHERE staff_details LIKE '%sic_code=Bad%' UNION SELECT meeting_id ,  other_details FROM Meetings WHERE purpose_of_meeting LIKE '%sic_code=Bad%' ORDER BY client_id ASC'
SELECT client_details FROM Clients WHERE sic_code  =  'Bad' <MID>_id` ) REFERENCES `Agencies`(`agency_id` )',             , 'CREATE TABLE `Clients` ( `client_id` INTEGER PRIMARY KEY , `agency_id` INTEGER NOT NULL , `sic_code` VARCHAR(10) NOT NULL , `client_details` VARCHAR(255) NOT NULL , FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ) )',             , 'CREATE TABLE `Invoices` ( `invoice_id` INTEGER PRIMARY KEY , `client_id` INTEGER NOT NULL , `invoice_status` VARCHAR(10) NOT NULL , `invoice_details` VARCHAR(255) NOT NULL , FORE
SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >  0'         , 'SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >  0'     , 'SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency
SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >  0 UNION SELECT agency_id ,  agency_details FROM Agencies EXCEPT SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  =  0'         , 'SELECT agency_id ,  agency_details FROM Agencies WHERE agency_id IN (SELECT DISTINCT agency_id FROM Clients) UNION SELECT agency_id ,
SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients GROUP BY agency_id HAVING count(*)  =  0 UNION SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients WHERE sic_code  =  '1337' GROUP BY agency_id HAVING count(*)  =  0 UNION SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients WHERE sic_code  =  '420' GROUP BY agency_id HAVING count(*)  =  0 UNION SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients WHERE sic_code  =  '69' GROUP BY agency_id HAVING count(*)  =  0 UNION SELECT agency_id FROM Agencies EXCEPT SELECT agency_
SELECT agency_id FROM Clients GROUP BY agency_id HAVING count(*)  =  0 UNION SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients GROUP BY agency_id'         , 'SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients GROUP BY agency_id'     , 'SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients GROUP BY agency_id'     , 'SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients GROUP BY agency_id'     , 'SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients GROUP BY agency_id'     , 'SELECT agency_id FROM Agencies EXCEPT SELECT agency
SELECT count(*) FROM Invoices'         , 'SELECT count(*) FROM Invoices'         , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Meetings'     , 'SELECT count(*) FROM Staff_in_Meetings'     , 'SELECT count(*) FROM Clients'     , 'SELECT count(*) FROM Agencies'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff_in_Meetings'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Clients'     , 'SELECT count(*) FROM Agencies'          , 'SELECT count(*) FROM Meetings'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Staff_in_Meetings'     , 'SELECT count(*) FROM Staff'     , 'SELECT count
SELECT count(*) FROM Invoices WHERE invoice_status  =  'Paid' AND invoice_details LIKE '%check%' ESCAPE '/' <MID>     , meeting_type VARCHAR(10) NOT NULL , billable_yn VARCHAR(1) , start_date_time DATETIME , end_date_time DATETIME , purpose_of_meeting VARCHAR(255) , other_details VARCHAR(255) NOT NULL , client_id INTEGER NOT NULL , FOREIGN KEY (client_id) REFERENCES Clients(client_id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE Payments ( payment_id INTEGER NOT NULL , invoice_id INTEGER NOT NULL , payment_details VARCHAR(255) NOT NULL , FOREIGN KEY (invoice_id) REFERENCES Invoices
SELECT T1.client_id ,  T1.sic_code ,  T2.invoice_status ,  T2.invoice_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id'     , 'SELECT T1.staff_id ,  T1.staff_details ,  T2.meeting_outcome ,  T2.meeting_type ,  T2.start_date_time ,  T2.end_date_time ,  T2.purpose_of_meeting ,  T2.other_details FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id  =  T2.staff_id'     , 'SELECT T1.agency_id ,  T1.agency_details FROM Agen
SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices'         , 'SELECT client_id ,  sic_code FROM Clients'     , 'SELECT meeting_id ,  purpose_of_meeting ,  start_date_time ,  end_date_time FROM Meetings'     , 'SELECT staff_id FROM Staff'     , 'SELECT staff_id FROM Staff_in_Meetings'     , 'SELECT T1.staff_id FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id  =  T2.staff_id'     , 'SELECT T2.meeting_id FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id  =  T2.staff_id'     ,
SELECT T1.client_id ,  count(*) FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 3'         , 'SELECT T1.client_id ,  count(*) FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 3'     , 'SELECT T1.client_id ,  count(*) FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 3'     , 'SELECT T1.client_id ,  count(*) FROM Cli
SELECT count(*) ,  client_id FROM INVOICES GROUP BY client_id ORDER BY count(*) DESC LIMIT 3'         , 'answer': 'Client ID  Count'         , 'image': '/static/images/task4_sql.jpg'}     , { 'question': 'Based on the provided database schema information, How many meetings are there for each client id?[SQL]'         , 'answer': 'Client ID  Count'         , 'image': '/static/images/task5_sql.jpg'}     , { 'question': 'Based on the provided database schema information, How many payments are there for each invoice id?[SQL]'         , 'answer': 'Invoice ID  Count'         , 'image': '/static/images/task6_sql.jpg'}     , { 'question': 'Based on the provided database schema information,
SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1 <MID>_id` ) REFERENCES `Agencies`(`agency_id` )',             , 'CREATE TABLE `Clients` ( `client_id` INTEGER PRIMARY KEY ,  `agency_id` INTEGER NOT NULL ,  `sic_code` VARCHAR(10) NOT NULL ,  `client_details` VARCHAR(255) NOT NULL ,  FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ) )',             , 'CREATE TABLE `Invoices` ( `invoice_id` IN
SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T
SELECT client_id FROM INVOICES GROUP BY client_id HAVING count(*)  >=  2]'         , 'answer': 'Client IDs for clients with at least 2 invoices.'}     , {'question': 'What are the details of the first 3 meetings? [SQL] SELECT * FROM Meetings LIMIT 3'         , 'answer': 'Details of the first 3 meetings.'}     , {'question': 'Which clients have at least 2 meetings? [SQL] SELECT client_id FROM Meetings GROUP BY client_id HAVING count(*)  >=  2'}     , {'question': 'Which clients have at least 3 meetings? [SQL] SELECT client_id FROM Meetings GROUP BY client_id HAVING count(*)  >=  3'}     , {'question': 'Which clients have at least 4 meetings
SELECT client_id FROM INVOICES GROUP BY client_id HAVING count(*)  >=  2'         , 'SELECT client_id FROM INVOICES GROUP BY client_id HAVING count(*)  >=  2'         , ['SELECT client_id FROM INVOICES GROUP BY client_id HAVING count(*)  >=  2']     , [True, True, True]     , ['Meetings', 'Staff_in_Meetings', 'Staff']     , ['Purpose of meeting', 'other details', 'start date time', 'end date time', 'meeting outcome', 'meeting type', 'billable yn']     , ['Outcomes', 'Types', 'Yes', 'No']     , ['T1', 'T2', 'T3']     , ['M1', 'M2', 'M3']
SELECT invoice_status ,  COUNT(*) FROM Invoices GROUP BY invoice_status'         , 'SELECT invoice_status ,  COUNT(*) FROM Invoices GROUP BY invoice_status'     , 'SELECT invoice_status ,  COUNT(*) FROM Invoices GROUP BY invoice_status'     , 'SELECT invoice_status ,  COUNT(*) FROM Invoices GROUP BY invoice_status'     , 'SELECT invoice_status ,  COUNT(*) FROM Invoices GROUP BY invoice_status'     , 'SELECT invoice_status ,  COUNT(*) FROM Invoices GROUP BY invoice_status'     , 'SELECT invoice_status ,  COUNT(*) FROM Invoices GROUP BY invoice_status'     , 'SELECT invoice_status ,  COUNT(*) FROM Invoices GROUP BY invoice_status'     , 'SELECT invoice_status ,  COUNT
SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status'         , 'SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status'         , ['COUNT', 'PAID']     ,   ['SELECT COUNT(*) FROM Invoices WHERE invoice_status  =  'PAID'']     ,   ['SELECT COUNT(*) FROM Invoices WHERE invoice_status  =  'DUE'']     ,   ['SELECT COUNT(*) FROM Invoices WHERE invoice_status  =  'PENDING'']          ,   ['SELECT COUNT(*) FROM Invoices WHERE invoice_status  =  'CONTESTED'']     ,   ['SELECT COUNT(*) FROM Invoices WHERE invoice_status  =  'REFUNDED'']     ,   ['SELECT COUNT(*) FROM Invoices WHERE invoice
SELECT invoice_status FROM INVOICES GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1 <MID>     FROM INVOICES GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1'
SELECT invoice_status FROM INVOICES GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1'     ,'answer': 'Paid'     ,'category': 'Database'     ,'difficulty': 1     ,'image': 'https://d3oaxc4tx7uqeg.cloudfront.net/assets/icons/favicon-1152x1152.png'     ,'meta_info': {'is_private': False}     ,'subcategory': 'Group By'     ,'type': 'mysql'     ,'is_multi_choice': True     ,'choices': ['Created', 'Paid', 'Cancelled']     ,'correct_answer': 'Paid'     ,'description': 'Based on the provided database
SELECT T1.invoice_status ,  T1.invoice_details ,  T1.client_id ,  T2.client_details ,  T1.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T1.agency_id  =  T3.agency_id'     ,     , ['SELECT T1.sic_code ,  T1.client_details ,  T1.agency_id ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id']     , ['SELECT T1.staff_id ,  T1.staff
SELECT invoice_status ,  invoice_details ,  client_id ,  client_details ,  agency_id ,  agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id WHERE T1.invoice_status  =  'Paid' UNION SELECT invoice_status ,  invoice_details ,  client_id ,  client_details ,  agency_id ,  agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id WHERE T1.invoice_status  =  'Refunded' UNION SELECT invoice_status ,  invoice_details ,  client_id ,  client_details ,  agency_id ,  agency_details FROM Invoices AS T1 JOIN
SELECT meeting_type FROM MEETINGS GROUP BY meeting_type'         , 'SELECT meeting_type FROM MEETINGS GROUP BY meeting_type'         , 'SELECT meeting_type FROM MEETINGS GROUP BY meeting_type'     , 'SELECT meeting_type FROM MEETINGS GROUP BY meeting_type'     , 'SELECT meeting_type FROM MEETINGS GROUP BY meeting_type'     , 'SELECT meeting_type FROM MEETINGS GROUP BY meeting_type'     , 'SELECT meeting_type FROM MEETINGS GROUP BY meeting_type'     , 'SELECT meeting_type FROM MEETINGS GROUP BY meeting_type'     , 'SELECT meeting_type FROM MEETINGS GROUP BY meeting_type'     , 'SELECT meeting_type FROM MEETINGS GROUP BY meeting_type'     , 'SELECT meeting_type FROM MEETINGS GROUP
SELECT meeting_type ,  purpose_of_meeting FROM MEETINGS WHERE meeting_type  =  'Client' AND purpose_of_meeting != '' UNION SELECT meeting_type ,  purpose_of_meeting FROM MEETINGS WHERE meeting_type  =  'Staff' AND purpose_of_meeting != '' UNION SELECT meeting_type ,  purpose_of_meeting FROM MEETINGS WHERE meeting_type  =  'Admin' AND purpose_of_meeting != '' UNION SELECT meeting_type ,  purpose_of_meeting FROM MEETINGS WHERE meeting_type  =  'Other' AND purpose_of_meeting != '' ORDER BY meeting_type ASC'     , ['SELECT meeting_type ,  purpose_of_meeting FROM MEETINGS WHERE meeting_type  =  'Client' AND purpose_of_meeting != '' UNION SELECT meeting_type
SELECT meeting_outcome ,  purpose_of_meeting FROM MEETINGS GROUP BY meeting_outcome ORDER BY count(*) DESC LIMIT 10'         , 'SELECT meeting_outcome ,  purpose_of_meeting FROM MEETINGS GROUP BY meeting_outcome ORDER BY count(*) DESC LIMIT 10'     , 'SELECT meeting_outcome ,  purpose_of_meeting FROM MEETINGS GROUP BY meeting_outcome ORDER BY count(*) DESC LIMIT 10'     , 'SELECT meeting_outcome ,  purpose_of_meeting FROM MEETINGS GROUP BY meeting_outcome ORDER BY count(*) DESC LIMIT 10'     , 'SELECT meeting_outcome ,  purpose_of_meeting FROM MEETINGS GROUP BY meeting_outcome ORDER BY count(*) DESC LIMIT 10'     , 'SELECT meeting_outcome ,  purpose_of
SELECT DISTINCT meeting_outcome ,  purpose_of_meeting FROM MEETINGS'         , 'SELECT DISTINCT meeting_outcome FROM MEETINGS'         , 'SELECT DISTINCT purpose_of_meeting FROM MEETINGS'     , 'SELECT DISTINCT meeting_outcome FROM MEETINGS'     , 'SELECT DISTINCT purpose_of_meeting FROM MEETINGS'     , 'SELECT count(*) FROM MEETINGS'     , 'SELECT count(*) FROM START_DATE_TIME WHERE start_date_time BETWEEN '2017-09-04 00:00:00' AND '2017-09-11 23:59:59' GROUP BY purpose_of_meeting'     , 'SELECT count(*) FROM START_DATE_
SELECT T1.invoice_id ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T1.invoice_status  =  'Working' UNION SELECT meeting_id ,  staff_id FROM Staff_in_Meetings ORDER BY meeting_id ASC'     , 'SELECT T1.invoice_id ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T1.invoice_status  =  'Working' UNION SELECT meeting_id ,  staff_id FROM Staff_in_Meetings ORDER BY meeting_id ASC'     , ['SELECT T1.invoice_id ,  T1.invoice_
SELECT T1.invoice_id ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T1.invoice_status  =  'Working' UNION SELECT invoice_id ,  invoice_details FROM Invoices WHERE invoice_status  =  'Paid' UNION SELECT invoice_id ,  invoice_details FROM Invoices WHERE invoice_status  =  'Refunded' UNION SELECT invoice_id ,  invoice_details FROM Invoices WHERE invoice_status  =  'Void' UNION SELECT invoice_id ,  invoice_details FROM Invoices WHERE invoice_status  =  'Cancelled' UNION SELECT invoice_id ,  invoice_details FROM Invoices WHERE invoice_status  =
SELECT invoice_id ,  invoice_status FROM Invoices WHERE invoice_id NOT IN ( SELECT invoice_id FROM Payments )'         , 'SELECT invoice_id ,  invoice_status FROM Invoices WHERE invoice_id NOT IN ( SELECT invoice_id FROM Payments )'     , ['SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT invoice_id ,  invoice_status FROM Payments']         , ['SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT invoice_id ,  invoice_status FROM Payments']      ,  3     ,  4     ,  1     ,  2     ,  5     ,  6     ,  7     ,  8     ,  9     ,  10     ,  1
SELECT invoice_id ,  invoice_status FROM Invoices WHERE invoice_id NOT IN ( SELECT invoice_id FROM Payments )'         , 'SELECT invoice_id ,  invoice_status FROM Invoices WHERE invoice_id NOT IN ( SELECT invoice_id FROM Payments )'     , ['SELECT invoice_id ,  invoice_status FROM Invoices WHERE invoice_id NOT IN ( SELECT invoice_id FROM Payments )']     , ['SELECT invoice_id ,  invoice_status FROM Invoices WHERE invoice_id NOT IN ( SELECT invoice_id FROM Payments )']     , ['SELECT invoice_id ,  invoice_status FROM Invoices WHERE invoice_id NOT IN ( SELECT invoice_id FROM Payments )']          , ['SELECT invoice_id ,  invoice_status FROM In
SELECT count(*) FROM PAYMENTS'         , 'SELECT count(*) FROM PAYMENTS'         , '4'     ,  'SELECT sum(payment_amount) FROM PAYMENTS'         , 'SELECT sum(payment_amount) FROM PAYMENTS'     ,  'SELECT avg(payment_amount) FROM PAYMENTS'         , 'SELECT avg(payment_amount) FROM PAYMENTS'      ,   'SELECT count(*) FROM MEETINGS WHERE meeting_type  =  'Private' AND billable_yn  =  'Y' AND purpose_of_meeting LIKE '%Review%' '         , 'SELECT count(*) FROM MEETINGS WHERE meeting_type  =  'Private' AND billable_yn  =  'Y' AND purpose_of_meeting LIKE '%Review%' '      ,   'SELECT count
SELECT count(*) FROM Payments'         , 'SELECT count(*) FROM Payments'         , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count(*) FROM Payments'     , 'SELECT count
SELECT payment_id ,  invoice_id ,  invoice_details FROM Invoices'         , 'SELECT payment_id ,  invoice_id FROM Payments'     , 'SELECT meeting_id ,  staff_id FROM Staff_in_Meetings'     , 'SELECT client_id ,  agency_id ,  sic_code ,  client_details FROM Clients'     , 'SELECT TIMESTAMPDIFF(MINUTE ,  start_date_time ,  end_date_time) AS meeting_duration FROM Meetings'     , 'SELECT staff_id ,  meeting_id FROM Staff_in_Meetings'     , 'SELECT staff_id ,  meeting_id FROM Staff_in_Meetings'     , 'SELECT TIMESTAMPDIFF(MINUTE ,  start_date_time ,  end_date_time
SELECT payment_id ,  invoice_id ,  payment_details FROM PAYMENTS'     , 'SELECT payment_id ,  invoice_id ,  payment_details FROM PAYMENTS'     , ['SELECT payment_id ,  invoice_id ,  payment_details FROM PAYMENTS']     , ['SELECT payment_id ,  invoice_id ,  payment_details FROM PAYMENTS']     , ['SELECT payment_id ,  invoice_id ,  payment_details FROM PAYMENTS']     , ['SELECT payment_id ,  invoice_id ,  payment_details FROM PAYMENTS']     , ['SELECT payment_id ,  invoice_id ,  payment_details FROM PAYMENTS']     , ['SELECT payment_id ,  invoice_id ,  payment_details FROM PAYMENTS']     , ['
SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id'     , 'SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id'     , ['SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id']     , ['SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T
SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id'     , 'SELECT DISTINCT invoice_id ,  invoice_status FROM INVOICES'     , ['SELECT DISTINCT invoice_id ,  invoice_status FROM INVOICES']     , ['SELECT DISTINCT invoice_id ,  invoice_status FROM INVOICES']     , ['SELECT DISTINCT invoice_id ,  invoice_status FROM INVOICES']     , ['SELECT DISTINCT invoice_id ,  invoice_status FROM INVOICES']     , ['SELECT DISTINCT invoice_id ,  invoice_status FROM INVOICES']     , ['
SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id ORDER BY count(*) DESC LIMIT 10'     ,'SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id ORDER BY count(*) DESC LIMIT 10'     ,'SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id ORDER BY count(*) DESC LIMIT 10'     ,'SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id ORDER BY count(*) DESC LIMIT 10'     ,'SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id ORDER BY count(*) DESC LIMIT 10'     ,'SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id ORDER BY count(*) DESC LIMIT 10'     ,'SELECT in
SELECT count(*) ,  T1.invoice_id FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 10'         , 'answer': 'SELECT count(*) ,  T1.invoice_id FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 10'     , 'difficulty': 'Hard'     , 'category': 'Data Analysis'     , 'image': '/static/images/sql.png'     , 'subcategory': 'Database'     , 'minutes': 30.0     , 'hint': 'Use group
SELECT T1.invoice_id ,  T1.invoice_status ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.invoice_id ,  T1.invoice_status ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT T1.invoice_id ,  T1.invoice_status ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1
SELECT T1.invoice_id ,  T1.invoice_status ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT T1.invoice_id ,  T1.invoice_status ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1'     , ['T1.invoice_id ,  T1.invoice_status ,  T1.invoice_details']]     , [34 ,  'SELECT T1.invoice
SELECT count(*) FROM Staff'         , 'SELECT count(*) FROM Staff'         , ['SELECT count(*) FROM Staff']     , 3, 'SELECT count(*) FROM Clients'         , 'SELECT count(*) FROM Clients'         , ['SELECT count(*) FROM Clients']     , 4, 'SELECT count(*) FROM Invoices'         , 'SELECT count(*) FROM Invoices'         , ['SELECT count(*) FROM Invoices']     , 5, 'SELECT count(*) FROM Meetings'         , 'SELECT count(*) FROM Meetings'         , ['SELECT count(*) FROM Meetings']     , 6, 'SELECT count(*) FROM Payments'         , 'SELECT count(*) FROM Payments'         , ['SELECT count(*) FROM Payments']     , 7, 'SELECT count(*) FROM Agencies'         , 'SELECT count(*)
SELECT count(*) FROM Staff'         , 'SELECT count(*) FROM Staff'         , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , 'SELECT count(*) FROM Staff'     , '
SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'         , 'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'         , ['SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id']     , 'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'         , ['SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id']     , 'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'         , ['SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id']     , 'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'         , ['SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id']     , 'SELECT ag
SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'     ,'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'     ,'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'     ,'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'     ,'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'     ,'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'     ,'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'     ,'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id'     ,'SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_
SELECT agency_id ,  agency_details FROM Agencies ORDER BY count(*) DESC LIMIT 1'         , 'SELECT agency_id ,  agency_details FROM Staff GROUP BY agency_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT max(count(*)) FROM Staff GROUP BY agency_id'     , 'SELECT agency_id ,  agency_details FROM Agencies ORDER BY count(*) DESC LIMIT 1'     , 'SELECT agency_id ,  agency_details FROM Staff GROUP BY agency_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT max(count(*)) FROM Staff GROUP BY agency_id'     , 'SELECT agency_id ,  agency_details FROM Agencies ORDER BY count(*) DESC LIMIT 1'     , 'SELECT agency_id ,  agency_details FROM Staff GROUP
SELECT agency_id ,  agency_details FROM Agencies ORDER BY count(*) DESC LIMIT 1'         , 'answer': 1}       , {'question': 'Return the name of the client whose meeting was ended latest. [SQL] SELECT purpose_of_meeting FROM MEETINGS ORDER BY end_date_time DESC LIMIT 1'         , 'answer': 'purpose_of_meeting'}       , {'question': 'Return the names of all the meetings that were of type 'Teleconference'. [SQL] SELECT meeting_type FROM Meetings WHERE meeting_type  =  'Teleconference' '}       , {'question': 'Return the names of all the meetings that were of type 'In Person' and had a billable outcome. [SQL] SELECT meeting_type FROM Meetings WHERE meeting_outcome  =  'Billable' AND
SELECT meeting_outcome ,  COUNT(*) FROM Meetings GROUP BY meeting_outcome'         , 'SELECT meeting_outcome ,  COUNT(*) FROM Meetings GROUP BY meeting_outcome'     , 'SELECT meeting_outcome ,  COUNT(*) FROM Meetings GROUP BY meeting_outcome'     , 'SELECT meeting_outcome ,  COUNT(*) FROM Meetings GROUP BY meeting_outcome'     , 'SELECT meeting_outcome ,  COUNT(*) FROM Meetings GROUP BY meeting_outcome'     , 'SELECT meeting_outcome ,  COUNT(*) FROM Meetings GROUP BY meeting_outcome'     , 'SELECT meeting_outcome ,  COUNT(*) FROM Meetings GROUP BY meeting_outcome'     , 'SELECT meeting_outcome ,  COUNT(*) FROM Meetings GROUP BY meeting_outcome'     , 'SELECT meeting_outcome ,  COUNT
SELECT meeting_outcome ,  count(*) FROM MEETINGS GROUP BY meeting_outcome ORDER BY count(*) DESC'         , 'SELECT meeting_outcome ,  count(*) FROM MEETINGS GROUP BY meeting_outcome ORDER BY count(*) DESC'         , ['Purpose of meeting']     , ['Other details']     , ['Start date time']     , ['End date time']     , ['Outcomes']     , ['Types']     , ['Billable YN']     , ['Purpose of meeting']     , ['Other details']     , ['Start date time']     , ['End date time']     , ['Outcomes']     , ['Types']     , ['Billable YN']]
SELECT T1.client_id  ,  count(*) FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 3'         , 'SELECT T1.client_id  ,  count(*) FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 3'     , 'Client ID | Number of Meetings'     , ['Client ID | Number of Meetings']]
SELECT T1.client_id ,  count(*) FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id'     , 'SELECT T1.client_id ,  count(*) FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id'     , ['T1.client_id','count(*)']     , ['T1.client_id']     , ['count(*)']     , ['Meetings']     , ['Meetings']     , ['Meetings']     , ['Meetings']     , ['Meetings']     , ['Meetings']     , ['Meetings']     , ['Meetings']
SELECT T1.meeting_type ,  count(*) FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.meeting_type ORDER BY count(*) DESC'         , 'SELECT T1.meeting_type ,  count(*) FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.meeting_type ORDER BY count(*) DESC'     , 'SELECT T1.meeting_type ,  count(*) FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.meeting_type ORDER BY count(*) DESC'     , 'SELECT T1.meeting_type ,  count(*) FROM Meetings AS
SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type ORDER BY count(*) DESC'         , 'SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type ORDER BY count(*) DESC'         , ['Purpose of meeting']     , ['Other details']     , ['Outcomes of meeting']     , ['Start date time']     , ['End date time']]
SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id WHERE T1.purpose_of_meeting  =  'Client Attendance' AND T1.meeting_outcome  =  'Success' AND T1.billable_yn  =  'Yes' ORDER BY T1.start_date_time ASC'
SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T3.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Staff_in_Meetings AS T3 ON T1.meeting_id  =  T3.meeting_id'     , 'SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T3.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Staff_in_Meetings AS T3 ON T1.meeting_id  =  T3.meeting_id'     , ['T1
SELECT T1.meeting_id ,  count(*) FROM meetings AS T1 JOIN staff_in_meetings AS T2 ON T1.meeting_id  =  T2.meeting_id GROUP BY T1.meeting_id ORDER BY count(*) DESC'         , 'SELECT T1.meeting_id ,  count(*) FROM meetings AS T1 JOIN staff_in_meetings AS T2 ON T1.meeting_id  =  T2.meeting_id GROUP BY T1.meeting_id ORDER BY count(*) DESC'     , ['SELECT T1.meeting_id ,  count(*) FROM meetings AS T1 JOIN staff_in_meetings AS T2 ON T1.meeting_id  =  T2.meeting_id GROUP BY T1.meeting_id ORDER BY count(*) DESC']]     , [
SELECT meeting_id ,  count(*) FROM Staff_in_Meetings GROUP BY meeting_id'     , 'SELECT meeting_id ,  count(*) FROM Staff_in_Meetings GROUP BY meeting_id'     , ['SELECT meeting_id ,  count(*) FROM Staff_in_Meetings GROUP BY meeting_id']     , ['SELECT meeting_id ,  count(*) FROM Staff_in_Meetings GROUP BY meeting_id']     , ['SELECT meeting_id ,  count(*) FROM Staff_in_Meetings GROUP BY meeting_id']     , ['SELECT meeting_id ,  count(*) FROM Staff_in_Meetings GROUP BY meeting_id']     , ['SELECT meeting_id ,  count(*) FROM Staff_in_Meetings GROUP BY meeting_id']     , ['SELECT meeting_id ,  count(*) FROM Staff_in_Meetings GROUP
SELECT T1.staff_id ,  COUNT(*) FROM Staff_in_Meetings AS T1 JOIN Meetings AS T2 ON T1.meeting_id  =  T2.meeting_id GROUP BY T1.staff_id ORDER BY COUNT(*) ASC LIMIT 1'         , 'SELECT T1.staff_id ,  COUNT(*) FROM Staff_in_Meetings AS T1 JOIN Meetings AS T2 ON T1.meeting_id  =  T2.meeting_id GROUP BY T1.staff_id ORDER BY COUNT(*) ASC LIMIT 1'     , 'SELECT T1.staff_id ,  COUNT(*) FROM Staff_in_Meetings AS T1 JOIN Meetings AS T2 ON T1.meeting_id  =  T2.meeting_id GROUP BY T1.staff_id ORDER BY COUNT
SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1'         , 'SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING count(*)  >  0'     , 'SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id ORDER BY count(*) DESC LIMIT 1'         , 'SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING count(*)  >  0'     , 'SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id ORDER BY count(*) DESC LIMIT 1'     , 'SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING count(*)  >  0'     , 'SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id
SELECT count(*) FROM Staff_in_Meetings GROUP BY staff_id HAVING meeting_id != '' <MID>     FROM Meetings AS T1 JOIN staff_in_meetings AS T2 ON T1.meeting_id  =  T2.meeting_id WHERE T1.purpose_of_meeting  =  'Executive Session' GROUP BY T1.start_date_time ORDER BY count(*) DESC LIMIT 1'     WHERE meeting_outcome  =  'Satisfied' GROUP BY start_date_time ORDER BY count(*) DESC LIMIT 1' SELECT start_date_time FROM MEETINGS WHERE purpose_of_meeting  =  'Executive Session' GROUP BY start_date_time ORDER BY count(*) DESC LIMIT 1' SELECT start_date_time FROM MEETINGS WHERE purpose_of_meeting  =  'Executive Session'
SELECT count(DISTINCT T1.staff_id) FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.meeting_outcome  =  'Attended' UNION SELECT count(DISTINCT T1.staff_id) FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.meeting_outcome  =  'Not Attended' UNION SELECT count(DISTINCT T1.staff_id) FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.meeting_outcome  =  'Maybe' UNION SELECT count(DISTINCT T1.staff_id) FROM Staff AS
SELECT count(*) FROM staff WHERE staff_id NOT IN ( SELECT staff_id FROM meetings )'         , 'answer': 387 }       , { 'question': 'How many clients have a sic code of G?[SQL] SELECT count(*) FROM Clients WHERE sic_code  =  'G'', 'answer': 4 }       , { 'question': 'How many invoices are still outstanding?[SQL] SELECT count(*) FROM Invoices WHERE invoice_status  =  'Outstanding'', 'answer': 19 }       , { 'question': 'How many payments does each invoice have?[SQL] SELECT count(*) ,  invoice_id FROM Payments GROUP BY invoice_id', 'answer': 6 }       , { 'question': 'How many meetings are of the purpose 'Other'?[SQL] SELECT count(*) FROM Meet
SELECT count(*) FROM staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings )'     ,'answer': 493} ,   {'question': 'SELECT count(*) FROM meetings WHERE meeting_outcome  =  'No' AND purpose_of_meeting  =  'Executive session' AND billable_yn  =  'Y' AND starting_date_time  >  '2017-08-01 00:00:00' AND ending_date_time  <  '2017-08-31 00:00:00' '}', 'answer': 6} ,   {'question': 'SELECT count(*) FROM meetings WHERE meeting_outcome  =  'Yes' AND purpose_of_meeting  =  'Executive session' AND bill
SELECT client_id ,  client_details FROM Clients WHERE client_id IN ( SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices )'     , 'SELECT client_id ,  client_details FROM Clients WHERE client_id IN ( SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices )'     , ['SELECT agency_id ,  agency_details FROM Agencies']     , ['SELECT staff_id ,  staff_details FROM Staff']     , ['SELECT meeting_id ,  start_date_time FROM Meetings']     , ['SELECT invoice_id ,  invoice_details FROM Invoices']     , ['SELECT payment_id ,  payment_details FROM Payments']     , ['SELECT staff_id ,  staff_details FROM Staff']     , ['SELECT meeting_id ,  start
SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id'         , 'SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id'     , 'SELECT T1.client_id ,
SELECT T1.staff_id ,  T1.staff_details FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id  =  T2.staff_id WHERE T1.staff_details LIKE '%s%' GROUP BY T1.staff_id HAVING count(*)  >=  1' <MID>T1.staff_id ,  T1.staff_details FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id  =  T2.staff_id WHERE T1.staff_details LIKE '%s%' GROUP BY T1.staff_id HAVING count(*)  >=  1'{'}', 'T1.staff_id ,  T1.staff_details'{'}', 'T2.meeting_id'{'}', 'T2.meeting_out
SELECT T1.staff_id ,  T1.staff_details FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id  =  T2.staff_id WHERE T1.staff_details LIKE '%s%' GROUP BY T1.staff_id HAVING count(*)  >=  1' <MID>     , purpose_of_meeting FROM MEETINGS;'     , 'SELECT client_id FROM CLIENTS;'     , 'SELECT invoice_id FROM INVOICES;'     , 'SELECT payment_id FROM PAYMENTS;'     , 'SELECT meeting_id FROM Staff_in_Meetings;'     , 'SELECT staff_id FROM Staff_in_Meetings;'     , 'SELECT T1.staff_id ,  T2.meeting_id FROM Staff AS
SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INNER JOIN Invoices AS T3 ON T1.client_id  =  T3.client_id'         , 'SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM Clients AS T1 JOIN Invoices AS T3 ON T1.client_id  =  T3.client_id'     , 'SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM Clients AS T1 JOIN Meetings AS T2
SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 JOIN Invoices AS T3 ON T1.client_id  =  T3.client_id'         , 'SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 JOIN Invoices AS T3 ON T1.client_id  =  T3.client_id'     , ['
SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Staff AS T3 ON T1.staff_id  =  T3.staff_id'     , 'SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Staff AS T3 ON T1.staff_id  =  T3.staff_id'     , ['T1.start_date_time','T1.
SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Staff AS T3 ON T1.staff_id  =  T3.staff_id'     , 'SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Staff AS T3 ON T1.staff_id  =  T3.staff_id'     , ['T1.start_date_time','T1.
