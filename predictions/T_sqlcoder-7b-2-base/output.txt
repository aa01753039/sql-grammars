SELECT COUNT(c.Club_ID) FROM club c;
SELECT COUNT(c.Club_ID) FROM club c;
SELECT c.name FROM club c ORDER BY c.name ASC;
SELECT c.name FROM club c ORDER BY c.name ASC;
SELECT c.name, c.manager, c.captain FROM club c;
SELECT c.manager, c.captain FROM club c;
SELECT c.name FROM club c WHERE c.manufacturer not ilike '%Nike%';
SELECT c.name FROM club c WHERE c.manufacturer not ilike '%Nike%';
SELECT p.name FROM player p ORDER BY p.wins_count ASC;
SELECT p.name FROM player p ORDER BY p.wins_count ASC;
SELECT p.name FROM player p ORDER BY p.earnings DESC NULLS LAST LIMIT 1;
SELECT p.name FROM player p ORDER BY p.earnings DESC NULLS LAST LIMIT 1;
SELECT p.country FROM player p WHERE p.earnings > 1200000 ORDER BY p.country NULLS LAST;
SELECT p.country FROM player p WHERE p.earnings > 1200000 ORDER BY p.country NULLS LAST;
SELECT p.country, MAX(p.earnings) AS max_earnings FROM player p WHERE p.wins_count > 2 GROUP BY p.country ORDER BY max_earnings DESC NULLS LAST LIMIT 1;
SELECT p.Country, COUNT(p.Wins_count) AS wins_count FROM player p WHERE p.Wins_count > 2 GROUP BY p.Country ORDER BY wins_count DESC LIMIT 1;
SELECT p.name AS player_name, c.name AS club_name FROM player p JOIN club c ON p.club_id = c.club_id;
SELECT p.name AS player_name, c.name AS club_name FROM player p JOIN club c ON p.club_id = c.club_id;
SELECT c.name FROM club c JOIN player p ON c.club_id = p.club_id WHERE p.wins_count > 2;
SELECT c.name FROM club c JOIN player p ON c.club_id = p.club_id WHERE p.wins_count > 2;
SELECT p.name FROM player p JOIN club c ON p.club_id = c.club_id WHERE c.manager ilike '%Sam%Allardyce%' ORDER BY p.name NULLS LAST;
SELECT p.name FROM player p JOIN club c ON p.club_id = c.club_id WHERE c.manager ilike '%Sam%Allardyce%' ORDER BY p.name NULLS LAST;
SELECT c.name, AVG(p.earnings) AS average_earnings FROM player p JOIN club c ON p.club_id = c.club_id GROUP BY c.name ORDER BY average_earnings DESC;
SELECT c.name, AVG(p.earnings) AS average_earnings FROM player p JOIN club c ON p.club_id = c.club_id GROUP BY c.name ORDER BY average_earnings DESC;
SELECT c.manufacturer, COUNT(c.club_id) AS number_of_clubs FROM club c GROUP BY c.manufacturer ORDER BY number_of_clubs DESC NULLS LAST;
SELECT c.manufacturer, COUNT(c.club_id) AS number_of_clubs FROM club c GROUP BY c.manufacturer ORDER BY number_of_clubs DESC NULLS LAST;
SELECT c.manufacturer, COUNT(c.manufacturer) AS COUNT FROM club c GROUP BY c.manufacturer ORDER BY COUNT DESC LIMIT 1;
SELECT c.manufacturer, COUNT(c.manufacturer) AS COUNT FROM club c GROUP BY c.manufacturer ORDER BY COUNT DESC LIMIT 1;
SELECT c.manufacturer FROM club c GROUP BY c.manufacturer HAVING COUNT(c.club_id) > 1;
SELECT c.manufacturer FROM club c GROUP BY c.manufacturer HAVING COUNT(c.club_id) > 1;
SELECT p.country, COUNT(p.player_id) AS player_count FROM player p GROUP BY p.country HAVING COUNT(p.player_id) > 1 ORDER BY player_count DESC NULLS LAST;
SELECT p.country, COUNT(p.player_id) AS player_count FROM player p GROUP BY p.country HAVING COUNT(p.player_id) > 1 ORDER BY player_count DESC NULLS LAST;
SELECT c.name FROM club c WHERE c.club_id NOT IN (SELECT p.club_id FROM player p) ORDER BY c.name NULLS LAST;
SELECT c.name FROM club c WHERE c.club_id NOT IN (SELECT p.club_id FROM player p) ORDER BY c.name NULLS LAST;
SELECT p.country FROM player p WHERE p.earnings > 1400000 ORDER BY p.country NULLS LAST;
SELECT p.country FROM player p WHERE p.earnings > 1400000 AND p.earnings < 1100000 GROUP BY p.country;
SELECT COUNT(DISTINCT p.country) FROM player p;
SELECT COUNT(DISTINCT p.country) FROM player p;
SELECT p.name, p.earnings FROM player p WHERE p.country IN ('Australia', 'Zimbabwe') ORDER BY p.earnings DESC NULLS LAST;
SELECT p.name, p.earnings FROM player p WHERE p.country ilike '%Australia%' OR p.country ilike '%Zimbabwe%' ORDER BY p.earnings DESC NULLS LAST;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(DISTINCT oi.order_item_id) >= 3;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(DISTINCT oi.order_item_id) >= 3;
SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS product_count FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code HAVING COUNT(oi.product_id) > 0 ORDER BY o.order_id NULLS LAST;
SELECT o.order_id, COUNT(oi.product_id) AS number_of_products, o.order_status_code FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code;
SELECT o.date_order_placed, COUNT(oi.order_item_id) AS number_of_items FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.date_order_placed ORDER BY o.date_order_placed NULLS LAST;
SELECT o.order_id, o.date_order_placed, COUNT(oi.order_item_id) AS total_items FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed ORDER BY o.date_order_placed NULLS LAST;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Orders o) ORDER BY c.customer_last_name, c.customer_first_name NULLS LAST;
SELECT c.customer_first_name, c.customer_last_name, c.customer_middle_initial FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;
SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(oi.order_item_id) >= 2) ORDER BY p.product_id NULLS LAST;
SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(oi.order_id) < 2);
SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.order_item_id) >= 2;
SELECT o.order_id, o.date_order_placed FROM orders o JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.order_item_id) >= 2;
SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC LIMIT 1;
SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC;
SELECT o.order_id, SUM(p.product_price) AS total_product_price FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_product_price ASC LIMIT 1;
SELECT o.order_id, SUM(oi.order_item_price) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id ORDER BY total_cost ASC LIMIT 1;
SELECT cp.payment_method_code, COUNT(*) AS COUNT FROM Customer_Payment_Methods cp GROUP BY cp.payment_method_code ORDER BY COUNT DESC LIMIT 1;
SELECT cp.payment_method_code, COUNT(*) AS COUNT FROM Customer_Payment_Methods cp GROUP BY cp.payment_method_code ORDER BY COUNT DESC LIMIT 1;
SELECT c.gender_code, COUNT(oi.product_id) AS product_count FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.gender_code ORDER BY product_count DESC NULLS LAST;
SELECT c.gender_code, COUNT(oi.product_id) AS total_products FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.gender_code ORDER BY total_products DESC NULLS LAST;
SELECT c.gender_code, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY number_of_orders DESC NULLS LAST;
SELECT c.gender_code, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY number_of_orders DESC NULLS LAST;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, cp.payment_method_code FROM Customers c JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, cp.payment_method_code FROM Customers c JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id;
SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number;
SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number;
SELECT p.product_name, to_char(s.shipment_date, 'YYYY-MM-DD') AS shipment_date FROM Shipments s JOIN Shipment_Items si ON s.shipment_id = si.shipment_id JOIN Order_Items oi ON si.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id;
SELECT p.product_name, to_char(s.shipment_date, 'DD-MM-YYYY') AS shipment_date FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;
SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;
SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id WHERE oi.order_item_status_code ilike '%shipped%' ORDER BY oi.order_item_status_code NULLS LAST;
SELECT p.product_name, p.product_color FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id JOIN Shipments s ON oi.order_id = s.order_id WHERE oi.order_item_status_code = 'shipped' ORDER BY p.product_name, p.product_color NULLS LAST;
SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;
SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'F' ORDER BY p.product_name NULLS LAST;
SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'F';
SELECT i.invoice_status_code, COUNT(*) AS number_of_orders FROM Invoices i JOIN Orders o ON i.invoice_number = o.order_id WHERE o.order_status_code != 'shipped' GROUP BY i.invoice_status_code;
SELECT i.invoice_status_code FROM Invoices i JOIN Orders o ON i.invoice_number = o.order_id WHERE o.order_status_code != 'shipped' ORDER BY i.invoice_status_code NULLS LAST;
SELECT o.order_id, o.date_order_placed, SUM(oi.product_price) AS total_cost FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed ORDER BY o.order_id NULLS LAST;
SELECT o.order_id, o.date_order_placed, SUM(p.product_price) AS total_amount_paid FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed;
SELECT COUNT(DISTINCT o.customer_id) AS number_of_customers FROM Orders o;
SELECT COUNT(DISTINCT o.customer_id) AS number_of_customers FROM orders o;
SELECT COUNT(DISTINCT oi.order_item_status_code) AS number_of_order_item_statuses FROM Order_Items oi;
SELECT COUNT(DISTINCT oi.order_item_status_code) AS number_of_status_codes FROM Order_Items oi;
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods;
SELECT COUNT(DISTINCT cp.payment_method_code) AS number_of_payment_methods FROM Customer_Payment_Methods cp;
SELECT c.login_name, c.login_password FROM Customers c WHERE c.phone_number like '+12%';
SELECT c.login_name, c.login_password FROM Customers c WHERE c.phone_number like '+12%';
SELECT p.product_size FROM Products p WHERE p.product_name ILIKE '%Dell%';
SELECT p.product_size FROM Products p WHERE p.product_name ILIKE '%Dell%';
SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);
SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);
SELECT COUNT(DISTINCT p.product_id) AS number_of_products FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL;
SELECT COUNT(DISTINCT p.product_id) AS unordered_products FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL;
SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT cp.customer_id FROM Customer_Payment_Methods cp);
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Payment_Methods cpm ON c.customer_id = cpm.customer_id WHERE cpm.customer_id IS NULL;
SELECT o.order_status_code, o.date_order_placed FROM Orders o;
SELECT o.order_status_code, o.date_order_placed FROM Orders o;
SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE c.country ILIKE '%USA%' ORDER BY c.address_line_1 NULLS LAST, c.town_city NULLS LAST, c.county NULLS LAST;
SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE c.country = 'United States';
SELECT c.customer_first_name, p.product_name FROM Customers c CROSS JOIN Products p;
SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
SELECT COUNT(*) AS total_shipped_items FROM Shipment_Items si JOIN Shipments s ON si.shipment_id = s.shipment_id;
SELECT COUNT(DISTINCT p.product_id) AS total_shipped_products FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id;
SELECT AVG(p.product_price) AS average_price FROM Products p;
SELECT AVG(p.product_price) AS average_product_price FROM Products p;
SELECT AVG(p.product_price) AS average_product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id;
SELECT AVG(p.product_price) AS average_product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id;
SELECT c.email_address, c.town_city, c.county FROM Customers c GROUP BY c.email_address, c.town_city, c.county ORDER BY COUNT(c.gender_code) ASC LIMIT 1;
SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(order_id) ASC LIMIT 1) ORDER BY COUNT(order_id) ASC;
SELECT o.date_order_placed FROM orders o JOIN customer_payment_methods cpm ON o.customer_id = cpm.customer_id GROUP BY o.date_order_placed HAVING COUNT(DISTINCT cpm.payment_method_code) >= 2;
SELECT o.date_order_placed FROM Orders o JOIN Customer_Payment_Methods cpm ON o.customer_id = cpm.customer_id GROUP BY o.date_order_placed HAVING COUNT(DISTINCT cpm.payment_method_code) >= 2;
SELECT o.order_status_code FROM Orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) ASC LIMIT 1;
SELECT o.order_status_code FROM Orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) ASC LIMIT 1;
SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id, p.product_description HAVING COUNT(oi.order_item_id) > 3;
SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_description HAVING COUNT(oi.order_item_id) > 3;
SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_date, i.invoice_number HAVING COUNT(s.shipment_id) >= 2;
SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s1 ON i.invoice_number = s1.invoice_number JOIN Shipment_Items si1 ON s1.shipment_id = si1.shipment_id JOIN Shipments s2 ON si1.order_item_id = s2.order_id WHERE s2.order_id IS NOT NULL GROUP BY i.invoice_date, i.invoice_number HAVING COUNT(DISTINCT s2.shipment_id) >= 2;
SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s;
SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s ORDER BY s.shipment_date NULLS LAST;
SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT MAX(product_price) FROM Products);
SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT MAX(product_price) FROM Products);
SELECT d.name FROM director d WHERE d.age > (SELECT AVG(d2.age) FROM director d2);
SELECT d.name FROM director d ORDER BY d.age ASC LIMIT 1;
SELECT COUNT(*) FROM channel c WHERE c.internet ilike '%bbc%';
SELECT COUNT(DISTINCT c.Digital_terrestrial_channel) FROM channel c;
SELECT p.Title FROM program p ORDER BY p.Start_Year DESC;
SELECT d.name, COUNT(p.program_id) AS program_count FROM program p JOIN director d ON p.director_id = d.director_id GROUP BY d.name ORDER BY program_count DESC LIMIT 1;
SELECT d.name, d.age, COUNT(p.program_id) AS program_count FROM director d JOIN program p ON d.director_id = p.director_id GROUP BY d.name, d.age ORDER BY program_count DESC LIMIT 1;
SELECT p.Title FROM program p ORDER BY p.Start_Year DESC LIMIT 1;
SELECT c.name, c.internet FROM channel c JOIN program p ON c.channel_id = p.channel_id GROUP BY c.name, c.internet HAVING COUNT(p.program_id) > 1;
SELECT c.name, COUNT(p.program_id) AS number_of_programs FROM channel c JOIN program p ON c.channel_id = p.channel_id GROUP BY c.name ORDER BY number_of_programs DESC NULLS LAST;
SELECT COUNT(DISTINCT c.Channel_ID) AS num_channels FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID WHERE p.Channel_ID IS NULL;
SELECT d.name FROM program p JOIN director d ON p.director_id = d.director_id WHERE p.title ilike '%Dracula%';
SELECT c.name, c.internet FROM channel c JOIN (SELECT p.channel_id, COUNT(p.director_id) AS director_count FROM program p GROUP BY p.channel_id) AS cp ON c.channel_id = cp.channel_id ORDER BY cp.director_count DESC LIMIT 1;
SELECT d.name FROM director d WHERE d.age BETWEEN 30 AND 60;
SELECT DISTINCT c.name FROM channel c JOIN program p ON c.channel_id = p.channel_id JOIN director d ON p.director_id = d.director_id WHERE d.age > 60 AND EXTRACT(YEAR FROM CURRENT_DATE) - d.age < 40 GROUP BY c.name HAVING COUNT(DISTINCT CASE WHEN d.age > 60 THEN p.program_id END) > 0 AND COUNT(DISTINCT CASE WHEN EXTRACT(YEAR FROM CURRENT_DATE) - d.age < 40 THEN p.program_id END) > 0;
SELECT c.channel_id, c.name FROM channel c JOIN program p ON c.channel_id = p.channel_id JOIN director d ON p.director_id = d.director_id WHERE d.name not ilike '%Hank Baskett%' GROUP BY c.channel_id, c.name;
SELECT COUNT(r.Radio_ID) FROM radio r;
SELECT r.transmitter FROM radio r ORDER BY r.erp_kw ASC;
SELECT t.tv_show_name, t.original_airdate FROM tv_show t;
SELECT c.station_name FROM city_channel c WHERE c.affiliation not ilike '%ABC%';
SELECT r.Transmitter FROM radio r WHERE CAST(r.ERP_kW AS int) > 150 OR CAST(r.ERP_kW AS int) < 30;
SELECT r.Transmitter FROM radio r ORDER BY r.ERP_kW DESC NULLS LAST LIMIT 1;
SELECT AVG(r.ERP_kW::FLOAT) AS average_erp FROM radio r;
SELECT cc.affiliation, COUNT(cc.id) AS number_of_city_channels FROM city_channel cc GROUP BY cc.affiliation ORDER BY number_of_city_channels DESC NULLS LAST;
SELECT cc.affiliation, COUNT(cc.affiliation) AS COUNT FROM city_channel cc GROUP BY cc.affiliation ORDER BY COUNT DESC LIMIT 1;
SELECT c.affiliation FROM city_channel c GROUP BY c.affiliation HAVING COUNT(c.affiliation) > 3;
SELECT c.city, cc.station_name FROM city_channel cc JOIN city c ON cc.city = c.city ORDER BY cc.station_name ASC;
SELECT r.transmitter, cc.city FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id JOIN city_channel cc ON ccr.city_channel_id = cc.id;
SELECT r.transmitter, cc.station_name, r.erp_kW FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id JOIN city_channel cc ON ccr.city_channel_id = cc.id ORDER BY r.erp_kW DESC;
SELECT r.transmitter, COUNT(ccr.city_channel_id) AS channel_count FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id GROUP BY r.transmitter ORDER BY channel_count DESC NULLS LAST;
SELECT DISTINCT r.transmitter FROM radio r LEFT JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id WHERE ccr.radio_id IS NULL;
SELECT v.model FROM vehicle v WHERE v.top_speed = (SELECT MAX(v2.top_speed) FROM vehicle v2 WHERE v2.power > 6000) ORDER BY v.model NULLS LAST;
SELECT v.model FROM vehicle v WHERE v.power > 6000 ORDER BY v.top_speed DESC NULLS LAST LIMIT 1;
SELECT d.name FROM driver d WHERE d.citizenship ilike '%United States%';
SELECT d.name FROM driver d WHERE d.citizenship ilike '%United States%';
SELECT d.driver_id, COUNT(v.vehicle_id) AS total_vehicles FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id GROUP BY d.driver_id ORDER BY total_vehicles DESC LIMIT 1;
SELECT d.driver_id, COUNT(v.vehicle_id) AS vehicle_count FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id GROUP BY d.driver_id ORDER BY vehicle_count DESC LIMIT 1;
SELECT MAX(v.power) AS max_power, AVG(v.power) AS average_power FROM vehicle v WHERE v.builder ILIKE '%Zhuzhou%';
SELECT MAX(v.power) AS max_power, AVG(v.power) AS average_power FROM vehicle v WHERE v.builder ILIKE '%Zhuzhou%';
SELECT v.Vehicle_ID, COUNT(v.Vehicle_ID) AS times_driven FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID ORDER BY times_driven ASC LIMIT 1;
SELECT v.Vehicle_ID FROM vehicle v JOIN (SELECT v.Vehicle_ID, COUNT(*) AS num_drivers FROM vehicle_driver v GROUP BY v.Vehicle_ID ORDER BY num_drivers ASC LIMIT 1) AS m ON v.Vehicle_ID = m.Vehicle_ID;
SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = '1996';
SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = '1996' ORDER BY v.top_speed DESC, v.power DESC LIMIT 1;
SELECT v.build_year, v.model, v.builder FROM vehicle v;
SELECT v.build_year, v.model, v.builder FROM vehicle v;
SELECT COUNT(DISTINCT v.driver_id) AS number_of_drivers FROM vehicle v WHERE v.build_year = '2012';
SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = '2012';
SELECT COUNT(DISTINCT d.driver_id) FROM driver d WHERE d.racing_series ilike '%NASCAR%';
SELECT COUNT(DISTINCT d.driver_id) FROM driver d WHERE d.racing_series ilike '%NASCAR%';
SELECT AVG(v.top_speed) AS average_top_speed FROM vehicle v;
SELECT AVG(v.top_speed) AS average_top_speed FROM vehicle v;
SELECT d.name FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000;
SELECT d.name FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000;
SELECT v.model FROM vehicle v WHERE (v.total_production > '100' OR v.top_speed > 150) ORDER BY v.model NULLS LAST;
SELECT v.model FROM vehicle v WHERE (v.total_production > '100' OR v.top_speed > 150) ORDER BY v.model NULLS LAST;
SELECT v.model, v.build_year FROM vehicle v WHERE v.model ilike '%DJ%';
SELECT v.model, v.build_year FROM vehicle v WHERE v.model ilike '%DJ%';
SELECT v.model FROM vehicle v WHERE v.model NOT IN (SELECT DISTINCT vd.model FROM vehicle_driver vd) ORDER BY v.model NULLS LAST;
SELECT v.model FROM vehicle v WHERE v.vehicle_id NOT IN (SELECT vd.vehicle_id FROM vehicle_driver vd) ORDER BY v.model NULLS LAST;
SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE v.builder = 'Ziyang' OR (SELECT COUNT(DISTINCT vd2.driver_id) FROM vehicle_driver vd2 WHERE vd2.vehicle_id = v.vehicle_id) >= 2;
SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id GROUP BY v.vehicle_id, v.model HAVING COUNT(DISTINCT vd.driver_id) = 2 OR v.builder = 'Ziyang' ORDER BY v.vehicle_id NULLS LAST;
SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id JOIN driver d ON vd.driver_id = d.driver_id WHERE (SELECT COUNT(DISTINCT vd.driver_id) FROM vehicle_driver WHERE vehicle_id = v.vehicle_id) > 2 OR d.name = 'Jeff Gordon';
SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id JOIN driver d ON vd.driver_id = d.driver_id WHERE (SELECT COUNT(DISTINCT vd.driver_id) FROM vehicle_driver WHERE vehicle_id = v.vehicle_id) > 2 OR d.name = 'Jeff Gordon';
SELECT COUNT(*) FROM (SELECT v.Vehicle_ID, v.Model, v.Build_Year, v.Top_Speed, v.Power, v.Builder, v.Total_Production FROM vehicle v WHERE v.Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)) AS subquery;
SELECT COUNT(*) FROM vehicle v WHERE v.top_speed = (SELECT MAX(top_speed) FROM vehicle);
SELECT d.name FROM driver d ORDER BY d.name ASC;
SELECT d.name FROM driver d ORDER BY d.name ASC;
SELECT d.Racing_Series, COUNT(DISTINCT v.Vehicle_ID) AS number_of_vehicles FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID GROUP BY d.Racing_Series ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT d.Racing_Series, COUNT(DISTINCT vd.Driver_ID) AS number_of_drivers FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID GROUP BY d.Racing_Series ORDER BY number_of_drivers DESC NULLS LAST;
SELECT d.name, d.citizenship FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.model = 'DJ1';
SELECT d.name, d.citizenship FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.model ilike '%DJ1%';
SELECT COUNT(DISTINCT d.driver_id) FROM driver d LEFT JOIN vehicle_driver vd ON d.driver_id = vd.driver_id WHERE vd.driver_id IS NULL;
SELECT COUNT(DISTINCT d.driver_id) FROM driver d LEFT JOIN vehicle_driver vd ON d.driver_id = vd.driver_id WHERE vd.driver_id IS NULL;
SELECT COUNT(e.exam_id) FROM exams e;
SELECT COUNT(e.exam_id) FROM exams e;
SELECT DISTINCT e.subject_code FROM exams e ORDER BY e.subject_code ASC;
SELECT DISTINCT e.subject_code FROM exams e ORDER BY e.subject_code ASC;
SELECT e.Exam_Name, e.Exam_Date FROM Exams e WHERE e.Subject_Code not ilike '%Database%';
SELECT e.exam_date, e.exam_name FROM exams e WHERE e.subject_code not ilike '%Database%';
SELECT e.exam_date FROM exams e WHERE e.subject_code ilike '%data%' ORDER BY e.exam_date DESC;
SELECT e.exam_date FROM exams e WHERE e.subject_code ilike '%data%' ORDER BY e.exam_date DESC;
SELECT q.type_of_question_code, COUNT(q.question_id) AS question_count FROM questions q GROUP BY q.type_of_question_code ORDER BY question_count DESC NULLS LAST;
SELECT q.type_of_question_code, COUNT(q.type_of_question_code) AS COUNT FROM questions q GROUP BY q.type_of_question_code ORDER BY COUNT DESC NULLS LAST;
SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%';
SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%';
SELECT COUNT(DISTINCT sa.Comments) AS number_of_comments FROM Student_Answers sa;
SELECT COUNT(DISTINCT sa.Comments) AS number_of_comments FROM Student_Answers sa;
SELECT sa.Student_Answer_Text, COUNT(*) AS COUNT FROM Student_Answers sa GROUP BY sa.Student_Answer_Text ORDER BY COUNT DESC;
SELECT sa.Student_Answer_Text, COUNT(sa.Student_Answer_Text) AS frequency FROM Student_Answers sa GROUP BY sa.Student_Answer_Text ORDER BY frequency DESC;
SELECT s.first_name, sa.date_of_answer FROM students s JOIN student_answers sa ON s.student_id = sa.student_id;
SELECT s.first_name, sa.date_of_answer FROM student_answers sa JOIN students s ON sa.student_id = s.student_id;
SELECT s.email_adress, sa.date_of_answer FROM students s JOIN student_answers sa ON s.student_id = sa.student_id ORDER BY sa.date_of_answer DESC;
SELECT s.email_adress, sa.date_of_answer FROM student_answers sa JOIN students s ON sa.student_id = s.student_id ORDER BY sa.date_of_answer DESC;
SELECT sa.Assessment FROM Student_Assessments sa GROUP BY sa.Assessment ORDER BY COUNT(sa.Assessment) ASC LIMIT 1;
SELECT sa.Assessment, COUNT(*) AS frequency_count FROM Student_Assessments sa GROUP BY sa.Assessment ORDER BY frequency_count ASC LIMIT 1;
SELECT s.First_Name FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID GROUP BY s.First_Name HAVING COUNT(sa.Student_Answer_ID) >= 2;
SELECT s.First_Name FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID GROUP BY s.First_Name HAVING COUNT(sa.Student_Answer_ID) >= 2;
SELECT v.valid_answer_text FROM valid_answers v GROUP BY v.valid_answer_text ORDER BY COUNT(v.valid_answer_text) DESC LIMIT 1;
SELECT v.valid_answer_text, COUNT(*) AS frequency FROM valid_answers v GROUP BY v.valid_answer_text ORDER BY frequency DESC LIMIT 1;
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU != 'M';
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU != 'M';
SELECT s.gender_mfu, COUNT(s.student_id) AS number_of_students FROM students s GROUP BY s.gender_mfu ORDER BY number_of_students DESC NULLS LAST;
SELECT s.gender_mfu, COUNT(s.student_id) AS number_of_students FROM students s GROUP BY s.gender_mfu ORDER BY number_of_students DESC NULLS LAST;
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M');
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M');
SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL;
SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL;
SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%Absent%' ORDER BY sa.Student_Answer_Text NULLS LAST;
SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%Absent%' ORDER BY sa.Student_Answer_Text NULLS LAST;
SELECT q.type_of_question_code FROM questions q GROUP BY q.type_of_question_code HAVING COUNT(q.question_id) >= 3 ORDER BY q.type_of_question_code NULLS LAST;
SELECT q.type_of_question_code FROM questions q GROUP BY q.type_of_question_code HAVING COUNT(q.question_id) >= 3;
SELECT * FROM Students s;
SELECT s.Student_ID, s.First_Name, s.Middle_Name, s.Last_Name, s.Gender_MFU, s.Student_Address, s.Email_Adress, s.Cell_Mobile_Phone, s.Home_Phone FROM Students s;
SELECT COUNT(a.address_id) AS total_addresses FROM Addresses a;
SELECT COUNT(a.address_id) AS total_addresses FROM Addresses a;
SELECT a.address_id, a.address_details FROM Addresses a;
SELECT a.address_id, a.address_details FROM Addresses a;
SELECT COUNT(p.product_id) FROM Products p;
SELECT COUNT(p.product_id) FROM Products p;
SELECT p.product_id, p.product_type_code, p.product_name FROM Products p;
SELECT p.product_id, p.product_type_code, p.product_name FROM Products p ORDER BY p.product_id NULLS LAST;
SELECT p.product_price FROM Products p WHERE p.product_name ilike '%Monitor%';
SELECT p.product_price FROM Products p WHERE p.product_name ilike '%Monitor%';
SELECT MIN(p.product_price) AS min_price, AVG(p.product_price) AS average_price, MAX(p.product_price) AS max_price FROM Products p;
SELECT MIN(p.product_price) AS min_price, AVG(p.product_price) AS average_price, MAX(p.product_price) AS max_price FROM Products p;
SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code ilike '%Clothes%';
SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code ilike '%Clothes%';
SELECT COUNT(*) FROM Products p WHERE p.product_type_code ilike '%hardware%';
SELECT COUNT(*) FROM `Products` p WHERE p.product_type_code ilike '%Hardware%';
SELECT p.product_name, p.product_price FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);
SELECT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products);
SELECT p.product_name, p.product_price FROM Products p WHERE p.product_type_code = 'hardware' AND p.product_price > (SELECT AVG(p2.product_price) FROM Products p2 WHERE p2.product_type_code = 'hardware');
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' AND p.product_price > (SELECT AVG(p2.product_price) FROM Products p2 WHERE p2.product_type_code = 'Hardware');
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Clothes' ORDER BY p.product_price DESC NULLS LAST LIMIT 1;
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Clothes' ORDER BY p.product_price DESC NULLS LAST LIMIT 1;
SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1;
SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC NULLS LAST LIMIT 1;
SELECT p.product_name FROM Products p ORDER BY p.product_price DESC;
SELECT p.product_name, p.product_price FROM Products p ORDER BY p.product_price DESC;
SELECT p.product_name, p.product_price FROM Products p WHERE p.product_type_code ilike '%hardware%' ORDER BY p.product_price ASC;
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC;
SELECT p.product_type_code, COUNT(p.product_id) AS product_count FROM Products p GROUP BY p.product_type_code ORDER BY product_count DESC NULLS LAST;
SELECT p.product_type_code, COUNT(p.product_id) AS product_count FROM Products p GROUP BY p.product_type_code ORDER BY product_count DESC NULLS LAST;
SELECT p.product_type_code, AVG(p.product_price) AS average_price FROM Products p GROUP BY p.product_type_code ORDER BY average_price DESC NULLS LAST;
SELECT p.product_type_code, AVG(p.product_price) AS average_price FROM Products p GROUP BY p.product_type_code ORDER BY average_price DESC NULLS LAST;
SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2;
SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2;
SELECT p.product_type_code, COUNT(p.product_id) AS COUNT FROM Products p GROUP BY p.product_type_code ORDER BY COUNT DESC LIMIT 1;
SELECT p.product_type_code, COUNT(*) AS frequency FROM Products p GROUP BY p.product_type_code ORDER BY frequency DESC LIMIT 1;
SELECT COUNT(c.customer_id) FROM Customers c;
SELECT COUNT(c.customer_id) AS total_customers FROM `Customers` c;
SELECT c.customer_id, c.customer_name FROM Customers c;
SELECT c.customer_id, c.customer_name FROM Customers c ORDER BY c.customer_id NULLS LAST;
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name ilike '%Jeromy%';
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name ilike '%Jeromy%';
SELECT c.payment_method_code, COUNT(c.customer_id) AS customer_count FROM Customers c GROUP BY c.payment_method_code ORDER BY customer_count DESC NULLS LAST;
SELECT c.payment_method_code, COUNT(c.customer_id) AS number_of_customers FROM Customers c GROUP BY c.payment_method_code ORDER BY number_of_customers DESC NULLS LAST;
SELECT c.payment_method_code, COUNT(c.customer_id) AS COUNT FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT DESC LIMIT 1;
SELECT c.payment_method_code, COUNT(*) AS COUNT FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT DESC LIMIT 1;
SELECT c.customer_name, c.payment_method_code FROM Customers c GROUP BY c.customer_name, c.payment_method_code ORDER BY COUNT(c.customer_id) ASC LIMIT 1;
SELECT c.customer_name, c.payment_method_code FROM Customers c GROUP BY c.customer_name, c.payment_method_code ORDER BY COUNT(c.payment_method_code) ASC LIMIT 1;
SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE c.customer_name ilike '%Jeromy%';
SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE c.customer_name ilike '%Jeromy%';
SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY c.payment_method_code NULLS LAST;
SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.payment_method_code) DESC NULLS LAST;
SELECT p.product_id, p.product_type_code, p.product_name FROM Products p ORDER BY p.product_name NULLS LAST;
SELECT p.product_id, p.product_type_code, p.product_name FROM Products p ORDER BY p.product_name ASC;
SELECT p.product_type_code, COUNT(p.product_id) AS COUNT FROM Products p GROUP BY p.product_type_code ORDER BY COUNT ASC LIMIT 1;
SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_type_code) ASC LIMIT 1;
SELECT COUNT(o.order_id) AS total_orders FROM Customer_Orders o;
SELECT COUNT(o.order_id) AS total_orders FROM Customer_Orders o;
SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE c.customer_name ilike '%Jeromy%' ORDER BY co.order_id NULLS LAST;
SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE c.customer_name ilike '%Jeromy%' ORDER BY co.order_id NULLS LAST;
SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS order_count FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_name, c.customer_id ORDER BY order_count DESC NULLS LAST;
SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS total_orders FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_name, c.customer_id ORDER BY total_orders DESC NULLS LAST;
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN (SELECT customer_id, COUNT(order_id) AS order_count FROM Customer_Orders GROUP BY customer_id ORDER BY order_count DESC LIMIT 1) AS mco ON c.customer_id = mco.customer_id LIMIT 1;
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN (SELECT customer_id, COUNT(order_id) AS order_count FROM Customer_Orders GROUP BY customer_id ORDER BY order_count DESC LIMIT 1) AS mco ON c.customer_id = mco.customer_id LIMIT 1;
SELECT co.order_status_code, COUNT(co.order_id) AS order_count FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY order_count DESC NULLS LAST;
SELECT co.order_status_code, COUNT(*) AS order_count FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY order_count DESC NULLS LAST;
SELECT co.order_status_code, COUNT(*) AS COUNT FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY COUNT DESC LIMIT 1;
SELECT co.order_status_code, COUNT(*) AS frequency FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY frequency DESC LIMIT 1;
SELECT COUNT(DISTINCT c.customer_id) AS number_of_customers FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;
SELECT COUNT(DISTINCT c.customer_id) AS total_customers FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;
SELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL;
SELECT p.product_name FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi) ORDER BY p.product_name NULLS LAST;
SELECT COUNT(*) AS total_monitors FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name ilike '%Monitor%';
SELECT SUM(o.order_quantity) AS total_monitors FROM Order_Items o JOIN Products p ON o.product_id = p.product_id WHERE p.product_type_code = 'Monitor';
SELECT COUNT(DISTINCT co.customer_id) AS number_of_customers FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Customer_Orders co ON oi.order_id = co.order_id WHERE p.product_name ilike '%Monitor%';
SELECT COUNT(DISTINCT co.customer_id) FROM Order_Items oi JOIN Customer_Orders co ON oi.order_id = co.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_type_code ilike '%Monitor%';
SELECT COUNT(DISTINCT co.customer_id) AS number_of_customers FROM Customer_Orders co;
SELECT COUNT(DISTINCT co.customer_id) AS number_of_customers FROM Customer_Orders co;
SELECT c.customer_id FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;
SELECT c.customer_id FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;
SELECT c.customer_name, co.order_id, co.order_date, p.product_name, oi.order_quantity FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE CAST(oi.order_quantity AS INTEGER) > 6 OR CAST(oi.order_quantity AS INTEGER) < 4;
SELECT o.order_id, o.order_date FROM Order_Items oi JOIN Customer_Orders o ON oi.order_id = o.order_id WHERE CAST(oi.order_quantity AS INTEGER) > 6 OR (SELECT COUNT(*) FROM Order_Items WHERE order_id = o.order_id) > 3;
SELECT COUNT(b.building_id) FROM building b;
SELECT COUNT(b.building_id) FROM building b;
SELECT b.name FROM building b ORDER BY b.number_of_stories ASC;
SELECT b.name, b.number_of_stories FROM building b ORDER BY b.number_of_stories ASC;
SELECT b.address FROM building b ORDER BY b.completed_year DESC;
SELECT b.address FROM building b ORDER BY b.completed_year DESC;
SELECT MAX(b.number_of_stories) FROM building b WHERE b.completed_year != 1980;
SELECT MAX(b.number_of_stories) FROM building b WHERE b.completed_year != 1980;
SELECT AVG(r.Population) AS Average_Population FROM region r;
SELECT AVG(r.Population) FROM region r;
SELECT r.name FROM region r ORDER BY r.name ASC;
SELECT r.name FROM region r ORDER BY r.name ASC;
SELECT r.capital FROM region r WHERE r.area > 10000;
SELECT r.capital FROM region r WHERE r.area > 10000;
SELECT r.capital FROM region r ORDER BY r.population DESC NULLS LAST LIMIT 1;
SELECT r.name, r.capital FROM region r ORDER BY r.population DESC NULLS LAST LIMIT 1;
SELECT r.name FROM region r ORDER BY r.area DESC NULLS LAST LIMIT 5;
SELECT r.name FROM region r ORDER BY r.area DESC NULLS LAST LIMIT 5;
SELECT b.name AS building_name, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id;
SELECT b.name, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id;
SELECT r.name FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.name HAVING COUNT(b.building_id) > 1 ORDER BY r.name NULLS LAST;
SELECT r.name FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.name HAVING COUNT(b.building_id) > 1 ORDER BY r.name NULLS LAST;
SELECT r.capital FROM region r JOIN (SELECT b.region_id, COUNT(b.building_id) AS building_count FROM building b GROUP BY b.region_id) AS rb ON r.region_id = rb.region_id ORDER BY rb.building_count DESC LIMIT 1;
SELECT r.name, r.capital, COUNT(b.building_id) AS number_of_buildings FROM building b JOIN region r ON b.region_id = r.region_id GROUP BY r.name, r.capital ORDER BY number_of_buildings DESC LIMIT 1;
SELECT b.address, r.capital FROM building b JOIN region r ON b.region_id = r.region_id;
SELECT b.address, r.name FROM building b JOIN region r ON b.region_id = r.region_id;
SELECT SUM(b.Number_of_Stories) AS total_stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo';
SELECT b.name, b.number_of_stories FROM building b JOIN region r ON b.region_id = r.region_id WHERE r.name = 'Abruzzo' ORDER BY b.number_of_stories DESC NULLS LAST;
SELECT b.completed_year, COUNT(b.building_id) AS number_of_buildings FROM building b GROUP BY b.completed_year ORDER BY b.completed_year NULLS LAST;
SELECT b.completed_year, COUNT(b.building_id) AS number_of_buildings FROM building b GROUP BY b.completed_year ORDER BY b.completed_year NULLS LAST;
SELECT b.completed_year, COUNT(*) AS number_of_buildings FROM building b GROUP BY b.completed_year ORDER BY number_of_buildings DESC LIMIT 1;
SELECT b.completed_year, COUNT(*) AS number_of_buildings FROM building b GROUP BY b.completed_year ORDER BY number_of_buildings DESC LIMIT 1;
SELECT r.name FROM region r WHERE r.region_id NOT IN (SELECT b.region_id FROM building b) ORDER BY r.name NULLS LAST;
SELECT r.name FROM region r WHERE r.region_id NOT IN (SELECT b.region_id FROM building b) ORDER BY r.name NULLS LAST;
SELECT b.completed_year FROM building b WHERE b.number_of_stories > 20 AND b.completed_year = (SELECT completed_year FROM building WHERE number_of_stories < 15); NULLS LAST;
SELECT b.completed_year FROM building b WHERE b.number_of_stories > 20 AND b.completed_year = (SELECT MIN(completed_year) FROM building WHERE number_of_stories < 15);
SELECT DISTINCT b.address FROM building b;
SELECT DISTINCT b.address FROM building b;
SELECT b.completed_year, b.number_of_stories FROM building b ORDER BY b.number_of_stories DESC, b.completed_year DESC;
SELECT b.completed_year, b.number_of_stories FROM building b ORDER BY b.number_of_stories DESC, b.completed_year DESC;
SELECT c.channel_id, c.channel_details FROM channels c ORDER BY c.channel_details ASC;
SELECT c.channel_details FROM channels c ORDER BY c.channel_details ASC;
SELECT COUNT(s.service_id) FROM services s;
SELECT COUNT(s.service_id) AS number_of_services FROM services s;
SELECT a.Analytical_Layer_Type_Code, COUNT(*) AS COUNT FROM Analytical_Layer a GROUP BY a.Analytical_Layer_Type_Code ORDER BY COUNT DESC LIMIT 1;
SELECT a.Analytical_Layer_Type_Code, COUNT(*) AS COUNT FROM Analytical_Layer a GROUP BY a.Analytical_Layer_Type_Code ORDER BY COUNT DESC LIMIT 1;
SELECT s.service_id, s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customers c ON cs.customer_id = c.customer_id WHERE c.customer_details ilike '%Hardy Kutch%' ORDER BY s.service_id NULLS LAST;
SELECT s.service_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id WHERE c.customer_details ilike '%Hardy Kutch%' ORDER BY s.service_details NULLS LAST;
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id GROUP BY s.service_details HAVING COUNT(cs.customers_and_services_id) > 3;
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id GROUP BY s.service_details HAVING COUNT(cs.customers_and_services_id) > 3;
SELECT c.customer_details, COUNT(cs.service_id) AS service_count FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY service_count DESC LIMIT 1;
SELECT c.customer_details, COUNT(cs.service_id) AS service_count FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY service_count DESC LIMIT 1;
SELECT c.customer_details, COUNT(cs.service_id) AS service_count FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY service_count DESC LIMIT 1;
SELECT c.customer_details, COUNT(cs.service_id) AS service_count FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_details ORDER BY service_count DESC LIMIT 1;
SELECT c.customer_details FROM customers c LEFT JOIN customers_and_services cs ON c.customer_id = cs.customer_id WHERE cs.customer_id IS NULL;
SELECT c.customer_details FROM customers c LEFT JOIN customers_and_services cs ON c.customer_id = cs.customer_id WHERE cs.customer_id IS NULL;
SELECT c.customer_id, c.customer_details, s.service_details, COUNT(cs.service_id) AS service_count FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id GROUP BY c.customer_id, c.customer_details, s.service_details ORDER BY service_count ASC LIMIT 1;
SELECT c.customer_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN (SELECT service_id, COUNT(*) AS service_count FROM customers_and_services GROUP BY service_id ORDER BY service_count ASC LIMIT 1) AS s ON cs.service_id = s.service_id ORDER BY c.customer_details NULLS LAST;
SELECT COUNT(DISTINCT cs.Customers_and_Services_Details) AS unique_customer_service_details FROM Customers_and_Services cs;
SELECT COUNT(DISTINCT c.customer_id) AS total_customers, COUNT(DISTINCT s.service_id) AS total_services FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id;
SELECT c.customer_id, c.customer_details FROM customers c WHERE c.customer_details ilike '%Kutch%';
SELECT c.customer_details FROM customers c WHERE c.customer_details ilike '%Kutch%';
SELECT DISTINCT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customer_interactions ci ON cs.customer_id = ci.customer_id WHERE cs.customer_id IN (SELECT customer_id FROM customers WHERE customer_details ilike '%Hardy Kutch%') OR ci.status_code ilike '%good%' ORDER BY s.service_details NULLS LAST;
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customer_id IN (SELECT customer_id FROM customers WHERE customer_details ilike '%Hardy Kutch%') OR s.service_id IN (SELECT service_id FROM customer_interactions WHERE status_code ilike '%good%');
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customer_interactions ci ON cs.customer_id = ci.customer_id WHERE cs.customer_id IN (SELECT customer_id FROM customers WHERE customer_details ilike '%Hardy Kutch%') AND ci.status_code ilike '%bad%' GROUP BY s.service_details;
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customer_interactions ci ON cs.customer_id = ci.customer_id WHERE cs.customer_id = (SELECT customer_id FROM customers WHERE customer_details ilike '%Hardy Kutch%') AND ci.status_code ilike '%bad%' ORDER BY s.service_details NULLS LAST;
SELECT s.service_id, s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customer_interactions ci ON cs.customer_id = ci.customer_id JOIN channels c ON ci.channel_id = c.channel_id WHERE c.channel_details ilike '%15 ij %' ORDER BY s.service_id NULLS LAST;
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customer_interactions ci ON cs.customer_id = ci.customer_id WHERE cs.customers_and_services_details = '15 ij' AND ci.status_code = 'success';
SELECT c.customer_details, s.service_details, ch.channel_details FROM customers c JOIN customer_interactions ci ON c.customer_id = ci.customer_id JOIN services s ON ci.service_id = s.service_id JOIN channels ch ON ci.channel_id = ch.channel_id WHERE ci.status_code = 'Stuck' AND s.service_details ilike '%bad%' AND ch.channel_details ilike '%bad%';
SELECT c.customer_details FROM customers c JOIN customer_interactions ci ON c.customer_id = ci.customer_id JOIN services s ON ci.service_id = s.service_id JOIN channels ch ON ci.channel_id = ch.channel_id WHERE ci.status_code = 'Stuck' AND s.service_details ilike '%bad%' AND ch.channel_details ilike '%bad%' ORDER BY c.customer_details NULLS LAST;
SELECT COUNT(DISTINCT i.Integration_Platform_ID) AS successful_integration_platforms FROM Integration_Platform i JOIN Customer_Interactions c ON i.Customer_Interaction_ID = c.Customer_Interaction_ID WHERE c.Status_Code = 'success';
SELECT COUNT(DISTINCT i.Integration_Platform_ID) FROM Integration_Platform i WHERE i.Integration_Platform_Details ilike '%Success%';
SELECT c.customer_details, s.service_details, i.integration_platform_details, a.analytical_layer_type_code, row_number() OVER(PARTITION BY c.customer_id ORDER BY i.integration_platform_details DESC) AS recent_integration_platform_rank FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id JOIN integration_platform i ON cs.customer_interaction_id = i.customer_interaction_id JOIN analytical_layer a ON a.customers_and_services_id = cs.customers_and_services_id WHERE status_code = 'failed' ORDER BY recent_integration_platform_rank;
SELECT c.customer_details FROM customers c JOIN customer_interactions ci ON c.customer_id = ci.customer_id JOIN integration_platform ip ON ci.customer_interaction_id = ip.customer_interaction_id WHERE ip.integration_platform_details ilike '%Fail%' ORDER BY c.customer_details NULLS LAST;
SELECT s.service_id, s.service_details FROM services s LEFT JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.service_id IS NULL;
SELECT s.service_details FROM services s LEFT JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.service_id IS NULL;
SELECT a.Analytical_Layer_Type_Code, COUNT(a.Analytical_Layer_Type_Code) AS usage_count FROM Analytical_Layer a GROUP BY a.Analytical_Layer_Type_Code ORDER BY usage_count DESC NULLS LAST;
SELECT a.Analytical_Layer_Type_Code, COUNT(a.Analytical_Layer_Type_Code) AS COUNT FROM Analytical_Layer a GROUP BY a.Analytical_Layer_Type_Code ORDER BY COUNT DESC NULLS LAST;
SELECT s.service_id, s.service_details, cs.customers_and_services_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details ilike '%unsatisfied%' ORDER BY s.service_id NULLS LAST;
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details ilike '%unsatisfied%' ORDER BY s.service_details NULLS LAST;
SELECT COUNT(v.id) AS total_vehicles FROM Vehicles v;
SELECT COUNT(v.id) AS total_vehicles FROM Vehicles v;
SELECT v.name FROM Vehicles v ORDER BY v.Model_year DESC;
SELECT v.name FROM Vehicles v ORDER BY v.Model_year DESC;
SELECT DISTINCT v.Type_of_powertrain FROM Vehicles v;
SELECT DISTINCT v.Type_of_powertrain FROM Vehicles v ORDER BY v.Type_of_powertrain NULLS LAST;
SELECT v.name, v.type_of_powertrain, v.annual_fuel_cost FROM vehicles v WHERE v.model_year IN (2013, 2014);
SELECT v.name, v.type_of_powertrain, v.model_year, SUM(v.annual_fuel_cost) AS total_annual_fuel_cost FROM vehicles v WHERE v.model_year IN (2013, 2014) GROUP BY v.name, v.type_of_powertrain, v.model_year ORDER BY v.model_year NULLS LAST;
SELECT v.type_of_powertrain FROM vehicles v WHERE v.model_year IN (2014, 2013) GROUP BY v.type_of_powertrain ORDER BY COUNT(v.type_of_powertrain) DESC NULLS LAST;
SELECT DISTINCT v.Type_of_powertrain FROM Vehicles v WHERE v.Model_year IN (2013, 2014) ORDER BY v.Type_of_powertrain NULLS LAST;
SELECT v.type_of_powertrain, COUNT(v.id) AS number_of_vehicles FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT v.type_of_powertrain, COUNT(v.id) AS number_of_vehicles FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT v.type_of_powertrain, COUNT(v.id) AS COUNT FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY COUNT DESC LIMIT 1;
SELECT v.type_of_powertrain, COUNT(*) AS COUNT FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY COUNT DESC LIMIT 1;
SELECT MIN(v.Annual_fuel_cost) AS min_annual_fuel_cost, MAX(v.Annual_fuel_cost) AS max_annual_fuel_cost, AVG(v.Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles v;
SELECT MIN(v.Annual_fuel_cost) AS min_annual_fuel_cost, MAX(v.Annual_fuel_cost) AS max_annual_fuel_cost, AVG(v.Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles v;
SELECT v.name, v.model_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate;
SELECT v.name, v.model_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate ORDER BY v.name NULLS LAST, v.model_year NULLS LAST;
SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_annual_fuel_cost FROM vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2 ORDER BY average_annual_fuel_cost DESC NULLS LAST;
SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_annual_fuel_cost FROM vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2 ORDER BY average_annual_fuel_cost DESC NULLS LAST;
SELECT c.name, c.age, c.membership_credit FROM customers c;
SELECT c.name, c.age, c.membership_credit FROM customers c;
SELECT c.name, c.age, c.membership_credit FROM Customers c ORDER BY c.membership_credit DESC NULLS LAST LIMIT 1;
SELECT c.name, c.age, c.membership_credit FROM Customers c ORDER BY c.membership_credit DESC LIMIT 1;
SELECT AVG(c.age) FROM Customers c WHERE c.membership_credit > (SELECT AVG(m.membership_credit) FROM Members m);
SELECT AVG(c.age) FROM customers c WHERE c.membership_credit > (SELECT AVG(m.membership_credit) FROM customers m);
SELECT * FROM Discount d;
SELECT * FROM Discount d;
SELECT v.name, SUM(r.total_hours) AS total_hours FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY total_hours DESC NULLS LAST;
SELECT v.name, SUM(r.total_hours) AS total_rental_hours FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY total_rental_hours DESC NULLS LAST;
SELECT v.name FROM Vehicles v WHERE v.id NOT IN (SELECT r.vehicles_id FROM Renting_history r) ORDER BY v.name NULLS LAST;
SELECT v.name FROM Vehicles v WHERE v.id NOT IN (SELECT r.vehicles_id FROM Renting_history r) ORDER BY v.name NULLS LAST;
SELECT c.name FROM customers c JOIN renting_history r ON c.id = r.customer_id GROUP BY c.name HAVING COUNT(r.id) >= 2;
SELECT c.name FROM customers c JOIN (SELECT customer_id, COUNT(id) AS rental_count FROM renting_history GROUP BY customer_id HAVING COUNT(id) >= 2) AS subquery ON c.id = subquery.customer_id;
SELECT v.name, v.model_year, COUNT(r.id) AS total_rentals FROM vehicles v JOIN renting_history r ON v.id = r.vehicles_id GROUP BY v.name, v.model_year ORDER BY total_rentals DESC LIMIT 1;
SELECT v.name, v.model_year, COUNT(r.id) AS total_rentals FROM vehicles v JOIN renting_history r ON v.id = r.vehicles_id GROUP BY v.name, v.model_year ORDER BY total_rentals DESC LIMIT 1;
SELECT v.name, SUM(r.total_hours) AS total_hours FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY total_hours DESC;
SELECT v.name, SUM(r.total_hours) AS total_hours FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name ORDER BY total_hours DESC;
SELECT d.name, COUNT(r.id) AS COUNT FROM Renting_history r JOIN Discount d ON r.discount_id = d.id GROUP BY d.name ORDER BY COUNT DESC LIMIT 1;
SELECT d.name, COUNT(r.id) AS rental_count FROM Renting_history r JOIN Discount d ON r.discount_id = d.id GROUP BY d.name ORDER BY rental_count DESC LIMIT 1;
SELECT c.name, v.type_of_powertrain FROM renting_history rh JOIN customers c ON rh.customer_id = c.id JOIN vehicles v ON rh.vehicles_id = v.id WHERE rh.total_hours > 30;
SELECT v.name, v.type_of_powertrain FROM vehicles v JOIN renting_history r ON v.id = r.vehicles_id WHERE r.total_hours > 30;
SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS average_city_fuel_rate, AVG(v.highway_fuel_economy_rate) AS average_highway_fuel_rate FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY average_city_fuel_rate DESC NULLS LAST, average_highway_fuel_rate DESC NULLS LAST;
SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS average_city_fuel_economy_rate, AVG(v.highway_fuel_economy_rate) AS average_highway_fuel_economy_rate FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY average_city_fuel_economy_rate DESC NULLS LAST, average_highway_fuel_economy_rate DESC NULLS LAST;
SELECT AVG(s.amount_of_loan) AS average_amount_of_loan FROM Student_Loans s;
SELECT AVG(s.amount_of_loan) AS average_loan_amount FROM Student_Loans s;
SELECT s.student_id, s.bio_data FROM Students s JOIN (SELECT c.student_id FROM Classes c GROUP BY c.student_id HAVING COUNT(c.class_id) >= 2) AS mc ON s.student_id = mc.student_id JOIN (SELECT d.student_id FROM Detention d GROUP BY d.student_id HAVING COUNT(d.detention_id) < 2) AS md ON s.student_id = md.student_id ORDER BY s.student_id NULLS LAST;
SELECT s.student_id, s.bio_data FROM Students s JOIN Transcripts t ON s.student_id = t.student_id JOIN Classes c ON s.student_id = c.student_id JOIN Detention d ON s.student_id = d.student_id WHERE (SELECT COUNT(c.class_id) FROM Classes c WHERE c.student_id = s.student_id) >= 2 AND (SELECT COUNT(d.detention_id) FROM Detention d WHERE d.student_id = s.student_id) <= 1;
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details ilike '%data%' AND c.class_details not ilike 'net%' ORDER BY t.teacher_details NULLS LAST;
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details ilike '%data%' AND c.class_details not ilike 'net%' ORDER BY t.teacher_details NULLS LAST;
SELECT s.student_id, s.bio_data, s.student_details FROM Students s LEFT JOIN Detention d ON s.student_id = d.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE d.student_id IS NULL AND sl.student_id IS NULL;
SELECT s.student_id, s.bio_data FROM Students s LEFT JOIN Detention d ON s.student_id = d.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE d.student_id IS NULL AND sl.student_id IS NULL;
SELECT s.student_id, s.first_name, s.last_name, sl.amount_of_loan, sl.date_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id JOIN Achievements a ON s.student_id = a.student_id GROUP BY s.student_id, s.first_name, s.last_name, sl.amount_of_loan, sl.date_of_loan HAVING COUNT(a.achievement_id) >= 2;
SELECT s.student_id, s.date_of_loan, s.amount_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id JOIN Achievements a ON s.student_id = a.student_id GROUP BY s.student_id, s.date_of_loan, s.amount_of_loan HAVING COUNT(a.achievement_id) >= 2;
SELECT t.teacher_details, t.teacher_id FROM Teachers t JOIN (SELECT c.teacher_id, COUNT(c.class_id) AS num_classes FROM Classes c GROUP BY c.teacher_id) AS ct ON t.teacher_id = ct.teacher_id ORDER BY num_classes DESC LIMIT 1;
SELECT t.teacher_details, t.teacher_id FROM Teachers t JOIN (SELECT c.teacher_id, COUNT(c.class_id) AS num_classes FROM Classes c GROUP BY c.teacher_id) AS ct ON t.teacher_id = ct.teacher_id ORDER BY num_classes DESC LIMIT 1;
SELECT DISTINCT r.detention_type_description FROM Detention d JOIN Ref_Detention_Type r ON d.detention_type_code = r.detention_type_code;
SELECT DISTINCT d.detention_type_description FROM Detention d;
SELECT s.student_details, r.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id JOIN Ref_Address_Types r ON sa.address_type_code = r.address_type_code;
SELECT s.student_details, r.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types r ON sa.address_type_code = r.address_type_code;
SELECT s.student_id, s.bio_data, sa.address_details FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id;
SELECT s.student_id, s.bio_data, s.student_details, a.address_details FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id;
SELECT s.student_id, s.bio_data, t.date_of_transcript FROM Students s JOIN Transcripts t ON s.student_id = t.student_id;
SELECT s.student_id, s.bio_data, t.date_of_transcript FROM Students s JOIN Transcripts t ON s.student_id = t.student_id;
SELECT s.student_id, b.behaviour_monitoring_details, COUNT(*) AS frequency FROM Students s JOIN Behaviour_Monitoring b ON s.student_id = b.student_id GROUP BY s.student_id, b.behaviour_monitoring_details ORDER BY frequency DESC LIMIT 1;
SELECT bm.behaviour_monitoring_details, COUNT(*) AS COUNT FROM Behaviour_Monitoring bm GROUP BY bm.behaviour_monitoring_details ORDER BY COUNT DESC LIMIT 1;
SELECT s.student_id, s.bio_data, s.student_details FROM Students s JOIN Transcripts t ON s.student_id = t.student_id JOIN Behaviour_Monitoring b ON s.student_id = b.student_id WHERE t.transcript_details IN (SELECT transcript_details FROM Transcripts GROUP BY transcript_details, COUNT(*) HAVING COUNT(*) > 2) AND b.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details, COUNT(*) HAVING COUNT(*) > 2) ORDER BY s.student_id NULLS LAST;
SELECT s.student_id, s.bio_data, s.student_details FROM Students s JOIN Transcripts t ON s.student_id = t.student_id JOIN Behaviour_Monitoring b ON s.student_id = b.student_id WHERE t.transcript_details IN (SELECT transcript_details FROM Transcripts GROUP BY transcript_details, COUNT(*) OVER (PARTITION BY transcript_details) AS COUNT_STUDENTS FROM Transcripts WHERE COUNT_STUDENTS >= 3) AND b.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details, COUNT(*) OVER (PARTITION BY behaviour_monitoring_details) AS COUNT_STUDENTS FROM Behaviour_Monitoring WHERE COUNT_STUDENTS >=
SELECT s.student_id, s.bio_data, s.student_details, b.behaviour_monitoring_details FROM Students s JOIN Behaviour_Monitoring b ON s.student_id = b.student_id GROUP BY s.student_id, s.bio_data, s.student_details, b.behaviour_monitoring_details ORDER BY COUNT(b.behaviour_monitoring_details) DESC LIMIT 1;
SELECT s.student_id, s.bio_data, s.student_details, b.behaviour_monitoring_details FROM Students s JOIN Behaviour_Monitoring b ON s.student_id = b.student_id GROUP BY s.student_id, s.bio_data, s.student_details, b.behaviour_monitoring_details ORDER BY COUNT(b.behaviour_monitoring_details) DESC LIMIT 1;
SELECT s.student_id, s.bio_data, se.event_date FROM Students s JOIN Student_Events se ON s.student_id = se.student_id;
SELECT s.student_id, s.bio_data, se.event_date FROM Students s JOIN Student_Events se ON s.student_id = se.student_id;
SELECT COUNT(se.student_id) AS number_of_students, r.event_type_description FROM Student_Events se JOIN Ref_Event_Types r ON se.event_type_code = r.event_type_code GROUP BY r.event_type_description ORDER BY number_of_students DESC LIMIT 1;
SELECT e.event_type_code, e.event_type_description, COUNT(s.student_id) AS number_of_students FROM Student_Events s JOIN Ref_Event_Types e ON s.event_type_code = e.event_type_code GROUP BY e.event_type_code, e.event_type_description ORDER BY number_of_students DESC LIMIT 1;
SELECT a.achievement_id, a.achievement_details, t.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type t ON a.achievement_type_code = t.achievement_type_code;
SELECT a.achievement_id, a.achievement_details, t.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type t ON a.achievement_type_code = t.achievement_type_code;
SELECT COUNT(DISTINCT c.teacher_id) AS number_of_teachers FROM Classes c JOIN Students s ON c.student_id = s.student_id LEFT JOIN Achievements a ON s.student_id = a.student_id WHERE a.student_id IS NULL;
SELECT COUNT(DISTINCT c.teacher_id) AS number_of_teachers FROM Classes c JOIN Students s ON c.student_id = s.student_id WHERE NOT EXISTS (SELECT 1 FROM Achievements a WHERE a.student_id = s.student_id);
SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t ORDER BY t.date_of_transcript NULLS LAST;
SELECT t.transcript_id, t.date_of_transcript, t.transcript_details FROM Transcripts t ORDER BY t.date_of_transcript NULLS LAST;
SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements a ORDER BY a.date_achievement NULLS LAST;
SELECT a.achievement_id, a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements a ORDER BY a.date_achievement NULLS LAST;
SELECT d.detention_id, d.datetime_detention_start, d.datetime_detention_end FROM Detention d;
SELECT d.detention_id, d.datetime_detention_start, d.datetime_detention_end FROM Detention d ORDER BY d.detention_id NULLS LAST;
SELECT s.bio_data FROM Students s WHERE s.student_details ilike '%Suite%';
SELECT s.student_id, s.bio_data FROM Students s WHERE s.student_details ilike '%Suite%';
SELECT t.teacher_id, s.student_id FROM Teachers AS t CROSS JOIN Students AS s JOIN Classes AS c ON t.teacher_id = c.teacher_id AND s.student_id = c.student_id;
SELECT t.teacher_id, s.student_id FROM Teachers AS t CROSS JOIN Students AS s JOIN Classes AS c ON t.teacher_id = c.teacher_id AND s.student_id = c.student_id;
SELECT t.teacher_id, COUNT(c.class_id) AS number_of_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY number_of_classes DESC LIMIT 1;
SELECT t.teacher_id, COUNT(c.class_id) AS number_of_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY number_of_classes DESC LIMIT 1;
SELECT s.student_id, COUNT(c.class_id) AS number_of_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id ORDER BY number_of_classes DESC LIMIT 1;
SELECT s.student_id, COUNT(c.class_id) AS number_of_courses FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id ORDER BY number_of_courses DESC LIMIT 1;
SELECT s.student_id, s.student_details FROM Students s JOIN Transcripts t ON s.student_id = t.student_id JOIN Classes c ON s.student_id = c.student_id WHERE c.teacher_id IN (SELECT teacher_id FROM Teachers GROUP BY teacher_id HAVING COUNT(DISTINCT class_id) > 1) GROUP BY s.student_id, s.student_details HAVING COUNT(DISTINCT t.transcript_id) > 1;
SELECT s.student_id, s.student_details FROM Students s JOIN (SELECT c.student_id FROM Classes c GROUP BY c.student_id HAVING COUNT(c.class_id) >= 2) AS mc ON s.student_id = mc.student_id;
SELECT rdt.detention_type_code, rdt.detention_type_description FROM Ref_Detention_Type rdt GROUP BY rdt.detention_type_code, rdt.detention_type_description ORDER BY COUNT(rdt.detention_type_code) ASC LIMIT 1;
SELECT rd.detention_type_code, rd.detention_type_description FROM Ref_Detention_Type rd GROUP BY rd.detention_type_code, rd.detention_type_description ORDER BY COUNT(rd.detention_type_code) ASC LIMIT 1;
SELECT s.bio_data, s.student_details, sl.amount_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
SELECT s.student_id, s.bio_data, s.student_details, sl.amount_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
SELECT MIN(s.date_of_loan) AS earliest_date_of_loan FROM Student_Loans s;
SELECT MIN(s.date_of_loan) AS earliest_date_of_loan FROM Student_Loans s;
SELECT s.bio_data FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1;
SELECT s.bio_data FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1;
SELECT MAX(s.date_of_loan) AS latest_loan_date FROM Student_Loans s;
SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans s ON t.student_id = s.student_id ORDER BY s.amount_of_loan DESC LIMIT 1;
SELECT t.teacher_id, t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Transcripts tr ON c.student_id = tr.student_id ORDER BY tr.date_of_transcript ASC LIMIT 1;
SELECT t.teacher_id, t.teacher_details, c.class_details, row_number() OVER(PARTITION BY c.teacher_id ORDER BY t.teacher_id) AS rank FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id;
SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan_amount FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id ORDER BY total_loan_amount DESC NULLS LAST;
SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id ORDER BY total_loan DESC NULLS LAST;
SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS total_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data ORDER BY total_classes DESC NULLS LAST;
SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS number_of_courses FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data;
SELECT COUNT(DISTINCT d.student_id) AS number_of_students FROM Detention d;
SELECT COUNT(DISTINCT d.student_id) AS number_of_students FROM Detention d;
SELECT r.address_type_code, r.address_type_description FROM Ref_Address_Types r JOIN (SELECT s.address_type_code, COUNT(*) AS COUNT FROM Students_Addresses s GROUP BY s.address_type_code) AS t ON r.address_type_code = t.address_type_code ORDER BY COUNT DESC LIMIT 1;
SELECT r.address_type_code, r.address_type_description FROM (SELECT s.address_type_code, s.address_type_description, COUNT(*) AS frequency FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id GROUP BY s.address_type_code, s.address_type_description) AS subquery ORDER BY frequency DESC LIMIT 1;
SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL ORDER BY s.bio_data NULLS LAST;
SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL;
SELECT s.student_id, a.address_details, s.date_of_birth, lag(a.address_details) OVER (PARTITION BY s.student_id ORDER BY a.address_id) AS previous_address, lead(a.address_details) OVER (PARTITION BY s.student_id ORDER BY a.address_id) AS next_address, COUNT(t.transcript_id) OVER (PARTITION BY s.student_id) AS number_of_transcripts FROM Students AS s JOIN Addresses AS a ON a.address_id IN (SELECT address_id FROM Students_Addresses WHERE student_id = s.student_id) LEFT JOIN Transcripts t ON t.student_id = s.student_id;
SELECT s.student_id, a.address_details, s.date_of_birth, lag(a.address_details) OVER (PARTITION BY s.student_id ORDER BY a.address_id) AS previous_address, lead(a.address_details) OVER (PARTITION BY s.student_id ORDER BY a.address_id) AS next_address FROM Students AS s JOIN Addresses AS a ON a.address_id IN (SELECT address_id FROM Students_Addresses WHERE student_id = s.student_id) JOIN Transcripts AS t ON t.student_id = s.student_id WHERE t.student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) >= 2);
SELECT MIN(d.datetime_detention_start) AS earliest_start_date FROM Detention d;
SELECT d.detention_id, d.datetime_detention_start FROM Detention d;
SELECT a.name FROM author a ORDER BY a.name NULLS LAST;
SELECT a.name FROM author a;
SELECT c.name, c.address FROM Client c;
SELECT c.name, c.address FROM client c;
SELECT b.Title, b.ISBN, b.SalePrice FROM Book b;
SELECT b.title, b.isbn, b.sale_price FROM book b;
SELECT COUNT(b.ISBN) FROM Book b;
SELECT COUNT(b.ISBN) AS total_books FROM Book b;
SELECT COUNT(a.idAuthor) FROM Author a;
SELECT COUNT(DISTINCT a.idAuthor) AS number_of_authors FROM Author a;
SELECT COUNT(DISTINCT c.idclient) AS number_of_clients FROM client c;
SELECT COUNT(DISTINCT c.idclient) AS number_of_clients FROM client c;
SELECT c.name, c.address FROM client c ORDER BY c.name ASC;
SELECT c.name, c.address FROM client c ORDER BY c.name NULLS LAST;
SELECT b.title, a.name FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idAuthor;
SELECT b.title, a.name FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor;
SELECT o.idorder, c.name FROM orders o JOIN client c ON o.idclient = c.idclient;
SELECT o.idorder, c.name FROM orders o JOIN client c ON o.idclient = c.idclient;
SELECT a.name, COUNT(b.isbn) AS number_of_books FROM author a JOIN author_book b ON a.idauthor = b.author GROUP BY a.name ORDER BY number_of_books DESC NULLS LAST;
SELECT a.name, COUNT(ab.isbn) AS book_count FROM author a JOIN author_book ab ON a.idauthor = ab.author GROUP BY a.name ORDER BY book_count DESC NULLS LAST;
SELECT b.ISBN, COUNT(bo.idOrder) AS number_of_orders FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN ORDER BY number_of_orders DESC NULLS LAST;
SELECT b.ISBN, COUNT(bo.idOrder) AS number_of_orders FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN ORDER BY number_of_orders DESC NULLS LAST;
SELECT b.ISBN, SUM(bo.amount) AS total_amount_ordered FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN ORDER BY total_amount_ordered DESC NULLS LAST;
SELECT b.ISBN, SUM(bo.amount) AS total_amount_ordered FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN ORDER BY total_amount_ordered DESC NULLS LAST;
SELECT b.Title, COUNT(bo.IdOrder) AS order_count FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN GROUP BY b.Title ORDER BY order_count DESC LIMIT 1;
SELECT b.title, COUNT(bo.idorder) AS order_count FROM book b JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.title ORDER BY order_count DESC LIMIT 1;
SELECT b.title, b.purchase_price FROM book b JOIN (SELECT ISBN, SUM(amount) AS total_amount FROM books_order GROUP BY ISBN ORDER BY total_amount DESC LIMIT 1) AS mb ON b.isbn = mb.isbn;
SELECT b.title, b.purchase_price, SUM(bo.amount) AS total_order_amount FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.title, b.purchase_price ORDER BY total_order_amount DESC LIMIT 1;
SELECT b.title, COUNT(bo.idorder) AS number_of_orders FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.title ORDER BY number_of_orders DESC NULLS LAST;
SELECT DISTINCT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn JOIN orders o ON bo.idorder = o.idorder WHERE o.dateorder < CURRENT_DATE;
SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name;
SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient;
SELECT c.name, COUNT(o.idorder) AS number_of_orders FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY number_of_orders DESC NULLS LAST;
SELECT c.name, COUNT(o.idorder) AS number_of_orders FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY number_of_orders DESC NULLS LAST;
SELECT c.name, COUNT(o.idorder) AS order_count FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY order_count DESC LIMIT 1;
SELECT c.name, COUNT(o.idorder) AS order_count FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name ORDER BY order_count DESC LIMIT 1;
SELECT c.name, SUM(bo.amount) AS total_amount_ordered FROM Client c JOIN Orders o ON c.idclient = o.idclient JOIN Books_Order bo ON o.idorder = bo.idorder GROUP BY c.name;
SELECT c.name, COUNT(bo.ISBN) AS total_books FROM Client c JOIN Orders o ON c.idclient = o.idclient JOIN Books_Order bo ON o.idorder = bo.idorder GROUP BY c.name;
SELECT c.name, SUM(b.purchaseprice) AS total_spent FROM client c JOIN orders o ON c.idclient = o.idclient JOIN books_order b ON o.idorder = b.idorder GROUP BY c.name ORDER BY total_spent DESC LIMIT 1;
SELECT c.name, SUM(b.purchaseprice) AS total_spent FROM client c JOIN orders o ON c.idclient = o.idclient JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn GROUP BY c.name ORDER BY total_spent DESC LIMIT 1;
SELECT b.title FROM book b LEFT JOIN Books_Order bo ON b.isbn = bo.isbn WHERE bo.isbn IS NULL;
SELECT b.Title FROM Book b WHERE b.ISBN NOT IN (SELECT o.ISBN FROM Books_Order o) ORDER BY b.Title NULLS LAST;
SELECT c.name FROM client c LEFT JOIN orders o ON c.idclient = o.idclient WHERE o.idclient IS NULL;
SELECT c.name FROM client c WHERE c.idclient NOT IN (SELECT o.idclient FROM orders o) ORDER BY c.name NULLS LAST;
SELECT MAX(b.SalePrice) AS max_sale_price, MIN(b.SalePrice) AS min_sale_price FROM Book b;
SELECT MAX(b.SalePrice) AS max_sale_price, MIN(b.SalePrice) AS min_sale_price FROM Book b;
SELECT AVG(b.PurchasePrice) AS average_purchase_price, AVG(b.SalePrice) AS average_sale_price FROM Book b;
SELECT AVG(b.PurchasePrice) AS average_purchase_price, AVG(b.SalePrice) AS average_sale_price FROM Book b;
SELECT MAX(b.SalePrice - b.PurchasePrice) AS max_difference FROM Book b;
SELECT MAX(b.SalePrice - b.PurchasePrice) AS max_difference FROM Book b;
SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2);
SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2);
SELECT b.title FROM book b ORDER BY b.sale_price ASC NULLS LAST;
SELECT b.title FROM book b WHERE b.sale_price = (SELECT MIN(sale_price) FROM book);
SELECT b.title, b.purchase_price FROM book b ORDER BY b.purchase_price DESC NULLS LAST;
SELECT b.title, b.purchase_price FROM book b ORDER BY b.purchase_price DESC NULLS LAST LIMIT 1;
SELECT AVG(b.SalePrice) FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell';
SELECT AVG(b.SalePrice) FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell';
SELECT b.SalePrice FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'Plato';
SELECT b.SalePrice FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'Plato';
SELECT b.Title FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell' ORDER BY b.SalePrice ASC NULLS LAST LIMIT 1;
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name = 'George Orwell' ORDER BY b.saleprice ASC NULLS LAST LIMIT 1;
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name = 'Plato' AND b.saleprice < (SELECT AVG(saleprice) FROM book);
SELECT b.title FROM Book b JOIN Author_Book ab ON b.isbn = ab.isbn JOIN Author a ON ab.author = a.idAuthor WHERE a.name = 'Plato' AND b.salePrice < (SELECT AVG(salePrice) FROM Book);
SELECT a.name FROM Author a JOIN Book b ON a.idAuthor = b.author WHERE b.title ilike '%Pride%and%Prejudice%' LIMIT 1;
SELECT a.name FROM Author a JOIN Book b ON a.idAuthor = b.author WHERE b.title ilike '%Pride%and%Prejudice%' LIMIT 1;
SELECT b.Title FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name ilike '%Plato%' ORDER BY b.Title NULLS LAST;
SELECT b.Title FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name ilike '%Plato%' ORDER BY b.Title NULLS LAST;
SELECT COUNT(o.idorder) AS number_of_orders FROM orders o JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%';
SELECT COUNT(o.idorder) AS number_of_orders FROM orders o JOIN booksoorder bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%' ;
SELECT DISTINCT o.idorder FROM orders o JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%' AND b.title ilike '%The%Little%Prince%' ORDER BY o.idorder NULLS LAST;
SELECT DISTINCT o.idorder FROM orders o JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%' AND b.title ilike '%The%Little%Prince%' GROUP BY o.idorder HAVING COUNT(DISTINCT b.isbn) = 3;
SELECT DISTINCT b.ISBN FROM Book b JOIN Books_Order bo1 ON b.ISBN = bo1.ISBN JOIN Orders o1 ON bo1.idOrder = o1.IdOrder JOIN Client c1 ON o1.IdClient = c1.IdClient WHERE c1.Name ilike '%Peter%Doe%' JOIN Books_Order bo2 ON b.ISBN = bo2.ISBN JOIN Orders o2 ON bo2.idOrder = o2.IdOrder JOIN Client c2 ON o2.IdClient = c2.IdClient WHERE c2.Name ilike '%James%Smith%' GROUP BY b.ISBN;
SELECT DISTINCT b.ISBN FROM Books_Order bo1 JOIN Books_Order bo2 ON bo1.ISBN = bo2.ISBN JOIN Book b ON bo1.ISBN = b.ISBN JOIN Orders o1 ON bo1.idOrder = o1.IdOrder JOIN Orders o2 ON bo2.idOrder = o2.IdOrder JOIN Client c1 ON o1.IdClient = c1.IdClient JOIN Client c2 ON o2.IdClient = c2.IdClient WHERE c1.Name ilike '%Peter%Doe%' AND c2.Name ilike '%James%Smith%' ORDER BY b.ISBN NULLS LAST;
SELECT DISTINCT b.Title FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' AND NOT EXISTS (SELECT 1 FROM Client WHERE Name = 'James Smith' AND IdClient = o.IdClient) ORDER BY b.Title NULLS LAST;
SELECT DISTINCT b.Title FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.idOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE c.Name = 'Peter Doe' AND NOT EXISTS (SELECT 1 FROM Client WHERE Name = 'James Smith' AND IdClient = o.IdClient) ORDER BY b.Title NULLS LAST;
SELECT c.name FROM Client c JOIN Orders o ON c.idclient = o.idclient JOIN Books_Order bo ON o.idorder = bo.idorder JOIN Book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%' ORDER BY c.name NULLS LAST;
SELECT c.name FROM Client c JOIN Orders o ON c.idclient = o.idclient JOIN Books_Order bo ON o.idorder = bo.idorder JOIN Book b ON bo.isbn = b.isbn WHERE b.title ilike '%Pride%and%Prejudice%' GROUP BY c.name;
SELECT COUNT(b.book_id) FROM book b;
SELECT b.title FROM book b ORDER BY b.title ASC;
SELECT b.title FROM book b ORDER BY b.pages DESC;
SELECT b.type, b.release FROM book b ORDER BY b.type, b.release NULLS LAST;
SELECT b.title, MIN(b.chapters) AS min_chapters, MAX(b.chapters) AS max_chapters FROM book b GROUP BY b.title;
SELECT b.title FROM book b WHERE b.type not ilike '%Poet%';
SELECT AVG(r.Rating) AS Average_Rating FROM review r;
SELECT b.title, r.rating FROM book b JOIN review r ON b.book_id = r.book_id;
SELECT b.title, r.rating FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY b.chapters DESC LIMIT 1;
SELECT b.title, b.pages, rank() OVER (ORDER BY b.pages ASC) AS rank FROM book b ORDER BY rank NULLS LAST;
SELECT b.title FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY r.rank DESC LIMIT 1;
SELECT AVG(r.Readers_in_Million) AS average_readers FROM book b JOIN review r ON b.Book_ID = r.Book_ID WHERE b.Type = 'Novel';
SELECT b.type, COUNT(b.book_id) AS number_of_books FROM book b GROUP BY b.type ORDER BY number_of_books DESC NULLS LAST;
SELECT b.type FROM book b GROUP BY b.type ORDER BY COUNT(b.type) DESC LIMIT 1;
SELECT b.type FROM book b GROUP BY b.type HAVING COUNT(b.book_id) >= 3;
SELECT b.title FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY r.rating ASC;
SELECT b.title, b.audio FROM book b JOIN review r ON b.book_id = r.book_id WHERE r.readers_in_million IS NOT NULL ORDER BY r.readers_in_million DESC;
SELECT COUNT(DISTINCT b.book_id) AS num_books FROM book b LEFT JOIN review r ON b.book_id = r.book_id WHERE r.book_id IS NULL;
SELECT b.type FROM book b WHERE b.chapters > 75 AND b.chapters < 50 GROUP BY b.type;
SELECT COUNT(DISTINCT b.type) FROM book b;
SELECT b.type, b.title FROM book b LEFT JOIN review r ON b.book_id = r.book_id WHERE r.rating IS NULL;
SELECT COUNT(c.customer_id) FROM customer c;
SELECT COUNT(c.customer_id) FROM customer c;
SELECT c.name FROM customer c ORDER BY c.level_of_membership ASC;
SELECT c.name FROM customer c ORDER BY c.level_of_membership ASC;
SELECT c.name, c.nationality, c.card_credit FROM customer c;
SELECT c.name, c.nationality, c.card_credit FROM customer c;
SELECT c.name FROM customer c WHERE c.nationality ilike '%England%' OR c.nationality ilike '%Australia%';
SELECT c.name FROM customer c WHERE c.nationality ilike '%England%' OR c.nationality ilike '%Australia%';
SELECT AVG(c.card_credit) FROM customer c WHERE c.level_of_membership > 1;
SELECT AVG(c.card_credit) FROM customer c WHERE c.level_of_membership > 1;
SELECT c.name, c.card_credit FROM customer c WHERE c.level_of_membership = (SELECT MAX(level_of_membership) FROM customer);
SELECT c.name, c.card_credit FROM customer c ORDER BY c.level_of_membership DESC NULLS LAST LIMIT 1;
SELECT c.nationality, COUNT(c.customer_id) AS number_of_customers FROM customer c GROUP BY c.nationality ORDER BY number_of_customers DESC NULLS LAST;
SELECT c.nationality, COUNT(c.customer_id) AS number_of_customers FROM customer c GROUP BY c.nationality ORDER BY number_of_customers DESC NULLS LAST;
SELECT c.nationality, COUNT(c.nationality) AS COUNT FROM customer c GROUP BY c.nationality ORDER BY COUNT DESC LIMIT 1;
SELECT c.nationality, COUNT(c.customer_id) AS COUNT FROM customer c GROUP BY c.nationality ORDER BY COUNT DESC LIMIT 1;
SELECT c.nationality FROM customer c WHERE c.card_credit < 50 AND c.card_credit > 75 GROUP BY c.nationality;
SELECT c.nationality FROM customer c WHERE c.card_credit > 50 AND c.card_credit < 75 GROUP BY c.nationality;
SELECT c.name, co.dish_name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id;
SELECT c.name, co.dish_name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id;
SELECT c.name, co.dish_name, co.quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id ORDER BY co.quantity DESC;
SELECT c.name, co.dish_name, co.quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id ORDER BY co.quantity DESC;
SELECT c.name, SUM(co.quantity) AS total_quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name ORDER BY total_quantity DESC NULLS LAST;
SELECT c.name, SUM(co.quantity) AS total_quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name ORDER BY total_quantity DESC NULLS LAST;
SELECT c.name, SUM(co.quantity) AS total_quantity FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name HAVING SUM(co.quantity) > 1 ORDER BY total_quantity DESC NULLS LAST;
SELECT c.name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name HAVING SUM(co.quantity) > 1;
SELECT DISTINCT b.manager FROM branch b;
SELECT DISTINCT b.manager FROM branch b;
SELECT c.name FROM customer c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM customer_order co) ORDER BY c.name NULLS LAST;
SELECT c.name FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;
SELECT COUNT(m.member_id) FROM member m;
SELECT m.name FROM member m ORDER BY m.age ASC;
SELECT m.name, m.nationality FROM member m;
SELECT m.name FROM member m WHERE m.nationality not ilike '%England%';
SELECT m.name FROM member m WHERE m.age IN (19, 20);
SELECT m.name FROM member m ORDER BY m.age ASC NULLS LAST LIMIT 1;
SELECT m.nationality, COUNT(m.member_id) AS member_count FROM member m GROUP BY m.nationality ORDER BY member_count DESC NULLS LAST;
SELECT m.nationality FROM member m GROUP BY m.nationality ORDER BY COUNT(m.nationality) DESC LIMIT 1;
SELECT m.nationality FROM member m GROUP BY m.nationality HAVING COUNT(m.member_id) >= 2 ORDER BY m.nationality NULLS LAST;
SELECT m.name AS member_name, c.club_name AS club_name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id JOIN club c ON cl.club_id = c.club_id;
SELECT m.name, c.team_leader FROM member m JOIN club_leader cl ON m.member_id = cl.member_id JOIN club c ON cl.club_id = c.club_id WHERE c.overall_ranking > 100;
SELECT m.name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id WHERE cl.year_join < '2018' ORDER BY m.name NULLS LAST;
SELECT c.team_leader FROM club c WHERE c.club_name ilike '%Houston%';
SELECT m.name FROM member m LEFT JOIN club_leader cl ON m.member_id = cl.member_id WHERE cl.member_id IS NULL;
SELECT m.nationality FROM member m GROUP BY m.nationality HAVING COUNT(CASE WHEN m.age > 22 THEN 1 END) > 0 AND COUNT(CASE WHEN m.age < 19 THEN 1 END) > 0;
SELECT AVG(m.age) AS average_age FROM member m JOIN club_leader cl ON m.member_id = cl.member_id;
SELECT c.club_name FROM club c WHERE c.club_name ilike '%state%' ORDER BY c.club_name NULLS LAST;
SELECT c.collection_name, cs.collection_subset_name FROM collections c JOIN collection_subsets cs ON c.collection_id = cs.collection_id;
SELECT c.Collection_Name, cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collections c ON cs.Collection_Subset_ID = c.Collection_ID;
SELECT cs.Collecrtion_Subset_Details FROM Collection_Subsets cs WHERE cs.Collection_Subset_Name = 'Top collection';
SELECT c.Collection_Name, c.Collection_Description FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Related_Collection_ID = c.Collection_ID WHERE cs.Collection_Subset_Name = 'Top collection';
SELECT d.Document_Subset_Name FROM Document_Subsets d;
SELECT d.document_subset_name FROM document_subsets d;
SELECT d.Document_Subset_Details FROM Document_Subsets d WHERE d.Document_Subset_Name = 'Best for 2000';
SELECT d.document_subset_details FROM document_subsets d WHERE d.document_subset_name ilike '%Best for 2000%';
SELECT d.Document_Object_ID FROM Documents_in_Collections d;
SELECT d.document_object_id FROM document_objects d;
SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin' AND d.Parent_Document_Object_ID IS NOT NULL;
SELECT d.document_object_id FROM document_objects d WHERE d.owner ilike '%Marlin%' ORDER BY d.document_object_id NULLS LAST;
SELECT d.Owner FROM Document_Objects d WHERE d.Description ilike '%Braeden Collection%';
SELECT d.owner FROM Document_Objects d JOIN Documents_in_Collections dc ON d.document_object_id = dc.document_object_id JOIN Collections c ON dc.collection_id = c.collection_id WHERE c.collection_name ilike '%Braeden Collection%' ORDER BY d.owner NULLS LAST;
SELECT d.owner FROM Document_Objects d WHERE d.owner ilike '%Marlin%' AND d.parent_document_object_id IS NOT NULL;
SELECT d.owner AS parent_document_owner FROM Document_Objects d WHERE d.owner ilike '%Marlin%' ORDER BY d.owner NULLS LAST;
SELECT d.description FROM Document_Objects d WHERE d.parent_document_object_id IS NULL;
SELECT d.description FROM Document_Objects d WHERE d.parent_document_object_id IS NULL;
SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Document_Objects d WHERE d.Owner ILIKE '%Marlin%';
SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Document_Objects d WHERE d.Owner ILIKE '%Marlin%';
SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NULL;
SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NULL;
SELECT d.Document_Object_ID, COUNT(d.Document_Object_ID) AS child_count FROM Document_Objects d GROUP BY d.Document_Object_ID ORDER BY child_count DESC NULLS LAST;
SELECT d.Document_Object_ID, COUNT(d.Document_Object_ID) AS child_count, d.Parent_Document_Object_ID FROM Document_Objects d GROUP BY d.Document_Object_ID, d.Parent_Document_Object_ID ORDER BY child_count DESC NULLS LAST;
SELECT c.Collection_Name FROM Collections c ORDER BY c.Collection_Name NULLS LAST;
SELECT c.Collection_Name FROM Collections c;
SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name = 'Best';
SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name ilike '%Best%';
SELECT c.Collection_Name FROM Collections c JOIN Collection_Subsets cs ON c.Collection_ID = cs.Collection_Subset_ID WHERE cs.Collection_Subset_Name = 'Nice';
SELECT c.Collection_Name FROM Collections c WHERE c.Collection_Name ilike '%Nice%' AND c.Parent_Collection_ID IS NOT NULL;
SELECT c.Collection_Name FROM Collections c WHERE c.Collection_ID NOT IN (SELECT p.Collection_ID FROM Collections p) ORDER BY c.Collection_Name NULLS LAST;
SELECT c.Collection_Name FROM Collections c WHERE c.Collection_ID NOT IN (SELECT p.Collection_ID FROM Collections p) ORDER BY c.Collection_Name NULLS LAST;
SELECT d.Document_ID FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT p.Parent_Document_Object_ID FROM Document_Objects p GROUP BY p.Parent_Document_Object_ID HAVING COUNT(p.Document_Object_ID) > 1) ORDER BY d.Document_ID NULLS LAST;
SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT p.Parent_Document_Object_ID FROM Document_Objects p GROUP BY p.Parent_Document_Object_ID HAVING COUNT(p.Document_Object_ID) > 1) ORDER BY d.Document_Object_ID NULLS LAST;
SELECT COUNT(c.Collection_ID) AS number_of_collections FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best');
SELECT COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best');
SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID WHERE d.Owner = 'Ransom' ORDER BY d.Document_Object_ID NULLS LAST;
SELECT d.document_object_id FROM document_objects d JOIN document_subset_members m ON d.document_object_id = m.related_document_object_id WHERE d.owner ilike '%Ransom%' ORDER BY d.document_object_id NULLS LAST;
SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Related_Collection_ID = c.Collection_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name ORDER BY number_of_collections DESC NULLS LAST;
SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Related_Collection_ID = c.Collection_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name ORDER BY number_of_collections DESC NULLS LAST;
SELECT d.Document_Object_ID, COUNT(d.Document_Object_ID) AS child_count FROM Document_Objects d GROUP BY d.Document_Object_ID ORDER BY child_count DESC LIMIT 1;
SELECT d.document_object_id, COUNT(d.document_object_id) AS child_count FROM document_objects d GROUP BY d.document_object_id ORDER BY child_count DESC NULLS LAST;
SELECT d.Document_Object_ID, COUNT(ds.Related_Document_Object_ID) AS related_document_count FROM Documents_in_Collections d JOIN Document_Subset_Members ds ON d.Document_Object_ID = ds.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY related_document_count ASC LIMIT 1;
SELECT d.document_object_id FROM document_objects d ORDER BY COUNT(d.document_object_id) ASC LIMIT 1;
SELECT d.Document_Object_ID, COUNT(ds.Related_Document_Object_ID) AS related_documents FROM Documents_in_Collections dc JOIN Document_Subset_Members ds ON dc.Document_Object_ID = ds.Document_Object_ID GROUP BY d.Document_Object_ID HAVING COUNT(ds.Related_Document_Object_ID) BETWEEN 2 AND 4 ORDER BY related_documents DESC NULLS LAST;
SELECT d.Document_Object_ID, COUNT(DISTINCT ds.Related_Document_Object_ID) AS related_count FROM Documents_in_Collections dc JOIN Document_Subset_Members ds ON dc.Document_Object_ID = ds.Document_Object_ID GROUP BY d.Document_Object_ID HAVING COUNT(DISTINCT ds.Related_Document_Object_ID) BETWEEN 2 AND 4;
SELECT d.Owner FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Related_Document_Object_ID WHERE d.Owner ilike '%Braeden%' ORDER BY d.Owner NULLS LAST;
SELECT DISTINCT d.Owner FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Related_Document_Object_ID WHERE d.Owner != 'Braeden' AND m.Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'));
SELECT d.Document_Subset_Name FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID WHERE d.Owner = 'Braeden' GROUP BY d.Document_Subset_Name;
SELECT d.Document_Name, s.Document_Subset_Name FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID JOIN Document_Subsets s ON m.Document_Subset_ID = s.Document_Subset_ID WHERE d.Owner = 'Braeden' ORDER BY d.Document_Name, s.Document_Subset_Name NULLS LAST;
SELECT d.Document_Subset_ID, d.Document_Subset_Name, COUNT(DISTINCT m.Document_Object_ID) AS number_of_documents FROM Document_Subsets d JOIN Document_Subset_Members m ON d.Document_Subset_ID = m.Document_Subset_ID GROUP BY d.Document_Subset_ID, d.Document_Subset_Name ORDER BY number_of_documents DESC NULLS LAST;
SELECT d.Document_Subset_ID, d.Document_Subset_Name, COUNT(DISTINCT m.Document_Object_ID) AS number_of_documents FROM Document_Subsets d JOIN Document_Subset_Members m ON d.Document_Subset_ID = m.Document_Subset_ID GROUP BY d.Document_Subset_ID, d.Document_Subset_Name ORDER BY number_of_documents DESC NULLS LAST;
SELECT d.Document_Subset_ID, d.Document_Subset_Name, COUNT(DISTINCT m.Document_Object_ID) AS num_documents FROM Document_Subsets d JOIN Document_Subset_Members m ON d.Document_Subset_ID = m.Document_Subset_ID GROUP BY d.Document_Subset_ID, d.Document_Subset_Name ORDER BY num_documents DESC LIMIT 1;
SELECT d.Document_Subset_ID, d.Document_Subset_Name, COUNT(DISTINCT m.Document_Object_ID) AS num_documents FROM Document_Subsets d JOIN Document_Subset_Members m ON d.Document_Subset_ID = m.Document_Subset_ID GROUP BY d.Document_Subset_ID, d.Document_Subset_Name ORDER BY num_documents DESC LIMIT 1;
SELECT d.Document_ID FROM Document_Subsets s JOIN Document_Subset_Members m ON s.Document_Subset_ID = m.Document_Subset_ID JOIN Document_Objects d ON m.Document_Object_ID = d.Document_Object_ID WHERE s.Document_Subset_Name = 'Best for 2000';
SELECT d.Document_ID FROM Document_Subsets s JOIN Document_Subset_Members m ON s.Document_Subset_ID = m.Document_Subset_ID JOIN Document_Objects d ON m.Document_Object_ID = d.Document_Object_ID WHERE s.Document_Subset_Name = 'Best for 2000';
SELECT d.Document_ID, ds.Document_Subset_Name FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID JOIN Document_Objects d ON dsm.Document_Object_ID = d.Document_Object_ID;
SELECT d.Document_Object_ID, ds.Document_Subset_Name FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID JOIN Document_Objects d ON dsm.Related_Document_Object_ID = d.Document_Object_ID;
SELECT c.Collection_Name FROM Document_Objects d JOIN Documents_in_Collections di ON d.Document_Object_ID = di.Document_Object_ID JOIN Collections c ON di.Collection_ID = c.Collection_ID WHERE d.Owner ilike '%Ransom%' ORDER BY c.Collection_Name NULLS LAST;
SELECT c.Collection_Name FROM Document_Objects d JOIN Documents_in_Collections di ON d.Document_Object_ID = di.Document_Object_ID JOIN Collections c ON di.Collection_ID = c.Collection_ID WHERE d.Owner = 'Ransom';
SELECT d.Document_Object_ID, COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Document_Objects d JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID JOIN Collections c ON dc.Collection_ID = c.Collection_ID GROUP BY d.Document_Object_ID ORDER BY number_of_collections DESC NULLS LAST;
SELECT d.document_object_id, COUNT(DISTINCT c.collection_id) AS number_of_collections FROM document_objects d JOIN documents_in_collections e ON d.document_object_id = e.document_object_id JOIN collections c ON e.collection_id = c.collection_id GROUP BY d.document_object_id ORDER BY number_of_collections DESC NULLS LAST;
SELECT COUNT(DISTINCT d.Document_Object_ID) AS number_of_documents FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(DISTINCT d.Document_Object_ID) AS number_of_documents FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT d.Document_Object_ID FROM Documents_in_Collections dc JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(DISTINCT d.document_object_id) AS number_of_document_object_ids FROM documents_in_collections d JOIN collections c ON d.collection_id = c.collection_id WHERE c.collection_name = 'Best';
SELECT c.Collection_Name, c.Collection_ID, COUNT(d.Document_Object_ID) AS Document_Count FROM Collections c JOIN Documents_in_Collections d ON c.Collection_ID = d.Collection_ID GROUP BY c.Collection_Name, c.Collection_ID ORDER BY Document_Count DESC LIMIT 1;
SELECT c.Collection_Name, c.Collection_ID, COUNT(d.Document_Object_ID) AS Document_Count FROM Collections c JOIN Documents_in_Collections d ON c.Collection_ID = d.Collection_ID WHERE c.Collection_Name = 'Best' GROUP BY c.Collection_Name, c.Collection_ID ORDER BY Document_Count DESC LIMIT 1;
SELECT d.Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID JOIN Collection_Subset_Members csem ON dsm.Related_Document_Object_ID = csem.Collection_ID JOIN Collections c ON csem.Collection_ID = c.Collection_ID WHERE ds.Document_Subset_Name = 'Best' AND c.Collection_Name = 'Best' AND EXTRACT(YEAR FROM d.Creation_Date) = 2000;
SELECT DISTINCT d.document_object_id FROM document_subsets dsm JOIN document_subset_members dm ON dsm.document_subset_id = dm.document_subset_id JOIN documents_in_collections dic ON dm.related_document_object_id = dic.document_object_id JOIN collections c ON dic.collection_id = c.collection_id WHERE dsm.document_subset_name = 'Best for 2000' AND c.collection_name = 'Best';
SELECT d.Document_Object_ID FROM Documents_in_Collections dc JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND dc.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best')) AND EXTRACT(YEAR FROM d.Creation_Date) = 2000;
SELECT d.document_object_id FROM documents_in_collections d JOIN collections c ON d.collection_id = c.collection_id WHERE c.collection_name = 'Best' AND d.document_object_id NOT IN (SELECT m.related_document_object_id FROM document_subset_members m JOIN document_subsets s ON m.document_subset_id = s.document_subset_id WHERE s.document_subset_name = 'Best for 2000') ORDER BY d.document_object_id NULLS LAST;
SELECT d.Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best' OR EXISTS (SELECT 1 FROM Collections c JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID WHERE c.Collection_Name = 'Best') AND EXTRACT(YEAR FROM to_date(d.Description, 'YYYY')) = 2000;
SELECT DISTINCT d.Document_Object_ID FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects d ON dsm.Related_Document_Object_ID = d.Document_Object_ID WHERE ds.Document_Subset_Name = 'Best for 2000' OR ds.Document_Subset_Name = 'Best' ORDER BY d.Document_Object_ID NULLS LAST;
SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best') ORDER BY c.Collection_Name NULLS LAST;
SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name ilike '%Best%') ORDER BY c.Collection_Name NULLS LAST;
SELECT COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name ILIKE '%Best%');
SELECT COUNT(DISTINCT c.Collection_ID) AS number_of_collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Related_Collection_ID = c.Collection_ID WHERE cs.Collection_Subset_Name = 'Best';
SELECT c.Collection_Name, cs.Collection_Subset_Name FROM Collections c JOIN Collection_Subsets cs ON c.Collection_ID = cs.Collection_ID WHERE c.Collection_Name ilike '%Best%' ORDER BY c.Collection_Name NULLS LAST;
SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Related_Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(s.id) FROM songs s WHERE s.name ilike '%Love%';
SELECT s.name FROM songs s ORDER BY s.name ASC;
SELECT s.name, s.language FROM songs s;
SELECT MAX(ps.voice_sound_quality) AS max_voice_sound_quality, MIN(ps.voice_sound_quality) AS min_voice_sound_quality FROM performance_score ps;
SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE p.name ilike '%Freeway%';
SELECT s.id, s.language, s.original_artist FROM songs s WHERE s.name not ilike '%Love%';
SELECT s.name, s.original_artist FROM songs s WHERE s.english_translation ilike '%All the streets of love%';
SELECT DISTINCT p.stage_presence FROM songs s JOIN performance_score p ON s.id = p.songs_id WHERE s.language = 'English';
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name HAVING COUNT(ps.songs_id) >= 2 ORDER BY p.name NULLS LAST;
SELECT p.id, p.name, p.popularity, COUNT(ps.songs_id) AS song_count FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name, p.popularity ORDER BY song_count DESC;
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5;
SELECT ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English';
SELECT s.id, s.name FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY COUNT(ps.participant_id) DESC LIMIT 1;
SELECT COUNT(*) FROM performance_score ps WHERE (ps.stage_presence < 7 OR ps.stage_presence > 9);
SELECT COUNT(DISTINCT s.id) AS unperformed_songs FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.participant_id IS NULL;
SELECT s.language, AVG(ps.rhythm_tempo) AS average_rhythm_tempo FROM `songs` s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.language ORDER BY average_rhythm_tempo DESC NULLS LAST;
SELECT DISTINCT p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English';
SELECT p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language IN ('Croatian', 'English') GROUP BY p.name, p.popularity HAVING COUNT(DISTINCT s.language) = 2 ORDER BY p.popularity DESC NULLS LAST;
SELECT s.name FROM songs s WHERE s.name ilike '%Is%';
SELECT s.original_artist, p.name, ps.voice_sound_quality, ps.rhythm_tempo FROM songs s JOIN participants p ON s.id = p.id JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC;
SELECT COUNT(c.city_code) FROM City c;
SELECT COUNT(c.city_code) FROM City c;
SELECT DISTINCT c.state FROM City c;
SELECT DISTINCT c.state FROM City c;
SELECT COUNT(DISTINCT c.country) FROM City c;
SELECT COUNT(DISTINCT c.country) FROM City c;
SELECT c.city_name, c.city_code, c.state, c.country FROM City c;
SELECT c.city_name, c.city_code, c.state, c.country FROM City c;
SELECT c.latitude, c.longitude FROM City c WHERE c.city_name ilike '%Baltimore%';
SELECT c.latitude, c.longitude FROM City c WHERE c.city_name ilike '%Baltimore%';
SELECT c.city_name FROM City c WHERE c.state = 'PA';
SELECT c.city_name FROM City c WHERE c.state = 'PA';
SELECT COUNT(*) FROM City WHERE country ILIKE '%Canada%';
SELECT COUNT(*) FROM City WHERE country = 'Canada';
SELECT c.city_name, c.latitude FROM City c WHERE c.country = 'USA' ORDER BY c.latitude NULLS LAST;
SELECT c.city_name, c.latitude FROM City c WHERE c.country = 'United States' ORDER BY c.latitude NULLS LAST;
SELECT c.state, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.state ORDER BY city_count DESC NULLS LAST;
SELECT c.state, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.state ORDER BY city_count DESC NULLS LAST;
SELECT c.country, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.country ORDER BY city_count DESC NULLS LAST;
SELECT c.country, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.country ORDER BY city_count DESC NULLS LAST;
SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) >= 2;
SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) >= 2;
SELECT c.state, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.state ORDER BY city_count DESC LIMIT 1;
SELECT c.state, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.state ORDER BY city_count DESC LIMIT 1;
SELECT c.country, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.country ORDER BY city_count ASC LIMIT 1;
SELECT c.country, COUNT(c.city_code) AS city_count FROM City c GROUP BY c.country ORDER BY city_count ASC LIMIT 1;
SELECT s.fname, s.lname FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.state = 'MD';
SELECT s.fname, s.lname FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.state = 'MD';
SELECT COUNT(s.StuID) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China';
SELECT COUNT(s.StuID) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China';
SELECT s.fname, s.major FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.city_name = 'Baltimore';
SELECT s.fname, s.major FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.city_name = 'Baltimore';
SELECT c.country, COUNT(s.stu_id) AS number_of_students FROM student s JOIN city c ON s.city_code = c.city_code GROUP BY c.country ORDER BY number_of_students DESC NULLS LAST;
SELECT c.country, COUNT(s.stu_id) AS number_of_students FROM student s JOIN city c ON s.city_code = c.city_code GROUP BY c.country ORDER BY number_of_students DESC NULLS LAST;
SELECT c.city_name, COUNT(s.stu_id) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.city_name ORDER BY number_of_students DESC NULLS LAST;
SELECT c.city_name, COUNT(s.stu_id) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.city_name ORDER BY number_of_students DESC NULLS LAST;
SELECT c.state, COUNT(s.stu_id) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state ORDER BY total_students DESC LIMIT 1;
SELECT c.state, COUNT(s.stu_id) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state ORDER BY number_of_students DESC LIMIT 1;
SELECT c.country, COUNT(s.stu_id) AS number_of_students FROM student s JOIN city c ON s.city_code = c.city_code GROUP BY c.country ORDER BY number_of_students ASC LIMIT 1;
SELECT c.country, COUNT(s.stu_id) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY number_of_students ASC LIMIT 1;
SELECT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.stu_id) >= 3;
SELECT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.stu_id) >= 3;
SELECT c.state, COUNT(s.stu_id) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state HAVING COUNT(s.stu_id) > 5 ORDER BY total_students DESC NULLS LAST;
SELECT c.state, COUNT(s.stu_id) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state HAVING COUNT(s.stu_id) > 5 ORDER BY number_of_students DESC NULLS LAST;
SELECT s.stu_id FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.country != 'United States';
SELECT s.stu_id FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.country != 'United States';
SELECT s.stu_id FROM student s JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'F' AND c.state = 'PA';
SELECT s.stu_id FROM student s JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'F' AND c.state = 'PA';
SELECT s.stu_id FROM student s JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'M' AND c.country != 'United States';
SELECT s.stu_id FROM student s JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'M' AND c.country != 'United States';
SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI';
SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI';
SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BOS' AND d.city2_code = 'NJK';
SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BOS' AND d.city2_code = 'NJK';
SELECT AVG(d.distance) AS average_distance, MIN(d.distance) AS minimum_distance, MAX(d.distance) AS maximum_distance FROM Direct_distance d;
SELECT AVG(d.distance) AS average_distance, MIN(d.distance) AS minimum_distance, MAX(d.distance) AS maximum_distance FROM Direct_distance d;
SELECT d.city1_code, d.city2_code, d.distance FROM Direct_distance d ORDER BY d.distance DESC NULLS LAST LIMIT 2;
SELECT d.city1_code, d.city2_code, d.distance FROM Direct_distance d ORDER BY d.distance DESC LIMIT 2;
SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance > (SELECT AVG(d.distance) FROM Direct_distance) ORDER BY d.distance DESC NULLS LAST LIMIT 2;
SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance > (SELECT AVG(d.distance) FROM Direct_distance);
SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance < 1000;
SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance < 1000;
SELECT SUM(d.distance) AS total_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%BAL%' JOIN City c2 ON d.city2_code = c2.city_code;
SELECT SUM(d.distance) AS total_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%BAL%' JOIN City c2 ON d.city2_code = c2.city_code AND c2.city_name NOT ILIKE '%BAL%';
SELECT AVG(d.distance) AS average_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%Boston%' JOIN City c2 ON d.city2_code = c2.city_code;
SELECT AVG(d.distance) AS average_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code AND c1.city_name ILIKE '%Boston%' JOIN City c2 ON d.city2_code = c2.city_code;
SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = 'CHI' ORDER BY d.distance ASC LIMIT 1;
SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = 'CHI' ORDER BY d.distance ASC LIMIT 1;
SELECT c.city_name, d.distance FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = 'BOS' ORDER BY d.distance DESC LIMIT 1;
SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE c.city_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY d.distance DESC LIMIT 1;
SELECT c.city_code, SUM(d.distance) AS total_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_code ORDER BY total_distance DESC NULLS LAST;
SELECT c.city_code, SUM(d.distance) AS total_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_code ORDER BY total_distance DESC NULLS LAST;
SELECT c.city_name, AVG(d.distance) AS average_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_name ORDER BY average_distance NULLS LAST;
SELECT c.city_name, AVG(d.distance) AS average_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_name ORDER BY average_distance DESC NULLS LAST;
SELECT d.distance FROM Student s1 JOIN Student s2 ON s1.city_code = s2.city_code JOIN Direct_distance d ON s1.city_code = d.city1_code AND s2.city_code = d.city2_code WHERE s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim';
SELECT d.distance FROM Student s1 JOIN Student s2 ON s1.city_code = s2.city_code JOIN Direct_distance d ON s1.city_code = d.city1_code AND s2.city_code = d.city2_code WHERE s1.fname = 'Linda' AND s2.fname = 'Tracy' ;
SELECT s.fname, s.lname FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code WHERE s.fname = 'Linda' AND s.lname = 'Smith' ORDER BY d.distance DESC LIMIT 1;
SELECT s.fname, s.lname, d.distance FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code WHERE s.fname = 'Linda' AND s.lname = 'Smith' ORDER BY d.distance DESC LIMIT 1;
SELECT s.state FROM Student s WHERE s.fname = 'Linda';
SELECT c.state FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.fname = 'Linda';
SELECT s.sid, s.name, s.rating, s.age FROM Sailors s WHERE s.age > 30;
SELECT s.name, s.age, s.rating FROM Sailors s WHERE s.age > 30 ORDER BY s.age NULLS LAST;
SELECT s.name, s.age FROM Sailors s WHERE s.age < 30;
SELECT s.name, s.age FROM Sailors s WHERE s.age < 30;
SELECT b.name, b.color FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = 1;
SELECT DISTINCT r.bid FROM Reserves r WHERE r.sid = 1;
SELECT s.name FROM Reserves r JOIN Sailors s ON r.sid = s.sid WHERE r.bid = 102;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102;
SELECT DISTINCT r.bid FROM Reserves r;
SELECT DISTINCT r.bid FROM Reserves r;
SELECT s.name FROM Sailors s WHERE s.name ilike '%e%';
SELECT s.name FROM Sailors s WHERE s.name ilike '%e%';
SELECT s.sid FROM Sailors s WHERE s.age > (SELECT MAX(s2.age) FROM Sailors s2);
SELECT s.sid, s.name, s.age FROM Sailors s WHERE s.age != (SELECT MIN(s2.age) FROM Sailors s2);
SELECT s.name FROM Sailors s WHERE s.age > (SELECT MAX(s2.age) FROM Sailors s2 WHERE s2.rating > 7);
SELECT s.name FROM Sailors s WHERE s.age > (SELECT AVG(s2.age) FROM Sailors s2 WHERE s2.rating > 7);
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name, s.sid HAVING COUNT(r.bid) >= 1 ORDER BY s.name NULLS LAST;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name, s.sid HAVING COUNT(r.bid) >= 1 ORDER BY s.name NULLS LAST;
SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid, s.name HAVING COUNT(r.bid) > 1;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name HAVING COUNT(r.bid) >= 2;
SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') ORDER BY s.sid NULLS LAST;
SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') ORDER BY s.name NULLS LAST;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') ORDER BY s.name NULLS LAST;
SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');
SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') ORDER BY s.sid NULLS LAST;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') ORDER BY s.name NULLS LAST;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') ORDER BY s.name NULLS LAST;
SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.name, s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.name, s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name ILIKE '%Luis%'); NULLS LAST;
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name ILIKE '%Luis%'); ORDER BY s.name NULLS LAST;
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name ILIKE '%Luis%'); ORDER BY s.name NULLS LAST;
SELECT s.name FROM Sailors s WHERE s.name ilike '%Luis%' AND s.rating < (SELECT AVG(s2.rating) FROM Sailors s2 WHERE s2.name ilike '%Luis%');
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating > 2;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating >= 3;
SELECT s.name, s.age FROM Sailors s ORDER BY s.age ASC NULLS LAST LIMIT 1;
SELECT s.name, s.age FROM Sailors s ORDER BY s.age DESC NULLS LAST LIMIT 1;
SELECT COUNT(s.sid) AS total_sailors FROM Sailors s;
SELECT COUNT(s.sid) FROM Sailors s;
SELECT AVG(s.age) FROM Sailors s WHERE s.rating = 7;
SELECT AVG(s.age) FROM Sailors s WHERE s.rating = 7;
SELECT COUNT(*) FROM Sailors s WHERE s.name ilike 'D%';
SELECT COUNT(*) FROM Sailors s WHERE s.name ilike 'D%';
SELECT AVG(s.rating) AS average_rating, MAX(s.age) AS max_age FROM Sailors s;
SELECT AVG(s.rating) AS average_rating, MAX(s.age) AS maximum_age FROM Sailors s;
SELECT b.name, COUNT(r.bid) AS number_of_reserves FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;
SELECT b.name, COUNT(r.sid) AS number_of_reserves FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;
SELECT b.name, COUNT(r.bid) AS number_of_reserves FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE b.bid > 50 GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;
SELECT b.name, COUNT(r.sid) AS number_of_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE b.bid > 50 GROUP BY b.name ORDER BY number_of_reservations DESC NULLS LAST;
SELECT b.name, COUNT(r.sid) AS number_of_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name HAVING COUNT(r.sid) > 1 ORDER BY number_of_reservations DESC NULLS LAST;
SELECT b.name, COUNT(r.sid) AS number_of_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name HAVING COUNT(r.sid) > 1 ORDER BY number_of_reservations DESC NULLS LAST;
SELECT b.name AS boat_name, COUNT(r.sid) AS number_of_reserves FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid > 1 GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;
SELECT b.name AS boat_name, COUNT(r.sid) AS number_of_reserves FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid > 1 GROUP BY b.name ORDER BY number_of_reserves DESC NULLS LAST;
SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating DESC, s.age ASC;
SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating DESC, s.age ASC;
SELECT COUNT(b.bid) AS total_boats FROM Boats b;
SELECT COUNT(b.bid) FROM Boats b;
SELECT COUNT(*) FROM Boats b WHERE b.color ilike '%red%';
SELECT COUNT(*) FROM Boats b WHERE b.color ilike '%red%';
SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30;
SELECT b.name AS boat_name, to_char(to_date(r.day, 'YYYY-MM-DD'), 'Month DD, YYYY') AS reserve_date FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE to_number(to_char(to_date(r.day, 'YYYY-MM-DD'), 'YYYY'), '9999') >= 2020 AND to_number(to_char(to_date(r.day, 'YYYY-MM-DD'), 'YYYY'), '9999') <= 2030;
SELECT s.name, s.rating FROM Sailors s WHERE s.rating > (SELECT AVG(s2.rating) FROM Sailors s2 JOIN Reserves r ON s2.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red');
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT AVG(s2.rating) FROM Sailors s2 JOIN Reserves r ON s2.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red');
SELECT MAX(s.rating) AS highest_rating FROM Sailors s;
SELECT MAX(s.rating) AS maximum_rating FROM Sailors s;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name ilike '%Melon%' ORDER BY s.name NULLS LAST;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name ilike '%Melon%' ORDER BY s.name NULLS LAST;
SELECT s.name, s.age, s.rating FROM Sailors s ORDER BY s.rating DESC;
SELECT s.name, s.age, s.rating FROM Sailors s ORDER BY s.rating DESC;
SELECT h.model FROM headphone h ORDER BY h.price DESC NULLS LAST LIMIT 1;
SELECT h.model FROM headphone h ORDER BY h.price DESC NULLS LAST LIMIT 1;
SELECT DISTINCT h.model FROM headphone h ORDER BY h.model ASC;
SELECT DISTINCT h.model FROM headphone h ORDER BY h.model ASC;
SELECT h.class, COUNT(h.class) AS COUNT FROM headphone h GROUP BY h.class ORDER BY COUNT DESC LIMIT 1;
SELECT h.class, SUM(s.quantity) AS total_quantity FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.class ORDER BY total_quantity DESC LIMIT 1;
SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.headphone_id) > 2;
SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.headphone_id) <= 2;
SELECT h.class, COUNT(*) FROM headphone h WHERE h.price > 200 GROUP BY h.class ORDER BY COUNT(*) DESC NULLS LAST;
SELECT h.class, COUNT(*) FROM headphone h WHERE h.price > 200 GROUP BY h.class ORDER BY COUNT(*) DESC NULLS LAST;
SELECT COUNT(DISTINCT h.earpads) FROM headphone h;
SELECT COUNT(DISTINCT h.earpads) FROM headphone h;
SELECT h.earpads, COUNT(h.earpads) AS COUNT FROM headphone h GROUP BY h.earpads ORDER BY COUNT DESC NULLS LAST LIMIT 2;
SELECT h.earpads, COUNT(h.earpads) AS COUNT FROM headphone h GROUP BY h.earpads ORDER BY COUNT DESC NULLS LAST LIMIT 2;
SELECT h.model, h.class, h.construction FROM headphone h ORDER BY h.price ASC LIMIT 1;
SELECT h.model, h.class, h.construction FROM headphone h ORDER BY h.price ASC LIMIT 1;
SELECT h.construction, AVG(h.price) AS average_price FROM headphone h GROUP BY h.construction ORDER BY average_price DESC NULLS LAST;
SELECT h.construction, AVG(h.price) AS average_price FROM headphone h GROUP BY h.construction ORDER BY average_price DESC NULLS LAST;
SELECT h.class FROM headphone h WHERE h.earpads ilike '%Bowls%' AND h.earpads ilike '%Comfort Pads%' GROUP BY h.class;
SELECT h.class FROM headphone h WHERE h.earpads ilike '%Bowls%' AND h.class ilike '%Comfort Pads%' ORDER BY h.class NULLS LAST;
SELECT h.Earpads FROM headphone h WHERE h.Construction not ilike '%plastic%' ORDER BY h.Earpads NULLS LAST;
SELECT h.model, h.earpads FROM headphone h WHERE h.construction not ilike '%plastic%' AND h.earpads IS NOT NULL;
SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);
SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);
SELECT s.name FROM store s ORDER BY s.date_opened NULLS LAST;
SELECT s.name FROM store s ORDER BY s.date_opened NULLS LAST;
SELECT s.name, s.parking FROM store s WHERE s.neighborhood ilike '%Tarzana%' ORDER BY s.name NULLS LAST;
SELECT s.name, s.parking FROM store s WHERE s.neighborhood ilike '%Tarzana%' ORDER BY s.name NULLS LAST;
SELECT COUNT(DISTINCT s.neighborhood) AS number_of_neighborhoods FROM store s;
SELECT COUNT(DISTINCT s.neighborhood) FROM store s;
SELECT s.neighborhood, COUNT(s.store_id) AS number_of_stores FROM store s GROUP BY s.neighborhood ORDER BY number_of_stores DESC NULLS LAST;
SELECT s.neighborhood, COUNT(s.store_id) AS number_of_stores FROM store s GROUP BY s.neighborhood ORDER BY number_of_stores DESC NULLS LAST;
SELECT s.name, SUM(st.quantity) AS total_quantity FROM stock st JOIN store s ON st.store_id = s.store_id GROUP BY s.name ORDER BY total_quantity DESC LIMIT 1;
SELECT s.name, SUM(st.quantity) AS total_quantity FROM stock st JOIN store s ON st.store_id = s.store_id GROUP BY s.name ORDER BY total_quantity DESC NULLS LAST;
SELECT s.name FROM store s LEFT JOIN stock st ON s.store_id = st.store_id AND st.quantity > 0 WHERE st.store_id IS NULL;
SELECT s.name FROM store s LEFT JOIN stock st ON s.store_id = st.store_id AND st.quantity > 0 WHERE st.store_id IS NULL ORDER BY s.name NULLS LAST;
SELECT h.model FROM headphone h WHERE h.headphone_id NOT IN (SELECT s.headphone_id FROM stock s) ORDER BY h.model NULLS LAST;
SELECT h.model FROM headphone h WHERE h.headphone_id NOT IN (SELECT s.headphone_id FROM stock s) ORDER BY h.model NULLS LAST;
SELECT h.model, SUM(s.quantity) AS total_quantity FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.model ORDER BY total_quantity DESC LIMIT 1;
SELECT h.model, SUM(s.quantity) AS total_quantity FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.model ORDER BY total_quantity DESC LIMIT 1;
SELECT SUM(s.Quantity) AS total_headphones FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE st.Name = 'Woodman';
SELECT SUM(s.Quantity) AS total_quantity FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE st.Name = 'Woodman';
SELECT s.neighborhood FROM store s LEFT JOIN stock st ON s.store_id = st.store_id AND st.quantity > 0 WHERE st.store_id IS NULL ORDER BY s.neighborhood NULLS LAST;
SELECT s.neighborhood FROM store s WHERE s.store_id NOT IN (SELECT st.store_id FROM stock st) ORDER BY s.neighborhood NULLS LAST;
SELECT COUNT(DISTINCT a.author_id) AS number_of_authors FROM Author a;
SELECT COUNT(DISTINCT a.author_id) AS number_of_authors FROM Author a;
SELECT COUNT(p.paper_id) FROM Paper p;
SELECT COUNT(p.paper_id) AS number_of_papers FROM Paper p;
SELECT COUNT(DISTINCT a.affiliation_id) AS number_of_affiliations FROM Affiliation a;
SELECT COUNT(DISTINCT a.affiliation_id) AS number_of_affiliations FROM Affiliation a;
SELECT COUNT(p.paper_id) FROM Paper p WHERE p.venue = 'NAACL 2000';
SELECT COUNT(p.paper_id) FROM Paper p WHERE p.venue = 'NAACL 2000';
SELECT COUNT(p.paper_id) AS number_of_papers FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.year = 2009 AND a.name = 'Columbia University';
SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year = 2009;
SELECT a.name, a.address FROM Affiliation a;
SELECT a.name, a.address FROM Affiliation a;
SELECT p.venue, p.year FROM Paper p ORDER BY p.year NULLS LAST;
SELECT DISTINCT p.venue, p.year FROM Paper p ORDER BY p.year NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id JOIN Affiliation a2 ON a.affiliation_id = a2.affiliation_id WHERE a2.name = 'Harvard University';
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id JOIN Affiliation a2 ON a.affiliation_id = a2.affiliation_id WHERE a2.name = 'Harvard University';
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id JOIN Author a2 ON a.author_id = a2.author_id WHERE a2.name = 'Mckeown';
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id JOIN Author a2 ON a.author_id = a2.author_id WHERE a2.name ILIKE '%Mckeown%' ORDER BY p.title NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name IN ('Stanford University', 'Columbia University') ORDER BY p.title NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id JOIN Affiliation af ON a.affiliation_id = af.affiliation_id WHERE af.name IN ('Stanford University', 'Columbia University') GROUP BY p.title, p.paper_id HAVING COUNT(DISTINCT af.affiliation_id) >= 2;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name IN ('Mckeown, Kathleen', 'Rambow, Owen') ORDER BY p.title NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ilike '%Mckeown%' OR a.name ilike '%Kathleen%' OR a.name ilike '%Rambow%' OR a.name ilike '%Owen%' GROUP BY p.title, p.paper_id;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ILIKE '%Mckeown%' AND a.name NOT ILIKE '%Rambow%' ORDER BY p.title NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' AND a.name not ilike '%Rambow%' ORDER BY p.title NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ilike '%Mckeown%' OR a.name ilike '%Kathleen%' OR a.name ilike '%Rambow%' OR a.name ilike '%Owen%' ORDER BY p.title NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ilike '%Mckeown%' OR a.name ilike '%Kathleen%' OR a.name ilike '%Rambow%' OR a.name ilike '%Owen%' ORDER BY p.title NULLS LAST;
SELECT a.name, COUNT(al.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name ORDER BY paper_count DESC;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.name ORDER BY paper_count DESC;
SELECT a.affiliation_id, a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id, a.name ORDER BY paper_count ASC;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.name ORDER BY paper_count DESC;
SELECT a.name, COUNT(al.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) > 50 ORDER BY paper_count DESC NULLS LAST;
SELECT a.name FROM Author a JOIN (SELECT al.author_id FROM Author_list al GROUP BY al.author_id HAVING COUNT(al.paper_id) > 50) AS subquery ON a.author_id = subquery.author_id;
SELECT a.name FROM Author a JOIN (SELECT al.author_id FROM Author_list al GROUP BY al.author_id HAVING COUNT(al.paper_id) = 1) AS subquery ON a.author_id = subquery.author_id;
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) = 1;
SELECT p.venue, p.year, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue, p.year ORDER BY publication_count DESC LIMIT 1;
SELECT p.venue, p.year, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue, p.year ORDER BY publication_count DESC LIMIT 1;
SELECT p.venue, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue ORDER BY publication_count ASC LIMIT 1;
SELECT p.venue, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue ORDER BY publication_count ASC LIMIT 1;
SELECT COUNT(DISTINCT c.paper_id) AS number_of_papers FROM Citation c WHERE c.cited_paper_id = 'A00-1002';
SELECT COUNT(DISTINCT c.paper_id) AS number_of_papers FROM Citation c WHERE c.cited_paper_id = 'A00-1002';
SELECT COUNT(c.cited_paper_id) AS number_of_cited_papers FROM Citation c WHERE c.paper_id = 'D12-1027';
SELECT COUNT(c.cited_paper_id) AS number_of_references FROM Citation c WHERE c.paper_id = 'D12-1027';
SELECT p.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 1;
SELECT p.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 1;
SELECT p.title, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.title ORDER BY citation_count DESC LIMIT 1;
SELECT p.title, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.title ORDER BY citation_count DESC LIMIT 1;
SELECT p.title, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.title ORDER BY citation_count DESC LIMIT 10;
SELECT p.title, c.cited_paper_id, COUNT(c.paper_id) AS citation_count FROM Citation c JOIN Paper p ON c.cited_paper_id = p.paper_id GROUP BY p.title, c.cited_paper_id ORDER BY citation_count DESC LIMIT 10;
SELECT COUNT(c.cited_paper_id) AS number_of_citations FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Citation c ON al.paper_id = c.paper_id WHERE a.name ilike '%Mckeown%Kathleen%';
SELECT COUNT(c.cited_paper_id) AS number_of_citations FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ilike '%Mckeown%Kathleen%';
SELECT COUNT(DISTINCT c.cited_paper_id) AS number_of_papers FROM Citation c JOIN Author_list a ON c.paper_id = a.paper_id AND c.cited_paper_id = a.author_id JOIN Author a2 ON a.author_id = a2.author_id WHERE a2.name ilike '%Mckeown%Kathleen%';
SELECT COUNT(DISTINCT c.cited_paper_id) AS number_of_papers FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id AND c.cited_paper_id = al.author_id JOIN Author a ON al.author_id = a.author_id WHERE a.name ilike '%Mckeown%Kathleen%' ;
SELECT a.name, COUNT(c.paper_id) AS citation_count FROM Author a JOIN Citation c ON a.author_id = c.cited_paper_id GROUP BY a.name ORDER BY citation_count DESC LIMIT 1;
SELECT a.name, COUNT(c.paper_id) AS citation_count FROM Author a JOIN Citation c ON a.author_id = c.cited_paper_id GROUP BY a.name ORDER BY citation_count DESC LIMIT 1;
SELECT DISTINCT p.venue, p.year FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id WHERE a.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown%Kathleen%') ORDER BY p.venue, p.year NULLS LAST;
SELECT DISTINCT p.venue, p.year FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id JOIN Author a2 ON a.author_id = a2.author_id WHERE a2.name ilike '%Mckeown%' AND a2.name ilike '%Kathleen%' ORDER BY p.venue, p.year NULLS LAST;
SELECT DISTINCT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' ORDER BY p.venue, p.year NULLS LAST;
SELECT DISTINCT p.venue, p.year FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id JOIN Affiliation a2 ON a.affiliation_id = a2.affiliation_id WHERE a2.name = 'Columbia University' ORDER BY p.venue, p.year NULLS LAST;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC LIMIT 1;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC LIMIT 1;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC NULLS LAST LIMIT 3;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC NULLS LAST LIMIT 3;
SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id JOIN Affiliation a2 ON a.affiliation_id = a2.affiliation_id WHERE a2.name = 'Columbia University' AND p.year <= 2009;
SELECT COUNT(p.paper_id) AS number_of_papers FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND (p.year >= 2009 OR p.year IS NULL);
SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009;
SELECT COUNT(p.paper_id) AS number_of_papers FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id JOIN Affiliation a2 ON a.affiliation_id = a2.affiliation_id WHERE a2.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009;
SELECT p.title, COUNT(a.author_id) AS author_count FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id GROUP BY p.title ORDER BY author_count DESC LIMIT 1;
SELECT p.title, COUNT(a.author_id) AS author_count FROM Paper p JOIN Author_list a ON p.paper_id = a.paper_id GROUP BY p.title ORDER BY author_count DESC LIMIT 1;
SELECT COUNT(DISTINCT a.author_id) AS number_of_collaborators FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%') GROUP BY al.paper_id HAVING COUNT(DISTINCT al.author_id) > 1; -- Assuming that the authors are co-authors of at least one paper.
SELECT COUNT(DISTINCT a.author_id) AS number_of_collaborators FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%') GROUP BY al.paper_id HAVING COUNT(DISTINCT a.author_id) > 1; -- Assuming that the paper title contains the authors' names.
SELECT a.name, COUNT(p.paper_id) AS co_author_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE a.name ilike '%Mckeown%Kathleen%' GROUP BY a.name ORDER BY co_author_count DESC LIMIT 1;
SELECT a.name, COUNT(al.paper_id) AS co_author_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.title ilike '%Mckeown%Kathleen%' GROUP BY a.name ORDER BY co_author_count DESC LIMIT 1;
SELECT p.paper_id FROM Paper p WHERE p.title ilike '%translation%';
SELECT p.paper_id FROM Paper p WHERE p.title ilike '%translation%';
SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c) ORDER BY p.paper_id NULLS LAST;
SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c) ORDER BY p.paper_id NULLS LAST;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE a.address ilike '%China%' GROUP BY a.name ORDER BY paper_count DESC NULLS LAST LIMIT 1;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE a.address ilike '%China%' GROUP BY a.name ORDER BY paper_count DESC LIMIT 1;
SELECT p.year, COUNT(p.paper_id) AS number_of_papers FROM Paper p GROUP BY p.year ORDER BY p.year;
SELECT p.venue, p.year, COUNT(p.paper_id) AS number_of_papers FROM Paper p GROUP BY p.venue, p.year ORDER BY p.venue, p.year;
SELECT a.affiliation_id, COUNT(p.paper_id) AS total_papers FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id ORDER BY total_papers DESC NULLS LAST;
SELECT a.affiliation_id, COUNT(p.paper_id) AS number_of_papers FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id ORDER BY number_of_papers DESC NULLS LAST;
SELECT p.title FROM Paper p WHERE p.paper_id IN (SELECT c.cited_paper_id FROM Citation c GROUP BY c.cited_paper_id HAVING COUNT(c.cited_paper_id) > 50);
SELECT p.title FROM Paper p WHERE p.paper_id IN (SELECT c.cited_paper_id FROM Citation c GROUP BY c.cited_paper_id HAVING COUNT(c.cited_paper_id) > 50);
SELECT COUNT(DISTINCT a.author_id) AS num_authors FROM Author a LEFT JOIN (SELECT c.paper_id, COUNT(*) AS num_citations FROM Citation c GROUP BY c.paper_id HAVING COUNT(*) > 50) AS p ON a.author_id IN (SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id) WHERE p.paper_id IS NULL;
SELECT COUNT(DISTINCT a.author_id) AS number_of_authors FROM Author a LEFT JOIN (SELECT c.paper_id, COUNT(c.cited_paper_id) AS number_of_citations FROM Citation c GROUP BY c.paper_id HAVING COUNT(c.cited_paper_id) > 50) AS p ON a.author_id IN (SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id) WHERE p.paper_id IS NULL;
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 AND (p.venue ilike '%NAACL%' OR p.venue ilike '%ACL%') GROUP BY a.name;
SELECT a.name AS author_name, c.name AS conference_name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id JOIN Conference c ON p.venue = c.conference_id WHERE c.conference_id IN (SELECT conference_id FROM Conference WHERE conference_acronym IN ('NAACL', 'ACL')) AND p.year = 2009;
SELECT a.name FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id AND al.paper_id IN (SELECT paper_id FROM Paper WHERE venue ILIKE '%ACL%') WHERE al.author_id IS NULL;
SELECT a.name FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id AND al.paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL') WHERE al.author_id IS NULL;
SELECT COUNT(c.Conference_ID) FROM conference c;
SELECT COUNT(c.Conference_ID) AS total_conferences FROM conference c;
SELECT DISTINCT c.conference_name FROM conference c;
SELECT DISTINCT c.Conference_Name FROM conference c;
SELECT c.conference_name, c.year, c.location FROM conference c;
SELECT c.conference_name, c.year, c.location FROM conference c;
SELECT c.conference_name, COUNT(c.conference_id) AS number_of_conferences FROM conference c GROUP BY c.conference_name ORDER BY number_of_conferences DESC NULLS LAST;
SELECT c.conference_name, COUNT(c.conference_name) AS number_of_conferences FROM conference c GROUP BY c.conference_name ORDER BY number_of_conferences DESC NULLS LAST;
SELECT c.year, COUNT(c.conference_id) AS number_of_conferences FROM conference c GROUP BY c.year ORDER BY c.year NULLS LAST;
SELECT c.year, COUNT(c.conference_id) AS number_of_conferences FROM conference c GROUP BY c.year ORDER BY c.year;
SELECT c.year FROM conference c GROUP BY c.year ORDER BY c.year ASC LIMIT 1;
SELECT MIN(c.year) AS earliest_year FROM conference c;
SELECT c.location FROM conference c GROUP BY c.location HAVING COUNT(c.conference_id) >= 2;
SELECT c.location FROM conference c GROUP BY c.location HAVING COUNT(c.conference_id) >= 2;
SELECT i.institution_name, i.location, i.founded FROM institution i;
SELECT i.institution_name, i.location, i.founded FROM institution i;
SELECT COUNT(i.Institution_ID) FROM institution i WHERE i.Founded BETWEEN 1850 AND 1900;
SELECT COUNT(i.institution_id) FROM institution i WHERE i.founded BETWEEN 1850 AND 1900;
SELECT i.institution_name, i.location FROM institution i ORDER BY i.founded DESC LIMIT 1;
SELECT i.institution_name, i.location FROM institution i ORDER BY i.founded DESC LIMIT 1;
SELECT i.institution_name, COUNT(s.staff_id) AS number_of_staff FROM institution i JOIN staff s ON i.institution_id = s.institution_id WHERE i.founded > 1800 GROUP BY i.institution_name ORDER BY number_of_staff DESC NULLS LAST;
SELECT i.institution_id, COUNT(s.staff_id) AS staff_count, array_agg(s.name) AS staff_names FROM institution i JOIN staff s ON i.institution_id = s.institution_id WHERE i.founded > 1800 GROUP BY i.institution_id ORDER BY staff_count DESC NULLS LAST;
SELECT i.institution_name FROM institution i WHERE i.institution_id NOT IN (SELECT s.institution_id FROM staff s) ORDER BY i.institution_name NULLS LAST;
SELECT i.institution_name FROM institution i WHERE i.institution_id NOT IN (SELECT s.institution_id FROM staff s) ORDER BY i.institution_name NULLS LAST;
SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(s2.age) FROM staff s2);
SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(s2.age) FROM staff s2);
SELECT MAX(s.age) AS maximum_age, MIN(s.age) AS minimum_age FROM staff s WHERE s.nationality ILIKE '%United States%';
SELECT MIN(s.age) AS minimum_age, MAX(s.age) AS maximum_age FROM staff s;
SELECT c.conference_name FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id JOIN staff s ON cp.staff_id = s.staff_id WHERE s.nationality ilike '%Canadian%' ORDER BY c.conference_name NULLS LAST;
SELECT DISTINCT c.conference_name FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id JOIN staff s ON cp.staff_id = s.staff_id WHERE s.nationality ILIKE '%Canadian%' ORDER BY c.conference_name NULLS LAST;
SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_ID = cp1.staff_ID JOIN conference_participation cp2 ON s.staff_ID = cp2.staff_ID WHERE cp1.role = 'speaker' AND cp2.role = 'sponsor';
SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_ID = cp1.staff_ID JOIN conference_participation cp2 ON s.staff_ID = cp2.staff_ID WHERE cp1.role = 'speaker' AND cp2.role = 'sponsor';
SELECT s.name FROM staff s JOIN conference_participation cp_acl ON s.staff_ID = cp_acl.staff_ID JOIN conference_participation cp_naccl ON s.staff_ID = cp_naccl.staff_ID WHERE cp_acl.role = 'ACL' AND cp_naccl.role = 'Naccl';
SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_ID = cp1.staff_ID JOIN conference_participation cp2 ON s.staff_ID = cp2.staff_ID JOIN conference c1 ON cp1.Conference_ID = c1.Conference_ID JOIN conference c2 ON cp2.Conference_ID = c2.Conference_ID WHERE c1.Conference_Name = 'ACL' AND c2.Conference_Name = 'NACCL';
SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.year IN (2003, 2004) ORDER BY s.name NULLS LAST;
SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year IN (2003, 2004) ORDER BY s.name NULLS LAST;
SELECT c.conference_name, c.year, COUNT(cp.staff_id) AS number_of_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name, c.year ORDER BY number_of_participants DESC NULLS LAST;
SELECT c.conference_id, c.conference_name, c.year, COUNT(cp.staff_id) AS number_of_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_id, c.conference_name, c.year ORDER BY c.conference_id NULLS LAST;
SELECT c.conference_name, COUNT(cp.staff_id) AS number_of_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name ORDER BY number_of_participants DESC NULLS LAST LIMIT 2;
SELECT c.conference_name, COUNT(cp.staff_id) AS total_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name ORDER BY total_participants DESC NULLS LAST LIMIT 2;
SELECT s.name, s.nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID AND cp.role = 'ACL' WHERE cp.staff_ID IS NULL;
SELECT s.name, s.nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_id = cp.staff_id AND cp.conference_id = 757071 WHERE cp.staff_id IS NULL;
SELECT i.institution_name, i.location FROM institution i LEFT JOIN (SELECT s.institution_id FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id WHERE cp.conference_id IN (SELECT conference_id FROM conference WHERE YEAR = 2004)) AS subquery ON i.institution_id = subquery.institution_id WHERE subquery.institution_id IS NULL;
SELECT i.institution_name, i.location FROM institution i LEFT JOIN conference_participation cp ON i.institution_id = cp.staff_id AND cp.conference_id = (SELECT conference_id FROM conference WHERE YEAR = 2004) WHERE cp.staff_id IS NULL;
SELECT ps.pilot_name FROM PilotSkills ps ORDER BY ps.age ASC LIMIT 1;
SELECT ps.pilot_name FROM PilotSkills ps ORDER BY ps.age ASC NULLS LAST LIMIT 1;
SELECT p.pilot_name FROM PilotSkills p WHERE p.age < (SELECT AVG(p.age) FROM PilotSkills) ORDER BY p.age NULLS LAST;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age < (SELECT AVG(ps2.age) FROM PilotSkills ps2) ORDER BY ps.age ASC;
SELECT * FROM PilotSkills p WHERE p.age < 30;
SELECT * FROM PilotSkills p WHERE p.age < 30;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.age < 35;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.age < 35;
SELECT h.location FROM Hangar h WHERE h.plane_name = 'F-14 Fighter';
SELECT h.location FROM Hangar h WHERE h.plane_name = 'F-14 Fighter';
SELECT h.location, COUNT(DISTINCT h.plane_name) AS number_of_planes FROM Hangar h GROUP BY h.location ORDER BY number_of_planes DESC NULLS LAST;
SELECT COUNT(DISTINCT h.location) FROM Hangar h;
SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name = 'Jones' AND ps.age = 32;
SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name ilike '%Jones%' AND ps.age = 32;
SELECT COUNT(*) FROM PilotSkills WHERE age > 40;
SELECT COUNT(*) FROM PilotSkills p WHERE p.age > 40;
SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.plane_name = 'B-52 Bomber' AND ps.age < 35;
SELECT COUNT(DISTINCT h.plane_name) AS number_of_planes FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age < 35 AND h.location = 'B-52 Bomber';
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1;
SELECT h.plane_name FROM Hangar h GROUP BY h.plane_name ORDER BY COUNT(h.plane_name) DESC LIMIT 1;
SELECT ps.plane_name, COUNT(*) AS COUNT FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY COUNT DESC LIMIT 1;
SELECT h.plane_name FROM Hangar h GROUP BY h.plane_name ORDER BY COUNT(h.plane_name) ASC LIMIT 1;
SELECT ps.plane_name FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY COUNT(ps.plane_name) ASC LIMIT 1;
SELECT COUNT(DISTINCT ps.pilot_name) AS number_of_pilots FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Chicago';
SELECT COUNT(DISTINCT ps.pilot_name) AS number_of_pilots FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Chicago';
SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name = 'Smith' AND ps.age = 41;
SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name ilike '%Smith%' AND ps.age = 41;
SELECT COUNT(DISTINCT ps.plane_name) AS total_distinct_planes FROM PilotSkills ps;
SELECT COUNT(DISTINCT ps.plane_name) AS number_of_different_planes FROM PilotSkills ps;
SELECT COUNT(DISTINCT ps.plane_name) AS number_of_planes FROM PilotSkills ps WHERE ps.pilot_name ILIKE '%Smith%';
SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.pilot_name ILIKE '%Smith%' ;
SELECT COUNT(DISTINCT ps.plane_name) AS number_of_planes FROM PilotSkills ps WHERE ps.age > 40;
SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.age > 40;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age BETWEEN 30 AND 40 ORDER BY ps.age ASC;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age BETWEEN 30 AND 40 ORDER BY ps.age ASC;
SELECT p.pilot_name, p.age FROM PilotSkills p ORDER BY p.age DESC;
SELECT p.pilot_name FROM PilotSkills p ORDER BY p.age DESC;
SELECT h.plane_name, h.location FROM Hangar h ORDER BY h.plane_name NULLS LAST;
SELECT h.plane_name, h.location FROM Hangar h ORDER BY h.plane_name NULLS LAST;
SELECT DISTINCT ps.plane_name FROM PilotSkills ps ORDER BY ps.plane_name ASC;
SELECT DISTINCT ps.plane_name FROM PilotSkills ps ORDER BY ps.plane_name ASC;
SELECT COUNT(*) FROM PilotSkills p WHERE (p.age > 40 OR p.age < 30);
SELECT COUNT(*) FROM PilotSkills p WHERE p.age > 40 OR p.age < 30;
SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE (ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30) ORDER BY ps.pilot_name NULLS LAST;
SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE (ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30) ORDER BY ps.pilot_name NULLS LAST;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.pilot_name NOT IN (SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'B-52 Bomber');
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.pilot_name NOT IN (SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'B-52 Bomber');
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'B-52 Bomber');
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT ps.plane_name) = 2;
SELECT AVG(ps.age) AS average_age, MIN(ps.age) AS minimum_age FROM PilotSkills ps;
SELECT AVG(ps.age) AS average_age, MIN(ps.age) AS minimum_age FROM PilotSkills ps;
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' AND ps.plane_name IN (SELECT plane_name FROM Hangar WHERE location ilike '%Boston%') ORDER BY ps.pilot_name NULLS LAST;
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' OR h.location ilike '%Boston%' ORDER BY ps.pilot_name NULLS LAST;
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'F-14 Fighter');
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'F-14 Fighter');
SELECT ps.plane_name, AVG(ps.age) AS average_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY average_age DESC NULLS LAST;
SELECT ps.plane_name, AVG(ps.age) AS average_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY average_age DESC NULLS LAST;
SELECT h.plane_name, COUNT(h.plane_name) AS number_of_planes FROM Hangar h GROUP BY h.plane_name ORDER BY number_of_planes DESC NULLS LAST;
SELECT ps.plane_name, COUNT(*) AS COUNT FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY COUNT DESC NULLS LAST;
SELECT p.plane_name, MIN(p.age) AS min_age, ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name JOIN PilotSkills p ON h.plane_name = p.plane_name GROUP BY p.plane_name ORDER BY p.plane_name NULLS LAST;
SELECT p.plane_name, MIN(p.age) AS min_age, ARRAY_AGG(p.pilot_name) AS pilots FROM PilotSkills p GROUP BY p.plane_name ORDER BY p.plane_name NULLS LAST;
SELECT ps.plane_name, MIN(ps.age) AS min_age, ARRAY_AGG(ps.pilot_name) AS oldest_pilots FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY min_age NULLS LAST;
SELECT p.plane_name, ps.pilot_name FROM PilotSkills ps JOIN Hangar p ON ps.plane_name = p.plane_name ORDER BY p.plane_name NULLS LAST;
SELECT ps.pilot_name, MAX(ps.age) AS max_age FROM PilotSkills ps GROUP BY ps.pilot_name ORDER BY max_age DESC NULLS LAST;
SELECT p.pilot_name, MAX(p.age) AS max_age FROM PilotSkills p GROUP BY p.pilot_name ORDER BY max_age DESC NULLS LAST;
SELECT h.location, COUNT(DISTINCT ps.pilot_name) AS number_of_pilots, AVG(ps.age) AS average_age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY h.location ORDER BY number_of_pilots DESC NULLS LAST;
SELECT h.location, COUNT(p.pilot_name) AS number_of_pilots, AVG(p.age) AS average_age FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name GROUP BY h.location ORDER BY number_of_pilots DESC NULLS LAST;
SELECT h.plane_name, COUNT(ps.pilot_name) AS number_of_pilots FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY h.plane_name HAVING AVG(ps.age) < 35 ORDER BY number_of_pilots DESC NULLS LAST;
SELECT ps.plane_name, COUNT(ps.pilot_name) AS pilot_count FROM PilotSkills ps GROUP BY ps.plane_name HAVING AVG(ps.age) < 35 ORDER BY ps.plane_name NULLS LAST;
SELECT h.location FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name ORDER BY ps.age ASC LIMIT 1;
SELECT h.location FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name ORDER BY ps.age ASC LIMIT 1;
SELECT ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin';
SELECT ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' ORDER BY ps.pilot_name NULLS LAST;
SELECT p.pilot_name FROM PilotSkills p WHERE p.age > (SELECT MAX(ps.age) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.plane_name = 'Piper Cub') ORDER BY p.pilot_name ASC;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age DESC, ps.pilot_name ASC;
SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age < (SELECT MIN(ps2.age) FROM PilotSkills ps2 JOIN Hangar h2 ON ps2.plane_name = h2.plane_name WHERE h2.plane_name = 'F-14 Fighter');
SELECT COUNT(*) FROM PilotSkills ps1 WHERE ps1.age < (SELECT MIN(ps2.age) FROM PilotSkills ps2 JOIN Hangar h ON ps2.plane_name = h.plane_name WHERE h.plane_name = 'F-14 Fighter');
SELECT DISTINCT ps.plane_name FROM PilotSkills ps WHERE ps.plane_name ILIKE '%Bomber%';
SELECT DISTINCT ps.plane_name FROM PilotSkills ps WHERE ps.plane_name ILIKE '%Bomber%';
SELECT COUNT(DISTINCT ps1.pilot_name) FROM PilotSkills ps1 JOIN PilotSkills ps2 ON ps1.age > ps2.age AND ps2.plane_name = 'Piper Cub';
SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > (SELECT MIN(ps.age) FROM PilotSkills WHERE ps.plane_name = 'Piper Cub');
SELECT d.name FROM district d ORDER BY d.area_km DESC NULLS LAST LIMIT 1;
SELECT d.name, d.area_km, d.government_website FROM district d ORDER BY d.population ASC LIMIT 1;
SELECT d.name, d.population FROM district d WHERE d.area_km > (SELECT AVG(d.area_km) FROM district);
SELECT MAX(d.area_km) AS max_area, AVG(d.area_km) AS average_area FROM district d;
SELECT SUM(d.Population) AS total_population FROM (SELECT d.Population FROM district d ORDER BY d.Area_km DESC NULLS LAST LIMIT 3) AS subquery;
SELECT d.district_id, d.name, d.government_website FROM district d ORDER BY d.population DESC NULLS LAST;
SELECT d.name FROM district d WHERE d.government_website like '%.gov';
SELECT d.district_id, d.name FROM district d WHERE (d.population > 4000 OR d.area_km > 3000) ORDER BY d.district_id NULLS LAST;
SELECT s.name, s.speach_title FROM spokesman s;
SELECT AVG(s.Points) AS average_points, AVG(s.Age) AS average_age FROM spokesman s WHERE s.Rank_position = 1;
SELECT s.name, s.points FROM spokesman s WHERE s.age < 40 ORDER BY s.points DESC NULLS LAST;
SELECT s.name, s.age FROM spokesman s ORDER BY s.age ASC NULLS LAST LIMIT 1;
SELECT s.name, s.points FROM spokesman s WHERE s.points < (SELECT AVG(s2.points) FROM spokesman s2);
SELECT d.name, COUNT(s.spokesman_id) AS number_of_spokesmen FROM district d JOIN spokesman_district s ON d.district_id = s.district_id GROUP BY d.name ORDER BY number_of_spokesmen DESC LIMIT 1;
SELECT s.name FROM spokesman s JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id WHERE sd.start_year < '2004' ORDER BY s.name NULLS LAST;
SELECT d.name, COUNT(s.spokesman_id) AS number_of_spokesmen FROM district d JOIN spokesman_district s ON d.district_id = s.district_id GROUP BY d.name ORDER BY number_of_spokesmen DESC NULLS LAST;
SELECT d.name FROM district d JOIN spokesman_district sd1 ON d.district_id = sd1.district_id JOIN spokesman s1 ON sd1.spokesman_id = s1.spokesman_id WHERE s1.rank_position = 1 JOIN spokesman_district sd2 ON d.district_id = sd2.district_id JOIN spokesman s2 ON sd2.spokesman_id = s2.spokesman_id WHERE s2.rank_position = 2;
SELECT d.name FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name HAVING COUNT(sd.spokesman_id) > 1;
SELECT COUNT(DISTINCT(d.District_ID)) AS num_districts FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.Spokesman_ID IS NULL;
SELECT s.name FROM spokesman s LEFT JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id WHERE sd.spokesman_id IS NULL;
SELECT d.name, SUM(d.population) AS total_population, AVG(d.population) AS average_population FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name ORDER BY total_population DESC NULLS LAST;
SELECT s.title FROM Sculptures s WHERE s.year = (SELECT MAX(s2.year) FROM Sculptures s2);
SELECT s.title FROM Sculptures s ORDER BY s.year DESC LIMIT 1;
SELECT p.title, p.location FROM Paintings p ORDER BY p.year ASC LIMIT 1;
SELECT p.title, p.location FROM Paintings p ORDER BY p.year ASC LIMIT 1;
SELECT s.title FROM Sculptures s WHERE s.location = 'gallery 226';
SELECT s.title FROM Sculptures s WHERE s.location = 'Gallery 226';
SELECT p.title, p.location FROM Paintings p;
SELECT p.title, p.location FROM Paintings p;
SELECT s.title, s.location FROM Sculptures s;
SELECT s.title, s.location FROM Sculptures s;
SELECT p.medium, p.mediumOn FROM Paintings p WHERE p.paintingID = 80;
SELECT p.medium, p.mediumOn FROM Paintings p WHERE p.paintingID = 80;
SELECT a.fname, a.lname FROM Artists a WHERE a.birthYear > 1850;
SELECT a.fname, a.lname FROM Artists a WHERE a.birthYear > 1850;
SELECT s.title, s.year FROM Sculptures s WHERE s.location != 'Gallery 226';
SELECT s.title, to_char(to_date(s.year::text, 'YYYY'), 'YYYY') AS year_created FROM Sculptures s WHERE s.location not ilike '%gallery 226%' ORDER BY year_created NULLS LAST;
SELECT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900 GROUP BY a.fname, a.lname;
SELECT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900 GROUP BY a.fname, a.lname;
SELECT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE a.birthYear > 1920 GROUP BY a.birthYear ORDER BY a.birthYear NULLS LAST;
SELECT a.artistID, a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920 ORDER BY a.birthYear NULLS LAST;
SELECT a.fname, a.lname FROM Artists a ORDER BY (a.deathYear - a.birthYear) DESC LIMIT 1;
SELECT a.fname, a.lname FROM Artists a ORDER BY (a.deathYear - a.birthYear) DESC LIMIT 1;
SELECT a.age FROM (SELECT artistID, birthYear, deathYear, (deathYear - birthYear) AS age FROM Artists) AS a ORDER BY age ASC LIMIT 1;
SELECT a.fname, a.lname, (a.deathYear - a.birthYear) AS age FROM Artists a ORDER BY age ASC LIMIT 1;
SELECT a.fname, (a.deathYear - a.birthYear) AS age FROM Artists a ORDER BY age DESC LIMIT 1;
SELECT a.fname, (a.deathYear - a.birthYear) AS age FROM Artists a ORDER BY age DESC LIMIT 1;
SELECT COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.location = 'Gallery 240';
SELECT COUNT(p.paintingID) AS total_paintings FROM Paintings p WHERE p.location = 'Gallery 240';
SELECT COUNT(p.paintingID) AS number_of_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear = (SELECT MIN(birthYear) FROM Artists) AND a.deathYear = (SELECT MAX(deathYear) FROM Artists);
SELECT a.artistID, COUNT(p.paintingID) AS painting_count FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID ORDER BY a.birthYear, a.deathYear DESC LIMIT 1;
SELECT p.title, p.year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname ilike '%Mary%';
SELECT p.title, p.year, a.fname, a.lname FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname ilike 'Mary%' ORDER BY p.year NULLS LAST;
SELECT p.width_mm FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850;
SELECT AVG(p.width_mm) FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850;
SELECT p.location, p.medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname ilike '%Pablo%';
SELECT p.location, p.medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Pablo';
SELECT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID;
SELECT a.fname || ' ' || a.lname AS artist_name FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID;
SELECT a.fname, a.lname FROM Artists a JOIN Paintings p1 ON a.artistID = p1.painterID JOIN Paintings p2 ON a.artistID = p2.painterID WHERE p1.medium = 'oil' AND p2.medium = 'lithographic' GROUP BY a.fname, a.lname;
SELECT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium IN ('oil', 'lithographic') GROUP BY a.fname, a.lname HAVING COUNT(DISTINCT p.medium) = 2;
SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884 AND p.mediumOn = 'canvas';
SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884;
SELECT DISTINCT a.fname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'gallery 241';
SELECT a.fname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'gallery 241';
SELECT p.medium, COUNT(p.paintingID) AS number_of_works FROM Paintings p GROUP BY p.medium ORDER BY number_of_works DESC NULLS LAST;
SELECT p.medium, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p GROUP BY p.medium ORDER BY number_of_paintings DESC NULLS LAST;
SELECT p.medium, AVG(p.height_mm) AS average_height FROM Paintings p GROUP BY p.medium ORDER BY average_height DESC NULLS LAST;
SELECT p.medium, AVG(p.height_mm) AS average_height FROM Paintings p GROUP BY p.medium ORDER BY average_height DESC NULLS LAST;
SELECT p.location, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY p.location ORDER BY number_of_paintings DESC NULLS LAST;
SELECT p.location, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY p.location ORDER BY number_of_paintings DESC NULLS LAST;
SELECT p.title FROM Paintings p WHERE p.year > 1910 AND p.medium = 'oil';
SELECT p.title FROM Paintings p WHERE p.year > 1910 AND p.medium = 'oil';
SELECT DISTINCT a.artistID FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'gallery 240';
SELECT DISTINCT p.painterID FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 240';
SELECT DISTINCT p.title FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2);
SELECT p.title FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2);
SELECT DISTINCT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p.year) FROM Paintings WHERE p.location = 'gallery 240'); NULLS LAST;
SELECT DISTINCT p.paintingID FROM Paintings p JOIN Paintings p240 ON p.year < p240.year WHERE p240.location = 'Gallery 240';
SELECT p.paintingID FROM Paintings p ORDER BY p.year ASC LIMIT 1;
SELECT MIN(p.paintingID) AS oldest_painting_id FROM Paintings p;
SELECT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.title ilike '%female%' LIMIT 1;
SELECT a.fname || ' ' || a.lname AS full_name FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.title ilike '%female%';
SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC;
SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC;
SELECT p.title FROM Paintings p ORDER BY LENGTH(p.title) DESC NULLS LAST;
SELECT p.title FROM Paintings p ORDER BY p.height_mm ASC NULLS LAST;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p, Sculptures s WHERE p.year BETWEEN 1900 AND 1950 AND s.year BETWEEN 1900 AND 1950;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p, Sculptures s WHERE p.year BETWEEN 1900 AND 1950 AND s.year BETWEEN 1900 AND 1950;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID WHERE a.artistID = 222;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID WHERE a.artistID = 222;
SELECT a.artistID FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year < 1900 GROUP BY a.artistID ORDER BY COUNT(p.paintingID) DESC NULLS LAST LIMIT 1;
SELECT a.artistID, COUNT(p.paintingID) AS number_of_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year < 1900 GROUP BY a.artistID ORDER BY number_of_paintings DESC LIMIT 1;
SELECT a.fname, COUNT(s.sculptureID) AS number_of_sculptures FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID GROUP BY a.fname ORDER BY number_of_sculptures DESC LIMIT 1;
SELECT a.fname, COUNT(s.sculptureID) AS number_of_sculptures FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID GROUP BY a.fname ORDER BY number_of_sculptures DESC LIMIT 1;
SELECT p.title FROM Paintings p WHERE (p.width_mm < 600 OR p.height_mm > 800);
SELECT p.title FROM Paintings p WHERE (p.width_mm < 600 OR p.height_mm > 800);
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;
SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.height_mm < 2000;
SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.width_mm < 2000;
SELECT p.location FROM Paintings p WHERE p.medium = 'panel' AND p.mediumOn = 'canvas' GROUP BY p.location ORDER BY COUNT(p.paintingID) DESC NULLS LAST;
SELECT DISTINCT p.location FROM Paintings p WHERE p.medium IN ('panel', 'canvas');
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.year > 1930;
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;
SELECT AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 241';
SELECT AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 241';
SELECT MAX(p.height_mm) AS max_height, MAX(p.paintingID) AS max_painting_id FROM Paintings p WHERE p.year < 1900;
SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.year < 1900 ORDER BY p.height_mm DESC NULLS LAST LIMIT 1;
SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year ORDER BY p.year NULLS LAST;
SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year ORDER BY p.year NULLS LAST;
SELECT a.fname, a.lname, AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY a.fname, a.lname ORDER BY a.fname, a.lname NULLS LAST;
SELECT a.fname, a.lname, AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY a.fname, a.lname ORDER BY a.fname, a.lname NULLS LAST;
SELECT a.fname, COUNT(p.paintingID) AS num_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.fname HAVING COUNT(p.paintingID) >= 2 ORDER BY num_paintings DESC NULLS LAST;
SELECT a.fname, COUNT(p.paintingID) AS num_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.fname HAVING COUNT(p.paintingID) >= 2 ORDER BY num_paintings DESC NULLS LAST;
SELECT a.deathYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID, a.deathYear HAVING COUNT(p.paintingID) <= 3;
SELECT a.artistID, a.lname, a.fname, a.birthYear, a.deathYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID, a.lname, a.fname, a.birthYear, a.deathYear HAVING COUNT(p.paintingID) < 4 ORDER BY a.deathYear NULLS LAST;
SELECT a.deathYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.artistID, a.deathYear ORDER BY COUNT(s.sculptureID) ASC LIMIT 1;
SELECT a.lname, a.fname, MIN(a.deathYear) AS earliest_death_year FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.lname, a.fname ORDER BY earliest_death_year NULLS LAST LIMIT 1;
SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240');
SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.width_mm = (SELECT MAX(width_mm) FROM Paintings);
SELECT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p.year) FROM Paintings WHERE gallery = 240);
SELECT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p.year) FROM Paintings WHERE location = 'gallery 240');
SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(p.height_mm) FROM Paintings WHERE p.year > 1900);
SELECT p.paintingID FROM Paintings p WHERE p.year > 1900 AND p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.year > 1900);
SELECT a.fname, a.lname, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.medium = 'oil' GROUP BY a.fname, a.lname ORDER BY number_of_paintings DESC NULLS LAST LIMIT 3;
SELECT a.fname, a.lname, COUNT(p.paintingID) AS oil_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.medium = 'oil' GROUP BY a.fname, a.lname ORDER BY oil_paintings DESC;
SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE p.medium = 'oil' ORDER BY p.year NULLS LAST;
SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE p.medium = 'oil' ORDER BY p.year ASC;
SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title NULLS LAST;
SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.year NULLS LAST, p.location NULLS LAST, p.title NULLS LAST;
SELECT a.fname, a.lname FROM Artists a LEFT JOIN Paintings p ON a.artistID = p.painterID AND p.painterID IS NOT NULL LEFT JOIN Sculptures s ON a.artistID = s.sculptorID AND s.sculptorID IS NOT NULL WHERE p.painterID IS NOT NULL AND s.sculptorID IS NULL;
SELECT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE a.artistID NOT IN (SELECT s.sculptorID FROM Sculptures s) ORDER BY a.lname, a.fname NULLS LAST;
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.mediumOn IS NULL;
SELECT p.title, p.year, p.medium, p.mediumOn, p.location, p.painterID FROM Paintings p WHERE p.year < 1885 AND p.mediumOn != 'canvas';
SELECT COUNT(r.Road) AS number_of_races FROM race r;
SELECT COUNT(r.Road) AS number_of_races FROM race r;
SELECT d.Driver_Name, r.Winning_team FROM race r JOIN driver d ON r.Winning_driver = d.Driver_ID ORDER BY r.Winning_team ASC;
SELECT d.Driver_Name, r.Winning_team FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID ORDER BY r.Winning_team ASC;
SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position != 'Junior Strous' AND r.Winning_driver = d.Driver_Name;
SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Winning_driver = d.Driver_Name AND r.Pole_Position != 'Junior Strous' ORDER BY d.Driver_Name NULLS LAST;
SELECT d.constructor, d.age FROM driver d ORDER BY d.age ASC;
SELECT d.Constructor, d.Age FROM driver d GROUP BY d.Constructor, d.Age ORDER BY d.Age ASC;
SELECT d.entrant FROM driver d WHERE d.age >= 20 ORDER BY d.entrant NULLS LAST;
SELECT d.entrant FROM driver d WHERE d.age >= 20 ORDER BY d.entrant NULLS LAST;
SELECT MAX(d.age) AS maximum_age, MIN(d.age) AS minimum_age FROM driver d;
SELECT MAX(d.age) AS maximum_age, MIN(d.age) AS minimum_age FROM driver d;
SELECT d.engine FROM driver d WHERE d.age > 30 OR d.age < 20 GROUP BY d.engine ORDER BY COUNT(d.engine) DESC NULLS LAST;
SELECT d.engine, COUNT(d.engine) FROM driver d WHERE (d.age > 30 OR d.age < 20) GROUP BY d.engine ORDER BY COUNT(d.engine) DESC NULLS LAST;
SELECT d.driver_name FROM driver d ORDER BY d.driver_name DESC;
SELECT d.driver_name FROM driver d ORDER BY d.driver_name DESC;
SELECT d.driver_name, r.race_name FROM driver d JOIN race r ON d.driver_id = r.driver_id;
SELECT d.driver_name, r.race_name FROM driver d JOIN race r ON d.driver_id = r.driver_id;
SELECT d.Driver_Name, COUNT(r.Road) AS race_count FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name ORDER BY race_count DESC NULLS LAST;
SELECT d.Driver_Name, COUNT(r.Road) AS race_count FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name ORDER BY race_count DESC NULLS LAST;
SELECT d.age FROM driver d JOIN (SELECT r.driver_id, COUNT(r.road) AS race_count FROM race r GROUP BY r.driver_id ORDER BY race_count DESC LIMIT 1) AS mr ON d.driver_id = mr.driver_id LIMIT 1;
SELECT d.age FROM driver d JOIN (SELECT r.Driver_ID, COUNT(r.Road) AS race_count FROM race r GROUP BY r.Driver_ID ORDER BY race_count DESC LIMIT 1) AS mr ON d.Driver_ID = mr.Driver_ID LIMIT 1;
SELECT d.Driver_Name, d.Age FROM driver d JOIN (SELECT r.Driver_ID FROM race r GROUP BY r.Driver_ID HAVING COUNT(r.Road) >= 2) AS subquery ON d.Driver_ID = subquery.Driver_ID;
SELECT d.Driver_Name, d.Age FROM driver d JOIN (SELECT r.Driver_ID FROM race r GROUP BY r.Driver_ID HAVING COUNT(r.Road) >= 2) AS subquery ON d.Driver_ID = subquery.Driver_ID;
SELECT r.Race_Name, d.Driver_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26;
SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26;
SELECT d.Driver_Name FROM driver d WHERE d.Constructor not ilike '%Bugatti%';
SELECT d.Driver_Name FROM driver d WHERE d.Constructor not ilike '%Bugatti%';
SELECT d.constructor, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.constructor ORDER BY number_of_drivers DESC NULLS LAST;
SELECT d.Constructor, COUNT(d.Driver_ID) AS number_of_drivers FROM driver d GROUP BY d.Constructor ORDER BY number_of_drivers DESC NULLS LAST;
SELECT d.engine, COUNT(d.engine) AS COUNT FROM driver d GROUP BY d.engine ORDER BY COUNT DESC LIMIT 1;
SELECT d.engine FROM driver d GROUP BY d.engine ORDER BY COUNT(d.engine) DESC LIMIT 1;
SELECT d.engine FROM driver d GROUP BY d.engine HAVING COUNT(d.driver_id) >= 2;
SELECT d.engine FROM driver d GROUP BY d.engine HAVING COUNT(d.driver_id) >= 2;
SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r) ORDER BY d.Driver_Name NULLS LAST;
SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r) ORDER BY d.Driver_Name NULLS LAST;
SELECT d.constructor FROM driver d WHERE d.age < 20 AND d.age > 30 GROUP BY d.constructor;
SELECT d.constructor FROM driver d WHERE d.age < 20 AND d.age > 30 GROUP BY d.constructor HAVING COUNT(d.driver_id) >= 2;
SELECT r.Winning_team, COUNT(*) AS COUNT FROM race r GROUP BY r.Winning_team HAVING COUNT(*) > 1 ORDER BY COUNT DESC NULLS LAST;
SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Road) > 1;
SELECT d.driver_name FROM driver d JOIN race r1 ON d.driver_id = r1.driver_id JOIN race r2 ON d.driver_id = r2.driver_id WHERE r1.pole_position ilike '%James%Hinchcliffe%' AND r2.pole_position ilike '%Carl%Skerlong%' GROUP BY d.driver_name;
SELECT d.driver_name FROM driver d JOIN race r1 ON d.driver_id = r1.driver_id AND r1.pole_position = 'James Hinchcliffe' JOIN race r2 ON d.driver_id = r2.driver_id AND r2.pole_position = 'Carl Skerlong';
SELECT d.Driver_Name FROM driver d WHERE d.Driver_Name NOT IN (SELECT r.Pole_Position FROM race r WHERE r.Pole_Position ilike '%James%Hinchcliffe%');
SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position not ilike '%James%Hinchcliffe%' ORDER BY d.Driver_Name NULLS LAST;
SELECT COUNT(l.id) FROM languages l;
SELECT COUNT(DISTINCT l.id) AS number_of_languages FROM languages l;
SELECT l.name FROM languages l ORDER BY l.name ASC;
SELECT l.name FROM languages l ORDER BY l.name ASC;
SELECT l.name FROM languages l WHERE l.name ilike '%ish%' ORDER BY l.name NULLS LAST;
SELECT l.name FROM languages l WHERE l.name ilike '%ish%' ORDER BY l.name NULLS LAST;
SELECT c.name FROM countries c ORDER BY c.overall_score DESC;
SELECT c.name FROM countries c ORDER BY c.overall_score DESC;
SELECT AVG(c.justice_score) AS average_justice_score FROM countries c;
SELECT AVG(c.justice_score) AS average_justice_score FROM countries c;
SELECT MIN(c.health_score) AS min_health_score, MAX(c.health_score) AS max_health_score FROM countries c WHERE c.name != 'Norway';
SELECT MIN(c.health_score) AS min_health_score, MAX(c.health_score) AS max_health_score FROM countries c WHERE c.name != 'Norway';
SELECT COUNT(DISTINCT l.id) AS number_of_languages FROM languages l JOIN official_languages ol ON l.id = ol.language_id;
SELECT COUNT(DISTINCT l.id) AS number_of_languages FROM languages l JOIN official_languages ol ON l.id = ol.language_id;
SELECT c.name FROM countries c ORDER BY c.education_score DESC;
SELECT c.name FROM countries c ORDER BY c.education_score DESC;
SELECT c.name FROM countries c ORDER BY c.politics_score DESC NULLS LAST LIMIT 1;
SELECT c.name FROM countries c ORDER BY c.politics_score DESC NULLS LAST LIMIT 1;
SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id;
SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id;
SELECT l.name AS language_name, COUNT(DISTINCT o.country_id) AS country_count FROM languages l JOIN official_languages o ON l.id = o.language_id GROUP BY l.name ORDER BY country_count DESC NULLS LAST;
SELECT l.name, COUNT(o.country_id) AS country_count FROM languages l JOIN official_languages o ON l.id = o.language_id GROUP BY l.name ORDER BY country_count DESC NULLS LAST;
SELECT l.name, COUNT(o.country_id) AS country_count FROM languages l JOIN official_languages o ON l.id = o.language_id GROUP BY l.name ORDER BY country_count DESC LIMIT 1;
SELECT l.name FROM languages l JOIN (SELECT language_id, COUNT(*) AS frequency FROM official_languages GROUP BY language_id ORDER BY frequency DESC LIMIT 1) AS ml ON l.id = ml.language_id;
SELECT l.name FROM languages l JOIN (SELECT ol.language_id FROM official_languages ol GROUP BY ol.language_id HAVING COUNT(DISTINCT ol.country_id) >= 2) AS subquery ON l.id = subquery.language_id;
SELECT l.name FROM languages l JOIN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(country_id) >= 2) AS subquery ON l.id = subquery.language_id;
SELECT AVG(c.overall_score) AS average_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English';
SELECT AVG(c.overall_score) AS average_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id = (SELECT id FROM languages WHERE name = 'English');
SELECT l.name, COUNT(o.language_id) AS language_count FROM languages l JOIN official_languages o ON l.id = o.language_id GROUP BY l.name ORDER BY language_count DESC LIMIT 3;
SELECT l.name, COUNT(o.country_id) AS country_count FROM languages l JOIN official_languages o ON l.id = o.language_id GROUP BY l.name ORDER BY country_count DESC LIMIT 3;
SELECT l.name, AVG(c.overall_score) AS average_score FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY average_score DESC;
SELECT l.name, AVG(c.overall_score) AS average_score FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY average_score DESC;
SELECT c.name FROM countries c JOIN (SELECT ol.country_id, COUNT(ol.language_id) AS language_count FROM official_languages ol GROUP BY ol.country_id) AS cl ON c.id = cl.country_id ORDER BY cl.language_count DESC LIMIT 1;
SELECT c.name, COUNT(o.language_id) AS language_count FROM countries c JOIN official_languages o ON c.id = o.country_id GROUP BY c.name ORDER BY language_count DESC LIMIT 1;
SELECT l.name FROM languages l WHERE l.id NOT IN (SELECT o.language_id FROM official_languages o) ORDER BY l.name NULLS LAST;
SELECT l.name FROM languages l WHERE l.id NOT IN (SELECT o.language_id FROM official_languages o) ORDER BY l.name NULLS LAST;
SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT o.country_id FROM official_languages o) ORDER BY c.name NULLS LAST;
SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT o.country_id FROM official_languages o) ORDER BY c.name NULLS LAST;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE (c.overall_score > 95 AND c.overall_score < 100) OR (c.overall_score < 90 AND c.overall_score > 0) GROUP BY l.name;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95 OR c.overall_score < 90 ORDER BY l.name NULLS LAST;
SELECT DISTINCT a.country, a.town_city FROM Addresses a;
SELECT a.country, a.town_city FROM Addresses a;
SELECT p.property_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id;
SELECT p.property_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id;
SELECT f.feature_description FROM Features f WHERE f.feature_name = 'rooftop';
SELECT f.feature_description FROM Features f WHERE f.feature_name = 'rooftop';
SELECT f.feature_name, f.feature_description FROM Features f JOIN (SELECT pf.feature_id, COUNT(*) AS feature_count FROM Property_Features pf GROUP BY pf.feature_id) AS fc ON f.feature_id = fc.feature_id ORDER BY fc.feature_count DESC LIMIT 1;
SELECT f.feature_name, f.feature_description FROM Features f JOIN (SELECT pf.feature_id, COUNT(*) AS feature_count FROM Property_Features pf GROUP BY pf.feature_id ORDER BY feature_count DESC LIMIT 1) AS mf ON f.feature_id = mf.feature_id;
SELECT MIN(p.room_count) AS min_rooms FROM Properties p;
SELECT MIN(p.room_count) AS min_room_count FROM Properties p;
SELECT COUNT(*) FROM Properties p WHERE (p.parking_lots = '1' OR p.garage_yn = 'Y') AND p.property_type_code = 'S'; -- Assuming 'S' stands for 'Single Family Home'
SELECT COUNT(*) FROM Properties p WHERE (p.parking_lots = '1' OR p.garage_yn = 'Y') AND p.property_type_code = 'S'; -- Assuming 'S' stands for 'Single Family Home'
SELECT u.age_category_code FROM Users u WHERE u.other_user_details ilike '%Mother%' ORDER BY u.age_category_code NULLS LAST;
SELECT u.age_category_code FROM Users u WHERE u.other_user_details ilike '%Mother%';
SELECT u.first_name, COUNT(p.property_id) AS property_count FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.first_name ORDER BY property_count DESC LIMIT 1;
SELECT u.first_name, COUNT(p.property_id) AS property_count FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.first_name ORDER BY property_count DESC LIMIT 1;
SELECT AVG(cast(p.room_count AS INTEGER)) AS average_room_count FROM Properties p WHERE p.garage_yn = 'Y';
SELECT AVG(CAST(p.room_count AS INTEGER)) AS average_rooms FROM Properties p JOIN Property_Features f ON p.property_id = f.property_id WHERE f.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'garden');
SELECT DISTINCT a.town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features f ON p.property_id = f.property_id WHERE f.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool') GROUP BY a.town_city;
SELECT DISTINCT a.town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features f ON p.property_id = f.property_id WHERE f.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool') GROUP BY a.town_city;
SELECT p.property_id, p.vendor_requested_price FROM Properties p ORDER BY p.vendor_requested_price ASC NULLS LAST LIMIT 1;
SELECT p.property_id, p.vendor_requested_price FROM Properties p ORDER BY p.vendor_requested_price ASC NULLS LAST LIMIT 1;
SELECT AVG(CAST(p.room_count AS INTEGER)) AS average_rooms FROM Properties p;
SELECT AVG(cast(p.room_count AS INTEGER)) AS average_rooms FROM Properties p;
SELECT COUNT(DISTINCT r.room_size) AS number_of_room_sizes FROM Rooms r;
SELECT COUNT(DISTINCT r.room_size) AS number_of_room_sizes FROM Rooms r;
SELECT u.user_id, u.first_name, u.last_name, s.search_string FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id, u.first_name, u.last_name, s.search_string HAVING COUNT(s.search_seq) >= 2;
SELECT u.user_id, u.first_name, u.last_name, COUNT(us.search_seq) AS search_count, array_agg(us.search_seq) AS search_sequence FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id, u.first_name, u.last_name HAVING COUNT(us.search_seq) >= 2 ORDER BY search_count DESC NULLS LAST;
SELECT u.user_id, MAX(s.search_datetime) AS latest_search_date FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id;
SELECT MAX(u.search_datetime) AS latest_search_time FROM User_Searches u;
SELECT u.user_id, to_char(u.date_registered, 'YYYY-MM-DD HH24:MI:SS') AS date_registered, s.search_string FROM Users u JOIN User_Searches s ON u.user_id = s.user_id ORDER BY s.search_string DESC;
SELECT u.user_id, s.search_string, s.search_datetime FROM Users u JOIN User_Searches s ON u.user_id = s.user_id ORDER BY s.search_string DESC;
SELECT DISTINCT p.zip_postcode FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE (SELECT COUNT(DISTINCT property_id) FROM Properties WHERE owner_user_id = u.user_id) > 2;
SELECT a.zip_postcode FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id WHERE p.owner_user_id NOT IN (SELECT user_id FROM Properties GROUP BY user_id HAVING COUNT(property_id) <= 2) ORDER BY a.zip_postcode NULLS LAST;
SELECT u.user_category_code, u.user_id FROM Users u JOIN (SELECT user_id, COUNT(*) AS search_count FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1) AS s ON u.user_id = s.user_id;
SELECT u.user_id, u.age_category_code FROM Users u JOIN (SELECT user_id, COUNT(*) AS search_count FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1) AS s ON u.user_id = s.user_id;
SELECT u.age_category_code FROM Users u JOIN User_Searches s ON u.user_id = s.user_id ORDER BY s.search_seq ASC LIMIT 1;
SELECT u.age_category_code FROM Users u JOIN User_Searches s ON u.user_id = s.user_id ORDER BY s.search_datetime ASC LIMIT 1;
SELECT u.login_name, u.first_name FROM Users u WHERE u.age_category_code = 'SENIOR' ORDER BY u.first_name NULLS LAST;
SELECT u.login_name, u.first_name FROM Users u WHERE u.age_category_code = 'Senior Citizen' ORDER BY u.first_name NULLS LAST;
SELECT SUM(u.search_count) AS total_searches FROM (SELECT u.user_id, COUNT(us.search_seq) AS search_count FROM Users u JOIN User_Searches us ON u.user_id = us.user_id WHERE u.is_buyer = 'Y' GROUP BY u.user_id) AS u;
SELECT COUNT(*) FROM User_Searches u WHERE u.is_buyer = 'Y';
SELECT u.date_registered FROM Users u WHERE u.login_name = 'ratione';
SELECT u.date_registered FROM Users u WHERE u.login_name = 'ratione';
SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM Users u WHERE u.is_seller = '1';
SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM Users u WHERE u.is_seller = 'Y';
SELECT a.line_1_number_building, a.line_2_number_street, a.town_city FROM Addresses a JOIN Users u ON a.address_id = u.user_address_id JOIN Ref_Age_Categories r ON u.age_category_code = r.age_category_code WHERE r.age_category_description ilike '%Senior%Citizen%' ORDER BY a.town_city NULLS LAST;
SELECT a.line_1_number_building, a.line_2_number_street, a.line_3_area_locality, a.town_city FROM Addresses a JOIN Users u ON a.address_id = u.user_address_id WHERE u.age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizen');
SELECT COUNT(DISTINCT p.property_id) AS number_of_properties FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(DISTINCT pf.feature_id) >= 2;
SELECT COUNT(*) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(pf.feature_id) >= 2;
SELECT p.property_id, COUNT(pp.photo_id) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id ORDER BY photo_count DESC NULLS LAST;
SELECT p.property_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id ORDER BY photo_count DESC NULLS LAST;
SELECT u.user_id, COUNT(pp.photo_id) AS total_photos FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY u.user_id ORDER BY total_photos DESC NULLS LAST;
SELECT p.owner_user_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id ORDER BY photo_count DESC NULLS LAST;
SELECT SUM(p.price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.age_category_code IN ('S', 'M') AND u.user_category_code IN ('SM', 'SO');
SELECT SUM(p.price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.age_category_code IN ('S', 'M') AND u.user_category_code IN ('S', 'U');
SELECT u.user_id, p.property_name, row_number() OVER(PARTITION BY u.user_id ORDER BY uph.datestamp DESC) AS recent_property_rank FROM User_Property_History uph JOIN Properties p ON uph.property_id = p.property_id JOIN Users u ON uph.user_id = u.user_id;
SELECT u.user_id, p.property_name, row_number() OVER(PARTITION BY u.user_id ORDER BY u.datestamp DESC) AS recent_event_rank FROM User_Property_History u JOIN Properties p ON u.property_id = p.property_id;
SELECT r.property_type_description, r.property_type_code FROM (SELECT p.property_type_code, p.property_type_description, COUNT(*) AS frequency FROM Properties p GROUP BY p.property_type_code, p.property_type_description) AS r ORDER BY frequency DESC LIMIT 1;
SELECT r.property_type_code, r.property_type_description FROM Ref_Property_Types r GROUP BY r.property_type_code, r.property_type_description ORDER BY COUNT(r.property_type_code) DESC LIMIT 1;
SELECT r.age_category_description FROM Ref_Age_Categories r WHERE r.age_category_code = 'Over 60';
SELECT r.age_category_description FROM Ref_Age_Categories r WHERE r.age_category_code = 'Over 60';
SELECT r.room_size, COUNT(r.room_size) AS COUNT FROM Rooms r GROUP BY r.room_size ORDER BY COUNT DESC NULLS LAST;
SELECT r.room_size, COUNT(r.room_number) AS room_count FROM Rooms r GROUP BY r.room_size ORDER BY room_count DESC NULLS LAST;
SELECT u.country FROM Users u WHERE u.first_name = 'Robbie';
SELECT a.country FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE u.first_name = 'Robbie';
SELECT u.first_name, u.middle_name, u.last_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_id = p.owner_user_id;
SELECT u.first_name, u.middle_name, u.last_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id;
SELECT u.user_id, u.first_name, u.last_name, s.search_string FROM Users u LEFT JOIN Properties p ON u.user_id = p.owner_user_id LEFT JOIN User_Searches s ON u.user_id = s.user_id WHERE p.owner_user_id IS NULL;
SELECT u.user_id, u.first_name, u.last_name, s.search_string FROM Users u LEFT JOIN Properties p ON u.user_id = p.owner_user_id LEFT JOIN User_Searches s ON u.user_id = s.user_id WHERE p.owner_user_id IS NULL;
SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.last_name, u.user_id HAVING COUNT(DISTINCT p.property_id) >= 2 AND COUNT(DISTINCT s.search_seq) <= 2;
SELECT u.user_id, u.last_name FROM Users u JOIN User_Searches s ON u.user_id = s.user_id JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.user_id, u.last_name HAVING COUNT(DISTINCT s.search_seq) <= 2 AND COUNT(DISTINCT p.property_id) >= 2;
SELECT COUNT(*) FROM bike b WHERE b.weight > 780;
SELECT b.product_name, b.weight FROM bike b ORDER BY b.price ASC;
SELECT c.heat, c.name, c.nation FROM cyclist c ORDER BY c.heat NULLS LAST;
SELECT MAX(b.weight) AS max_weight, MIN(b.weight) AS min_weight FROM bike b;
SELECT AVG(b.price) FROM bike b WHERE b.material ilike '%Carbon%CC%';
SELECT c.name, c.result FROM cyclist c WHERE c.nation not ilike '%Russian%' ORDER BY c.result DESC NULLS LAST;
SELECT DISTINCT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes c ON b.id = c.bike_id WHERE c.purchase_year > 2015;
SELECT b.id, b.product_name FROM bike b JOIN (SELECT bike_id FROM cyclists_own_bikes GROUP BY bike_id HAVING COUNT(cyclist_id) >= 4) AS mb ON b.id = mb.bike_id WHERE b.product_name ilike '%racing%';
SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes co ON c.id = co.cyclist_id GROUP BY c.id, c.name ORDER BY COUNT(co.bike_id) DESC LIMIT 1;
SELECT DISTINCT b.product_name FROM cyclists_own_bikes co JOIN bike b ON co.bike_id = b.id JOIN cyclist c ON co.cyclist_id = c.id WHERE c.nation IN ('Russia', 'Great Britain') ORDER BY b.product_name NULLS LAST;
SELECT COUNT(DISTINCT c.heat) FROM cyclist c;
SELECT COUNT(DISTINCT c.id) FROM cyclist c LEFT JOIN cyclists_own_bikes cb ON c.id = cb.cyclist_id AND cb.purchase_year > 2015 WHERE cb.cyclist_id IS NULL;
SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result > '4:21.558' AND b.material = 'racing';;
SELECT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes cob1 ON b.id = cob1.bike_id JOIN cyclists_own_bikes cob2 ON cob1.cyclist_id = cob2.cyclist_id WHERE cob1.cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') AND cob2.cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler');
SELECT c.name, c.nation, c.result FROM cyclist c LEFT JOIN cyclists_own_bikes co ON c.id = co.cyclist_id AND co.purchase_year IS NOT NULL WHERE co.cyclist_id IS NULL;
SELECT b.product_name FROM bike b WHERE b.material ilike '%fiber%';
SELECT c.id, COUNT(b.id) AS number_of_bikes FROM cyclist c JOIN cyclists_own_bikes b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id NULLS LAST;
SELECT g.flavor, g.price FROM goods g ORDER BY g.price DESC LIMIT 1;
SELECT g.id, g.flavor FROM goods g ORDER BY g.price DESC LIMIT 1;
SELECT g.flavor, g.price FROM goods g ORDER BY g.price ASC LIMIT 1;
SELECT g.id, g.flavor FROM goods g ORDER BY g.price ASC LIMIT 1;
SELECT g.id FROM goods g WHERE g.flavor ilike '%apple%';
SELECT g.id FROM goods g WHERE g.flavor ilike '%apple%';
SELECT g.id FROM goods g WHERE g.price < 3;
SELECT g.id FROM goods g WHERE g.price < 3;
SELECT DISTINCT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receipt = i.receipt JOIN goods g ON i.item = g.id WHERE g.flavor ilike '%lemon%' ORDER BY c.id NULLS LAST;
SELECT DISTINCT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receipt = i.receipt JOIN goods g ON i.item = g.id WHERE g.flavor ilike '%lemon%' ORDER BY c.id NULLS LAST;
SELECT g.Food, COUNT(DISTINCT c.Id) AS total_customers FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber JOIN customers c ON r.CustomerId = c.Id GROUP BY g.Food ORDER BY total_customers DESC NULLS LAST;
SELECT g.Food, COUNT(DISTINCT r.CustomerId) AS number_of_customers FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food ORDER BY number_of_customers DESC NULLS LAST;
SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customerid GROUP BY c.id HAVING COUNT(r.receiptnumber) >= 15;
SELECT c.Id AS customer_id FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) >= 15;
SELECT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.LastName HAVING COUNT(r.ReceiptNumber) > 10;
SELECT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.LastName HAVING COUNT(r.ReceiptNumber) > 10;
SELECT COUNT(DISTINCT g.Food) AS number_of_cake_types FROM goods g WHERE g.Food ILIKE '%cake%';
SELECT COUNT(DISTINCT g.Food) AS number_of_cake_types FROM goods g;
SELECT DISTINCT g.Flavor FROM goods g WHERE g.Food = 'Croissant' ORDER BY g.Flavor NULLS LAST;
SELECT DISTINCT g.flavor FROM goods g WHERE g.food ILIKE '%croissant%' ORDER BY g.flavor NULLS LAST;
SELECT DISTINCT i.Item FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE r.CustomerId = 15;
SELECT DISTINCT i.item FROM items i JOIN receipts r ON i.receipt = r.receiptnumber WHERE r.customerid = 15;
SELECT g.Food, AVG(g.Price) AS average_price, MAX(g.Price) AS maximum_price, MIN(g.Price) AS minimum_price FROM goods g GROUP BY g.Food;
SELECT g.Food, AVG(g.Price) AS AveragePrice, MIN(g.Price) AS MinPrice, MAX(g.Price) AS MaxPrice FROM goods g GROUP BY g.Food;
SELECT DISTINCT r.ReceiptNumber FROM items i1 JOIN items i2 ON i1.Receipt = i2.Receipt AND i1.Ordinal + 1 = i2.Ordinal JOIN goods g1 ON i1.Item = g1.Id JOIN goods g2 ON i2.Item = g2.Id JOIN receipts r ON i1.Receipt = r.ReceiptNumber WHERE g1.Food = 'Cake' AND g2.Food = 'Cookie';
SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i1 ON r.Receipt = i1.Receipt JOIN items i2 ON i1.Ordinal = i2.Ordinal-1 WHERE i1.Item = 'cake' AND i2.Item = 'cookie';
SELECT r.ReceiptNumber FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'LOGAN' AND g.Food = 'Croissant';
SELECT r.ReceiptNumber FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'Logan' AND g.Food = 'croissant';
SELECT r.ReceiptNumber, r.Date, g.Flavor, g.Food, g.Price FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1;
SELECT r.ReceiptNumber, r.Date, g.Flavor, g.Food, g.Price FROM receipts r JOIN items i ON r.ReceiptId = i.Receipt JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1;
SELECT i.Item, COUNT(i.Item) AS COUNT FROM items i GROUP BY i.Item ORDER BY COUNT ASC LIMIT 1;
SELECT i.Item, COUNT(i.Item) AS COUNT FROM items i GROUP BY i.Item ORDER BY COUNT ASC LIMIT 1;
SELECT g.food, COUNT(g.id) AS number_of_goods FROM goods g GROUP BY g.food ORDER BY number_of_goods DESC NULLS LAST;
SELECT g.food, COUNT(g.id) AS COUNT FROM goods g GROUP BY g.food ORDER BY COUNT DESC NULLS LAST;
SELECT g.Food, AVG(g.Price) AS average_price FROM goods g GROUP BY g.Food ORDER BY average_price DESC NULLS LAST;
SELECT g.Food, AVG(g.Price) AS Average_Price FROM goods g GROUP BY g.Food ORDER BY Average_Price DESC NULLS LAST;
SELECT g.id FROM goods g WHERE g.flavor ilike '%Apricot%' AND g.price < 5;
SELECT g.id FROM goods g WHERE g.flavor ilike '%Apricot%' AND g.price < 5;
SELECT g.flavor FROM goods g WHERE g.price > 10;
SELECT g.flavor FROM goods g WHERE g.price > 10;
SELECT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(g2.price) FROM goods g2) ORDER BY g.id NULLS LAST;
SELECT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(g2.price) FROM goods g2) ORDER BY g.id NULLS LAST;
SELECT DISTINCT g.Id FROM goods g WHERE g.Flavor = 'Tart' AND g.Price < (SELECT MIN(g2.Price) FROM goods g2 WHERE g2.Flavor = 'Tart');
SELECT DISTINCT g.id FROM goods g WHERE g.price < (SELECT MIN(g2.price) FROM goods g2 WHERE g2.flavor ILIKE '%Tart%'); NULLS LAST;
SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13;
SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13;
SELECT r.Date, c.LastName, c.FirstName, g.Flavor, g.Food, g.Price FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15;
SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15;
SELECT g.id FROM goods g WHERE g.id ilike '%APP%';
SELECT g.id FROM goods g WHERE g.id ilike '%APP%';
SELECT g.price FROM goods g WHERE g.id ilike '%70%';
SELECT g.id, g.price FROM goods g WHERE g.id ilike '%70%';
SELECT c.last_name FROM customers c ORDER BY c.last_name ASC;
SELECT c.last_name FROM customers c ORDER BY c.last_name ASC;
SELECT g.id FROM goods g ORDER BY g.id NULLS LAST;
SELECT DISTINCT g.id FROM goods g ORDER BY g.id NULLS LAST;
SELECT DISTINCT r.ReceiptNumber, r.Date, r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor ilike '%apple%' OR r.CustomerId = 12;
SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor ilike '%apple%' OR r.CustomerId = 12;
SELECT r.ReceiptNumber, r.Date, c.LastName, c.FirstName FROM receipts r JOIN customers c ON r.CustomerId = c.Id ORDER BY r.Date DESC LIMIT 1;
SELECT r.ReceiptNumber, r.Date FROM receipts r ORDER BY r.Date DESC LIMIT 1;
SELECT r.ReceiptNumber, r.Date, r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE (r.Date = (SELECT MIN(r2.Date) FROM receipts) OR g.Price > 10) ORDER BY r.ReceiptNumber NULLS LAST;
SELECT r.ReceiptNumber, r.Date, g.Price FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 10 ORDER BY r.Date ASC NULLS LAST;
SELECT g.id FROM goods g WHERE g.price BETWEEN 3 AND 7 AND g.food IN ('Cookie', 'Cake');
SELECT g.id FROM goods g WHERE g.price BETWEEN 3 AND 7 AND (g.food ilike '%Cookie%' OR g.food ilike '%Cake%');
SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id ORDER BY r.date ASC LIMIT 1;
SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id ORDER BY r.date ASC LIMIT 1;
SELECT AVG(g.price) FROM goods g WHERE g.flavor ilike '%blackberry%' OR g.flavor ilike '%blueberry%';
SELECT AVG(g.price) FROM goods g WHERE g.flavor ilike '%blackberry%' OR g.flavor ilike '%blueberry%';
SELECT MIN(g.price) AS min_price FROM goods g WHERE g.flavor ilike '%cheese%';
SELECT g.Id, g.Flavor, g.Food, g.Price FROM goods g WHERE g.Flavor ilike '%cheese%' ORDER BY g.Price ASC NULLS LAST LIMIT 1;
SELECT g.Flavor, MAX(g.Price) AS MaxPrice, MIN(g.Price) AS MinPrice, AVG(g.Price) AS AvgPrice FROM goods g GROUP BY g.Flavor ORDER BY g.Flavor NULLS LAST;
SELECT g.Flavor, MAX(g.Price) AS MaxPrice, MIN(g.Price) AS MinPrice, AVG(g.Price) AS AvgPrice FROM goods g GROUP BY g.Flavor ORDER BY g.Flavor NULLS LAST;
SELECT g.Food, MIN(g.Price) AS min_price, MAX(g.Price) AS max_price FROM goods g GROUP BY g.Food ORDER BY g.Food NULLS LAST;
SELECT g.Food, MIN(g.Price) AS min_price, MAX(g.Price) AS max_price FROM goods g GROUP BY g.Food ORDER BY min_price NULLS LAST, max_price NULLS LAST;
SELECT r.date, COUNT(r.receiptnumber) AS receipt_count FROM receipts r GROUP BY r.date ORDER BY receipt_count DESC NULLS LAST LIMIT 3;
SELECT r.Date, COUNT(r.ReceiptNumber) AS ReceiptCount FROM receipts r GROUP BY r.Date ORDER BY ReceiptCount DESC LIMIT 3;
SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) AS times_purchased FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.FirstName, c.LastName ORDER BY times_purchased DESC LIMIT 1;
SELECT c.Id, COUNT(r.ReceiptNumber) AS purchase_count FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id ORDER BY purchase_count DESC LIMIT 1;
SELECT r.date, COUNT(DISTINCT r.customerid) AS unique_customers FROM receipts r GROUP BY r.date ORDER BY r.date NULLS LAST;
SELECT r.date, COUNT(DISTINCT r.customerid) AS number_of_customers FROM receipts r GROUP BY r.date ORDER BY r.date NULLS LAST;
SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receipt = i.receipt JOIN goods g ON i.item = g.id WHERE g.flavor = 'apple' AND g.food = 'Tart';
SELECT c.first_name, c.last_name FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receipt = i.receipt JOIN goods g ON i.item = g.id WHERE g.flavor ilike '%apple%' AND g.food ilike '%Tarts%';
SELECT c.id FROM goods c JOIN items i ON c.id = i.item WHERE c.food = 'Croissant' AND c.price > (SELECT price FROM goods WHERE food = 'Cookie');
SELECT c.id FROM customers c JOIN items i ON c.id = i.item JOIN goods g ON i.item = g.id WHERE g.food = 'croissant' ORDER BY c.id NULLS LAST LIMIT 1; SELECT array_agg(c.id) FROM customers c JOIN items i ON c.id = i.item JOIN goods g ON i.item = g.id WHERE g.food = 'croissant' ORDER BY c.id NULLS LAST; SELECT c.id FROM customers c JOIN items i ON c.id = i.item JOIN goods g ON i.item = g.id WHERE g.food = 'croissant' ORDER BY c.id NULLS LAST; SELECT c.id FROM customers c JOIN items i ON c.id = i.item JOIN goods g ON i.item = g.id WHERE g.food = 'croissant' ORDER BY c.id NULL
SELECT c.id FROM goods c WHERE c.price >= (SELECT AVG(g.price) FROM goods g WHERE g.food = 'Tart');
SELECT g.id FROM goods g WHERE g.price >= (SELECT AVG(g2.price) FROM goods g2 WHERE g2.food = 'Tart');
SELECT g.id FROM goods g WHERE g.price > (SELECT AVG(g2.price) * 2 FROM goods g2);
SELECT g.id FROM goods g WHERE g.price > (SELECT AVG(g2.price) FROM goods g2) * 2;
SELECT g.id, g.flavor, g.food, g.price FROM goods g ORDER BY g.price DESC;
SELECT g.id, g.flavor, g.food, g.price FROM goods g ORDER BY g.price NULLS LAST;
SELECT g.id, g.flavor FROM goods g ORDER BY g.flavor NULLS LAST;
SELECT g.id, g.flavor FROM goods g ORDER BY g.flavor NULLS LAST;
SELECT i.item FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor = 'chocolate' GROUP BY i.item HAVING COUNT(i.receipt) <= 10;
SELECT i.item FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor = 'chocolate' GROUP BY i.item HAVING COUNT(i.receipt) <= 10;
SELECT DISTINCT c.flavor FROM goods c JOIN items i ON c.id = i.item WHERE c.food = 'Cake' AND i.item NOT IN (SELECT id FROM goods WHERE food = 'Tart') ORDER BY c.flavor NULLS LAST;
SELECT DISTINCT g.Flavor FROM goods g WHERE g.Food != 'Tart' ORDER BY g.Flavor NULLS LAST;
SELECT g.Food, COUNT(i.Item) AS COUNT FROM goods g JOIN items i ON g.Id = i.Item GROUP BY g.Food ORDER BY COUNT DESC LIMIT 3;
SELECT i.item, COUNT(i.item) AS COUNT FROM items i GROUP BY i.item ORDER BY COUNT DESC LIMIT 3;
SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receiptnumber = i.receipt WHERE i.item = 'total' GROUP BY c.id HAVING SUM(i.item) > 150;
SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receiptnumber = i.receipt WHERE i.item = 'total' GROUP BY c.id HAVING SUM(i.price) > 150;
SELECT c.id AS customer_id, g.id AS good_id, AVG(i.price) AS average_price FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receipt_number = i.receipt JOIN goods g ON i.item = g.id GROUP BY c.id, g.id HAVING AVG(i.price) > 5 ORDER BY average_price DESC NULLS LAST;
SELECT c.id AS customer_id, g.id AS good_id, AVG(i.price) AS average_price FROM customers c JOIN receipts r ON c.id = r.customer_id JOIN items i ON r.receipt_number = i.receipt JOIN goods g ON i.item = g.id GROUP BY c.id, g.id HAVING AVG(i.price) > 5 ORDER BY average_price DESC NULLS LAST;
SELECT r.Date, SUM(g.Price) AS total_sales FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100 ORDER BY total_sales DESC NULLS LAST LIMIT 1;
SELECT r.date FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.price > 100 GROUP BY r.date HAVING SUM(g.price) > 100 ORDER BY r.date NULLS LAST;
SELECT COUNT(d.Driver_ID) FROM driver d;
SELECT COUNT(d.Driver_ID) AS total_drivers FROM driver d;
SELECT t.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d JOIN team_driver td ON d.driver_id = td.driver_id JOIN team t ON td.team_id = t.team_id WHERE CAST(d.points AS int) > 150 GROUP BY t.make ORDER BY number_of_drivers DESC NULLS LAST;
SELECT t.make, COUNT(d.driver_id) AS count_of_drivers FROM driver d JOIN team_driver td ON d.driver_id = td.driver_id JOIN team t ON td.team_id = t.team_id WHERE CAST(d.points AS int) > 150 GROUP BY t.make ORDER BY count_of_drivers DESC NULLS LAST;
SELECT t.make, AVG(d.age) AS average_age FROM driver d JOIN team_driver td ON d.driver_id = td.driver_id JOIN team t ON td.team_id = t.team_id GROUP BY t.make ORDER BY average_age DESC NULLS LAST;
SELECT d.make, AVG(d.age) AS average_age FROM driver d GROUP BY d.make ORDER BY average_age DESC NULLS LAST;
SELECT AVG(d.Laps) FROM driver d WHERE d.Age < 20;
SELECT AVG(d.Laps) FROM driver d WHERE d.Age < 20;
SELECT t.manager, t.sponsor, t.car_owner FROM team t ORDER BY t.car_owner NULLS LAST;
SELECT t.team, t.manager, t.sponsor, t.car_owner FROM team t ORDER BY t.car_owner NULLS LAST;
SELECT t.make FROM team t GROUP BY t.make HAVING COUNT(t.team_id) > 1;
SELECT t.make FROM team t GROUP BY t.make HAVING COUNT(t.team_id) > 1;
SELECT t.make FROM team t WHERE t.car_owner ilike '%Buddy Arrington%' ORDER BY t.make NULLS LAST;
SELECT t.make FROM team t WHERE t.car_owner ilike '%Buddy Arrington%';
SELECT MAX(d.Points) AS max_points, MIN(d.Points) AS min_points FROM driver d;
SELECT MAX(d.Points) AS highest_points, MIN(d.Points) AS lowest_points FROM driver d;
SELECT COUNT(*) FROM `driver` WHERE CAST(`Points` AS int) < 150;
SELECT COUNT(*) FROM driver d WHERE CAST(d.points AS int) < 150;
SELECT d.driver FROM driver d ORDER BY d.age ASC;
SELECT d.driver FROM driver d ORDER BY d.age ASC;
SELECT d.driver FROM driver d ORDER BY d.points DESC;
SELECT d.driver, d.points FROM driver d ORDER BY d.points DESC;
SELECT d.driver, c.country FROM driver d JOIN country c ON d.country = c.country_id;
SELECT d.driver, c.country FROM driver d JOIN country c ON d.country = c.country_id;
SELECT MAX(d.Points) AS maximum_points FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Capital ilike '%Dublin%';
SELECT MAX(d.Points) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Capital ilike '%Dublin%';
SELECT AVG(d.age) FROM driver d JOIN country c ON d.country = c.country_id WHERE c.official_native_language ilike '%English%';
SELECT AVG(d.age) FROM driver d JOIN country c ON d.country = c.country_id WHERE c.official_native_language ilike '%English%';
SELECT c.country FROM country c JOIN driver d ON c.country_id = d.country WHERE CAST(d.points AS int) > 150;
SELECT c.country FROM country c JOIN driver d ON c.country_id = d.country WHERE CAST(d.points AS int) > 150 GROUP BY c.country;
SELECT c.Capital FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Points = (SELECT MAX(Points) FROM driver) ORDER BY c.Capital NULLS LAST;
SELECT c.capital FROM driver d JOIN country c ON d.country = c.country_id ORDER BY d.points DESC LIMIT 1;
SELECT t.make, COUNT(DISTINCT d.driver_id) AS number_of_drivers FROM team t JOIN team_driver td ON t.team_id = td.team_id JOIN driver d ON td.driver_id = d.driver_id GROUP BY t.make ORDER BY number_of_drivers DESC NULLS LAST;
SELECT d.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.make ORDER BY number_of_drivers DESC NULLS LAST;
SELECT t.make, COUNT(td.driver_id) AS driver_count FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.make ORDER BY driver_count DESC LIMIT 1;
SELECT t.make, COUNT(DISTINCT d.driver_id) AS driver_count FROM driver d JOIN team_driver td ON d.driver_id = td.driver_id JOIN team t ON td.team_id = t.team_id GROUP BY t.make ORDER BY driver_count DESC LIMIT 1;
SELECT d.make FROM driver d GROUP BY d.make HAVING COUNT(d.driver_id) >= 3;
SELECT t.make FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.make HAVING COUNT(td.driver_id) >= 3;
SELECT t.team FROM team t WHERE t.team_id NOT IN (SELECT td.team_id FROM team_driver td) ORDER BY t.team NULLS LAST;
SELECT t.team FROM team t WHERE t.team NOT IN (SELECT d.team FROM driver d) ORDER BY t.team NULLS LAST;
SELECT c.country FROM country c JOIN driver d1 ON c.country_id = d1.country JOIN driver d2 ON c.country_id = d2.country WHERE d1.make = 'Dodge' AND d2.make = 'Chevrolet' GROUP BY c.country;
SELECT c.country FROM country c JOIN driver d1 ON c.country_id = d1.country JOIN driver d2 ON c.country_id = d2.country AND d1.make != d2.make WHERE d1.make = 'Dodge' AND d2.make = 'Chevrolet' GROUP BY c.country;
SELECT SUM(d.Points) AS total_points, AVG(d.Points) AS average_points FROM driver d;
SELECT d.driver, SUM(d.points) AS total_points, AVG(d.points) AS average_points FROM driver d GROUP BY d.driver;
SELECT c.country FROM country c WHERE c.country NOT IN (SELECT d.country FROM driver d) ORDER BY c.country NULLS LAST;
SELECT c.country FROM country c WHERE c.country NOT IN (SELECT d.country FROM driver d) ORDER BY c.country NULLS LAST;
SELECT t.manager, t.sponsor FROM team t JOIN (SELECT td.team_id, COUNT(td.driver_id) AS driver_count FROM team_driver td GROUP BY td.team_id ORDER BY driver_count DESC LIMIT 1) AS mt ON t.team_id = mt.team_id;
SELECT t.manager, t.sponsor FROM team t JOIN (SELECT td.team_id, COUNT(td.driver_id) AS num_drivers FROM team_driver td GROUP BY td.team_id ORDER BY num_drivers DESC LIMIT 1) AS m ON t.team_id = m.team_id;
SELECT t.manager, t.car_owner FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.manager, t.car_owner HAVING COUNT(td.driver_id) >= 2;
SELECT t.team, t.manager, t.car_owner FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team, t.manager, t.car_owner HAVING COUNT(td.driver_id) >= 2;
SELECT COUNT(DISTINCT i.institution_id) FROM institution i;
SELECT COUNT(DISTINCT i.Institution_ID) FROM institution i;
SELECT i.name FROM institution i ORDER BY i.name ASC;
SELECT i.name FROM institution i ORDER BY i.name ASC;
SELECT i.name FROM institution i ORDER BY i.founded ASC;
SELECT i.name FROM institution i ORDER BY i.founded NULLS LAST;
SELECT i.city, i.province FROM institution i;
SELECT i.city, i.province FROM institution i;
SELECT MIN(i.enrollment) AS minimum_enrollment, MAX(i.enrollment) AS maximum_enrollment FROM institution i;
SELECT MIN(i.enrollment) AS minimum_enrollment, MAX(i.enrollment) AS maximum_enrollment FROM institution i;
SELECT i.affiliation FROM institution i WHERE i.city not ilike '%Vancouver%' ORDER BY i.affiliation NULLS LAST;
SELECT DISTINCT i.Affiliation FROM institution i WHERE i.City not ilike '%Vancouver%' ORDER BY i.Affiliation NULLS LAST;
SELECT i.Stadium FROM institution i ORDER BY i.Capacity DESC;
SELECT i.Stadium, i.Capacity FROM institution i ORDER BY i.Capacity DESC;
SELECT i.Stadium FROM institution i ORDER BY i.Enrollment DESC NULLS LAST LIMIT 1;
SELECT i.Stadium FROM institution i WHERE i.Enrollment = (SELECT MAX(Enrollment) FROM institution);
SELECT i.name, c.nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id;
SELECT i.name, c.nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id;
SELECT i.Nickname FROM Institution i ORDER BY i.Enrollment ASC NULLS LAST LIMIT 1;
SELECT i.Nickname FROM Institution i ORDER BY i.Enrollment ASC LIMIT 1;
SELECT i.name, c.number_of_championships FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC;
SELECT i.name, c.number_of_championships FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC;
SELECT DISTINCT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id;
SELECT DISTINCT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id WHERE c.number_of_championships >= 1 ORDER BY i.name NULLS LAST;
SELECT SUM(c.Number_of_Championships) AS total_championships FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation ilike '%public%';
SELECT SUM(c.Number_of_Championships) AS total_championships FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation ilike '%Public%';
SELECT i.affiliation, COUNT(i.affiliation) AS number_of_institutions FROM institution i GROUP BY i.affiliation ORDER BY number_of_institutions DESC NULLS LAST;
SELECT i.affiliation, COUNT(i.institution_id) AS number_of_institutions FROM institution i GROUP BY i.affiliation ORDER BY number_of_institutions DESC NULLS LAST;
SELECT i.affiliation FROM institution i GROUP BY i.affiliation ORDER BY COUNT(i.affiliation) DESC LIMIT 1;
SELECT i.affiliation FROM institution i GROUP BY i.affiliation ORDER BY COUNT(i.affiliation) DESC LIMIT 1;
SELECT EXTRACT(YEAR FROM TO_DATE(i.founded, 'YYYY')) AS YEAR, COUNT(*) AS number_of_institutions FROM institution i GROUP BY YEAR HAVING COUNT(*) > 1 ORDER BY YEAR NULLS LAST;
SELECT EXTRACT(YEAR FROM TO_DATE(i.founded, 'YYYY')) AS YEAR, COUNT(i.institution_id) AS number_of_institutions FROM institution i GROUP BY YEAR HAVING COUNT(i.institution_id) > 1 ORDER BY YEAR NULLS LAST;
SELECT c.Nickname FROM Championship c ORDER BY c.Capacity DESC;
SELECT i.name, c.nickname, i.capacity FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY i.capacity DESC;
SELECT SUM(i.Enrollment) AS total_enrollment FROM institution i WHERE i.City IN ('Vancouver', 'Calgary');
SELECT i.enrollment FROM institution i WHERE i.city IN ('Vancouver', 'Caldgary');
SELECT DISTINCT i1.Province FROM institution i1 JOIN institution i2 ON i1.Province = i2.Province AND i1.Founded < 1920 AND i2.Founded > 1950;
SELECT DISTINCT i1.province FROM institution i1 JOIN institution i2 ON i1.province = i2.province AND AGE(i1.founded, i2.founded) = 20 AND i1.founded < 1920 AND i2.founded > 1950;
SELECT COUNT(DISTINCT i.province) FROM institution i;
SELECT COUNT(DISTINCT i.province) FROM institution i;
SELECT w.code, w.location, w.capacity FROM warehouses w;
SELECT * FROM Warehouses w;
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location ilike '%New York%' ORDER BY b.Contents NULLS LAST;
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location ilike '%New York%' ORDER BY b.Contents NULLS LAST;
SELECT b.Contents FROM Boxes b WHERE b.Value > 150;
SELECT b.Contents FROM Boxes b WHERE b.Value > 150;
SELECT w.code, AVG(b.value) AS average_value FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code ORDER BY average_value DESC NULLS LAST;
SELECT b.warehouse, AVG(b.value) AS average_value FROM boxes b GROUP BY b.warehouse ORDER BY average_value DESC NULLS LAST;
SELECT AVG(b.Value) AS average_value, SUM(b.Value) AS total_value FROM Boxes b;
SELECT AVG(b.Value) AS average_value, SUM(b.Value) AS total_value FROM Boxes b;
SELECT AVG(w.capacity) AS average_capacity, SUM(w.capacity) AS total_capacity FROM warehouses w;
SELECT AVG(w.capacity) AS average_capacity, SUM(w.capacity) AS total_capacity FROM warehouses w;
SELECT b.contents, AVG(b.value) AS average_value, MAX(b.value) AS maximum_value FROM boxes b GROUP BY b.contents;
SELECT b.contents, AVG(b.value) AS average_value, MAX(b.value) AS maximum_value FROM boxes b GROUP BY b.contents;
SELECT b.Contents, SUM(b.Value) AS TotalValue FROM Boxes b GROUP BY b.Contents ORDER BY TotalValue DESC NULLS LAST LIMIT 1;
SELECT b.Contents, b.Value FROM Boxes b ORDER BY b.Value DESC NULLS LAST LIMIT 1;
SELECT AVG(b.Value) AS average_value FROM Boxes b;
SELECT AVG(b.Value) FROM Boxes b;
SELECT DISTINCT b.Contents FROM Boxes b;
SELECT b.contents FROM boxes b GROUP BY b.contents ORDER BY COUNT(b.contents) DESC NULLS LAST;
SELECT COUNT(DISTINCT b.Contents) AS total_distinct_contents FROM Boxes b;
SELECT COUNT(DISTINCT b.Contents) AS number_of_distinct_contents FROM Boxes b;
SELECT DISTINCT w.location FROM Warehouses w;
SELECT w.location FROM Warehouses w GROUP BY w.location ORDER BY COUNT(w.location) DESC NULLS LAST;
SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location IN ('Chicago', 'New York') ORDER BY b.code NULLS LAST;
SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%' OR w.location ilike '%New York%' ;
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York');
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York');
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York') ;
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location ilike '%Chicago%' AND w.Location ilike '%New York%' ORDER BY b.Contents NULLS LAST;
SELECT b.contents FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location not ilike '%New York%' ORDER BY b.contents NULLS LAST;
SELECT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location != 'New York' ORDER BY b.Contents NULLS LAST;
SELECT w.location FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse WHERE b.contents ilike '%Rocks%' AND b.contents not ilike '%Scissors%' ORDER BY w.location NULLS LAST;
SELECT DISTINCT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents ilike '%Rock%' AND b.Contents not ilike '%Scissors%' ORDER BY w.Location NULLS LAST;
SELECT DISTINCT w.code, w.location, w.capacity FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code WHERE b.contents ilike '%Rocks%' OR b.contents ilike '%Scissors%' ORDER BY w.code NULLS LAST;
SELECT DISTINCT b.Warehouse FROM Boxes b WHERE b.Contents ilike '%Rocks%' OR b.Contents ilike '%Scissors%' ;
SELECT w.location FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse WHERE b.contents ilike '%Rocks%' OR b.contents ilike '%Scissors%' ORDER BY w.location NULLS LAST;
SELECT DISTINCT w.location FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code WHERE b.contents ilike '%Rocks%Scissors%' ;
SELECT b.code, b.contents, b.value FROM boxes b ORDER BY b.value NULLS LAST;
SELECT b.code, b.contents, b.value FROM boxes b ORDER BY b.value NULLS LAST;
SELECT b.code, b.contents, b.value FROM boxes b ORDER BY b.value ASC NULLS LAST LIMIT 1;
SELECT b.code, b.contents, b.value FROM boxes b ORDER BY b.value ASC NULLS LAST LIMIT 1;
SELECT b.contents FROM boxes b WHERE b.value > (SELECT AVG(b2.value) FROM boxes b2);
SELECT b.contents, b.value FROM Boxes b WHERE b.value > (SELECT AVG(b2.value) FROM Boxes b2);
SELECT b.contents FROM boxes b GROUP BY b.contents ORDER BY b.contents NULLS LAST;
SELECT b.contents FROM boxes b ORDER BY b.contents ASC;
SELECT b.code FROM boxes b WHERE b.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Rocks');
SELECT b.Code FROM Boxes b WHERE b.Value > (SELECT MAX(b2.Value) FROM Boxes b2 WHERE b2.Contents ilike '%Rocks%');
SELECT b.code, b.contents, b.value FROM boxes b WHERE b.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Scissors');
SELECT b.code, b.contents, b.value FROM Boxes b WHERE b.value > (SELECT MAX(b2.value) FROM Boxes b2 WHERE b2.contents ilike '%Scissors%');
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Capacity = (SELECT MAX(Capacity) FROM Warehouses);
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Capacity = (SELECT MAX(Capacity) FROM Warehouses);
SELECT w.code, AVG(b.value) AS average_value FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code HAVING AVG(b.value) > 150 ORDER BY average_value DESC NULLS LAST;
SELECT w.code, AVG(b.value) AS average_value FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code GROUP BY w.code HAVING AVG(b.value) > 150 ORDER BY average_value DESC NULLS LAST;
SELECT b.contents, SUM(b.value) AS total_value, COUNT(b.code) AS total_boxes FROM boxes b GROUP BY b.contents ORDER BY total_value DESC NULLS LAST;
SELECT b.contents, SUM(b.value) AS total_value, COUNT(b.code) AS total_boxes FROM boxes b GROUP BY b.contents ORDER BY total_value DESC NULLS LAST;
SELECT w.location, SUM(w.capacity) AS total_capacity, AVG(w.capacity) AS average_capacity, MAX(w.capacity) AS maximum_capacity FROM Warehouses w GROUP BY w.location;
SELECT w.location, SUM(w.capacity) AS total_capacity, AVG(w.capacity) AS average_capacity, MAX(w.capacity) AS maximum_capacity FROM Warehouses w GROUP BY w.location;
SELECT SUM(w.Capacity) AS total_capacity FROM Warehouses w;
SELECT SUM(w.Capacity) AS total_capacity FROM Warehouses w;
SELECT w.location, MAX(b.value) AS max_value FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code GROUP BY w.location ORDER BY max_value DESC NULLS LAST;
SELECT w.location, MAX(b.value) AS max_value FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code GROUP BY w.location ORDER BY max_value DESC NULLS LAST;
SELECT w.code, COUNT(b.code) AS number_of_boxes FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code ORDER BY number_of_boxes DESC NULLS LAST;
SELECT w.code, COUNT(b.code) AS number_of_boxes FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code ORDER BY number_of_boxes DESC NULLS LAST;
SELECT COUNT(DISTINCT w.location) FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse WHERE b.contents ilike '%Rock%';
SELECT COUNT(DISTINCT b.Warehouse) AS number_of_warehouses FROM Boxes b WHERE b.Contents ilike '%Rock%';
SELECT b.code, w.location FROM boxes b JOIN warehouses w ON b.warehouse = w.code;
SELECT b.code, w.location FROM boxes b JOIN warehouses w ON b.warehouse = w.code;
SELECT b.code FROM Boxes b JOIN Warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%' ORDER BY b.code NULLS LAST;
SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location ilike '%Chicago%' ORDER BY b.code NULLS LAST;
SELECT w.code, COUNT(b.code) AS number_of_boxes FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code ORDER BY number_of_boxes DESC NULLS LAST;
SELECT w.code, COUNT(b.code) AS number_of_boxes FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code ORDER BY number_of_boxes DESC NULLS LAST;
SELECT b.warehouse, COUNT(DISTINCT b.contents) AS number_of_distinct_contents FROM boxes b GROUP BY b.warehouse ORDER BY number_of_distinct_contents DESC NULLS LAST;
SELECT b.warehouse, COUNT(DISTINCT b.contents) AS number_of_types FROM boxes b GROUP BY b.warehouse ORDER BY number_of_types DESC NULLS LAST;
SELECT w.code FROM Warehouses w WHERE w.capacity < (SELECT COUNT(b.code) FROM Boxes b WHERE b.warehouse = w.code);
SELECT w.code FROM Warehouses w JOIN Boxes b ON w.code = b.warehouse GROUP BY w.code HAVING COUNT(b.code) > w.capacity;
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location NOT ILIKE '%Chicago%';
SELECT SUM(b.Value) AS total_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location NOT ILIKE '%Chicago%';
SELECT u.university_name, u.city, u.state FROM university u ORDER BY u.university_name NULLS LAST;
SELECT u.university_name, u.city, u.state FROM university u ORDER BY u.university_name ASC;
SELECT COUNT(*) FROM university u WHERE u.state IN ('Illinois', 'Ohio');
SELECT COUNT(DISTINCT u.University_ID) FROM university u WHERE u.State IN ('Illinois', 'Ohio');
SELECT MAX(u.enrollment) AS max_enrollment, AVG(u.enrollment) AS average_enrollment, MIN(u.enrollment) AS min_enrollment FROM university u;
SELECT MAX(u.enrollment) AS max_enrollment, AVG(u.enrollment) AS average_enrollment, MIN(u.enrollment) AS min_enrollment FROM university u;
SELECT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(enrollment) FROM university);
SELECT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(enrollment) FROM university);
SELECT DISTINCT u.home_conference FROM university u;
SELECT DISTINCT u.Home_Conference FROM university u;
SELECT u.home_conference, COUNT(u.university_id) AS number_of_universities FROM university u GROUP BY u.home_conference ORDER BY number_of_universities DESC NULLS LAST;
SELECT u.home_conference, COUNT(u.university_id) AS number_of_universities FROM university u GROUP BY u.home_conference ORDER BY number_of_universities DESC NULLS LAST;
SELECT u.state, COUNT(u.university_id) AS university_count FROM university u GROUP BY u.state ORDER BY university_count DESC LIMIT 1;
SELECT u.state, COUNT(u.university_id) AS university_count FROM university u GROUP BY u.state ORDER BY university_count DESC LIMIT 1;
SELECT u.Home_Conference, AVG(u.Enrollment) AS average_enrollment FROM university u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000 ORDER BY average_enrollment DESC NULLS LAST;
SELECT u.Home_Conference FROM university u WHERE AVG(u.Enrollment) > 2000 GROUP BY u.Home_Conference;
SELECT u.home_conference, SUM(u.enrollment) AS total_enrollment FROM university u GROUP BY u.home_conference ORDER BY total_enrollment ASC LIMIT 1;
SELECT u.home_conference, MIN(u.enrollment) AS min_enrollment FROM university u GROUP BY u.home_conference ORDER BY min_enrollment ASC NULLS LAST LIMIT 1;
SELECT m.major_name, m.major_code FROM major m ORDER BY m.major_code NULLS LAST;
SELECT m.major_name, m.major_code FROM major m ORDER BY m.major_code NULLS LAST;
SELECT m.major_name, mr.rank FROM major m JOIN major_ranking mr ON m.major_id = mr.major_id JOIN university u ON mr.university_id = u.university_id WHERE u.university_name = 'Augustana College' ORDER BY mr.rank NULLS LAST;
SELECT m.major_name, r.rank FROM major m JOIN major_ranking r ON m.major_id = r.major_id WHERE r.university_id = 100001 ORDER BY r.rank NULLS LAST;
SELECT u.University_Name, u.City, u.State FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' ORDER BY mr.Rank ASC LIMIT 1;
SELECT u.University_Name, u.City, u.State FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' ORDER BY mr.Rank ASC LIMIT 1;
SELECT u.University_Name, COUNT(m.Major_ID) AS major_count FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE r.Rank = 1 GROUP BY u.University_Name ORDER BY major_count DESC LIMIT 1;
SELECT u.University_Name, COUNT(mr.Major_ID) AS major_count FROM university u JOIN overall_ranking OR ON u.University_ID = OR.University_ID JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE OR.Rank = 1 GROUP BY u.University_Name ORDER BY major_count DESC LIMIT 1;
SELECT u.University_Name FROM university u LEFT JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Rank IS NULL OR mr.Rank != 1 ORDER BY u.University_Name NULLS LAST;
SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Rank = 1) ORDER BY u.University_Name NULLS LAST;
SELECT DISTINCT u.University_Name FROM university u JOIN major_ranking mr1 ON u.University_ID = mr1.University_ID JOIN major_ranking mr2 ON u.University_ID = mr2.University_ID WHERE mr1.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND mr2.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education') ORDER BY u.University_Name NULLS LAST;
SELECT DISTINCT u.University_Name FROM university u JOIN major_ranking mr1 ON u.University_ID = mr1.University_ID JOIN major_ranking mr2 ON u.University_ID = mr2.University_ID WHERE mr1.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND mr2.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education') ORDER BY u.University_Name NULLS LAST;
SELECT u.university_name, o.rank FROM university u JOIN overall_ranking o ON u.university_id = o.university_id WHERE u.state = 'Wisconsin' ORDER BY o.rank NULLS LAST;
SELECT u.university_name, o.rank FROM university u JOIN overall_ranking o ON u.university_id = o.university_id WHERE u.state = 'Wisconsin' ORDER BY o.rank NULLS LAST;
SELECT u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Research_point DESC NULLS LAST LIMIT 1;
SELECT u.University_Name, SUM(o.Research_point) AS total_research_points FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID GROUP BY u.University_Name ORDER BY total_research_points DESC LIMIT 1;
SELECT u.University_Name, o.Reputation_point FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID ORDER BY o.Reputation_point ASC;
SELECT u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Reputation_point ASC;
SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank >= 3 ORDER BY mr.Rank NULLS LAST;
SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank >= 3 ORDER BY u.University_Name NULLS LAST;
SELECT SUM(u.enrollment) AS total_enrollment FROM university u JOIN overall_ranking r ON u.university_id = r.university_id WHERE r.rank <= 5;
SELECT SUM(u.enrollment) AS total_enrollment FROM university u JOIN overall_ranking r ON u.university_id = r.university_id WHERE r.rank <= 5;
SELECT u.University_Name, o.Citation_point FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID WHERE o.Reputation_point >= 3 ORDER BY o.Reputation_point DESC NULLS LAST;
SELECT u.university_name, o.citation_point FROM overall_ranking o JOIN university u ON o.university_id = u.university_id ORDER BY o.reputation_point DESC NULLS LAST LIMIT 3;
SELECT u.state, COUNT(u.university_id) AS university_count FROM university u WHERE u.enrollment < 3000 GROUP BY u.state HAVING COUNT(u.university_id) > 2 ORDER BY university_count DESC NULLS LAST;
SELECT u.state, COUNT(u.university_id) AS university_count FROM university u WHERE u.enrollment < 3000 GROUP BY u.state HAVING COUNT(u.university_id) > 2 ORDER BY university_count DESC NULLS LAST;
SELECT m.title FROM Movies m WHERE m.rating IS NULL;
SELECT m.Title FROM Movies m WHERE m.Rating IS NULL;
SELECT m.title FROM movies m WHERE m.rating ilike '%G%';
SELECT m.title FROM movies m WHERE m.rating ilike '%G%';
SELECT m.title FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE mt.name = 'Odeon';
SELECT m.title FROM Movies m JOIN MovieTheaters t ON m.code = t.movie WHERE t.name = 'Odeon';
SELECT m.title, t.name AS theater_name FROM Movies m JOIN MovieTheaters t ON m.code = t.movie;
SELECT m.title AS movie_title, t.name AS theater_name FROM Movies m JOIN MovieTheaters t ON m.code = t.movie;
SELECT COUNT(*) FROM Movies m WHERE m.Rating ilike '%G%';
SELECT COUNT(*) FROM Movies m WHERE m.Rating ilike '%G%';
SELECT COUNT(DISTINCT mt.Movie) AS total_movies FROM MovieTheaters mt;
SELECT COUNT(DISTINCT mt.Movie) AS number_of_movies FROM MovieTheaters mt;
SELECT COUNT(DISTINCT m.code) AS number_of_movies FROM Movies m JOIN MovieTheaters mt ON m.code = mt.movie;
SELECT COUNT(DISTINCT m.code) AS number_of_movies FROM MovieTheaters mt JOIN Movies m ON mt.movie = m.code;
SELECT COUNT(DISTINCT mt.Code) AS number_of_theaters FROM MovieTheaters mt;
SELECT COUNT(DISTINCT mt.Code) AS number_of_theaters FROM MovieTheaters mt;
SELECT m.Rating FROM Movies m WHERE m.Title ilike '%Citizen%';
SELECT m.Rating FROM Movies m WHERE m.Title ilike '%Citizen%';
SELECT mt.name FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE m.rating IN ('G', 'PG');
SELECT mt.name FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE m.rating IN ('G', 'PG');
SELECT m.title FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE mt.name IN ('Odeon', 'Imperial') ORDER BY m.title NULLS LAST;
SELECT m.title FROM Movies m JOIN MovieTheaters t ON m.code = t.movie WHERE t.name IN ('Odeon', 'Imperial') ORDER BY m.title NULLS LAST;
SELECT m.title FROM Movies m JOIN MovieTheaters mt1 ON m.code = mt1.movie JOIN MovieTheaters mt2 ON m.code = mt2.movie WHERE mt1.name = 'Odeon' AND mt2.name = 'Imperial' GROUP BY m.title;
SELECT m.title FROM Movies m JOIN MovieTheaters mt1 ON m.code = mt1.movie JOIN MovieTheaters mt2 ON m.code = mt2.movie WHERE mt1.name = 'Odeon' AND mt2.name = 'Imperial' GROUP BY m.title;
SELECT m.Title FROM Movies m LEFT JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Name != 'Odeon' ORDER BY m.Title NULLS LAST;
SELECT m.Title FROM Movies m WHERE m.Code NOT IN (SELECT t.Movie FROM MovieTheaters t WHERE t.Name = 'Odeon') ORDER BY m.Title NULLS LAST;
SELECT m.title FROM movies m ORDER BY m.title ASC;
SELECT m.title FROM movies m ORDER BY m.title ASC;
SELECT m.title, m.rating FROM Movies m ORDER BY m.rating DESC NULLS LAST;
SELECT m.title, m.rating FROM Movies m ORDER BY m.rating DESC NULLS LAST;
SELECT mt.name, COUNT(mt.movie) AS movie_count FROM movie_theaters mt GROUP BY mt.name ORDER BY movie_count DESC LIMIT 1;
SELECT mt.name, COUNT(mt.movie) AS movie_count FROM movie_theaters mt GROUP BY mt.name ORDER BY movie_count DESC LIMIT 1;
SELECT m.title, COUNT(mt.code) AS number_of_theaters FROM Movies m JOIN MovieTheaters mt ON m.code = mt.movie GROUP BY m.title ORDER BY number_of_theaters DESC LIMIT 1;
SELECT m.title, COUNT(mt.code) AS number_of_theaters FROM Movies m JOIN MovieTheaters mt ON m.code = mt.movie GROUP BY m.title ORDER BY number_of_theaters DESC LIMIT 1;
SELECT m.rating, COUNT(m.code) AS number_of_movies FROM Movies m GROUP BY m.rating ORDER BY number_of_movies DESC NULLS LAST;
SELECT m.rating, COUNT(m.code) AS number_of_movies FROM Movies m GROUP BY m.rating ORDER BY number_of_movies DESC NULLS LAST;
SELECT COUNT(*) FROM Movies m WHERE m.Rating IS NOT NULL;
SELECT COUNT(*) FROM Movies m WHERE m.Rating IS NOT NULL;
SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NOT NULL;
SELECT DISTINCT mt.name FROM MovieTheaters mt;
SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NULL;
SELECT mt.name FROM MovieTheaters mt WHERE mt.movie IS NULL;
SELECT mt.name FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE m.rating = 'G';
SELECT m.title, mt.name FROM movies m JOIN movie_theaters mt ON m.code = mt.movie WHERE m.rating = 'G';
SELECT m.title FROM movies m;
SELECT m.title FROM Movies m;
SELECT DISTINCT m.Rating FROM Movies m;
SELECT m.rating FROM Movies m GROUP BY m.rating ORDER BY m.rating NULLS LAST;
SELECT m.code, m.title, m.rating FROM Movies m WHERE m.rating IS NULL;
SELECT m.code, m.title, m.rating FROM Movies m WHERE m.rating IS NULL;
SELECT m.Title FROM Movies m WHERE m.Code NOT IN (SELECT t.Movie FROM MovieTheaters t) ORDER BY m.Title NULLS LAST;
SELECT m.Title FROM Movies m WHERE m.Code NOT IN (SELECT t.Movie FROM MovieTheaters t) ORDER BY m.Title NULLS LAST;
SELECT e.name, p.contents, p.weight, row_number() OVER(PARTITION BY p.recipient ORDER BY p.weight DESC) AS rank FROM employee e JOIN package p ON e.employeeid = p.recipient ORDER BY rank ASC LIMIT 1;
SELECT c.name, MAX(p.weight) AS max_weight FROM package p JOIN client c ON p.recipient = c.account_number GROUP BY c.name ORDER BY max_weight DESC LIMIT 1;
SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';
SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';
SELECT e.position FROM Employee e WHERE e.name ilike '%Amy%Wong%';
SELECT e.position FROM Employee e WHERE e.name ilike '%Amy%Wong%';
SELECT e.salary, e.position FROM Employee e WHERE e.name ilike '%Turanga%Leela%';
SELECT e.salary, e.position FROM Employee e WHERE e.name ilike '%Turanga%Leela%';
SELECT AVG(e.salary) FROM employee e WHERE e.position ilike '%intern%';
SELECT AVG(e.salary) FROM employee e WHERE e.position ilike '%intern%';
SELECT h.level FROM Has_Clearance h WHERE h.employee IN (SELECT e.employeeid FROM employee e WHERE e.position ilike '%Physician%');
SELECT h.level FROM Has_Clearance h WHERE h.employee IN (SELECT e.employeeid FROM Employee e WHERE e.position ilike '%physician%') AND h.planet = 757071; -- Earth's planet ID is 757071.
SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';
SELECT COUNT(p.PackageNumber) AS total_packages FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';
SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong';
SELECT p.package_number FROM employee e JOIN shipment s ON e.employee_id = s.manager JOIN package p ON s.shipment_id = p.shipment_ WHERE e.name = 'Leo Wong';
SELECT p.shipment, p.package_number, p.contents, p.weight, p.sender, p.recipient FROM package p JOIN client c ON p.sender = c.account_number WHERE c.name ilike '%Leo%Wong%' OR c.name ilike '%Leo%Wong%' ORDER BY p.shipment NULLS LAST, p.package_number NULLS LAST;
SELECT p.package_number FROM package p WHERE p.sender = 12345678 OR p.recipient = 12345678 ORDER BY p.package_number NULLS LAST;
SELECT COUNT(*) FROM Package p WHERE p.Sender = (SELECT e.AccountNumber FROM Employee e WHERE e.Name = 'Ogden Wernstrom') AND p.Recipient = (SELECT e.AccountNumber FROM Employee e WHERE e.Name = 'Leo Wong');
SELECT COUNT(p.PackageNumber) AS number_of_packages FROM Package p JOIN Client c1 ON p.Sender = c1.AccountNumber JOIN Client c2 ON p.Recipient = c2.AccountNumber WHERE c1.Name = 'Ogden Wernstrom' AND c2.Name = 'Leo Wong';
SELECT p.Contents FROM Package p JOIN Client c ON p.Sender = c.AccountNumber JOIN Employee e ON c.Name = e.Name WHERE e.Name ilike '%John%Zoidfarb%' ORDER BY p.Contents NULLS LAST;
SELECT p.Contents FROM Package p JOIN Client c ON p.Sender = c.AccountNumber JOIN Employee e ON c.Name = e.Name WHERE e.Name ilike '%John%Zoidfarb%' ORDER BY p.Contents NULLS LAST;
SELECT p.package_number, p.weight FROM package p JOIN client c ON p.sender = c.account_number WHERE c.name ilike '%John%' ORDER BY p.weight DESC NULLS LAST LIMIT 1;
SELECT p.package_number, p.weight FROM package p JOIN client c ON p.sender = c.account_number WHERE c.name ilike '%John%' ORDER BY p.weight DESC NULLS LAST LIMIT 1;
SELECT p.PackageNumber, p.Weight FROM Package p ORDER BY p.Weight ASC NULLS LAST LIMIT 3;
SELECT p.package_number, p.weight FROM package p ORDER BY p.weight ASC NULLS LAST LIMIT 3;
SELECT c.name, COUNT(p.package_number) AS total_packages FROM client c JOIN package p ON c.account_number = p.sender GROUP BY c.name ORDER BY total_packages DESC LIMIT 1;
SELECT c.name, COUNT(p.package_number) AS total_packages FROM client c JOIN package p ON c.account_number = p.sender GROUP BY c.name ORDER BY total_packages DESC LIMIT 1;
SELECT c.name, COUNT(p.package_number) AS number_of_packages FROM client c JOIN package p ON c.account_number = p.recipient GROUP BY c.name ORDER BY number_of_packages ASC LIMIT 1;
SELECT c.Name, COUNT(p.PackageNumber) AS number_of_packages FROM Client c JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.Name ORDER BY number_of_packages ASC LIMIT 1;
SELECT c.name FROM client c JOIN (SELECT s.sender FROM package p JOIN shipment s ON p.shipment = s.shipmentid GROUP BY s.sender HAVING COUNT(p.packageid) > 1) AS subquery ON c.accountnumber = subquery.sender;
SELECT c.name FROM client c JOIN (SELECT s.sender FROM package p GROUP BY s.sender HAVING COUNT(p.packageid) > 1) AS m ON c.accountnumber = m.sender;
SELECT p.coordinates FROM planet p WHERE p.name = 'Mars';
SELECT p.coordinates FROM planet p WHERE p.name ilike '%Mars%';
SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;
SELECT p.name, p.coordinates FROM planet p ORDER BY p.name ASC;
SELECT s.shipmentid FROM shipment s WHERE s.manager = (SELECT e.employeeid FROM employee e WHERE e.name ilike '%Phillip%J%Fry%');
SELECT s.shipmentid FROM shipment s WHERE s.manager = (SELECT e.employeeid FROM employee e WHERE e.name ilike '%Phillip%J%Fry%');
SELECT s.date FROM shipment s ORDER BY s.date NULLS LAST;
SELECT s.date FROM shipment s ORDER BY s.date NULLS LAST;
SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name = 'Mars';
SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name = 'Mars';
SELECT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars' AND s.Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela');
SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid JOIN employee e ON s.manager = e.employeeid WHERE p.name = 'Mars' AND e.name = 'Turanga Leela';
SELECT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars' OR s.Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela');
SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name = 'Mars' AND s.manager = 1;
SELECT p.name, COUNT(s.shipmentid) AS total_shipments FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.name ORDER BY total_shipments DESC NULLS LAST;
SELECT p.name, COUNT(s.shipmentid) AS number_of_shipments FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.name ORDER BY number_of_shipments DESC NULLS LAST;
SELECT p.name FROM Planet p JOIN (SELECT s.planet, COUNT(*) AS shipment_count FROM Shipment s GROUP BY s.planet) AS ps ON p.planetid = ps.planet ORDER BY ps.shipment_count DESC LIMIT 1;
SELECT p.name, COUNT(s.shipmentid) AS number_of_shipments FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.name ORDER BY number_of_shipments DESC LIMIT 1;
SELECT e.name, COUNT(s.shipmentid) AS number_of_shipments FROM employee e JOIN shipment s ON e.employeeid = s.manager GROUP BY e.name;
SELECT e.name, COUNT(s.shipmentid) AS number_of_shipments FROM employee e JOIN shipment s ON e.employeeid = s.manager GROUP BY e.name ORDER BY number_of_shipments DESC NULLS LAST;
SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE pl.Name = 'Mars';
SELECT SUM(p.Weight) AS total_weight FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE pl.Name = 'Mars';
SELECT p.name AS planet_name, SUM(w.weight) AS total_weight FROM Package w JOIN Shipment s ON w.shipment = s.shipmentid JOIN Planet p ON s.planet = p.planetid GROUP BY p.name ORDER BY total_weight DESC NULLS LAST;
SELECT p.name, SUM(w.weight) AS total_weight FROM Package w JOIN Shipment s ON w.shipment = s.shipmentid JOIN Planet p ON s.planet = p.planetid GROUP BY p.name ORDER BY total_weight DESC NULLS LAST;
SELECT p.name FROM Planet p JOIN Shipment s ON p.planetid = s.planet JOIN Package pk ON s.shipment = pk.shipment WHERE SUM(pk.weight) > 30;
SELECT p.name FROM Planet p JOIN Shipment s ON p.planetid = s.planet WHERE SUM(s.date) > 30;
SELECT p.package_number FROM package p JOIN shipment s ON p.shipment = s.shipment_id JOIN planet pl ON s.planet = pl.planet_id WHERE pl.name = 'Omicron Persei 8' AND p.sender = 757071;
SELECT COUNT(p.PackageNumber) AS number_of_packages FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Employee e ON s.Manager = e.EmployeeID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE e.Name = 'Zapp Brannigan' AND pl.Name = 'Omicron Persei 8';
SELECT p.package_number FROM package p JOIN shipment s ON p.shipment = s.shipment_id JOIN planet pl ON s.planet = pl.planet_id WHERE pl.name = 'Omicron Persei 8' OR p.sender = 2001;
SELECT COUNT(DISTINCT p.PackageNumber) AS total_packages FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE pl.Name = 'Omicron Persei 8' OR p.Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan');
SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight BETWEEN 10 AND 30;
SELECT p.package_number, p.weight FROM package p WHERE p.weight BETWEEN 10 AND 30;
SELECT e.name FROM Employee e LEFT JOIN Has_Clearance hc ON e.employeeid = hc.employee AND hc.planet = (SELECT planetid FROM planet WHERE name = 'Mars') WHERE hc.employee IS NULL;
SELECT e.name FROM employee e LEFT JOIN has_clearance hc ON e.employeeid = hc.employee AND hc.planet = (SELECT planetid FROM planet WHERE name = 'Mars') WHERE hc.employee IS NULL;
SELECT e.name FROM Employee e JOIN Has_Clearance hc ON e.employeeid = hc.employee WHERE hc.planet = (SELECT planetid FROM planet WHERE name = 'Omega III');
SELECT e.name FROM employee e JOIN has_clearance hc ON e.employeeid = hc.employee JOIN planet p ON hc.planet = p.planetid WHERE p.name = 'Omega III';
SELECT p.name FROM Planet p JOIN Has_Clearance hc ON p.planetid = hc.planet WHERE hc.employee IN (SELECT employee.employeeid FROM employee GROUP BY employee.employeeid HAVING COUNT(employee.employeeid) = 1) ORDER BY p.name NULLS LAST;
SELECT p.name AS planet_name, e.name AS employee_name FROM Planet p JOIN Shipment s ON p.planetid = s.planet JOIN Employee e ON s.manager = e.employeeid JOIN Has_Clearance hc ON e.employeeid = hc.employee AND p.planetid = hc.planet WHERE hc.level = 1;
SELECT e.name FROM Employee e WHERE e.salary BETWEEN 5000 AND 10000;
SELECT e.name FROM employee e WHERE e.salary BETWEEN 5000 AND 10000 ORDER BY e.name NULLS LAST;
SELECT e.name FROM employee e WHERE e.salary > (SELECT AVG(e2.salary) FROM employee e2) OR e.salary > 5000;
SELECT e.name FROM employee e WHERE e.salary > (SELECT AVG(e2.salary) FROM employee e2) OR e.salary > 5000;
SELECT COUNT(DISTINCT e.employeeid) FROM employee e LEFT JOIN has_clearance hc ON e.employeeid = hc.employee AND hc.planet = (SELECT planetid FROM planet WHERE name = 'Mars') WHERE hc.employee IS NULL;
SELECT COUNT(DISTINCT e.EmployeeID) FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee AND hc.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') WHERE hc.Employee IS NULL;
SELECT COUNT(g.game_id) AS total_games FROM game g;
SELECT COUNT(g.game_id) AS total_games FROM game g;
SELECT g.Title, g.Developers, g.Units_sold_Millions FROM game g ORDER BY g.Units_sold_Millions DESC;
SELECT g.title, g.developers, g.units_sold_millions FROM game g ORDER BY g.units_sold_millions DESC;
SELECT AVG(g.Units_sold_Millions) AS average_units_sold_millions FROM game g WHERE g.Developers not ilike '%Nintendo%';
SELECT AVG(g.Units_sold_Millions) FROM game g WHERE g.Developers not ilike '%Nintendo%';
SELECT p.platform_name, p.market_district FROM platform p;
SELECT p.platform_name, p.market_district FROM platform p;
SELECT p.platform_name, p.platform_id FROM platform p WHERE p.download_rank = 1 ORDER BY p.platform_name NULLS LAST;
SELECT p.platform_name, p.platform_id FROM platform p WHERE p.download_rank = 1 ORDER BY p.platform_name NULLS LAST;
SELECT MIN(p.rank_of_the_year) AS min_rank, MAX(p.rank_of_the_year) AS max_rank FROM player p;
SELECT MIN(p.rank_of_the_year) AS min_rank, MAX(p.rank_of_the_year) AS max_rank FROM player p;
SELECT COUNT(*) FROM player p WHERE p.rank_of_the_year < 3;
SELECT COUNT(*) FROM player p WHERE p.rank_of_the_year <= 3;
SELECT p.player_name FROM player p ORDER BY p.player_name ASC;
SELECT p.player_name FROM player p ORDER BY p.player_name ASC;
SELECT p.player_name, p.college FROM player p ORDER BY p.rank_of_the_year DESC;
SELECT p.player_name, p.college, p.rank_of_the_year FROM player p ORDER BY p.rank_of_the_year DESC;
SELECT p.player_name, p.rank_of_the_year FROM player p JOIN game_player gp ON p.player_id = gp.player_id JOIN game g ON gp.game_id = g.game_id WHERE g.title ilike '%Super%Mario%World%' ORDER BY p.rank_of_the_year NULLS LAST;
SELECT p.player_name, p.rank_of_the_year FROM player p JOIN game_player gp ON p.player_id = gp.player_id JOIN game g ON gp.game_id = g.game_id WHERE g.title ilike '%Super%Mario%World%' ORDER BY p.rank_of_the_year NULLS LAST;
SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College ilike '%Auburn%' ORDER BY g.Developers NULLS LAST;
SELECT DISTINCT g.developers FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college ilike '%Auburn%' ORDER BY g.developers NULLS LAST;
SELECT AVG(g.Units_sold_Millions) AS average_units_sold_millions FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID JOIN game g ON gp.Game_ID = g.Game_ID WHERE p.Position = 'Guard';
SELECT AVG(g.Units_sold_Millions) AS average_units_sold_millions FROM game_player gp JOIN game g ON gp.Game_ID = g.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard';
SELECT g.title, p.platform_name FROM game g JOIN platform p ON g.platform_id = p.platform_id;
SELECT g.title, p.platform_name FROM game g JOIN platform p ON g.platform_id = p.platform_id;
SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district IN ('Asia', 'USA');
SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district IN ('Asia', 'USA');
SELECT g.franchise, COUNT(g.game_id) AS game_count FROM game g GROUP BY g.franchise ORDER BY game_count DESC NULLS LAST;
SELECT g.franchise, COUNT(g.game_id) AS game_count FROM game g GROUP BY g.franchise ORDER BY game_count DESC NULLS LAST;
SELECT g.franchise, COUNT(g.game_id) AS game_count FROM game g GROUP BY g.franchise ORDER BY game_count DESC LIMIT 1;
SELECT g.franchise, COUNT(g.game_id) AS game_count FROM game g GROUP BY g.franchise ORDER BY game_count DESC LIMIT 1;
SELECT g.franchise FROM game g GROUP BY g.franchise HAVING COUNT(g.game_id) >= 2;
SELECT g.franchise FROM game g GROUP BY g.franchise HAVING COUNT(g.game_id) >= 2;
SELECT p.player_name FROM player p LEFT JOIN game_player gp ON p.player_id = gp.player_id WHERE gp.player_id IS NULL;
SELECT p.player_name FROM player p WHERE p.player_id NOT IN (SELECT g.player_id FROM game_player g) ORDER BY p.player_name NULLS LAST;
SELECT DISTINCT g.title FROM game g JOIN game_player gp1 ON g.game_id = gp1.game_id JOIN game_player gp2 ON g.game_id = gp2.game_id JOIN player p1 ON gp1.player_id = p1.player_id JOIN player p2 ON gp2.player_id = p2.player_id WHERE p1.college = 'Oklahoma' AND p2.college = 'Auburn';
SELECT DISTINCT g.title FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college ilike '%Oklahoma%' OR p.college ilike '%Auburn%' ORDER BY g.title NULLS LAST;
SELECT DISTINCT g.franchise FROM game g;
SELECT DISTINCT g.franchise FROM game g;
SELECT g.title FROM game g WHERE g.game_id NOT IN (SELECT g.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard');
SELECT g.title FROM game g WHERE g.game_id NOT IN (SELECT g.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard') ORDER BY g.title NULLS LAST;
SELECT p.name FROM press p ORDER BY p.year_profits_billion DESC;
SELECT p.name FROM press p ORDER BY p.year_profits_billion DESC;
SELECT p.name FROM press p WHERE (p.year_profit_billion > 15 OR p.month_profit_billion > 1) ORDER BY p.name NULLS LAST;
SELECT p.name FROM press p WHERE (p.year_profits_billion > 15 OR p.month_profits_billion > 1) ORDER BY p.name NULLS LAST;
SELECT p.year_profits_billion AS max_profit, AVG(p.year_profits_billion) AS average_profit FROM press p GROUP BY p.year_profits_billion ORDER BY max_profit DESC NULLS LAST;
SELECT p.name, to_char(to_date(p.year_profits_billion::text, '9999'), 'YYYY') AS year_profit, rank() OVER (PARTITION BY p.name ORDER BY to_date(p.year_profits_billion::text, '9999') DESC) AS rank FROM press p ORDER BY p.name, rank NULLS LAST;
SELECT p.name, p.month_profits_billion FROM press p ORDER BY p.month_profits_billion DESC NULLS LAST LIMIT 1;
SELECT p.name, p.month_profits_billion FROM press p ORDER BY p.month_profits_billion DESC NULLS LAST LIMIT 1;
SELECT p.name, p.month_profits_billion FROM press p ORDER BY p.month_profits_billion DESC NULLS LAST LIMIT 1;
SELECT p.name, p.month_profits_billion FROM press p ORDER BY p.month_profits_billion DESC NULLS LAST LIMIT 1;
SELECT COUNT(*) FROM author a WHERE a.age < 30;
SELECT COUNT(*) FROM author a WHERE a.age < 30;
SELECT a.gender, AVG(a.age) AS average_age FROM author a GROUP BY a.gender;
SELECT a.gender, AVG(a.age) AS average_age FROM author a GROUP BY a.gender ORDER BY average_age DESC NULLS LAST;
SELECT a.gender, COUNT(*) FROM author a WHERE a.age > 30 GROUP BY a.gender;
SELECT a.gender, COUNT(*) FROM author a WHERE a.age > 30 GROUP BY a.gender;
SELECT b.Title FROM book b ORDER BY b.Release_date DESC;
SELECT b.title FROM book b ORDER BY b.release_date DESC;
SELECT b.book_series, COUNT(b.book_id) AS number_of_books FROM book b GROUP BY b.book_series ORDER BY number_of_books DESC NULLS LAST;
SELECT b.book_series, COUNT(b.book_id) AS COUNT FROM book b GROUP BY b.book_series ORDER BY COUNT DESC NULLS LAST;
SELECT b.title, b.release_date, b.sale_amount FROM book b ORDER BY b.sale_amount DESC NULLS LAST LIMIT 5;
SELECT b.title, b.release_date FROM book b ORDER BY b.sale_amount DESC NULLS LAST LIMIT 5;
SELECT b.book_series FROM book b WHERE CAST(b.sale_amount AS int) > 1000 AND CAST(b.sale_amount AS int) < 500 GROUP BY b.book_series;
SELECT b.book_series FROM book b WHERE CAST(b.sale_amount AS int) > 1000 AND CAST(b.sale_amount AS int) < 500 GROUP BY b.book_series;
SELECT a.name FROM author a JOIN book b ON a.author_id = b.author_id WHERE b.book_series ilike '%MM%' AND b.book_series ilike '%LT%' ORDER BY a.name NULLS LAST;
SELECT a.name FROM author a JOIN book b ON a.author_id = b.author_id WHERE b.book_series ilike '%MM%' AND b.book_series ilike '%LT%' GROUP BY a.name;
SELECT a.name, a.age FROM author a LEFT JOIN book b ON a.author_id = b.author_id WHERE b.author_id IS NULL;
SELECT a.name FROM author a LEFT JOIN book b ON a.author_id = b.author_id WHERE b.author_id IS NULL;
SELECT a.name FROM author a JOIN book b ON a.author_id = b.author_id GROUP BY a.name HAVING COUNT(b.book_id) > 1;
SELECT a.name FROM author a JOIN book b ON a.author_id = b.author_id GROUP BY a.name HAVING COUNT(b.book_id) > 1;
SELECT b.title, a.name AS author_name, p.name AS publisher_name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY b.sale_amount DESC NULLS LAST LIMIT 3;
SELECT b.title, a.name AS author_name, p.name AS press_name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY b.sale_amount DESC NULLS LAST LIMIT 3;
SELECT p.name, SUM(b.sale_amount::int) AS total_sale_amount FROM book b JOIN press p ON b.press_id = p.press_id GROUP BY p.name ORDER BY total_sale_amount DESC NULLS LAST;
SELECT p.name, SUM(b.sale_amount::int) AS total_sale_amount FROM book b JOIN press p ON b.press_id = p.press_id GROUP BY p.name ORDER BY total_sale_amount DESC NULLS LAST;
SELECT p.name, COUNT(b.book_id) AS number_of_books FROM book b JOIN press p ON b.press_id = p.press_id WHERE CAST(b.sale_amount AS int) > 1000 GROUP BY p.name ORDER BY number_of_books DESC NULLS LAST;
SELECT p.name, COUNT(b.book_id) AS num_books FROM press p JOIN book b ON p.press_id = b.press_id WHERE CAST(b.sale_amount AS int) > 1000 GROUP BY p.name ORDER BY num_books DESC NULLS LAST;
SELECT a.name FROM author a JOIN book b ON a.author_id = b.author_id ORDER BY b.sale_amount DESC LIMIT 1;
SELECT a.name FROM author a JOIN book b ON a.author_id = b.author_id ORDER BY b.sale_amount DESC LIMIT 1;
SELECT a.name, a.gender FROM author a JOIN (SELECT b.author_id, COUNT(b.book_id) AS book_count FROM book b GROUP BY b.author_id) AS ab ON a.author_id = ab.author_id ORDER BY book_count DESC LIMIT 1;
SELECT a.name, a.gender, COUNT(b.book_id) AS book_count FROM author a JOIN book b ON a.author_id = b.author_id GROUP BY a.name, a.gender ORDER BY book_count DESC LIMIT 1;
SELECT a.name FROM author a LEFT JOIN book b ON a.author_id = b.author_id LEFT JOIN press p ON b.press_id = p.press_id WHERE p.name ilike '%Accor%' GROUP BY a.name HAVING COUNT(b.book_id) = 0 ORDER BY a.name NULLS LAST;
SELECT a.name FROM author a LEFT JOIN book b ON a.author_id = b.author_id LEFT JOIN press p ON b.press_id = p.press_id WHERE p.name not ilike '%Accor%' ORDER BY a.name NULLS LAST;
SELECT p.name, SUM(p.year_profits_billion) AS total_year_profits FROM press p JOIN book b ON p.press_id = b.press_id GROUP BY p.name HAVING COUNT(b.book_id) > 2;
SELECT p.name, SUM(b.sale_amount) / 1000000 AS yearly_profit_millions FROM book b JOIN press p ON b.press_id = p.press_id GROUP BY p.name HAVING COUNT(b.book_id) > 2;
SELECT COUNT(DISTINCT a.author_name) AS number_of_authors FROM Authors a;
SELECT a.author_name FROM Authors a;
SELECT a.author_name, a.other_details FROM Authors a;
SELECT a.other_details FROM Authors a WHERE a.author_name = 'Addison Denesik';
SELECT COUNT(d.document_id) AS total_documents FROM Documents d;
SELECT d.author_name FROM Documents d WHERE d.document_id = 4;
SELECT a.author_name FROM Documents d JOIN Authors a ON d.author_name = a.author_name WHERE d.document_name ilike '%Travel%to%Brazil%' LIMIT 1;
SELECT COUNT(d.document_id) FROM Documents d WHERE d.author_name ILIKE '%Era%Kerluke%';
SELECT d.document_name, d.document_description FROM Documents d;
SELECT d.document_id, d.document_name FROM Documents d WHERE d.author_name ILIKE '%Bianka Cummings%' ORDER BY d.document_id NULLS LAST;
SELECT a.author_name, a.other_details FROM Authors a JOIN Documents d ON a.author_name = d.author_name WHERE d.document_name ilike '%Travel%to%China%' ORDER BY a.author_name NULLS LAST;
SELECT a.author_name, COUNT(d.document_id) AS number_of_documents FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name ORDER BY number_of_documents DESC NULLS LAST;
SELECT a.author_name, COUNT(d.document_id) AS document_count FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name ORDER BY document_count DESC LIMIT 1;
SELECT a.author_name FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name HAVING COUNT(d.document_id) >= 2;
SELECT COUNT(b.process_id) FROM Business_Processes b;
SELECT bp.next_process_id, bp.process_name, bp.process_description FROM Business_Processes bp WHERE bp.process_id = 9;
SELECT bp.process_name FROM Business_Processes bp WHERE bp.process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9);
SELECT COUNT(DISTINCT po.process_outcome_code) AS number_of_process_outcomes FROM Process_Outcomes po;
SELECT po.process_outcome_code, po.process_outcome_description FROM Process_Outcomes po ORDER BY po.process_outcome_code NULLS LAST;
SELECT po.process_outcome_description FROM Process_Outcomes po WHERE po.process_outcome_code = 'working';
SELECT ps.process_status_code, COUNT(*) AS COUNT FROM Process_Status ps GROUP BY ps.process_status_code ORDER BY COUNT DESC NULLS LAST;
SELECT ps.process_status_code, ps.process_status_description FROM Process_Status ps ORDER BY ps.process_status_code NULLS LAST;
SELECT ps.process_status_description FROM Process_Status ps WHERE ps.process_status_code = 'ct';
SELECT COUNT(s.staff_id) AS total_staff FROM Staff s;
SELECT s.staff_id, s.staff_details FROM Staff s ORDER BY s.staff_id NULLS LAST;
SELECT s.staff_details FROM Staff s WHERE s.staff_id = 100;
SELECT COUNT(DISTINCT r.staff_role_code) AS number_of_staff_roles FROM Ref_Staff_Roles r;
SELECT r.staff_role_code, r.staff_role_description FROM Ref_Staff_Roles r ORDER BY r.staff_role_code NULLS LAST;
SELECT r.staff_role_description FROM Ref_Staff_Roles r WHERE r.staff_role_code = 'HR';
SELECT COUNT(DISTINCT dp.document_id) AS number_of_documents FROM Documents_Processes dp;
SELECT DISTINCT bp.process_id FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id;
SELECT d.document_id FROM Documents d WHERE d.document_id NOT IN (SELECT d.document_id FROM Documents_Processes dp) ORDER BY d.document_id NULLS LAST;
SELECT bp.process_id FROM Business_Processes bp LEFT JOIN Documents_Processes dp ON bp.process_id = dp.process_id WHERE dp.process_id IS NULL;
SELECT dp.process_outcome_description, dp.process_status_description FROM Documents_Processes dp WHERE dp.document_id = 0;
SELECT bp.process_name FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id JOIN Documents d ON dp.document_id = d.document_id WHERE d.document_name ilike '%Travel%to%Brazil%' LIMIT 1;
SELECT bp.process_id, COUNT(dp.document_id) AS number_of_documents FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id ORDER BY bp.process_id NULLS LAST;
SELECT COUNT(DISTINCT s.staff_id) AS number_of_staff FROM Staff_in_Processes s JOIN Documents_Processes dp ON s.document_id = dp.document_id AND s.process_id = dp.process_id WHERE dp.document_id = 0 AND dp.process_id = 9;
SELECT s.staff_id, COUNT(d.document_id) AS number_of_documents FROM Staff s JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id JOIN Documents_Processes dp ON sp.document_id = dp.document_id AND sp.process_id = dp.process_id JOIN Documents d ON dp.document_id = d.document_id GROUP BY s.staff_id ORDER BY number_of_documents DESC NULLS LAST;
SELECT s.staff_role_code, COUNT(d.document_id) AS number_of_documents FROM Staff s JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id JOIN Documents_Processes dp ON sp.document_id = dp.document_id JOIN Documents d ON dp.document_id = d.document_id GROUP BY s.staff_role_code ORDER BY number_of_documents DESC NULLS LAST;
SELECT COUNT(DISTINCT s.staff_role_code) FROM Staff_in_Processes s WHERE s.staff_id = 3;
SELECT COUNT(DISTINCT a.agency_id) AS number_of_agencies FROM Agencies a;
SELECT COUNT(DISTINCT a.agency_id) AS number_of_agencies FROM Agencies a;
SELECT a.agency_id, a.agency_details FROM Agencies a;
SELECT a.agency_id, a.agency_details FROM Agencies a;
SELECT COUNT(DISTINCT c.client_id) AS total_clients FROM Clients c;
SELECT COUNT(DISTINCT c.client_id) AS total_clients FROM Clients c;
SELECT c.client_id, c.client_details FROM Clients c;
SELECT c.client_id, c.client_details FROM Clients c;
SELECT a.agency_id, COUNT(c.client_id) AS number_of_clients FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id ORDER BY number_of_clients DESC NULLS LAST;
SELECT a.agency_id, COUNT(c.client_id) AS number_of_clients FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id ORDER BY number_of_clients DESC NULLS LAST;
SELECT a.agency_id, a.agency_details, COUNT(c.client_id) AS client_count FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY client_count DESC LIMIT 1;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN (SELECT c.agency_id, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.agency_id) AS subquery ON a.agency_id = subquery.agency_id ORDER BY subquery.client_count DESC LIMIT 1;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details HAVING COUNT(c.client_id) >= 2 ORDER BY a.agency_id NULLS LAST;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details HAVING COUNT(c.client_id) >= 2;
SELECT a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id WHERE c.client_details ilike '%Mac%';
SELECT a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id WHERE c.client_details ilike '%Mac%';
SELECT c.client_id, c.client_details, s.staff_details, a.agency_details FROM Clients c JOIN Staff s ON c.agency_id = s.agency_id JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT c.client_id, c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT c.sic_code, COUNT(c.client_id) AS number_of_clients FROM Clients c GROUP BY c.sic_code ORDER BY number_of_clients DESC NULLS LAST;
SELECT c.sic_code, COUNT(c.client_id) AS number_of_clients FROM Clients c GROUP BY c.sic_code ORDER BY number_of_clients DESC NULLS LAST;
SELECT c.client_id, c.client_details FROM Clients c WHERE c.sic_code ilike '%Bad%';
SELECT c.client_id, c.client_details FROM Clients c WHERE c.sic_code ilike '%Bad%';
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id;
SELECT a.agency_id FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id WHERE c.agency_id IS NULL;
SELECT a.agency_id FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id WHERE c.agency_id IS NULL;
SELECT COUNT(i.invoice_id) AS total_invoices FROM Invoices i;
SELECT COUNT(i.invoice_id) AS total_invoices FROM Invoices i;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i;
SELECT c.client_id, COUNT(i.invoice_id) AS number_of_invoices FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ORDER BY number_of_invoices DESC NULLS LAST;
SELECT c.client_id, COUNT(i.invoice_id) AS number_of_invoices FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ORDER BY number_of_invoices DESC NULLS LAST;
SELECT c.client_id, c.client_details, COUNT(i.invoice_id) AS invoice_count FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id, c.client_details ORDER BY invoice_count DESC LIMIT 1;
SELECT c.client_id, c.client_details FROM Clients c JOIN (SELECT i.client_id, COUNT(i.invoice_id) AS invoice_count FROM Invoices i GROUP BY i.client_id) AS mc ON c.client_id = mc.client_id ORDER BY mc.invoice_count DESC LIMIT 1;
SELECT c.client_id FROM Clients c JOIN Invoices i1 ON c.client_id = i1.client_id JOIN Invoices i2 ON c.client_id = i2.client_id GROUP BY c.client_id HAVING COUNT(i1.invoice_id) >= 2;
SELECT c.client_id FROM Clients c JOIN Invoices i1 ON c.client_id = i1.client_id JOIN Invoices i2 ON c.client_id = i2.client_id WHERE i1.invoice_id != i2.invoice_id;
SELECT i.invoice_status, COUNT(i.invoice_id) AS COUNT FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT DESC NULLS LAST;
SELECT i.invoice_status, COUNT(i.invoice_id) AS COUNT FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT DESC NULLS LAST;
SELECT i.invoice_status, COUNT(i.invoice_status) AS COUNT FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT DESC LIMIT 1;
SELECT i.invoice_status, COUNT(i.invoice_status) AS COUNT FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT DESC LIMIT 1;
SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT m.meeting_type, m.other_details FROM Meetings m ORDER BY m.meeting_type NULLS LAST;
SELECT m.meeting_type, m.other_details FROM Meetings m;
SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m;
SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m;
SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working';
SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working';
SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL;
SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL;
SELECT COUNT(*) FROM `Payments`;
SELECT COUNT(*) AS total_payments FROM `Payments`;
SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p;
SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p;
SELECT i.invoice_id, i.invoice_status, p.payment_id FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id ORDER BY i.invoice_id, i.invoice_status;
SELECT DISTINCT p.invoice_id, i.invoice_status FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id;
SELECT i.invoice_id, COUNT(p.payment_id) AS number_of_payments FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id ORDER BY i.invoice_id NULLS LAST;
SELECT p.invoice_id, COUNT(p.payment_id) AS number_of_payments FROM Payments p GROUP BY p.invoice_id ORDER BY number_of_payments DESC NULLS LAST;
SELECT i.invoice_id, i.invoice_status, i.invoice_details, COUNT(p.payment_id) AS number_of_payments FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id, i.invoice_status, i.invoice_details ORDER BY number_of_payments DESC LIMIT 1;
SELECT i.invoice_id, i.invoice_status, i.invoice_details, COUNT(p.payment_id) AS payment_count FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id, i.invoice_status, i.invoice_details ORDER BY payment_count DESC LIMIT 10;
SELECT COUNT(s.staff_id) AS total_staff FROM Staff s;
SELECT COUNT(s.staff_id) AS total_staff FROM Staff s;
SELECT a.agency_id, COUNT(s.staff_id) AS total_staff FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id ORDER BY total_staff DESC NULLS LAST;
SELECT a.agency_id, COUNT(s.staff_id) AS number_of_staff FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id ORDER BY number_of_staff DESC NULLS LAST;
SELECT a.agency_id, a.agency_details, COUNT(s.staff_id) AS staff_count FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY staff_count DESC LIMIT 1;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN (SELECT s.agency_id, COUNT(s.staff_id) AS staff_count FROM Staff s GROUP BY s.agency_id) AS subquery ON a.agency_id = subquery.agency_id ORDER BY subquery.staff_count DESC LIMIT 1;
SELECT m.meeting_outcome, COUNT(m.meeting_outcome) AS COUNT FROM Meetings m GROUP BY m.meeting_outcome ORDER BY COUNT DESC NULLS LAST;
SELECT m.meeting_outcome, COUNT(m.meeting_id) AS COUNT FROM Meetings m GROUP BY m.meeting_outcome ORDER BY COUNT DESC NULLS LAST;
SELECT c.client_id, COUNT(m.meeting_id) AS number_of_meetings FROM Clients c JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id ORDER BY number_of_meetings DESC NULLS LAST;
SELECT m.client_id, COUNT(m.meeting_id) AS number_of_meetings FROM Meetings m GROUP BY m.client_id ORDER BY number_of_meetings DESC NULLS LAST;
SELECT m.client_id, m.meeting_type, COUNT(m.meeting_id) AS number_of_meetings FROM Meetings m GROUP BY m.client_id, m.meeting_type ORDER BY number_of_meetings DESC NULLS LAST;
SELECT m.meeting_type, COUNT(m.meeting_id) AS number_of_meetings FROM Meetings m GROUP BY m.meeting_type ORDER BY number_of_meetings DESC NULLS LAST;
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id;
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id;
SELECT m.meeting_id, COUNT(s.staff_id) AS number_of_staff FROM Meetings m JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id ORDER BY m.meeting_id NULLS LAST;
SELECT m.meeting_id, COUNT(s.staff_id) AS number_of_staff FROM Meetings m JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id ORDER BY number_of_staff DESC NULLS LAST;
SELECT s.staff_id, COUNT(m.meeting_id) AS number_of_meetings FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id JOIN Meetings m ON sm.meeting_id = m.meeting_id GROUP BY s.staff_id ORDER BY number_of_meetings ASC LIMIT 1;
SELECT s.staff_id FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id GROUP BY s.staff_id HAVING COUNT(sm.meeting_id) > 0 ORDER BY COUNT(sm.meeting_id) ASC LIMIT 1;
SELECT COUNT(DISTINCT sm.staff_id) AS number_of_staff FROM Staff_in_Meetings sm;
SELECT COUNT(DISTINCT s.staff_id) AS number_of_staff FROM Staff_in_Meetings s;
SELECT COUNT(DISTINCT s.staff_id) AS total_staff FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.staff_id IS NULL;
SELECT COUNT(DISTINCT s.staff_id) AS unattended_staff FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.staff_id IS NULL;
SELECT c.client_id, c.client_details FROM Clients c JOIN Meetings m ON c.client_id = m.client_id OR c.client_id = m.client_id JOIN Invoices i ON c.client_id = i.client_id;
SELECT c.client_id, c.client_details FROM Clients c JOIN Meetings m ON c.client_id = m.client_id OR c.client_id = m.client_id JOIN Invoices i ON c.client_id = i.client_id WHERE m.meeting_type = 'Consultation' AND i.invoice_status = 'Paid' ORDER BY c.client_id NULLS LAST;
SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE s.staff_details ilike '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sm.meeting_id) >= 1;
SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE s.staff_details ilike '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sm.meeting_id) >= 1;
SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id, c.sic_code, c.agency_id HAVING COUNT(DISTINCT m.meeting_id) >= 1;
SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id, c.sic_code, c.agency_id HAVING COUNT(DISTINCT m.meeting_id) = 1;
SELECT m.start_date_time, m.end_date_time, c.client_details AS client_info, s.staff_details AS staff_info FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;
SELECT m.meeting_id, m.start_date_time, m.end_date_time, c.client_details AS client_name, s.staff_details AS staff_name FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;
