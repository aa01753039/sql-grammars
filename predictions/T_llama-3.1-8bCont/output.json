[
  {
    "id": 0,
    "db_id": "address_1",
    "question": {
      "id": 0,
      "db_id": "address_1",
      "question": "Show the first name and the last name for students living in state MD."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the first name and the last name for students living in state MD.\n\nSolution:\n\nSELECT S.Fname, S.LName FROM Student AS S WHERE S.city_code IN (SELECT C.city_code FROM City as C WHERE C.state = 'MD');\n\n"
  },
  {
    "id": 1,
    "db_id": "address_1",
    "question": {
      "id": 1,
      "db_id": "address_1",
      "question": "What are the full names of students living in MD?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the full names of students living in MD?\n\nSolution:\n\nSELECT S.LName ||'' || S.Fname AS FullName FROM Student S WHERE S.city_code = 'MD';\n\n"
  },
  {
    "id": 2,
    "db_id": "address_1",
    "question": {
      "id": 2,
      "db_id": "address_1",
      "question": "How many students live in China?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many students live in China?\n\nSolution:\n\nSELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China');\n\n"
  },
  {
    "id": 3,
    "db_id": "address_1",
    "question": {
      "id": 3,
      "db_id": "address_1",
      "question": "Count the number of students living in China."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of students living in China.\n\nSolution:\n\nSELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China');\n\n"
  },
  {
    "id": 4,
    "db_id": "address_1",
    "question": {
      "id": 4,
      "db_id": "address_1",
      "question": "Return the first name and major of students are living in Baltimore?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the first name and major of students are living in Baltimore?\n\nSolution:\n\nSELECT S.Fname, M.Major FROM Student AS S JOIN Direct_distance AS D ON S.city_code = D.city1_code JOIN City AS C ON D.city2_code = C.city_code WHERE C.city_name = 'Baltimore' AND S.Sex = 'M';\n\n"
  },
  {
    "id": 5,
    "db_id": "address_1",
    "question": {
      "id": 5,
      "db_id": "address_1",
      "question": "What are the first names and majors of students living in Baltimore?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the first names and majors of students living in Baltimore?\n\nSolution:\n\nSELECT S.Fname, M.Major FROM Student AS S JOIN Major AS M ON S.Major = M.Major WHERE S.city_code = 'BAL' ORDER BY S.StuID;\n\n"
  },
  {
    "id": 6,
    "db_id": "address_1",
    "question": {
      "id": 6,
      "db_id": "address_1",
      "question": "Show the number of students living in each country."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the number of students living in each country.\n\nSolution:\n\nSELECT COUNT(*) AS num_students, Country FROM Student GROUP BY Country;\n\n"
  },
  {
    "id": 7,
    "db_id": "address_1",
    "question": {
      "id": 7,
      "db_id": "address_1",
      "question": "How many students live in each country?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many students live in each country?\n\nOutput: A single column table with two columns. The first column should be the name of the country and the second column should be the number of students living there.\n\nExample Output:\n\nCountry | Number_of_students\n--------|-------------------\nUSA     | 1000\nCanada  | 500\n\nExplanation: There are 1000 students from USA and 500 students from Canada.\n\nConstraints:\n- You can assume that all tables have at least one row.\n- You can assume that all tables have unique primary keys.\n- You can assume that all foreign key constraints are valid.\n- You can assume that all data types are correct (e.g., no strings where integers are expected).\n- You do not need to handle any errors or exceptions.\n- You may use any built-in functions available in SQLite.\n- You must use only standard SQL syntax (no extensions).\n\nHint: Use the following steps to solve this problem:\n1. Find out which cities are located in each country by joining the City table with"
  },
  {
    "id": 8,
    "db_id": "address_1",
    "question": {
      "id": 8,
      "db_id": "address_1",
      "question": "Find the number of students living in each city."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of students living in each city.\n\nSolution:\n\nSELECT city_name, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY city_name;\n\n"
  },
  {
    "id": 9,
    "db_id": "address_1",
    "question": {
      "id": 9,
      "db_id": "address_1",
      "question": "How many students live in each city?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many students live in each city?\n\nOutput: A list of cities and the number of students living there. The list should be sorted by the number of students in descending order (i.e., most students first). If two or more cities have the same number of students, they should appear in alphabetical order.\n\nExample Output:\n\nCity Name | Number of Students\n---------------------------\nNew York | 5\nLos Angeles | 4\nChicago | 3\nHouston | 3\nPhoenix | 2\nPhiladelphia | 2\nSan Antonio | 2\nSan Diego | 2\nDallas | 1\nSan Jose | 1\nJacksonville | 1\nIndianapolis | 1\nAustin | 1\nColumbus | 1\nFort Worth | 1\nCharlotte | 1\nMemphis | 1\nEl Paso | 1\nBoston | 1\nSeattle | 1\nDenver | 1\nWashington DC | 1\n\nExplanation: There are five students from New York, four"
  },
  {
    "id": 10,
    "db_id": "address_1",
    "question": {
      "id": 10,
      "db_id": "address_1",
      "question": "Which state has most number of students?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which state has most number of students?\n\nSolution:\n\nSELECT COUNT(*) AS num_students, State FROM Student GROUP BY State ORDER BY num_students DESC LIMIT 1;\n\n"
  },
  {
    "id": 11,
    "db_id": "address_1",
    "question": {
      "id": 11,
      "db_id": "address_1",
      "question": "Give the state that has the most students."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the state that has the most students.\n\nSolution:\n\nSELECT DISTINCT state FROM Student ORDER BY COUNT(*) DESC LIMIT 1;\n"
  },
  {
    "id": 12,
    "db_id": "address_1",
    "question": {
      "id": 12,
      "db_id": "address_1",
      "question": "Which country has least number of students?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which country has least number of students?\n\nSolution:\n\nSELECT DISTINCT Country FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student GROUP BY StuID));\n\n\n\n"
  }
]